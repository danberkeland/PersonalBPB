[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Ordering.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\deilveryGrid.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\OrderingHelpers.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\BuildCurrentCartList.js":"35"},{"size":362,"mtime":1609089131749,"results":"36","hashOfConfig":"37"},{"size":1210,"mtime":1612908011609,"results":"38","hashOfConfig":"37"},{"size":500,"mtime":1609089131749,"results":"39","hashOfConfig":"37"},{"size":1059,"mtime":1612645189810,"results":"40","hashOfConfig":"37"},{"size":1215,"mtime":1612919417942,"results":"41","hashOfConfig":"37"},{"size":4377,"mtime":1612533457263,"results":"42","hashOfConfig":"37"},{"size":7984,"mtime":1612923731484,"results":"43","hashOfConfig":"37"},{"size":7293,"mtime":1612923886465,"results":"44","hashOfConfig":"37"},{"size":490,"mtime":1612790497832,"results":"45","hashOfConfig":"37"},{"size":1281,"mtime":1612922923105,"results":"46","hashOfConfig":"37"},{"size":2614,"mtime":1612792390167,"results":"47","hashOfConfig":"37"},{"size":1893,"mtime":1612969909345,"results":"48","hashOfConfig":"37"},{"size":1577,"mtime":1612912756833,"results":"49","hashOfConfig":"37"},{"size":1180,"mtime":1612533457287,"results":"50","hashOfConfig":"37"},{"size":1211,"mtime":1612875412932,"results":"51","hashOfConfig":"37"},{"size":550,"mtime":1612635520554,"results":"52","hashOfConfig":"37"},{"size":441,"mtime":1612969786973,"results":"53","hashOfConfig":"37"},{"size":2267,"mtime":1612875830005,"results":"54","hashOfConfig":"37"},{"size":4279,"mtime":1612621858619,"results":"55","hashOfConfig":"37"},{"size":1201,"mtime":1612962899054,"results":"56","hashOfConfig":"37"},{"size":2173,"mtime":1612879421437,"results":"57","hashOfConfig":"37"},{"size":4990,"mtime":1612885474773,"results":"58","hashOfConfig":"37"},{"size":4873,"mtime":1612533457293,"results":"59","hashOfConfig":"37"},{"size":629,"mtime":1612533457294,"results":"60","hashOfConfig":"37"},{"size":1211,"mtime":1612794720822,"results":"61","hashOfConfig":"37"},{"size":794,"mtime":1612385307377,"results":"62","hashOfConfig":"37"},{"size":7744,"mtime":1612897440402,"results":"63","hashOfConfig":"37"},{"size":3655,"mtime":1612895831297,"results":"64","hashOfConfig":"37"},{"size":1190,"mtime":1612875376159,"results":"65","hashOfConfig":"37"},{"size":415,"mtime":1612908319684,"results":"66","hashOfConfig":"37"},{"size":1098,"mtime":1612969786973,"results":"67","hashOfConfig":"37"},{"size":811,"mtime":1612970266325,"results":"68","hashOfConfig":"37"},{"size":721,"mtime":1612912832881,"results":"69","hashOfConfig":"37"},{"size":579,"mtime":1612919850575,"results":"70","hashOfConfig":"37"},{"size":5829,"mtime":1612969786973,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1dwemmr",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["154","155"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js",["156","157","158"],"import React, { useContext } from 'react';\r\nimport { CurrentDataContext } from '../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../dataContexts/OrdersContext';\r\nimport { CustomerContext } from '../dataContexts/CustomerContext';\r\nimport { StandingContext } from '../dataContexts/StandingContext';\r\nimport { ProductsContext } from '../dataContexts/ProductsContext';\r\n\r\nimport { todayPlus, daysOfTheWeek, convertDatetoBPBDate, convertDatetoStandingDate } from '../helpers/dateTimeHelpers'\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst OrderCommandLine = () => {\r\n\r\n  const { chosen, setChosen, delivDate, setDelivDate, orderTypeWhole, setOrderTypeWhole, route, ponote } = useContext(CurrentDataContext)\r\n  const { orders, setOrders } = useContext(OrdersContext)\r\n  const { customers, setRouteIsOn } = useContext(CustomerContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { products } = useContext(ProductsContext)\r\n  \r\n  let [ today, tomorrow, twoDay ] = todayPlus()\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n\r\n    let nextCustomer = chosen\r\n\r\n    if (entry.includes(\"retail \")){\r\n      setOrderTypeWhole(false)\r\n      let newRetailCustName = entry.replace(\"retail \",\"\")\r\n      let newRetailCustList = [...orders]\r\n      let newRetailCustEntry = [\"\",\"\",newRetailCustName,\"\",\"\",\"\",false,\"\"]\r\n      newRetailCustList.push(newRetailCustEntry)\r\n      setOrders(newRetailCustList)\r\n      setDelivDate(tomorrow)\r\n      setChosen(newRetailCustName);\r\n      return\r\n    } \r\n\r\n    for (let cust of customers) {\r\n      if (entry.includes(cust[2]) || entry.includes(cust[0])) {\r\n        nextCustomer = cust[2];\r\n        if (nextCustomer !== ''){\r\n          setChosen(nextCustomer)\r\n          setRouteIsOn(true)\r\n          setDelivDate(tomorrow)\r\n          setOrderTypeWhole(true)\r\n          return\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    if (nextCustomer === '' && chosen === ''){\r\n      swal ({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000\r\n      })\r\n      return\r\n    }\r\n\r\n    \r\n    return false\r\n  };\r\n  \r\n  \r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [ today, tomorrow, twoDay ] = todayPlus()\r\n    let [ Sun, Mon, Tues, Wed, Thurs, Fri, Sat ] = daysOfTheWeek()\r\n    let dateWords = [ ['today',today],['tomorrow',tomorrow],['twoday',twoDay],\r\n                      ['sun',Sun],['mon',Mon],['tue',Tues],['tues',Tues],['wed',Wed],['thu',Thurs],\r\n                      ['thur',Thurs],['thurs',Thurs],['fri',Fri],['sat',Sat]]\r\n    for (let wordSet of dateWords){\r\n      if(entry.includes(wordSet[0])){\r\n        setDelivDate(wordSet[1])\r\n      }\r\n      \r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  const checkForProducts = (entry) => {\r\n    \r\n    \r\n    let isThereAProduct = /\\d+\\s\\w+/g.test(entry)\r\n    if (isThereAProduct){\r\n      let newOrder\r\n      const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n      let enteredProducts = array.map(item => item[0].split(\" \"))\r\n      let ordersToUpdate = [];\r\n      for (let prod of products){\r\n        for (let item of enteredProducts){\r\n          if (prod[2] === item[1]){\r\n            newOrder = [item[0],prod[1], chosen, ponote, route, \"0\", orderTypeWhole, convertDatetoBPBDate(delivDate)] // [ qty, prod, cust, po, route, so, ty ]\r\n            ordersToUpdate.push(newOrder)\r\n          }\r\n  \r\n        }\r\n      }\r\n    \r\n      console.log(ordersToUpdate)\r\n\r\n      // create map of orders for cust, delivdate #1\r\n\r\n      // Build Orders List based on delivDate and Chosen\r\n      let BPBDate = convertDatetoBPBDate(delivDate)\r\n      let filteredOrders = clonedeep(orders)\r\n      let cartList = filteredOrders ? filteredOrders.filter(order => order[7] === BPBDate && order[2] === chosen) : [];\r\n      \r\n      // Build Standing LIst based on delivDate and Chosen\r\n      let standingDate = convertDatetoStandingDate(delivDate);  \r\n      let filteredStanding = clonedeep(standing)\r\n      let standingList = filteredStanding ? filteredStanding.filter(standing => standing[0] === standingDate && standing[8] === chosen) : [];\r\n      let convertedOrderList = standingList.map(order => [    order[2],\r\n                                                              order[7],\r\n                                                              order[8],\r\n                                                              'na',\r\n                                                              order[6],\r\n                                                              order[2], \r\n                                                              order[3] !== \"9999\" ? true : false,\r\n                                                              convertDatetoBPBDate(delivDate)])\r\n      \r\n      // Compare Order List to Stand List and give Order List precedence in final list                                                        \r\n      let custOrderList = cartList.concat(convertedOrderList)\r\n      for (let i=0; i<custOrderList.length; ++i ){\r\n          for (let j=i+1; j<custOrderList.length; ++j){\r\n              if (custOrderList[i][1] === custOrderList[j][1]){\r\n                  custOrderList.splice(j,1);\r\n              }\r\n          }\r\n      }\r\n\r\n      console.log(custOrderList)\r\n      // new product by new product, check if it exists\r\n      let ordersToModify = [...orders]\r\n      if (custOrderList.length>0){\r\n        for (let ord of ordersToUpdate){\r\n          for (let custOrd of custOrderList){\r\n            if (ord[1] === custOrd[1]){\r\n            \r\n              let index = ordersToModify.findIndex(order => order[1] === custOrd[1] &&\r\n                    order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n              if (index>=0){\r\n                ordersToModify[index][0] = ord[0] \r\n                     \r\n              } else{\r\n                ord[5] = custOrd[5]\r\n                ordersToModify.push(ord)\r\n                \r\n              }\r\n            }\r\n          }    \r\n        }\r\n      }\r\n      for (let ord of ordersToUpdate){\r\n        for (let mod in ordersToModify){\r\n          let index = ordersToModify.findIndex(order => order[1] === ord[1] &&\r\n            order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n          if (index<0){\r\n            ordersToModify.push(ord)\r\n          }\r\n        }\r\n      }\r\n      // for order in ordersToModify\r\n      //      if index not in orders - push order into ordersToModify\r\n      setOrders(ordersToModify)\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers)\r\n\r\n    checkForDelivDate(entry)\r\n    checkForProducts(entry)\r\n  };\r\n\r\n  \r\n\r\n  const handleInput = (entry) => {\r\n     if (entry.key === \"Enter\") {\r\n        interpretEntry(entry.target.value)\r\n        document.getElementById(\"orderCommand\").value = ''; \r\n        \r\n    }\r\n    return\r\n  };\r\n\r\n  \r\n\r\n  \r\n  \r\n  return (        \r\n    <div className = \"orderCommandLine\">\r\n      <input  type=\"text\" \r\n              id=\"orderCommand\" \r\n              className=\"orderCommand\"\r\n              name=\"orderCommand\" \r\n              placeholder=\"Enter Customers, Orders, Dates ...\"\r\n              onKeyUp={e => handleInput(e)}>\r\n\r\n      </input>\r\n    </div>     \r\n  );\r\n}\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["159","160"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex, convertSheetsOrdersToAppOrders } from '../helpers/sortDataHelpers'\r\nimport { useFetch } from '../helpers/useFetch'\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n\r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ cartList, setCartList ] = useState(true)\r\n    const [ standList, setStandList ] = useState(true)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            cartList, setCartList,\r\n            standList, setStandList\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { loading, error, data } = useFetch(process.env.REACT_APP_API_ORDERS, []);\r\n\r\n    const { setOrders, setOriginalOrders } = useContext(OrdersContext)\r\n\r\n    useEffect(() => {\r\n        if(data){\r\n            setOrders(data);\r\n            setOriginalOrders(data);\r\n        }\r\n    },[data, setOrders, setOriginalOrders]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            { loading && <p> Loading Orders!</p>}\r\n            { error && <p> error while Loading Orders!</p>}\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js",["161","162"],"import { cloneDeep } from 'lodash';\r\nimport React, { useContext } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\n\r\nimport { convertDatetoBPBDate, convertDatetoBPBDateMinusYear, convertDatetoStandingDate } from '../../helpers/dateTimeHelpers';\r\n\r\n\r\n\r\nconst RecentOrderList = () => {\r\n\r\n  const { orders, setOrders, recentOrders, setRecentOrders, originalOrders } = useContext(OrdersContext)\r\n  const { standing, setStanding, originalStanding } = useContext(StandingContext)\r\n  const { setChosen, setDelivDate,setOrderTypeWhole } = useContext(CurrentDataContext)\r\n\r\n\r\n  \r\n  const handleClick = async (e) => {\r\n    let str = e.target.dataset.whole.toString()\r\n    if (str === 'true'){\r\n      setOrderTypeWhole(true)\r\n    } else {\r\n      setOrderTypeWhole(false)\r\n    }\r\n    \r\n    document.getElementById('orderCommand').focus()\r\n    setChosen(e.target.dataset.cust)  \r\n    setDelivDate(e.target.dataset.date)   \r\n  }\r\n\r\n  const handleRemove = async (e) => {\r\n\r\n    if (e.target.dataset.cart === \"true\") {\r\n        \r\n        let originalOrdersToAddBack = cloneDeep(originalOrders)\r\n        \r\n        originalOrdersToAddBack = originalOrdersToAddBack.filter(order => order[2] === e.target.dataset.cust &&\r\n            order[7] === convertDatetoBPBDate(e.target.dataset.date))\r\n\r\n        let ordersToModify = cloneDeep(orders);\r\n        \r\n        ordersToModify = ordersToModify.filter(order => order[2] !== e.target.dataset.cust &&\r\n          order[7] !== convertDatetoBPBDate(e.target.dataset.date))\r\n\r\n        let ordersToUpdate = originalOrdersToAddBack.concat(ordersToModify);\r\n\r\n        setOrders(ordersToUpdate)\r\n        \r\n\r\n    } else {\r\n        let originalStandingToAddBack = cloneDeep(originalStanding)\r\n\r\n        originalStandingToAddBack = originalStandingToAddBack.filter(stand => stand[8] === e.target.dataset.cust)\r\n\r\n        let standingToModify = cloneDeep(standing);\r\n        console.log(standingToModify)\r\n\r\n        standingToModify = standingToModify.filter(stand => stand[8] !== e.target.dataset.cust)\r\n\r\n        let standingToUpdate = originalStandingToAddBack.concat(standingToModify)\r\n\r\n        setStanding(standingToUpdate)\r\n\r\n    }\r\n      \r\n\r\n\r\n      let recentToMod = cloneDeep(recentOrders)\r\n  \r\n      let ind = await recentToMod.findIndex(recent => recent[0] === e.target.dataset.date &&\r\n                  recent[1] === e.target.dataset.cust &&\r\n                  recent[2].toString() === e.target.dataset.whole &&\r\n                  recent[3].toString() === e.target.dataset.cart)\r\n\r\n      recentToMod.splice(ind,1)\r\n      document.getElementById('orderCommand').focus()\r\n      setRecentOrders(recentToMod)\r\n      \r\n  }\r\n  \r\n\r\n  return (\r\n      <React.Fragment>      \r\n        <div className=\"recentOrderListGrid\">\r\n          {recentOrders.map(order => <React.Fragment key={order[0]+\"_\"+order[1]+\"_\"+order[2]+\"frag\"} >\r\n                                        <button className=\"trashButton\"\r\n                                          data-date={order[0]}\r\n                                          data-cust={order[1]}\r\n                                          data-whole={order[2]}\r\n                                          data-cart={order[3]}\r\n                                          onClick={e => {handleRemove(e)}} \r\n                                          key={order[0]+\"_\"+order[1]+\"_\"+order[2]+\"trash\"} \r\n                                          name={order[0]+\"_\"+order[1]+\"_\"+order[2]+\"_\"+order[3]}\r\n                                          id={order[0]+\"_\"+order[1]+\"_\"+order[2]}>🗑️</button>\r\n                                        <button \r\n                                          key={order[0]+\"_\"+order[1]+\"_\"+order[2]} \r\n                                          name={order[0]+\"_\"+order[1]+\"_\"+order[2]+\"_\"+order[3]}\r\n                                          className = \"recentOrderList\"\r\n                                          data-date={order[0]}\r\n                                          data-cust={order[1]}\r\n                                          data-whole={order[2]}\r\n                                          data-cart={order[3]}\r\n                                          onClick = {e => handleClick(e)}\r\n                                          >\r\n\r\n                                              {order[3] ? convertDatetoBPBDateMinusYear(order[0])+\" \": \"\"}  \r\n                                              {order[1]} \r\n                                              {order[2] ? \"\": \"RETAIL\"}\r\n                                              {order[3] ? \"\": order[4] ? \" (SO)\" : \" (HO)\"}\r\n\r\n                                        </button>\r\n                                        </React.Fragment>)}      \r\n        </div>\r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrderList;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js",[],["163","164"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js",["165","166","167","168","169","170"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\n\r\nimport { convertDatetoBPBDate, convertDatetoStandingDate } from '../../../helpers/dateTimeHelpers';\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nconst StandingOrderEntry = () => {\r\n\r\n    const [ standArray, setStandArray ] = useState()\r\n\r\n    const { standing, setStanding } = useContext(StandingContext);\r\n    const { holding, setHolding } = useContext(HoldingContext);\r\n    const { standList, setStandList } = useContext(OrdersContext)\r\n    const { chosen, delivDate, setModifications } = useContext(CurrentDataContext);\r\n\r\n    useEffect(() => {\r\n        let buildStandArray = []\r\n        let Stand = false\r\n        let Hold = false\r\n        let standingToCheck = clonedeep(standing)\r\n        let holdingToCheck = clonedeep(holding)\r\n        // check for standing, if no, check for holding, if no return\r\n        \r\n        for (let stand in standingToCheck){\r\n            if (standingToCheck[stand][8] === chosen){\r\n                setStandList(true)\r\n                Stand = true\r\n            }\r\n        }\r\n        for (let hold in holdingToCheck){\r\n            if (holdingToCheck[hold][8] === chosen){\r\n                setStandList(false)\r\n                Hold = true\r\n            }\r\n        }\r\n        \r\n        \r\n        if (Stand){\r\n            let pullStand = clonedeep(standing)\r\n            for (let pull of pullStand){\r\n                // search index of item in buildArray\r\n                if (pull[8] === chosen){\r\n                    let ind = buildStandArray.findIndex(stand => stand[0] === pull[7])\r\n                    if (ind>=0){\r\n                        buildStandArray[ind][Number(pull[0])] = pull[2]\r\n                    } else {\r\n                        let newStand = [pull[7],\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\r\n                        newStand[Number(pull[0])] = pull[2]\r\n                        buildStandArray.push(newStand)\r\n\r\n                    }\r\n                }\r\n            } \r\n        }   \r\n\r\n        if (Hold){\r\n            let pullHold = clonedeep(holding)\r\n            for (let pull of pullHold){\r\n                // search index of item in buildArray\r\n                if (pull[8] === chosen){\r\n                    let ind = buildStandArray.findIndex(stand => stand[0] === pull[7])\r\n                    if (ind>=0){\r\n                        buildStandArray[ind][Number(pull[0])] = pull[2]\r\n                    } else {\r\n                        let newStand = [pull[7],\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\r\n                        newStand[Number(pull[0])] = pull[2]\r\n                        buildStandArray.push(newStand)\r\n\r\n                    }\r\n                }\r\n            } \r\n        }   \r\n\r\n        setStandArray(buildStandArray)\r\n    },[chosen, holding, standing])\r\n\r\n\r\n    const handleRemove = e => {\r\n        setModifications(true)\r\n        let newQty = \"0\"\r\n        let indexToFind = e.target.name\r\n        let foundStandIndex = standArray.findIndex(line => line[0] === indexToFind)\r\n        let StandListToModify = clonedeep(standArray)\r\n        for (let i = 1; i<8; ++i){\r\n            StandListToModify[foundStandIndex][i] = \"0\";\r\n        }\r\n\r\n        // create deepcopy of orders\r\n        \r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)\r\n        \r\n        for (let i = 1; i<8; ++i){\r\n            let ind = updatedStandorHold.findIndex(stand => stand[0] === i.toString() && stand[7] === indexToFind && stand[8] === chosen)\r\n            if (ind>=0){\r\n                updatedStandorHold[ind][2] = 0;\r\n            }\r\n        }\r\n        if(standList){\r\n            setStanding(updatedStandorHold)\r\n        } else {\r\n            setHolding(updatedStandorHold)\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    const handleQtyModify = e => {\r\n        if(isNaN(e.target.value)){\r\n            e.target.value = ''\r\n            swal ({\r\n                text: \"Only Numbers Please\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                timer: 2000\r\n              })\r\n        }\r\n\r\n        setModifications(true)\r\n        let newQty = e.target.value\r\n        let indexToFind = e.target.name\r\n        let foundStandIndex = standArray.findIndex(line => line[0] === indexToFind)\r\n        let StandListToModify = clonedeep(standArray)\r\n        let intTarg = e.target.id\r\n        intTarg = intTarg.split('_')\r\n        StandListToModify[foundStandIndex][intTarg[1]] = newQty;\r\n\r\n        let updatedStanding = clonedeep(standing)\r\n        let ind = updatedStanding.findIndex(stand => stand[0] === intTarg[1] \r\n            && stand[7] === indexToFind && stand[8] === chosen)\r\n        console.log(ind)\r\n        console.log(updatedStanding[ind])\r\n        updatedStanding[ind][2] = newQty\r\n\r\n        \r\n        setStanding(updatedStanding)\r\n      \r\n          \r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <React.Fragment> \r\n            <label>PRODUCT</label>\r\n            <label>S</label>\r\n            <label>M</label>\r\n            <label>T</label>\r\n            <label>W</label>\r\n            <label>T</label>\r\n            <label>F</label>\r\n            <label>S</label>\r\n            <label></label>\r\n\r\n            {standArray ? standArray.map(order =>\r\n                (<React.Fragment key={order[0]+\"frag\"}>\r\n                    <label key={order[0]+\"prod\"}>{order[0]}</label>\r\n\r\n                    <input type=\"text\" key={order[0]+\"sun\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_1\"} name={order[0]}\r\n                        placeholder={order[1]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"mon\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_2\"} name={order[0]}\r\n                        placeholder={order[2]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"tues\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_3\"} name={order[0]}\r\n                        placeholder={order[3]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"wed\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_4\"} name={order[0]}\r\n                        placeholder={order[4]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"thurs\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_5\"} name={order[0]}\r\n                        placeholder={order[5]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"fri\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_6\"} name={order[0]}\r\n                        placeholder={order[6]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"sat\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_7\"} name={order[0]}\r\n                        placeholder={order[7]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n    \r\n                    <button className=\"trashButton\" key={order[0]+\"rem\"} name={order[0]} onClick={e => handleRemove(e)}>🗑️</button>\r\n                </React.Fragment>)) : ''}\r\n           \r\n           \r\n        </React.Fragment>\r\n        \r\n    )\r\n};\r\n\r\nexport default StandingOrderEntry","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js",["171","172","173","174","175","176","177"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext'\r\n\r\nimport { convertDatetoBPBDate } from '../../../helpers/dateTimeHelpers';\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../helpers/sortDataHelpers';\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { standing, setStanding } = useContext(StandingContext)\r\n    const { holding, setHolding } = useContext(HoldingContext)\r\n    const { orders, setOrders, standList, setStandList } = useContext(OrdersContext)\r\n    const { chosen, delivDate, orderTypeWhole, route, ponote } = useContext(CurrentDataContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n    let standHold \r\n    standList ? standHold = \"MAKE H.O.\" : standHold = \"MAKE S.O.\"\r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, orders, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let newStandingList = clonedeep(standing)\r\n        for (let i=1; i<8; i++){\r\n            let newOrder =[i.toString(),\"na\",\"0\",\"na\",\"na\",\"na\",\"na\",pickedProduct,chosen] \r\n            newStandingList.push(newOrder)\r\n        }\r\n        \r\n        setStanding(newStandingList)\r\n        setPickedProduct('');\r\n    }\r\n\r\n    const handleStandHold = async () => {\r\n        let currentStandList = await clonedeep(standing)\r\n        let currentHoldList = await clonedeep(holding)\r\n\r\n        if(standList){\r\n            let currentStandListClip = await currentStandList.filter(stand => stand[8] === chosen)\r\n            let reducedStandList = await currentStandList.filter(stand => stand[8] !== chosen)\r\n            let send = currentHoldList.concat(currentStandListClip)\r\n            setStanding(await reducedStandList)\r\n            setHolding(send)\r\n        } else {\r\n            let currentHoldListClip = currentHoldList.filter(hold => hold[8] === chosen)\r\n            let reducedHoldList = currentHoldList.filter(hold => hold[8] !== chosen)\r\n            let send = currentStandList.concat(currentHoldListClip)\r\n            setHolding(reducedHoldList)\r\n            setStanding(send)\r\n            \r\n        }\r\n    }\r\n\r\n    const ho = {\r\n        backgroundColor: \"red\"\r\n      }\r\n\r\n      const so = {\r\n        backgroundColor: \"green\"\r\n      }\r\n\r\n\r\n    return (\r\n        <div className=\"addAProductToStanding\">\r\n            <select id = \"products\" name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen ? false : true}>\r\n            {\r\n                productList ? productList.map((product) => \r\n                    <option key = {uuidv4()} value={product[1]}>{product[1]}</option>\r\n                ) : ''\r\n                }; \r\n            </select>\r\n           \r\n            <button onClick={handleAdd}>ADD</button>\r\n            <button style={standList ? so : ho } onClick={handleStandHold}>{standHold}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",["178"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\nimport Ordering from './Ordering'\r\nimport Logistics from './Logistics'\r\n\r\n\r\n\r\nfunction AppRoutes() {\r\n\r\n  return (\r\n    <Router>\r\n      <Route path=\"/ordering\" component={Ordering} /> \r\n      <Route path=\"/logistics\" component={Logistics} />  \r\n    </Router>        \r\n  );\r\n}\r\n\r\nexport default AppRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Ordering.js",["179","180","181","182"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\nimport CalendarApp from './components/calendarApp'\r\nimport CurrentOrderInfo from './components/currentOrderInfo'\r\nimport CurrentOrderList from './components/currentOrderList'\r\nimport OrderCommandLine from './components/orderCommandLine'\r\nimport OrderEntryButtons from './components/orderEntryButtons'\r\nimport RecentOrderList from './components/recentOrderList';\r\nimport BuildCurrentCartList from './components/currentOrderList/CartOrder/BuildCurrentCartList';\r\n\r\n\r\n\r\nfunction Ordering() {\r\n\r\n  return (\r\n      <div className = \"mainContainer\">\r\n        <div className = \"calendarContainer\">\r\n          <CalendarApp />\r\n        </div>\r\n        <div className = \"centralContainer\">\r\n          <OrderCommandLine /> \r\n          <CurrentOrderInfo />  \r\n          <CurrentOrderList />    \r\n          <OrderEntryButtons />\r\n        </div> \r\n        <div className = \"rightContainer\">\r\n          <RecentOrderList />\r\n        </div>   \r\n      </div>          \r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\deilveryGrid.js",["183","184","185","186"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { CurrentDataContext } from '../dataContexts/CurrentDataContext';\r\n\r\n\r\nconst DeliveryGrid = () => {\r\n\r\n\r\n    /*\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ delivListGrid, setDelivListGrid ] = useState([])\r\n\r\n    useEffect(() => {\r\n        let orderList = buildFullOrderList()\r\n        let orderListByDateAndRoute = filterByDateAndRoute(orderList, delivDate, route)\r\n        setDelivListGrid(orderListByDateAndRoute)    \r\n    }, [delivDate, route])\r\n    */\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Nothing to see yet</h1>\r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\nexport default DeliveryGrid;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\OrderingHelpers.js",[],["187","188"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\BuildCurrentCartList.js",["189"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\n\r\nimport { convertDatetoBPBDate, convertDatetoStandingDate } from '../../../helpers/dateTimeHelpers'\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\n\r\nconst buildCartList = (chosen,delivDate,orders) => {\r\n    let BPBDate = convertDatetoBPBDate(delivDate)\r\n    let filteredOrders = clonedeep(orders)\r\n    let builtCartList = []\r\n    if (filteredOrders.length>=0){\r\n        builtCartList = filteredOrders.filter(order => order[7] === BPBDate && order[2] === chosen)\r\n    }\r\n    return builtCartList \r\n}\r\n\r\nconst buildStandList = (chosen,delivDate,standing) => {\r\n    let standingDate = convertDatetoStandingDate(delivDate);  \r\n    let filteredStanding = clonedeep(standing)\r\n    let builtStandList =[]\r\n    if (filteredStanding.length>=0){\r\n        builtStandList = filteredStanding.filter(standing => standing[0] === standingDate && standing[8] === chosen)\r\n    }\r\n    let convertedStandList = convertStandListtoStandArray(builtStandList, delivDate)\r\n   \r\n    return convertedStandList\r\n}\r\n\r\n\r\nconst convertStandListtoStandArray = (builtStandList, delivDate) => {\r\n    let convertedStandList = builtStandList.map(order => [    \r\n        order[2],\r\n        order[7],\r\n        order[8],\r\n        'na',\r\n        order[6],\r\n        order[2], \r\n        order[3] !== \"9999\" ? true : false,\r\n        convertDatetoBPBDate(delivDate)])\r\n    return convertedStandList\r\n}\r\n\r\nconst compileOrderList = (cartList,standList) => {\r\n    let orderList = cartList.concat(standList)\r\n\r\n    // Remove old cart order from orders if it exists\r\n    for (let i=0; i<orderList.length; ++i ){\r\n        for (let j=i+1; j<orderList.length; ++j){\r\n            if (orderList[i][1] === orderList[j][1]){\r\n                orderList.splice(j,1);\r\n            }\r\n        }\r\n    }\r\n    return orderList\r\n}\r\n\r\nconst filterOutZeros = (currentOrderList) => {\r\n    let filteredZeros = currentOrderList.filter(order => order[0] !== \"0\" && order[5] !== \"0\")\r\n    return filteredZeros\r\n}\r\n\r\n/*\r\nconst makeSureRouteIsCorrect = (orderList, route) => {\r\n    if (orderList.length>0) {\r\n        for (let order in orderList){\r\n            console.log(orderList[order])\r\n            orderList[order][4] = route\r\n        }\r\n        return orderList\r\n        \r\n    } else {\r\n        swal ({\r\n            text: \"Need to enter a product first\",\r\n            icon: \"warning\",\r\n            buttons: false,\r\n            timer: 2000\r\n          })\r\n        return\r\n    }\r\n}\r\n\r\n\r\nconst makeSurePONoteIsCorrect = (orderList, ponote) => {\r\n    if (orderList.length>0) {\r\n        for (let order in orderList){\r\n            orderList[order][3] = ponote\r\n        }\r\n        return orderList\r\n        \r\n    } else {\r\n        swal ({\r\n            text: \"Need to enter a product first\",\r\n            icon: \"warning\",\r\n            buttons: false,\r\n            timer: 2000\r\n          })\r\n        return\r\n    }\r\n}\r\n\r\nconst rebuildOrderList = (currentOrderList, orders) => {\r\n    let recent = clonedeep(orders)\r\n        let newOrderList = currentOrderList.concat(recent)\r\n            for (let i=0; i<newOrderList.length; ++i ){\r\n                for (let j=i+1; j<newOrderList.length; ++j){\r\n                    if (  newOrderList[i][1] === newOrderList[j][1] &&\r\n                          newOrderList[i][2] === newOrderList[j][2] &&\r\n                          newOrderList[i][7] === newOrderList[j][7]){\r\n                        newOrderList.splice(j,1);\r\n                    }\r\n                }\r\n              }\r\n    return newOrderList    \r\n}\r\n\r\n*/\r\n\r\nconst BuildCurrentCartList = () => {\r\n\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate } = useContext(CurrentDataContext)\r\n\r\n    const [ currentList, setCurrentList ] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let cartList = buildCartList(chosen,delivDate,orders)\r\n        let standList = buildStandList(chosen, delivDate, standing)\r\n        let currentOrderList = compileOrderList(cartList,standList)\r\n        let noZerosOrderList = filterOutZeros(currentOrderList)\r\n        setCurrentList(noZerosOrderList)\r\n    }, [chosen, delivDate, orders, setOrders, standing])\r\n\r\n    const handleRemove = e => {}\r\n\r\n    const handleQtyModify = e => {}\r\n\r\n    return (\r\n        <React.Fragment>\r\n        {currentList.map(order => \r\n            <React.Fragment key={order[1]+\"b\"}>\r\n                <button \r\n                    className=\"trashButton\"\r\n                    onClick={e => {handleRemove(e)}} \r\n                    key={order[1]+\"e\"} \r\n                    name={order[1]}\r\n                    id={order[1]}>🗑️</button>\r\n                <label key={order[1]}>{order[1]}</label>   \r\n                <input  \r\n                    type=\"text\" \r\n                    size=\"4\"\r\n                    maxLength=\"5\"\r\n                    key={order[1]+\"c\"} \r\n                    id={order[1]+\"item\"} \r\n                    name={order[1]} \r\n                    placeholder={order[0]} \r\n                    onKeyUp={e => {handleQtyModify(e)}}\r\n                    onBlur={(e) => {\r\n\r\n                        e.target.value = ''\r\n\r\n                    }}\r\n                        >\r\n                </input>\r\n                <label \r\n                    key={order[1]+\"d\"} \r\n                    className=\"previous\">{order[5] === order[0] ? '' : order[5]}\r\n                </label>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BuildCurrentCartList",{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":23,"column":9,"nodeType":"196","messageId":"197","endLine":23,"endColumn":14},{"ruleId":"194","severity":1,"message":"198","line":23,"column":26,"nodeType":"196","messageId":"197","endLine":23,"endColumn":32},{"ruleId":"194","severity":1,"message":"199","line":161,"column":18,"nodeType":"196","messageId":"197","endLine":161,"endColumn":21},{"ruleId":"194","severity":1,"message":"200","line":3,"column":10,"nodeType":"196","messageId":"197","endLine":3,"endColumn":29},{"ruleId":"194","severity":1,"message":"201","line":3,"column":31,"nodeType":"196","messageId":"197","endLine":3,"endColumn":61},{"ruleId":"194","severity":1,"message":"202","line":4,"column":16,"nodeType":"196","messageId":"197","endLine":4,"endColumn":22},{"ruleId":"194","severity":1,"message":"203","line":9,"column":63,"nodeType":"196","messageId":"197","endLine":9,"endColumn":88},{"ruleId":"190","replacedBy":"204"},{"ruleId":"192","replacedBy":"205"},{"ruleId":"194","severity":1,"message":"202","line":5,"column":16,"nodeType":"196","messageId":"197","endLine":5,"endColumn":22},{"ruleId":"194","severity":1,"message":"206","line":12,"column":10,"nodeType":"196","messageId":"197","endLine":12,"endColumn":30},{"ruleId":"194","severity":1,"message":"203","line":12,"column":32,"nodeType":"196","messageId":"197","endLine":12,"endColumn":57},{"ruleId":"194","severity":1,"message":"207","line":23,"column":21,"nodeType":"196","messageId":"197","endLine":23,"endColumn":30},{"ruleId":"208","severity":1,"message":"209","line":84,"column":7,"nodeType":"210","endLine":84,"endColumn":34,"suggestions":"211"},{"ruleId":"194","severity":1,"message":"212","line":89,"column":13,"nodeType":"196","messageId":"197","endLine":89,"endColumn":19},{"ruleId":"194","severity":1,"message":"206","line":11,"column":10,"nodeType":"196","messageId":"197","endLine":11,"endColumn":30},{"ruleId":"194","severity":1,"message":"213","line":12,"column":32,"nodeType":"196","messageId":"197","endLine":12,"endColumn":58},{"ruleId":"194","severity":1,"message":"214","line":22,"column":21,"nodeType":"196","messageId":"197","endLine":22,"endColumn":30},{"ruleId":"194","severity":1,"message":"215","line":22,"column":43,"nodeType":"196","messageId":"197","endLine":22,"endColumn":55},{"ruleId":"194","severity":1,"message":"216","line":23,"column":32,"nodeType":"196","messageId":"197","endLine":23,"endColumn":46},{"ruleId":"194","severity":1,"message":"217","line":23,"column":48,"nodeType":"196","messageId":"197","endLine":23,"endColumn":53},{"ruleId":"194","severity":1,"message":"218","line":23,"column":55,"nodeType":"196","messageId":"197","endLine":23,"endColumn":61},{"ruleId":"194","severity":1,"message":"219","line":3,"column":35,"nodeType":"196","messageId":"197","endLine":3,"endColumn":41},{"ruleId":"194","severity":1,"message":"220","line":3,"column":27,"nodeType":"196","messageId":"197","endLine":3,"endColumn":33},{"ruleId":"194","severity":1,"message":"219","line":3,"column":35,"nodeType":"196","messageId":"197","endLine":3,"endColumn":41},{"ruleId":"194","severity":1,"message":"221","line":3,"column":43,"nodeType":"196","messageId":"197","endLine":3,"endColumn":48},{"ruleId":"194","severity":1,"message":"222","line":12,"column":8,"nodeType":"196","messageId":"197","endLine":12,"endColumn":28},{"ruleId":"194","severity":1,"message":"223","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":27},{"ruleId":"194","severity":1,"message":"224","line":1,"column":29,"nodeType":"196","messageId":"197","endLine":1,"endColumn":38},{"ruleId":"194","severity":1,"message":"225","line":1,"column":40,"nodeType":"196","messageId":"197","endLine":1,"endColumn":48},{"ruleId":"194","severity":1,"message":"226","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":28},{"ruleId":"190","replacedBy":"227"},{"ruleId":"192","replacedBy":"228"},{"ruleId":"194","severity":1,"message":"229","line":3,"column":8,"nodeType":"196","messageId":"197","endLine":3,"endColumn":12},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'today' is assigned a value but never used.","Identifier","unusedVar","'twoDay' is assigned a value but never used.","'mod' is assigned a value but never used.","'sortAtoZDataByIndex' is defined but never used.","'convertSheetsOrdersToAppOrders' is defined but never used.","'uuidv4' is defined but never used.","'convertDatetoStandingDate' is defined but never used.",["230"],["231"],"'convertDatetoBPBDate' is defined but never used.","'delivDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setStandList'. Either include it or remove the dependency array.","ArrayExpression",["232"],"'newQty' is assigned a value but never used.","'decideWhetherToAddOrModify' is defined but never used.","'setOrders' is assigned a value but never used.","'setStandList' is assigned a value but never used.","'orderTypeWhole' is assigned a value but never used.","'route' is assigned a value but never used.","'ponote' is assigned a value but never used.","'Switch' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'BuildCurrentCartList' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'CurrentDataContext' is defined but never used.",["230"],["231"],"'swal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},"Update the dependencies array to be: [chosen, holding, setStandList, standing]",{"range":"235","text":"236"},[3129,3156],"[chosen, holding, setStandList, standing]"]