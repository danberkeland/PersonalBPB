[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js":"77","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js":"78","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js":"79","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js":"80","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js":"81","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js":"82","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js":"83","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js":"84","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"85","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js":"86","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js":"87","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js":"88","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js":"89","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js":"90","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js":"91","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js":"92","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js":"93","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"94","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js":"95","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js":"96","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js":"97","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js":"98","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js":"99","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\utils.js":"100","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"101","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"102","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"103","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"104","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js":"105","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js":"106","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js":"107","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"108","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"109","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js":"110","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\WeeklyBillingGrid.js":"111","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js":"112","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"113","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js":"114","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyRows.js":"115","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js":"116","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyOrdersRows.js":"117","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js":"118","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js":"119","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js":"120","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composePastryPrep.js":"121","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToMake.js":"122","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeDough.js":"123","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js":"124","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js":"125","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js":"126","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js":"127","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js":"128","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js":"129","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeAllOrders.js":"130","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToBake.js":"131","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js":"132","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js":"133","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js":"134","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js":"135","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js":"136","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js":"137","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js":"138","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js":"139","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js":"140","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js":"141","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js":"142","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js":"143","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js":"144","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js":"145","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js":"146","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js":"147","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToPrep.js":"148"},{"size":500,"mtime":1609089131749,"results":"149","hashOfConfig":"150"},{"size":362,"mtime":1609089131749,"results":"151","hashOfConfig":"150"},{"size":1863,"mtime":1617818579988,"results":"152","hashOfConfig":"150"},{"size":734,"mtime":1622811895939,"results":"153","hashOfConfig":"150"},{"size":3995,"mtime":1621942072381,"results":"154","hashOfConfig":"150"},{"size":5686,"mtime":1621942072385,"results":"155","hashOfConfig":"150"},{"size":1552,"mtime":1615234090706,"results":"156","hashOfConfig":"150"},{"size":1821,"mtime":1615751621965,"results":"157","hashOfConfig":"150"},{"size":4367,"mtime":1622852454323,"results":"158","hashOfConfig":"150"},{"size":1437,"mtime":1615383938668,"results":"159","hashOfConfig":"150"},{"size":1724,"mtime":1616793575974,"results":"160","hashOfConfig":"150"},{"size":1147,"mtime":1615769660331,"results":"161","hashOfConfig":"150"},{"size":1421,"mtime":1620171317021,"results":"162","hashOfConfig":"150"},{"size":1599,"mtime":1622036129594,"results":"163","hashOfConfig":"150"},{"size":1877,"mtime":1621942072383,"results":"164","hashOfConfig":"150"},{"size":5622,"mtime":1622036129596,"results":"165","hashOfConfig":"150"},{"size":4606,"mtime":1622850093385,"results":"166","hashOfConfig":"150"},{"size":1963,"mtime":1615553936489,"results":"167","hashOfConfig":"150"},{"size":10123,"mtime":1622811891256,"results":"168","hashOfConfig":"150"},{"size":15898,"mtime":1622811891544,"results":"169","hashOfConfig":"150"},{"size":5202,"mtime":1622845496809,"results":"170","hashOfConfig":"150"},{"size":3526,"mtime":1615553539269,"results":"171","hashOfConfig":"150"},{"size":3768,"mtime":1618240925162,"results":"172","hashOfConfig":"150"},{"size":4114,"mtime":1617659976077,"results":"173","hashOfConfig":"150"},{"size":4122,"mtime":1622841034741,"results":"174","hashOfConfig":"150"},{"size":6367,"mtime":1620783288174,"results":"175","hashOfConfig":"150"},{"size":12456,"mtime":1622979118440,"results":"176","hashOfConfig":"150"},{"size":11835,"mtime":1621942072413,"results":"177","hashOfConfig":"150"},{"size":4943,"mtime":1622327519252,"results":"178","hashOfConfig":"150"},{"size":9664,"mtime":1620133956503,"results":"179","hashOfConfig":"150"},{"size":3937,"mtime":1621942072434,"results":"180","hashOfConfig":"150"},{"size":5774,"mtime":1622240560090,"results":"181","hashOfConfig":"150"},{"size":1955,"mtime":1620952815185,"results":"182","hashOfConfig":"150"},{"size":3444,"mtime":1618794737066,"results":"183","hashOfConfig":"150"},{"size":13801,"mtime":1621942072426,"results":"184","hashOfConfig":"150"},{"size":188,"mtime":1620391449788,"results":"185","hashOfConfig":"150"},{"size":5703,"mtime":1622329048488,"results":"186","hashOfConfig":"150"},{"size":12886,"mtime":1621942072431,"results":"187","hashOfConfig":"150"},{"size":1903,"mtime":1620419316591,"results":"188","hashOfConfig":"150"},{"size":2495,"mtime":1622242546504,"results":"189","hashOfConfig":"150"},{"size":2706,"mtime":1615903181106,"results":"190","hashOfConfig":"150"},{"size":3461,"mtime":1618762822178,"results":"191","hashOfConfig":"150"},{"size":2679,"mtime":1615903258284,"results":"192","hashOfConfig":"150"},{"size":6884,"mtime":1622224255397,"results":"193","hashOfConfig":"150"},{"size":3530,"mtime":1615903238512,"results":"194","hashOfConfig":"150"},{"size":2155,"mtime":1615903290204,"results":"195","hashOfConfig":"150"},{"size":1888,"mtime":1615903277736,"results":"196","hashOfConfig":"150"},{"size":1667,"mtime":1618668363266,"results":"197","hashOfConfig":"150"},{"size":1902,"mtime":1618765403958,"results":"198","hashOfConfig":"150"},{"size":8190,"mtime":1621942072450,"results":"199","hashOfConfig":"150"},{"size":3933,"mtime":1615903165052,"results":"200","hashOfConfig":"150"},{"size":2185,"mtime":1615903223171,"results":"201","hashOfConfig":"150"},{"size":8714,"mtime":1615903198181,"results":"202","hashOfConfig":"150"},{"size":4477,"mtime":1622852372487,"results":"203","hashOfConfig":"150"},{"size":308,"mtime":1620419249556,"results":"204","hashOfConfig":"150"},{"size":6787,"mtime":1618794829362,"results":"205","hashOfConfig":"150"},{"size":1899,"mtime":1618794786478,"results":"206","hashOfConfig":"150"},{"size":296,"mtime":1618795089593,"results":"207","hashOfConfig":"150"},{"size":1276,"mtime":1622036129607,"results":"208","hashOfConfig":"150"},{"size":6505,"mtime":1622036129608,"results":"209","hashOfConfig":"150"},{"size":2509,"mtime":1622036129599,"results":"210","hashOfConfig":"150"},{"size":2358,"mtime":1622036129609,"results":"211","hashOfConfig":"150"},{"size":1565,"mtime":1622036129600,"results":"212","hashOfConfig":"150"},{"size":1490,"mtime":1615553525148,"results":"213","hashOfConfig":"150"},{"size":1517,"mtime":1615553494489,"results":"214","hashOfConfig":"150"},{"size":2575,"mtime":1615553481891,"results":"215","hashOfConfig":"150"},{"size":4566,"mtime":1616250120792,"results":"216","hashOfConfig":"150"},{"size":3054,"mtime":1617713108483,"results":"217","hashOfConfig":"150"},{"size":6476,"mtime":1617713740979,"results":"218","hashOfConfig":"150"},{"size":5626,"mtime":1620153274892,"results":"219","hashOfConfig":"150"},{"size":2878,"mtime":1620783288189,"results":"220","hashOfConfig":"150"},{"size":1512,"mtime":1621942072448,"results":"221","hashOfConfig":"150"},{"size":2186,"mtime":1615578317981,"results":"222","hashOfConfig":"150"},{"size":1890,"mtime":1617307853955,"results":"223","hashOfConfig":"150"},{"size":6424,"mtime":1620153375193,"results":"224","hashOfConfig":"150"},{"size":1356,"mtime":1620952815193,"results":"225","hashOfConfig":"150"},{"size":801,"mtime":1620952815194,"results":"226","hashOfConfig":"150"},{"size":13541,"mtime":1620952815191,"results":"227","hashOfConfig":"150"},{"size":2975,"mtime":1622243634510,"results":"228","hashOfConfig":"150"},{"size":14964,"mtime":1621942072437,"results":"229","hashOfConfig":"150"},{"size":3965,"mtime":1622240910380,"results":"230","hashOfConfig":"150"},{"size":801,"mtime":1620952815188,"results":"231","hashOfConfig":"150"},{"size":1910,"mtime":1620952815187,"results":"232","hashOfConfig":"150"},{"size":1487,"mtime":1620783288186,"results":"233","hashOfConfig":"150"},{"size":1920,"mtime":1621942072405,"results":"234","hashOfConfig":"150"},{"size":671,"mtime":1620399298712,"results":"235","hashOfConfig":"150"},{"size":4673,"mtime":1622224977462,"results":"236","hashOfConfig":"150"},{"size":3388,"mtime":1618668410879,"results":"237","hashOfConfig":"150"},{"size":1216,"mtime":1620952815183,"results":"238","hashOfConfig":"150"},{"size":7245,"mtime":1622812680227,"results":"239","hashOfConfig":"150"},{"size":5270,"mtime":1620952815196,"results":"240","hashOfConfig":"150"},{"size":3360,"mtime":1620783288188,"results":"241","hashOfConfig":"150"},{"size":3642,"mtime":1617909225980,"results":"242","hashOfConfig":"150"},{"size":1941,"mtime":1615553782688,"results":"243","hashOfConfig":"150"},{"size":5129,"mtime":1621942072454,"results":"244","hashOfConfig":"150"},{"size":3356,"mtime":1618668379506,"results":"245","hashOfConfig":"150"},{"size":3501,"mtime":1618668437732,"results":"246","hashOfConfig":"150"},{"size":3386,"mtime":1618668400552,"results":"247","hashOfConfig":"150"},{"size":3320,"mtime":1620952815203,"results":"248","hashOfConfig":"150"},{"size":2145,"mtime":1620783288172,"results":"249","hashOfConfig":"150"},{"size":474,"mtime":1622036129632,"results":"250","hashOfConfig":"150"},{"size":936,"mtime":1622036129613,"results":"251","hashOfConfig":"150"},{"size":1285,"mtime":1622036129625,"results":"252","hashOfConfig":"150"},{"size":325,"mtime":1622036129623,"results":"253","hashOfConfig":"150"},{"size":892,"mtime":1620783288177,"results":"254","hashOfConfig":"150"},{"size":5850,"mtime":1620783288179,"results":"255","hashOfConfig":"150"},{"size":2814,"mtime":1622383589953,"results":"256","hashOfConfig":"150"},{"size":2529,"mtime":1622036129618,"results":"257","hashOfConfig":"150"},{"size":8498,"mtime":1622036324403,"results":"258","hashOfConfig":"150"},{"size":8321,"mtime":1620952815182,"results":"259","hashOfConfig":"150"},{"size":7971,"mtime":1617909239492,"results":"260","hashOfConfig":"150"},{"size":4166,"mtime":1617909217980,"results":"261","hashOfConfig":"150"},{"size":1488,"mtime":1615570828178,"results":"262","hashOfConfig":"150"},{"size":4995,"mtime":1617659976081,"results":"263","hashOfConfig":"150"},{"size":1615,"mtime":1617659976084,"results":"264","hashOfConfig":"150"},{"size":1136,"mtime":1618403990465,"results":"265","hashOfConfig":"150"},{"size":6120,"mtime":1618403957233,"results":"266","hashOfConfig":"150"},{"size":2821,"mtime":1617659976086,"results":"267","hashOfConfig":"150"},{"size":5843,"mtime":1621975859523,"results":"268","hashOfConfig":"150"},{"size":6927,"mtime":1622328669966,"results":"269","hashOfConfig":"150"},{"size":7993,"mtime":1621942072419,"results":"270","hashOfConfig":"150"},{"size":5041,"mtime":1622224576823,"results":"271","hashOfConfig":"150"},{"size":14696,"mtime":1622853510886,"results":"272","hashOfConfig":"150"},{"size":4775,"mtime":1622227420268,"results":"273","hashOfConfig":"150"},{"size":4819,"mtime":1622227665040,"results":"274","hashOfConfig":"150"},{"size":2065,"mtime":1621942072456,"results":"275","hashOfConfig":"150"},{"size":3519,"mtime":1621942072458,"results":"276","hashOfConfig":"150"},{"size":1203,"mtime":1621942072461,"results":"277","hashOfConfig":"150"},{"size":1463,"mtime":1621942072460,"results":"278","hashOfConfig":"150"},{"size":3419,"mtime":1622888217237,"results":"279","hashOfConfig":"150"},{"size":6011,"mtime":1622812978779,"results":"280","hashOfConfig":"150"},{"size":11643,"mtime":1622979805770,"results":"281","hashOfConfig":"150"},{"size":1830,"mtime":1622036129606,"results":"282","hashOfConfig":"150"},{"size":1462,"mtime":1622036129602,"results":"283","hashOfConfig":"150"},{"size":3701,"mtime":1622036129604,"results":"284","hashOfConfig":"150"},{"size":2877,"mtime":1622036129603,"results":"285","hashOfConfig":"150"},{"size":1260,"mtime":1622036129615,"results":"286","hashOfConfig":"150"},{"size":575,"mtime":1622036129616,"results":"287","hashOfConfig":"150"},{"size":1765,"mtime":1622036129615,"results":"288","hashOfConfig":"150"},{"size":444,"mtime":1622036129620,"results":"289","hashOfConfig":"150"},{"size":2611,"mtime":1622036129620,"results":"290","hashOfConfig":"150"},{"size":1479,"mtime":1622036282139,"results":"291","hashOfConfig":"150"},{"size":1238,"mtime":1622036129628,"results":"292","hashOfConfig":"150"},{"size":882,"mtime":1622036129629,"results":"293","hashOfConfig":"150"},{"size":1258,"mtime":1622036129626,"results":"294","hashOfConfig":"150"},{"size":4509,"mtime":1622036129610,"results":"295","hashOfConfig":"150"},{"size":1699,"mtime":1622928976398,"results":"296","hashOfConfig":"150"},{"size":5450,"mtime":1622938673867,"results":"297","hashOfConfig":"150"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},"1cny99d",{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"300"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"300"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"300"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"300"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"300"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"300"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"300"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"300"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"300"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"300"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"300"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"300"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"300"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"300"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"300"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"300"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"300"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"300"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"300"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"300"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"300"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"300"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"300"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"300"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"300"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"300"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"300"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"300"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"300"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"300"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"300"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"300"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"300"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"300"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"300"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"300"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"300"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"300"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"300"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"300"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"300"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"300"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"300"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"543"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"300"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"300"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"300"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"300"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"300"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"300"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"300"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"300"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"300"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":61,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"300"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"300"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"300"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"300"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"300"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"300"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"300"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"300"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"300"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"300"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"300"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"300"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"300"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"300"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"300"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],["664","665"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["666"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["667","668","669"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["670","671","672","673","674"],"import React, { useState, createContext, useContext, useEffect } from \"react\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { listOrders } from \"../graphql/queries\";\r\nimport { createOrder } from \"../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { ProductsContext } from \"./ProductsContext\";\r\nimport { ToggleContext } from \"./ToggleContext\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\n\r\nexport const OrdersContext = createContext();\r\n\r\nexport const OrdersProvider = (props) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [recentOrders, setRecentOrders] = useState([]);\r\n  const [originalOrders, setOriginalOrders] = useState([]);\r\n  const [ordersLoaded, setOrdersLoaded] = useState(false);\r\n\r\n  return (\r\n    <OrdersContext.Provider\r\n      value={{\r\n        orders,\r\n        setOrders,\r\n        recentOrders,\r\n        setRecentOrders,\r\n        originalOrders,\r\n        setOriginalOrders,\r\n        ordersLoaded,\r\n        setOrdersLoaded,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </OrdersContext.Provider>\r\n  );\r\n};\r\n\r\nexport const OrdersLoad = () => {\r\n  const { orders, setOrders, setOrdersLoaded } = useContext(OrdersContext);\r\n  const { readyForSq, setReadyForSq, setReadyForWeekly } =\r\n    useContext(ToggleContext);\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  useEffect(() => {\r\n    buildOrders();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (orders.length > 0 && products.length > 0) {\r\n      setReadyForSq(true);\r\n    }\r\n  }, [orders, products]);\r\n\r\n  const buildOrders = async () => {\r\n    let ord = await fetchOrders();\r\n    setOrders(ord);\r\n    setOrdersLoaded(true);\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n\r\n    let filt = {\r\n      delivDate: { gt: yesterday },\r\n    };\r\n    \r\n    try {\r\n      const ordData = await API.graphql(\r\n        graphqlOperation(listOrders, {\r\n          limit: \"5000\",\r\n          filter: filt\r\n        })\r\n      );\r\n      const ordList = ordData.data.listOrders.items;\r\n\r\n      let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n      let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n      sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n\r\n      return sortedData;\r\n    } catch (error) {\r\n      console.log(\"error on fetching Orders List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSq = async (ords) => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n\r\n      for (let newOrd of newOrders) {\r\n        let qty = Number(newOrd[\"qty\"]);\r\n        let dt = new Date().toISOString();\r\n        let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n        delivDate = delivDate.split(\"-\");\r\n        delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n        let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n        let rt;\r\n        let custName = newOrd[\"custName\"];\r\n\r\n        let prodName =\r\n          products[\r\n            products.findIndex((prod) => newOrd[\"item\"].includes(prod.squareID))\r\n          ][\"prodName\"];\r\n\r\n        if (newOrd[\"route\"] === locIDBPBN) {\r\n          rt = \"atownpick\";\r\n        } else {\r\n          rt = \"slopick\";\r\n        }\r\n\r\n        let itemToAdd = {\r\n          SO: qty,\r\n          qty: qty,\r\n          timeStamp: dt,\r\n          isWhole: false,\r\n          PONote: \"paid\",\r\n          delivDate: delivDate,\r\n          custName: custName,\r\n          prodName: prodName,\r\n          route: rt,\r\n        };\r\n\r\n        // Search orders for object, if doesn't exist, add:\r\n        let ind = ords.findIndex(\r\n          (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n        );\r\n\r\n        if (ind === -1) {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n            );\r\n            ords.push(itemToAdd);\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n      setOrders(ords);\r\n    } catch {\r\n      console.log(\"Request Failed\");\r\n    }\r\n  };\r\n\r\n  return <React.Fragment></React.Fragment>;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["675"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["676","677"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n           \r\n         \r\n            setHolding(sortedData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",["678"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listRoutes } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const RoutesContext = createContext();\r\n\r\nexport const RoutesProvider = (props) => {\r\n\r\n    const [routes, setRoutes] = useState([]);\r\n    const [ routesLoaded, setRoutesLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <RoutesContext.Provider value={{ \r\n            routes, setRoutes, \r\n            routesLoaded, setRoutesLoaded\r\n            }}>\r\n            {props.children}\r\n        </RoutesContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const RoutesLoad = () => {\r\n\r\n    const { setRoutes, setRoutesLoaded } = useContext(RoutesContext)\r\n\r\n    useEffect(() => {\r\n        fetchRoutes()\r\n      },[])\r\n\r\n\r\n    const fetchRoutes = async () => {\r\n        try{\r\n          const routeData = await API.graphql(graphqlOperation(listRoutes, {limit: '50'}))\r\n          const routeList = routeData.data.listRoutes.items;\r\n          sortAtoZDataByIndex(routeList,\"routeStart\")\r\n          setRoutes(routeList)\r\n          setRoutesLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Route List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["679"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n    \r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["680","681","682","683"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\nimport { createOrder, updateProduct } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 0px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Ordering() {\r\n  const [database, setDatabase] = useState([]);\r\n  const { reload, setIsLoading, setModifications } = useContext(ToggleContext);\r\n\r\n  const loadDatabase = async (database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n\r\n   \r\n    let prodsToUpdate = clonedeep(products)\r\n    for (let prod of prodsToUpdate){\r\n      if (prod.updatePreDate !== tomorrow){\r\n        prod.updatePreDate = today\r\n      }\r\n      if (prod.updatePreDate === today){\r\n        prod.preshaped = prod.prepreshaped\r\n        prod.updatePreDate = tomorrow\r\n\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[0] = prodsToUpdate;\r\n    setDatabase(DBToMod);\r\n\r\n    for (let prod of prodsToUpdate){\r\n      \r\n      let prodToUpdate = {\r\n        id: prod.id,\r\n        preshaped: prod.preshaped,\r\n        prepreshaped: prod.prepreshaped,\r\n        updatePreDate: prod.updatePreDate      \r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...prodToUpdate } })\r\n        );\r\n\r\n      } catch (error) {\r\n        console.log(\"error on creating Orders\", error);\r\n      }\r\n    }\r\n    \r\n\r\n\r\n    let ordsToUpdate = clonedeep(orders);\r\n    setDatabase(database);\r\n    let ord = await fetchSq(database);\r\n    if (ord){\r\n    console.log(\"ord\", ord);\r\n    for (let newOrd of ord) {\r\n      let qty = Number(newOrd[\"qty\"]);\r\n      let dt = new Date().toISOString();\r\n      let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n      delivDate = delivDate.split(\"-\");\r\n      delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n      let locIDBPBN = \"16VS30T9E7CM9\";\r\n      console.log(newOrd.location);\r\n      console.log(locIDBPBN);\r\n      let rt = \"slopick\";\r\n      let custName = newOrd[\"custName\"];\r\n\r\n      let prodName =\r\n        products[\r\n          products.findIndex((prod) => newOrd[\"item\"].includes(prod.squareID))\r\n        ][\"prodName\"];\r\n\r\n      if (newOrd.location === locIDBPBN) {\r\n        rt = \"atownpick\";\r\n      }\r\n\r\n      let itemToAdd = {\r\n        SO: qty,\r\n        qty: qty,\r\n        timeStamp: dt,\r\n        isWhole: false,\r\n        PONote: \"paid\",\r\n        delivDate: delivDate,\r\n        custName: custName,\r\n        prodName: prodName,\r\n        route: rt,\r\n      };\r\n\r\n      // Search orders for object, if doesn't exist, add:\r\n      let ind = orders.findIndex(\r\n        (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n      );\r\n\r\n      if (ind === -1) {\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n          );\r\n          ordsToUpdate.push(itemToAdd);\r\n        } catch (error) {\r\n          console.log(\"error on creating Orders\", error);\r\n        }\r\n      }\r\n    }\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordsToUpdate;\r\n    setDatabase(DBToMod);\r\n  } else {\r\n    console.log(\"Square orders did not load\")\r\n  }\r\n  };\r\n\r\n  const fetchSq = async () => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n      return newOrders;\r\n    } catch {\r\n      console.log(\"Error on Square load\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => loadDatabase(database));\r\n  }, [reload]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <MainWindow>\r\n      <BasicContainer>\r\n        <Calendar database={database} />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <OrderCommandLine database={database} setDatabase={setDatabase} />\r\n        <CurrentOrderInfo database={database} setDatabase={setDatabase} />\r\n        <CurrentOrderList database={database} setDatabase={setDatabase} />\r\n        <OrderEntryButtons database={database} setDatabase={setDatabase} />\r\n      </BasicContainer>\r\n    </MainWindow>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["684"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["685"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js",["686","687"],"import React, { useEffect, useContext, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport BillingGrid from \"./Parts/BillingGrid\";\r\nimport WeeklyBillingGrid from \"./Parts/WeeklyBillingGrid\";\r\n\r\nimport SelectDate from \"./Parts/SelectDate\";\r\n\r\nimport { CustomerContext, CustomerLoad } from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext, ProductsLoad } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext, StandingLoad } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { listAltPricings, listZones } from \"../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 70%;\r\n  border: 1px solid lightgray;\r\n  padding: 5px 10px;\r\n  margin: 0px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst fetchInfo = async (operation, opString, limit) => {\r\n  try {\r\n    let info = await API.graphql(\r\n      graphqlOperation(operation, {\r\n        limit: limit,\r\n      })\r\n    );\r\n    let list = info.data[opString].items;\r\n\r\n    let noDelete = list.filter((li) => li[\"_deleted\"] !== true);\r\n    return noDelete;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n\r\nfunction Billing() {\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { orders, ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standing, standLoaded, setStandLoaded } = useContext(StandingContext);\r\n  let { setIsLoading } = useContext(ToggleContext)\r\n\r\n  const [ altPricing, setAltPricing ] = useState()\r\n  const [ nextInv, setNextInv ] = useState(0);\r\n  const [dailyInvoices, setDailyInvoices] = useState();\r\n  const [weeklyInvoices, setWeeklyInvoices] = useState();\r\n  const [ zones, setZones ] = useState()\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setHoldLoaded(true);\r\n    if (!orders) {\r\n      setOrdersLoaded(false);\r\n    }\r\n    if (!standing) {\r\n      setStandLoaded(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing();\r\n    fetchZones()\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n\r\n  const fetchAltPricing = async () => {\r\n    try {\r\n      let altPricing = await fetchInfo(listAltPricings,\"listAltPricings\", \"1000\");\r\n      setAltPricing(altPricing);   \r\n    } catch (error) {\r\n      console.log(\"error on fetching Alt Pricing List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      let zones = await fetchInfo(listZones,\"listZones\", \"50\");\r\n      setZones(zones);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Zone List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      \r\n      <BasicContainer>\r\n        <h1>Billing</h1>\r\n      </BasicContainer>\r\n      \r\n      <BasicContainer>\r\n        <SelectDate nextInv={nextInv} setNextInv={setNextInv} dailyInvoices={dailyInvoices} setDailyInvoices={setDailyInvoices}/>\r\n      </BasicContainer>\r\n     \r\n     \r\n\r\n      <BasicContainer>\r\n        <h2>Daily Invoicing</h2>\r\n        <BillingGrid altPricing={altPricing} nextInv={nextInv} dailyInvoices={dailyInvoices} setDailyInvoices={setDailyInvoices} zones={zones}/>\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n      <h2>Weekly Invoicing (sent Sunday)</h2>\r\n        <WeeklyBillingGrid altPricing={altPricing} nextInv={nextInv} weeklyInvoices={weeklyInvoices} setWeeklyInvoices={setWeeklyInvoices} zones={zones}/>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Billing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js",["688","689","690","691","692","693","694"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js",["695"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"./BPBNSetOutUtils/composeDough\";\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\n\r\nfunction BPBNBuckets() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [doughs, setDoughs] = useState([]);\r\n  const [doughComponents, setDoughComponents] = useState([]);\r\n\r\n  let twoDay = todayPlus()[2];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherDoughInfo = (database) => {\r\n    let doughData = compose.returnDoughBreakDown(twoDay, database, \"Carlton\");\r\n    setDoughs(doughData.doughs);\r\n    setDoughComponents(doughData.doughComponents);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const handleClick = (e, amt) => {\r\n    console.log(amt);\r\n    let doughName = e.target.id.split(\"_\")[0];\r\n    let components = doughComponents.filter((dgh) => dgh.dough === doughName);\r\n    let wetWeight = Number(\r\n      doughs[doughs.findIndex((dgh) => dgh.doughName === doughName)].hydration\r\n    );\r\n    let wetList = components\r\n      .filter((dgh) => dgh.componentType === \"wet\")\r\n      .map((it) => it.amount);\r\n    let wetTotals;\r\n    wetList.length > 0 ? (wetTotals = wetList.reduce(addUp)) : (wetTotals = 0);\r\n    let dryList = components\r\n      .filter((dgh) => dgh.componentType === \"dry\")\r\n      .map((it) => it.amount);\r\n    let dryTotals;\r\n    dryList.length > 0 ? (dryTotals = dryList.reduce(addUp)) : (dryTotals = 0);\r\n    let levList = components\r\n      .filter((dgh) => dgh.componentType === \"lev\")\r\n      .map((it) => it.amount);\r\n    let levTotals;\r\n    levList.length > 0 ? (levTotals = levList.reduce(addUp)) : (levTotals = 0);\r\n    let dryplusList = components\r\n      .filter((dgh) => dgh.componentType === \"dryplus\")\r\n      .map((it) => it.amount);\r\n    let dryplusTotals;\r\n    dryplusList.length > 0\r\n      ? (dryplusTotals = dryplusList.reduce(addUp))\r\n      : (dryplusTotals = 0);\r\n    let postList = components\r\n      .filter((dgh) => dgh.componentType === \"post\")\r\n      .map((it) => it.amount);\r\n    let postTotals;\r\n    postList.length > 0\r\n      ? (postTotals = postList.reduce(addUp))\r\n      : (postTotals = 0);\r\n    let dryWeight =\r\n      (100 / (100 + wetWeight + levTotals + dryplusTotals + postTotals)) * amt;\r\n    console.log(dryWeight);\r\n\r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ct = 0.7;\r\n    let dryFilt = components.filter((dgh) => dgh.componentType === \"dry\");\r\n    if (dryFilt.length > 0) {\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Dry`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${amt} lb. Batch`,2.9,.36)\r\n\r\n      doc.setFontSize(12);\r\n      for (let item of dryFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / dryTotals) * dryWeight).toFixed(2)}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let dryplusFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        dgh.componentName !== \"Salt\" &&\r\n        dgh.componentName !== \"Yeast\"\r\n    );\r\n    if (dryplusFilt.length > 0) {\r\n      for (let item of dryplusFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let wetFilt = components.filter((dgh) => dgh.componentType === \"wet\");\r\n    if (wetFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Wet`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${amt} lb. Batch`,2.9,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of wetFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / wetTotals) * wetWeight * dryWeight * 0.01).toFixed(\r\n            2\r\n          )}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let levNameList = Array.from(\r\n      new Set(\r\n        components\r\n          .filter((com) => com.componentType === \"lev\")\r\n          .map((it) => it.componentName)\r\n      )\r\n    );\r\n    for (let lev of levNameList) {\r\n      let levFilt = doughComponents.filter((dgh) => dgh.dough === lev);\r\n\r\n      let levList = doughComponents\r\n        .filter((dgh) => dgh.dough === lev)\r\n        .map((it) => it.amount);\r\n      let levTotals;\r\n      levList.length > 0\r\n        ? (levTotals = levList.reduce(addUp))\r\n        : (levTotals = 0);\r\n\r\n      let levPercent =\r\n        components[components.findIndex((comp) => comp.componentName === lev)]\r\n          .amount * 0.01;\r\n      console.log(levPercent);\r\n      if (levFilt.length > 0) {\r\n        doc.addPage({\r\n          format: [2, 4],\r\n          orientation: \"l\",\r\n        });\r\n        doc.setFontSize(14);\r\n        doc.text(`${doughName} - ${lev}`, 0.2, 0.36);\r\n        doc.setFontSize(10)\r\n        doc.text(`${amt} lb. Batch`,2.9,.36)\r\n\r\n        doc.setFontSize(12);\r\n        let ct = 0.7;\r\n        for (let item of levFilt) {\r\n          doc.text(`${item.componentName}`, 1.2, ct);\r\n          doc.text(\r\n            `${((item.amount / levTotals) * levPercent * dryWeight).toFixed(\r\n              2\r\n            )}`,\r\n            0.3,\r\n            ct\r\n          );\r\n          doc.text(`lb.`, 0.8, ct);\r\n          ct += 0.24;\r\n        }\r\n      }\r\n    }\r\n    let postFilt = components.filter((dgh) => dgh.componentType === \"post\");\r\n    if (postFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Add ins`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${amt} lb. Batch`,2.9,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of postFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let saltyeastFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        (dgh.componentName === \"Salt\" ||\r\n        dgh.componentName === \"Yeast\")\r\n    );\r\n    if (saltyeastFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Salt & Yeast`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${amt} lb. Batch`,2.9,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of saltyeastFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    doc.save(`${doughName}Stickers.pdf`);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBN Dough Stickers</h1>\r\n        {doughs.map((dough) => (\r\n          <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n            <h3>\r\n              {dough.doughName}: (need {dough.needed} lb.) TOTAL:\r\n              {Number(Number(dough.needed) + Number(dough.buffer))}\r\n            </h3>\r\n            <ThreeColumnGrid key={dough.id + \"_first2Col\"}>\r\n              <div>\r\n                <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n                  <span>Old Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_oldDough\"}\r\n                      id={dough.id + \"_oldDough\"}\r\n                      placeholder={dough.oldDough}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n                <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n                  <span>Buffer Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_buffer\"}\r\n                      id={dough.id + \"_buffer\"}\r\n                      placeholder={dough.buffer}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n              </div>\r\n              <button\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) -\r\n                      Number(dough.oldDough)\r\n                  )\r\n                }\r\n                label=\"Print Sticker Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                Print Sticker Set\r\n              </button>\r\n              <button\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.batchSize)\r\n                  )\r\n                }\r\n                label=\"Print Sticker Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                Print Default Sticker Set\r\n              </button>\r\n            </ThreeColumnGrid>\r\n          </React.Fragment>\r\n        ))}\r\n        \r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNBuckets;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js",["696","697","698"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport TimeAgo from \"timeago-react\"; // var TimeAgo = require('timeago-react');\r\nimport us from \"timeago.js/lib/lang/en_US\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  \r\n} from \"../../graphql/mutations\";\r\n\r\n\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  \r\n  padding: 5px 10px;\r\n  margin: 4px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 60%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst IngDetails = styled.div`\r\n  font-size: 0.8em;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nfunction EODCounts({ loc }) {\r\n  const { products, setProducts, prodLoaded, setProdLoaded } = useContext(\r\n    ProductsContext\r\n  );\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n  \r\n\r\n\r\n  const [signedIn, setSignedIn] = useState(\"null\");\r\n  const [eodProds, setEODProds] = useState();\r\n  const [shelfBag, setShelfBag] = useState(false);\r\n  const [shelfEa, setShelfEa] = useState(false);\r\n  const [freezerBag, setFreezerBag] = useState(false);\r\n  const [freezerEa, setFreezerEa] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let prodsToMap = products.filter(\r\n      (prod) => prod.bakedWhere[0] === loc && prod.eodCount === true\r\n    );\r\n    setEODProds(prodsToMap);\r\n  }, [products]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (eodProds){\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n          prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setShelfBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setShelfEa(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setFreezerBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setFreezerEa(true)\r\n      }\r\n    }\r\n  },[eodProds])\r\n\r\n  const updateDBattr = async (id, attr, val) => {\r\n    \r\n   \r\n    let addDetails = {\r\n      id: id,\r\n      [attr]: val,\r\n      whoCountedLast: signedIn\r\n    };\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n      );\r\n     \r\n    } catch (error) {\r\n      console.log(\"error on updating product\", error);\r\n     \r\n    }\r\n  };\r\n\r\n  const updateItem = (value, itemToUpdate) => {\r\n\r\n    let ind = itemToUpdate.findIndex((item) => item.id === value.target.id);\r\n\r\n    itemToUpdate[ind].currentStock = value.target.value;\r\n    itemToUpdate[ind].updatedAt = DateTime.now().setZone(\"America/Los_Angeles\");\r\n    itemToUpdate[ind].whoCountedLast = signedIn;\r\n\r\n    try {\r\n      let id = value.target.id;\r\n      let val = Number(value.target.value);\r\n      updateDBattr(id, \"currentStock\", val);\r\n    } catch {\r\n      console.log(\"error updating attribute.\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    if (value.code === \"Enter\") {\r\n      let itemToUpdate = clonedeep(products);\r\n      updateItem(value, itemToUpdate);\r\n      document.getElementById(value.target.id).value = \"\";\r\n\r\n      return itemToUpdate;\r\n    }\r\n  };\r\n\r\n  const handleBlur = (value) => {\r\n    let itemToUpdate = clonedeep(products);\r\n    if (value.target.value !== \"\") {\r\n      updateItem(value, itemToUpdate);\r\n    }\r\n    document.getElementById(value.target.id).value = \"\";\r\n\r\n    return itemToUpdate;\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    return (\r\n      <InputText\r\n        id={e.id}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder={e.currentStock}\r\n        onKeyUp={(e) => e.code === \"Enter\" && setProducts(handleChange(e))}\r\n        onBlur={(e) => setProducts(handleBlur(e))}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleSignIn = () => {\r\n    let signIn;\r\n\r\n    swal(\"Please Sign In:\", {\r\n      content: \"input\",\r\n    }).then(async (value) => {\r\n      signIn = value;\r\n      setSignedIn(signIn);\r\n    });\r\n  };\r\n\r\n  const eaCount = (e) => {\r\n    return <React.Fragment>{e.currentStock * e.packSize}</React.Fragment>;\r\n  };\r\n\r\n  const lastCount = (e) => {\r\n    let updated = e.updatedAt\r\n    return (<IngDetails>\r\n    <div>\r\n      Counted &nbsp;\r\n      <TimeAgo\r\n        key={e.id + \"time\"}\r\n        datetime={updated}\r\n        locale={us}\r\n      />\r\n      &nbsp;by {e.whoCountedLast}\r\n    </div>\r\n  </IngDetails>)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n        {loc === \"Prado\" ? <h1>BPBS EOD Counts</h1> : <h1>BPBN EOD Counts</h1>}\r\n        {signedIn === \"null\" ? (\r\n        <BasicContainer>\r\n          <Button\r\n            label=\"Please Sign in to make EOD Changes\"\r\n            icon=\"pi pi-plus\"\r\n            onClick={handleSignIn}\r\n            className={\"p-button-raised p-button-rounded\"}\r\n          />\r\n        </BasicContainer>\r\n      ) : (\r\n        <div></div> )}\r\n        {signedIn !== \"null\" ? (\r\n          <React.Fragment>\r\n        <h2>On Shelf</h2>\r\n        {shelfBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"By Bag\"></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n            \r\n          </DataTable>\r\n        )}\r\n        {shelfEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        <h2>In Freezer</h2>\r\n\r\n        {freezerBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"In Freezer\"></Column>\r\n\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        {freezerEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n     \r\n      </React.Fragment>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n       </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default EODCounts;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js",["699"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction DoughCalc() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default DoughCalc;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js",["700"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"../BPBNProd/BPBNSetOutUtils/composeDough\";\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\n\r\nfunction BPBSMixPocket() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [ pockets, setPockets ] = useState([])\r\n  const [doughs, setDoughs] = useState([]);\r\n  const [doughComponents, setDoughComponents] = useState([]);\r\n\r\n  let twoDay = todayPlus()[2];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherDoughInfo = (database) => {\r\n    let doughData = compose.returnDoughBreakDown(twoDay, database, \"Prado\");\r\n    setDoughs(doughData.doughs);\r\n    setDoughComponents(doughData.doughComponents);\r\n    setPockets(doughData.pockets)\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const handleClick = (e, amt) => {\r\n    console.log(amt);\r\n    let mixNumber = Math.ceil(amt/230)\r\n    amt = amt/mixNumber\r\n    let doughName = e.target.id.split(\"_\")[0];\r\n    let components = doughComponents.filter((dgh) => dgh.dough === doughName);\r\n    let wetWeight = Number(\r\n      doughs[doughs.findIndex((dgh) => dgh.doughName === doughName)].hydration\r\n    );\r\n    let wetList = components\r\n      .filter((dgh) => dgh.componentType === \"wet\")\r\n      .map((it) => it.amount);\r\n    let wetTotals;\r\n    wetList.length > 0 ? (wetTotals = wetList.reduce(addUp)) : (wetTotals = 0);\r\n    let dryList = components\r\n      .filter((dgh) => dgh.componentType === \"dry\")\r\n      .map((it) => it.amount);\r\n    let dryTotals;\r\n    dryList.length > 0 ? (dryTotals = dryList.reduce(addUp)) : (dryTotals = 0);\r\n    let levList = components\r\n      .filter((dgh) => dgh.componentType === \"lev\")\r\n      .map((it) => it.amount);\r\n    let levTotals;\r\n    levList.length > 0 ? (levTotals = levList.reduce(addUp)) : (levTotals = 0);\r\n    let dryplusList = components\r\n      .filter((dgh) => dgh.componentType === \"dryplus\")\r\n      .map((it) => it.amount);\r\n    let dryplusTotals;\r\n    dryplusList.length > 0\r\n      ? (dryplusTotals = dryplusList.reduce(addUp))\r\n      : (dryplusTotals = 0);\r\n    let postList = components\r\n      .filter((dgh) => dgh.componentType === \"post\")\r\n      .map((it) => it.amount);\r\n    let postTotals;\r\n    postList.length > 0\r\n      ? (postTotals = postList.reduce(addUp))\r\n      : (postTotals = 0);\r\n    let dryWeight =\r\n      (100 / (100 + wetWeight + levTotals + dryplusTotals + postTotals)) * amt;\r\n\r\n    \r\n    \r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ct = 0.7;\r\n    let dryFilt = components.filter((dgh) => dgh.componentType === \"dry\");\r\n    if (dryFilt.length > 0) {\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Dry`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      for (let item of dryFilt) {\r\n\r\n        if (((item.amount / dryTotals) * dryWeight)>50){\r\n          let itemAmount = ((item.amount / dryTotals) * dryWeight)\r\n          let bags = Math.floor(itemAmount/50)\r\n          item.amount = dryTotals * ((dryWeight-(50 * bags))/dryWeight)\r\n          doc.text(`50 lb. bag ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / dryTotals) * dryWeight).toFixed(2)}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let dryplusFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        dgh.componentName !== \"Salt\" &&\r\n        dgh.componentName !== \"Yeast\"\r\n    );\r\n    if (dryplusFilt.length > 0) {\r\n      for (let item of dryplusFilt) {\r\n        \r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let wetFilt = components.filter((dgh) => dgh.componentType === \"wet\");\r\n    if (wetFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Wet`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of wetFilt) {\r\n        \r\n        if (((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))>30){\r\n          let itemAmount = ((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))\r\n          let bags = Math.floor(itemAmount/30)\r\n          item.amount = wetTotals * (((wetWeight* dryWeight * 0.01)-(30 * bags))/(wetWeight* dryWeight * 0.01))\r\n          doc.text(`30 lb. buckets ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / wetTotals) * wetWeight * dryWeight * 0.01).toFixed(\r\n            2\r\n          )}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let levNameList = Array.from(\r\n      new Set(\r\n        components\r\n          .filter((com) => com.componentType === \"lev\")\r\n          .map((it) => it.componentName)\r\n      )\r\n    );\r\n    for (let lev of levNameList) {\r\n      let levFilt = doughComponents.filter((dgh) => dgh.dough === lev);\r\n\r\n      let levList = doughComponents\r\n        .filter((dgh) => dgh.dough === lev)\r\n        .map((it) => it.amount);\r\n      let levTotals;\r\n      levList.length > 0\r\n        ? (levTotals = levList.reduce(addUp))\r\n        : (levTotals = 0);\r\n\r\n      let levPercent =\r\n        components[components.findIndex((comp) => comp.componentName === lev)]\r\n          .amount * 0.01;\r\n      console.log(levPercent);\r\n      if (levFilt.length > 0) {\r\n        doc.addPage({\r\n          format: [2, 4],\r\n          orientation: \"l\",\r\n        });\r\n        doc.setFontSize(14);\r\n        doc.text(`${doughName} - ${lev}`, 0.2, 0.36);\r\n        doc.setFontSize(10)\r\n        doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n        doc.setFontSize(12);\r\n        let ct = 0.7;\r\n        for (let item of levFilt) {\r\n          doc.text(`${item.componentName}`, 1.2, ct);\r\n          doc.text(\r\n            `${((item.amount / levTotals) * levPercent * dryWeight).toFixed(\r\n              2\r\n            )}`,\r\n            0.3,\r\n            ct\r\n          );\r\n          doc.text(`lb.`, 0.8, ct);\r\n          ct += 0.24;\r\n        }\r\n      }\r\n    }\r\n    let postFilt = components.filter((dgh) => dgh.componentType === \"post\");\r\n    if (postFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Add ins`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of postFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let saltyeastFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        (dgh.componentName === \"Salt\" ||\r\n        dgh.componentName === \"Yeast\")\r\n    );\r\n    if (saltyeastFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Salt & Yeast`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of saltyeastFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n    if (doughName === \"French\"){\r\n    doc.addPage({\r\n      format: [2, 4],\r\n      orientation: \"l\",\r\n    });\r\n    ct = 0.7;\r\n    for (let item of pockets){\r\n      doc.text(`${item.pocketSize}`, 1.2, ct);\r\n        doc.text(`${item.qty}`, 0.3, ct);\r\n        doc.text(`x.`, 0.8, ct);\r\n        ct += 0.24;\r\n    }\r\n  }\r\n\r\n    doc.save(`${doughName}Stickers.pdf`);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBS French Mix/Pocket</h1>\r\n        {doughs.map((dough) => (\r\n          <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n            <h3>\r\n              {dough.doughName}: (need {dough.needed} lb.) TOTAL:\r\n              {Number(Number(dough.needed) + Number(dough.buffer))}\r\n            </h3>\r\n            <ThreeColumnGrid key={dough.id + \"_first2Col\"}>\r\n              <div>\r\n                <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n                  <span>Old Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_oldDough\"}\r\n                      id={dough.id + \"_oldDough\"}\r\n                      placeholder={dough.oldDough}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n                <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n                  <span>Buffer Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_buffer\"}\r\n                      id={dough.id + \"_buffer\"}\r\n                      placeholder={dough.buffer}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n              </div>\r\n              <button\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) -\r\n                      Number(dough.oldDough)\r\n                  )\r\n                }\r\n                label=\"Print Sticker Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                Print Sticker Set\r\n              </button>\r\n              <button\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.batchSize)\r\n                  )\r\n                }\r\n                label=\"Print Sticker Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                Print Default Sticker Set\r\n              </button>\r\n            </ThreeColumnGrid>\r\n          </React.Fragment>\r\n        ))}\r\n        <WholeBox>\r\n            <h3>French Pockets</h3>\r\n            <DataTable value={pockets} className=\"p-datatable-sm\">\r\n              <Column field=\"pocketSize\" header=\"Pocket Size\"></Column>\r\n              <Column field=\"qty\" header=\"Qty\"></Column>\r\n            </DataTable>\r\n          </WholeBox>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBSMixPocket;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js",["701","702"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeAMPastry from \"./utils/composeAMPastry\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeAMPastry();\r\n\r\nfunction AMPastry() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [AMPastry, setAMPastry] = useState([]);\r\n  const [AMOthers, setAMOthers] = useState([]);\r\n\r\n  const [columnsAMPastry, setColumnsAMPastry] = useState([]);\r\n  const [columnsAMOthers, setColumnsAMOthers] = useState([]);\r\n\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  const createDynamic = (cols) => {\r\n    const dynamicColumns = cols.map((col, i) => {\r\n      return (\r\n        <Column\r\n          npmkey={col.field}\r\n          field={col.field}\r\n          header={col.header}\r\n          key={col.field}\r\n          style={col.width}\r\n        />\r\n      );\r\n    });\r\n    return dynamicColumns;\r\n  };\r\n\r\n  const dynamicColumnsAMPastry = createDynamic(columnsAMPastry);\r\n  const dynamicColumnsAMOthers = createDynamic(columnsAMOthers)\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherMakeInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherMakeInfo = (database) => {\r\n    let AMPastryData = compose.returnAMPastryBreakDown(delivDate, database);\r\n    setAMPastry(AMPastryData.AMPastry);\r\n    setColumnsAMPastry(AMPastryData.columnsAMPastry);\r\n    setAMOthers(AMPastryData.AMOthers);\r\n    setColumnsAMOthers(AMPastryData.columnsAMOthers)\r\n  };\r\n\r\n  const exportAMPastryStickers = () => {\r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ind = 0;\r\n    for (let past of AMPastry) {\r\n      ind += 1;\r\n      doc.setFontSize(14);\r\n      doc.text(`${past.customer} ${convertDatetoBPBDate(delivDate)}`, 0.1, 0.36);\r\n\r\n      doc.setFontSize(12);\r\n      past.pl && doc.text(`Pl: ${past.pl}`, 0.2, 0.72);\r\n      past.ch && doc.text(`Ch: ${past.ch}`, 0.2, 1.08);\r\n      past.pg && doc.text(`Pg: ${past.pg}`, 0.2, 1.44);\r\n      past.sf && doc.text(`Sf: ${past.sf}`, 0.2, 1.8);\r\n\r\n      past.al && doc.text(`Al: ${past.al}`, 1.46, 0.72);\r\n      past.mb && doc.text(`Mb: ${past.mb}`, 1.46, 1.08);\r\n      past.mini && doc.text(`mini: ${past.mini}`, 1.46, 1.44);\r\n      past.sand && doc.text(`sand: ${past.sand}`, 1.46, 1.8);\r\n\r\n      past.bb && doc.text(`BB: ${past.bb}`, 2.72, 0.72);\r\n      past.sco && doc.text(`Sco: ${past.sco}`, 2.72, 1.08);\r\n      past.bd && doc.text(`Bd: ${past.bd}`, 2.72, 1.44);\r\n      if (ind<AMPastry.length){\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n    }\r\n    }\r\n\r\n    doc.save(`TestSticker.pdf`);\r\n  };\r\n\r\n  const exportAMPastryPDF = () => {\r\n    let finalY;\r\n    let pageMargin = 10;\r\n    let tableToNextTitle = 12;\r\n    let titleToNextTable = tableToNextTitle + 4;\r\n    let tableFont = 11;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `AM Pastry ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n    if (columnsAMPastry.length > 0) {\r\n      doc.autoTable({\r\n        body: AMPastry,\r\n        columns: columnsAMPastry,\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n    }\r\n\r\n    doc.save(`AMPastry${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryStickers}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry Stickers\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryPDF}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry List\r\n        </Button>\r\n\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>AM Pastry Pack {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n\r\n        {AMPastry.length > 0 && (\r\n          <React.Fragment>\r\n            <h3>AM Pastry</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMPastry}\r\n            >\r\n              {dynamicColumnsAMPastry}\r\n            </DataTable>{\" \"}\r\n            {/*\r\n            <h3>AM Others</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMOthers}\r\n            >\r\n              {dynamicColumnsAMOthers}\r\n            </DataTable>{\" \"} */}\r\n          </React.Fragment>\r\n        )}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AMPastry;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js",["703"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { RoutesContext } from \"../../dataContexts/RoutesContext\";\r\n\r\nimport DatabaseServices from './databaseServices';\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\n\r\n\r\nfunction TestComponent() {\r\n    const [products, setProducts] = useState([]);\r\n    const databaseServices = new DatabaseServices();\r\n\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n  let { setRoutesLoaded } = useContext(RoutesContext);\r\n\r\n  useEffect(() => {\r\n    databaseServices.getProducts().then(data => setProducts(data));\r\n}, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setRoutesLoaded(true);\r\n    setProdLoaded(true);\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable value={products}>\r\n          <Column field=\"prodName\" header=\"Name\"></Column>\r\n          <Column field=\"nickName\" header=\"Nick Name\"></Column>\r\n          <Column field=\"packSize\" header=\"Pack Size\"></Column>\r\n          <Column field=\"doughType\" header=\"Dough Type\"></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestComponent;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js",["704"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport RouteGrid from \"../ByRoute/Parts/RouteGrid\";\r\nimport RouteList from \"../ByRoute/Parts/RouteList\";\r\nimport ToolBar from \"../ByRoute/Parts/ToolBar\";\r\nimport { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport {\r\n  promisedData,\r\n  fetchAltPricing,\r\n} from \"../../../helpers/databaseFetchers\";\r\nimport ComposeProductGrid from \"./Parts/utils/composeProductGrid\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 95%;\r\n  margin: 10px auto;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeProductGrid();\r\n\r\nfunction ByRoute() {\r\n  const [route, setRoute] = useState(\"AM Pastry\");\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [routeList, setRouteList] = useState();\r\n  const [orderList, setOrderList] = useState();\r\n  const [altPricing, setAltPricing] = useState();\r\n  const [database, setDatabase] = useState([]);\r\n\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherProdGridInfo(database));\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherProdGridInfo = (data) => {\r\n    let prodGridData = compose.returnProdGrid(data, delivDate);\r\n    setDatabase(data);\r\n    setOrderList(prodGridData.prodGrid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing().then(data => setAltPricing(data))\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          orderList={orderList}\r\n          setRouteList={setRouteList}\r\n          setRoute={setRoute}\r\n          routeList={routeList}\r\n          database={database}\r\n        />\r\n        <DescripWrapper>\r\n          <ToolBar delivDate={delivDate} setDelivDate={setDelivDate} />\r\n          <RouteGrid\r\n            route={route}\r\n            orderList={orderList}\r\n            altPricing={altPricing}\r\n            database={database}\r\n            delivDate={delivDate}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByRoute;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["705"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport RouteList from \"./RouteList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditRoutes() {\r\n  const [selectedRoute, setSelectedRoute] = useState();\r\n  const [routes, setRoutes] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          selectedRoute={selectedRoute}\r\n          setSelectedRoute={setSelectedRoute}\r\n          routes={routes}\r\n          setRoutes={setRoutes}\r\n        />\r\n        {selectedRoute && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedRoute={selectedRoute}\r\n                  setSelectedRoute={setSelectedRoute}\r\n                  routes={routes}\r\n                  setRoutes={setRoutes}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedRoute={selectedRoute}\r\n            setSelectedRoute={setSelectedRoute}\r\n            routes={routes}\r\n            setRoutes={setRoutes}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js",["706"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditDoughs() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditDoughs;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["707"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ZoneList from \"./ZoneList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedZone, setSelectedZone] = useState(1);\r\n  const [zones, setZones] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList\r\n          selectedZone={selectedZone}\r\n          setSelectedZone={setSelectedZone}\r\n          zones={zones}\r\n          setZones={setZones}\r\n        />\r\n        {selectedZone && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedZone={selectedZone}\r\n                  setSelectedZone={setSelectedZone}\r\n                  zones={zones}\r\n                  setZones={setZones}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedZone={selectedZone}\r\n            setSelectedZone={setSelectedZone}\r\n            zones={zones}\r\n            setZones={setZones}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",["708","709","710","711","712","713","714"],"import { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\n\r\nimport { wildcardRegExp } from \"wildcard-regex\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst today = todayPlus()[0]\r\n\r\nexport const getFullOrders = (delivDate, database) => {\r\n  const [ products, customers, routes, standing, orders ] = database\r\n   let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n   let buildStand = buildStandList(\"*\", delivDate, standing);\r\n   let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n   return fullOrder;\r\n };\r\n\r\n export const getFullProdOrders = (delivDate, database) => {\r\n  const [ products, customers, routes, standing, orders ] = database\r\n   let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n   let buildStand = buildProdStandList(\"*\", delivDate, standing);\r\n   let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n   return fullOrder;\r\n };\r\n\r\nexport const buildCartList = (chosen, delivDate, orders) => {\r\n  let BPBDate = convertDatetoBPBDate(delivDate);\r\n  let filteredOrders = clonedeep(orders);\r\n  let builtCartList = [];\r\n  if (filteredOrders) {\r\n    builtCartList = filteredOrders.filter(\r\n      (order) =>\r\n        order[\"delivDate\"] === BPBDate &&\r\n        order[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n    );\r\n  }\r\n\r\n  return builtCartList;\r\n};\r\n\r\nexport const buildStandList = (chosen, delivDate, standing, route, ponote) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter(\r\n    (standing) =>\r\n      standing[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n \r\n  builtStandList = builtStandList.filter(stand => stand.isStand===true)\r\n  \r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nexport const buildProdStandList = (chosen, delivDate, standing, route, ponote) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter(\r\n    (standing) =>\r\n      standing[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n \r\n  \r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nconst convertStandListtoStandArray = (\r\n  builtStandList,\r\n  delivDate,\r\n  route,\r\n  ponote\r\n) => {\r\n  let dateSplit = delivDate.split(\"-\");\r\n  let dayOfWeek = DateTime.local(\r\n    Number(dateSplit[0]),\r\n    Number(dateSplit[1]),\r\n    Number(dateSplit[2])\r\n  ).weekdayShort;\r\n  let convertedStandList = builtStandList.map((order) => ({\r\n    id: null,\r\n    version: order[\"_version\"],\r\n    qty: order[dayOfWeek],\r\n    prodName: order[\"prodName\"],\r\n    custName: order[\"custName\"],\r\n    \r\n    isWhole: true,\r\n    delivDate: convertDatetoBPBDate(delivDate),\r\n    timeStamp: order[\"timeStamp\"],\r\n    SO: order[dayOfWeek],\r\n  }));\r\n  return convertedStandList;\r\n};\r\n\r\nexport const compileOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (orderList[i][\"prodName\"] === orderList[j][\"prodName\"]) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\n\r\nexport const compileFullOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\nexport const buildCurrentOrder = (\r\n  chosen,\r\n  delivDate,\r\n  orders,\r\n  standing,\r\n  route,\r\n  ponote\r\n) => {\r\n  let cartList = buildCartList(chosen, delivDate, orders);\r\n  let standList = buildStandList(chosen, delivDate, standing, route, ponote);\r\n  let currentOrderList = compileOrderList(cartList, standList);\r\n\r\n  return currentOrderList;\r\n};\r\n\r\nexport const testEntryForProduct = (entry) => {\r\n  return /\\d+\\s\\w+/g.test(entry);\r\n};\r\n\r\nexport const createArrayofEnteredProducts = (entry) => {\r\n  const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n  let enteredProducts = array.map((item) => item[0].split(\" \"));\r\n  return enteredProducts;\r\n};\r\n\r\nexport const createOrdersToUpdate = (\r\n  products,\r\n  enteredProducts,\r\n  chosen,\r\n  ponote,\r\n  route,\r\n  orderTypeWhole,\r\n  delivDate\r\n) => {\r\n  let ordersToUpdate = [];\r\n  for (let product of products) {\r\n    for (let enteredItem of enteredProducts) {\r\n      if (product[\"nickName\"] === enteredItem[1]) {\r\n        let newOrder = {\r\n          qty: Number(enteredItem[0]),\r\n          prodName: product[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: route,\r\n          SO: 0,\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n        };\r\n        ordersToUpdate.push(newOrder);\r\n      }\r\n    }\r\n  }\r\n  return ordersToUpdate;\r\n};\r\n\r\nexport const buildOrdersToModify = (\r\n  orders,\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  custOrderList,\r\n  ponote,\r\n  route\r\n\r\n) => {\r\n  let ordersToModify = [...orders];\r\n  for (let orderToUpdate of ordersToUpdate) {\r\n    for (let custOrder of custOrderList) {\r\n      if (orderToUpdate[\"prodName\"] === custOrder[\"prodName\"]) {\r\n        let index = ordersToModify.findIndex(\r\n          (order) =>\r\n            order[\"prodName\"] === custOrder[\"prodName\"] &&\r\n            order[\"custName\"] === chosen &&\r\n            order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n        );\r\n        if (index >= 0) {\r\n          ordersToModify[index][\"qty\"] = orderToUpdate[\"qty\"];\r\n        } else {\r\n          orderToUpdate[\"SO\"] = custOrder[\"SO\"];\r\n          orderToUpdate.ponote = ponote;\r\n          orderToUpdate.route = route;\r\n          ordersToModify.push(orderToUpdate);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n\r\nexport const addUpdatesToOrders = (\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  ordersToModify\r\n) => {\r\n  for (let ord of ordersToUpdate) {\r\n    let index = ordersToModify.findIndex(\r\n      (order) =>\r\n        order[\"prodName\"] === ord[\"prodName\"] &&\r\n        order[\"custName\"] === chosen &&\r\n        order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n    if (index < 0) {\r\n      ordersToModify.push(ord);\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["715"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, [zones]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n\r\n      setZones(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedZone(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {zones && (\r\n          <DataTable\r\n            value={zones}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedZone}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"zoneName\"\r\n              header=\"Zones\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js",["716","717"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["718"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listRoutes } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Route List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedRoute(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {routes && (\r\n          <DataTable\r\n            value={routes}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedRoute}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"routeName\"\r\n              header=\"Routes\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["719","720"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n`;\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nconst hubDepart = [{ RouteDepart: \"Prado\" }, { RouteDepart: \"Carlton\" }];\r\n\r\nconst hubArrive = [{ RouteArrive: \"Prado\" }, { RouteArrive: \"Carlton\" }];\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const fullZones = useRef();\r\n\r\n  const [days, setDays] = useState([]);\r\n\r\n  const onDayChange = (e) => {\r\n    let selectedDays = [...days];\r\n    if (e.checked) selectedDays.push(e.value);\r\n    else selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n\r\n    let itemToUpdate = clonedeep(selectedRoute);\r\n    itemToUpdate[\"RouteSched\"] = selectedDays;\r\n    setSelectedRoute(itemToUpdate);\r\n    setDays(selectedDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTarget(selectedRoute[\"RouteServe\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    setDays(selectedRoute[\"RouteSched\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    let parsedZones = [];\r\n    if (fullZones.current) {\r\n      parsedZones = fullZones.current.filter(\r\n        (full) => !selectedRoute[\"RouteServe\"].includes(full)\r\n      );\r\n    }\r\n    setSource(parsedZones);\r\n  }, [selectedRoute]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n      let mappedNoDelete = noDelete.map((item) => item[\"zoneName\"]);\r\n      fullZones.current = mappedNoDelete;\r\n      setSource(mappedNoDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setSelectedRoute(setPickValue(event, selectedRoute));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> Route Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"zoneName\"> Route Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"routeName\"\r\n          placeholder={selectedRoute.routeName}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n          }\r\n          onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeStart\"\r\n            placeholder={selectedRoute.routeStart}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeTime\"\r\n            placeholder={selectedRoute.routeTime}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteDepart\"\r\n            optionLabel=\"RouteDepart\"\r\n            options={hubDepart}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteArrive\"\r\n            optionLabel=\"RouteArrive\"\r\n            options={hubArrive}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"\r\n            }\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <WeekWrapper>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb1\"\r\n            value=\"1\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"1\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb1\" className=\"p-checkbox-label\">\r\n            Sun\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb2\"\r\n            value=\"2\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"2\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb2\" className=\"p-checkbox-label\">\r\n            Mon\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"3\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"3\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Tues\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"4\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"4\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Wed\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"5\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"5\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Thurs\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"6\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"6\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Fri\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"7\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"7\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Sat\r\n          </label>\r\n        </div>\r\n      </WeekWrapper>\r\n      <PickList\r\n        sourceHeader=\"All Zones\"\r\n        targetHeader=\"Served By This Route\"\r\n        source={source}\r\n        target={selectedRoute[\"RouteServe\"]}\r\n        itemTemplate={itemTemplate}\r\n        onChange={onChange}\r\n        sourceStyle={{ height: \"250px\" }}\r\n        targetStyle={{ height: \"250px\" }}\r\n      ></PickList>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js",["721"],"import {\r\n  listProducts,\r\n  listCustomers,\r\n  listRoutes,\r\n  listStandings,\r\n  listOrders,\r\n  listAltPricings,\r\n  listDoughs,\r\n  listDoughComponents,\r\n  listNotess,\r\n} from \"../graphql/queries\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\nconsole.log(yesterday);\r\n\r\nconst buildDateTime = (string) => {\r\n  return DateTime.fromFormat(string, \"yyyy/dd/MM\").toISO();\r\n};\r\n\r\nconst fetchFromDataBase = async (baseFunc, base, limit) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, { limit: limit })\r\n    );\r\n    const list = data.data[base].items;\r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nconst fetchFromDataBaseWithFilter = async (baseFunc, base, limit, filt) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, {\r\n        limit: limit,\r\n        filter: filt,\r\n      })\r\n    );\r\n    const list = data.data[base].items;\r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nexport const fetchProducts = async () => {\r\n  let prodList = await fetchFromDataBase(listProducts, \"listProducts\", \"500\");\r\n  sortAtoZDataByIndex(prodList, \"prodName\");\r\n  return prodList;\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  let custList = await fetchFromDataBase(listCustomers, \"listCustomers\", \"500\");\r\n  sortAtoZDataByIndex(custList, \"custName\");\r\n  custList = custList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  return custList;\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  let routeList = await fetchFromDataBase(listRoutes, \"listRoutes\", \"500\");\r\n  sortAtoZDataByIndex(routeList, \"routeStart\");\r\n  return routeList;\r\n};\r\n\r\nexport const fetchStanding = async () => {\r\n  let standList = await fetchFromDataBase(\r\n    listStandings,\r\n    \"listStandings\",\r\n    \"5000\"\r\n  );\r\n  let noDelete = standList.filter((stand) => stand[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  return sortedData;\r\n};\r\n\r\nexport const fetchDoughs = async () => {\r\n  let dough = await fetchFromDataBase(listDoughs, \"listDoughs\", \"1000\");\r\n  return dough;\r\n};\r\n\r\nexport const fetchDoughComponents = async () => {\r\n  let doughComponents = await fetchFromDataBase(\r\n    listDoughComponents,\r\n    \"listDoughComponents\",\r\n    \"1000\"\r\n  );\r\n  return doughComponents;\r\n};\r\n\r\nexport const fetchAltPricing = async () => {\r\n  let altPricing = await fetchFromDataBase(\r\n    listAltPricings,\r\n    \"listAltPricings\",\r\n    \"1000\"\r\n  );\r\n  return altPricing;\r\n};\r\n\r\nexport const fetchNotes = async () => {\r\n  let notes = await fetchFromDataBase(listNotess, \"listNotess\", \"1000\");\r\n  return notes;\r\n};\r\n\r\nexport const fetchOrders = async () => {\r\n  let filt = {\r\n    delivDate: { gt: yesterday },\r\n  };\r\n\r\n  let ordList = await fetchFromDataBaseWithFilter(\r\n    listOrders,\r\n    \"listOrders\",\r\n    \"5000\",\r\n    filt\r\n  );\r\n  let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n  return sortedData;\r\n};\r\n\r\nexport const promisedData = (setIsLoading) => {\r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchData(setIsLoading));\r\n  });\r\n  return all;\r\n};\r\n\r\nconst fetchData = async (setIsLoading) => {\r\n  setIsLoading(true);\r\n  let products = await fetchProducts();\r\n  let customers = await fetchCustomers();\r\n  let routes = await fetchRoutes();\r\n  let standing = await fetchStanding();\r\n  let orders = await fetchOrders();\r\n  let doughs = await fetchDoughs();\r\n  let doughComponents = await fetchDoughComponents();\r\n  let data = [\r\n    products,\r\n    customers,\r\n    routes,\r\n    standing,\r\n    orders,\r\n    doughs,\r\n    doughComponents,\r\n  ];\r\n  setIsLoading(false);\r\n  return data;\r\n};\r\n\r\nexport const notesData = (setIsLoading) => {\r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchNotesData(setIsLoading));\r\n  });\r\n  return all;\r\n};\r\n\r\nconst fetchNotesData = async (setIsLoading) => {\r\n  setIsLoading(true);\r\n  let notes = await fetchNotes();\r\n  setIsLoading(false);\r\n  if (!notes) {\r\n    return [];\r\n  } else {\r\n    return notes;\r\n  }\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js",["722","723"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",["724","725","726","727"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  todayPlus,\r\n  daysOfTheWeek,\r\n  convertDatetoBPBDate,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  buildCurrentOrder,\r\n  testEntryForProduct,\r\n  createArrayofEnteredProducts,\r\n  createOrdersToUpdate,\r\n  buildOrdersToModify,\r\n  addUpdatesToOrders,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CommandLine = styled.span`\r\n  display: flex;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst OrderCommandLine = ({ database, setDatabase }) => {\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const {\r\n    chosen,\r\n    setChosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    route,\r\n    ponote,\r\n    currentCartList,\r\n    setCurrentCartList\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const {\r\n    cartList,\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    setRouteIsOn,\r\n    setModifications,\r\n  } = useContext(ToggleContext);\r\n\r\n  let tomorrow = todayPlus()[1];\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n    let nextCustomer = chosen;\r\n\r\n    if (entry.includes(\"retail \")) {\r\n      setOrderTypeWhole(false);\r\n      let newRetailCustName = entry.replace(\"retail \", \"\");\r\n      let newRetailCustList = [...orders];\r\n      let newRetailCustEntry = {\r\n        custName: newRetailCustName,\r\n        isWhole: false,\r\n        route: \"atownpick\",\r\n        delivDate: convertDatetoBPBDate(delivDate),\r\n      };\r\n      newRetailCustList.push(newRetailCustEntry);\r\n      let DBtoUpdate = clonedeep(database)\r\n      DBtoUpdate.orders = newRetailCustList\r\n      setDatabase(DBtoUpdate);\r\n      setDelivDate(tomorrow);\r\n      setChosen(newRetailCustName);\r\n    \r\n      return;\r\n    }\r\n\r\n    for (let cust of customers) {\r\n      if (\r\n        entry.includes(cust[\"custName\"]) ||\r\n        entry.includes(cust[\"nickName\"])\r\n      ) {\r\n        nextCustomer = cust[\"custName\"];\r\n        if (nextCustomer !== \"  \") {\r\n          setChosen(nextCustomer);\r\n          setRouteIsOn(true);\r\n          setDelivDate(tomorrow);\r\n          setOrderTypeWhole(true);\r\n        \r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nextCustomer === \"\" && chosen === \"\") {\r\n      swal({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [today, tomorrow, twoDay] = todayPlus();\r\n    let [Sun, Mon, Tues, Wed, Thurs, Fri, Sat] = daysOfTheWeek();\r\n    let dateWords = [\r\n      [\"today\", today],\r\n      [\"tomorrow\", tomorrow],\r\n      [\"2day\", twoDay],\r\n      [\"twoday\", twoDay],\r\n      [\"twoDay\", twoDay],\r\n      [\"sun\", Sun],\r\n      [\"mon\", Mon],\r\n      [\"tue\", Tues],\r\n      [\"tues\", Tues],\r\n      [\"wed\", Wed],\r\n      [\"thu\", Thurs],\r\n      [\"thur\", Thurs],\r\n      [\"thurs\", Thurs],\r\n      [\"fri\", Fri],\r\n      [\"sat\", Sat],\r\n    ];\r\n    for (let wordSet of dateWords) {\r\n      if (entry.includes(wordSet[0])) {\r\n        setDelivDate(wordSet[1]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForProducts = (entry) => {\r\n    if (testEntryForProduct(entry)) {\r\n      let enteredProducts = createArrayofEnteredProducts(entry);\r\n      let ordersToUpdate = createOrdersToUpdate(\r\n        products,\r\n        enteredProducts,\r\n        chosen,\r\n        ponote,\r\n        route,\r\n        orderTypeWhole,\r\n        delivDate\r\n      );\r\n      \r\n      let custOrderList = buildCurrentOrder(\r\n        chosen,\r\n        delivDate,\r\n        orders,\r\n        standing\r\n      );\r\n      \r\n      let ordersToModify = [...orders];\r\n      if (custOrderList.length > 0) {\r\n        ordersToModify = buildOrdersToModify(\r\n          orders,\r\n          chosen,\r\n          delivDate,\r\n          ordersToUpdate,\r\n          custOrderList,\r\n          ponote,\r\n          route\r\n        );\r\n      }\r\n      let addedOrdersToUpdate = addUpdatesToOrders(\r\n        chosen,\r\n        delivDate,\r\n        ordersToUpdate,\r\n        ordersToModify\r\n      );\r\n     \r\n      let DBToUpdate = clonedeep(database)\r\n      DBToUpdate[4] = addedOrdersToUpdate\r\n      setDatabase(DBToUpdate)\r\n     \r\n     \r\n    }\r\n  };\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers);\r\n    checkForDelivDate(entry);\r\n    checkForProducts(entry);\r\n  };\r\n\r\n  const handleInput = (entry) => {\r\n    if (entry.key === \"Enter\") {\r\n      interpretEntry(entry.target.value);\r\n      document.getElementById(\"orderCommand\").value = \"\";\r\n    }\r\n    return;\r\n  };\r\n\r\n  const lookingForHelp = () => {\r\n    const el = document.createElement(\"div\");\r\n    el.innerHTML =\r\n      \"<div style='text-align: left'><h3>How to use the Command Line</h3><p>This command line lets you use common bakery nicknames to enter orders.</p><p>To find a customer, enter a nickname.  Try 'high' or 'kberg'.  For a full list of customers and nicknames, <a href='/Customers' target='blank'>CLICK HERE</a></p><p>To enter a new product order, try '5 bag' or '10 bz' or '12 pl'.  You can even put them all in one line like '5 bag 10 bz 12 pl'. For a list of product nicknames, <a href='/Products' target='blank'>CLICK HERE</a></p><p>To jump to a future date, try 'tomorrow','2day','sun','mon','tues', etc.</p><p>To enter a retail order, type 'retail', then a space, then the customer's name.  For example, 'retail Milos'</p></div>\";\r\n\r\n    swal({\r\n      showConfirmButton: true,\r\n      confirmButtonText: '<a href=\"/Customers\">Customers</a>',\r\n      cancelBUttonText: '<a href=\"/Products\">Products</a>',\r\n\r\n      content: el,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CommandLine>\r\n        <span className=\"p-float-label\">\r\n          <InputText id=\"orderCommand\" size=\"50\" onKeyUp={handleInput} disabled={cartList === true ? false : true}/>\r\n          <label htmlFor=\"orderCommand\">\r\n            Enter Customers, Orders, Dates ...\r\n          </label>\r\n        </span>\r\n        <Button\r\n          icon=\"pi pi-question\"\r\n          className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n          onClick={(e) => lookingForHelp(e)}\r\n        />\r\n      </CommandLine>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["728","729","730","731","732"],"import React, { useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\n\r\nconst Calendar = ({ database }) => {\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    calendarEvents,\r\n    setCalendarEvents,\r\n  } = useContext(CurrentDataContext);\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { setModifications } = useContext(ToggleContext)\r\n\r\n\r\n  useEffect(() => {\r\n    if (database.length>0){\r\n    let backToStandingArray = CreateStandingArray(standing, chosen);\r\n    let cartDateArray = CreateCartDateArray(orders, chosen);\r\n    let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n    let standingEvents = {\r\n      title: \"\",\r\n      daysOfWeek: backToStandingArray,\r\n      display: \"background\",\r\n    };\r\n\r\n    let calendarEvents = [\r\n      { title: \"\", date: delivDate, display: \"background\" },\r\n    ];\r\n\r\n    calendarEvents.push(standingEvents);\r\n\r\n    for (let order of cartDateArray) {\r\n      let newEvent = { title: \"\", date: order, display: \"background\" };\r\n      calendarEvents.push(newEvent);\r\n    }\r\n\r\n    for (let order of cartBlankDateArray) {\r\n      let newEvent2 = { title: \"\", date: order, display: \"inverse-background\" };\r\n      calendarEvents.push(newEvent2);\r\n    }\r\n\r\n    setCalendarEvents(calendarEvents);\r\n  }\r\n  }, [chosen, delivDate, database]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setDelivDate(selectInfo.dateStr);\r\n    \r\n  \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"calendarApp\" id=\"test\">\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          defaultView=\"dayGridMonth\"\r\n          aspectRatio={1}\r\n          contentHeight=\"auto\"\r\n          eventBackgroundColor=\"blue\"\r\n          dateClick={handleDateSelect}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"\",\r\n            end: \"prev,next\",\r\n          }}\r\n          events={calendarEvents}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["733"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport AddUpdate from './OrderEntryButtonsParts/AddUpdate';\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction OrderEntryButtons({ database, setDatabase }) {\r\n\r\n  const {\r\n    setChosen,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n  \r\n  const {\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    setModifications,\r\n    cartList,\r\n    setCartList,\r\n    setRouteIsOn,\r\n  } = useContext(ToggleContext);\r\n\r\n  let type = orderTypeWhole ? \"Retail\" : \"Wholesale\";\r\n  let cartStand = cartList ? \"Standing\" : \"Cart\";\r\n\r\n  const handleChangeorderTypeWhole = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setOrderTypeWhole(!orderTypeWhole);\r\n    setChosen(\"\");\r\n  };\r\n\r\n  const handleCartStandToggle = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    let realCartList = clonedeep(cartList);\r\n    realCartList ? setRouteIsOn(false) : setRouteIsOn(true);\r\n    setCartList(!cartList);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    for (let ord of cartToMod) {\r\n      ord[\"qty\"] = 0;\r\n    }\r\n    setCurrentCartList(cartToMod);\r\n \r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <OrderButtons>\r\n      <AddUpdate database={database} setDatabase={setDatabase}\r\n      />\r\n      <Button\r\n        label=\"Clear\"\r\n        icon=\"pi pi-trash\"\r\n        disabled={!cartList}\r\n        onClick={handleClear}\r\n        className=\"p-button-raised p-button-rounded p-button-info\"\r\n      />\r\n      <Button\r\n        label={cartStand}\r\n        icon=\"pi pi-shopping-cart\"\r\n        onClick={handleCartStandToggle}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n      <Button\r\n        label={type}\r\n        icon=\"pi pi-dollar\"\r\n        onClick={handleChangeorderTypeWhole}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n    </OrderButtons>\r\n  );\r\n}\r\n\r\nexport default OrderEntryButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["734","735","736","737"],"import React, { useState } from \"react\";\r\n\r\nimport TitleBox from \"./CurrentOrderInfoParts/TitleBox\";\r\nimport CustomerGroup from \"./CurrentOrderInfoParts/CustomerGroup\";\r\nimport RouteSelect from \"./CurrentOrderInfoParts/RouteSelect\";\r\nimport PONote from './CurrentOrderInfoParts/PONote'\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst CurrentOrderInfo = ({ database, setDatabase }) => {\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const [ customerGroup, setCustomerGroup ] = useState(customers)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TitleBox />\r\n\r\n      <CurrentInfo>\r\n        <FulfillOptions>\r\n          <CustomerGroup database={database} customerGroup={customerGroup} setCustomerGroup={setCustomerGroup}/>\r\n          <RouteSelect database={database} setDatabase={setDatabase} customerGroup={customerGroup} />\r\n        </FulfillOptions>\r\n\r\n        <SpecialInfo>\r\n          <PONote database={database} setDatabase={setDatabase}/>\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["738","739"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { listDoughs } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setDropDownValue,\r\n  \r\n} from \"../../../helpers/formHelpers\";\r\n\r\n\r\n\r\n\r\n\r\nconst bakedWheres = [\r\n  { bakedWhere: \"Prado\" },\r\n  { bakedWhere: \"Carlton\" },\r\n  { bakedWhere: \"Mixed\" },\r\n];\r\n\r\nconst Baking = ({ selectedProduct, setSelectedProduct }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n  const [doughTypes, setDoughTypes ] = useState()\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  const [ fullProducts, setFullProducts ] = useState([])\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs();\r\n    setIsLoading(false);\r\n  }, []);\r\n  \r\n  const fetchDoughs = async () => {\r\n    try {\r\n      const doughData = await API.graphql(\r\n        graphqlOperation(listDoughs, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const doughList = doughData.data.listDoughs.items;\r\n      sortAtoZDataByIndex(doughList, \"doughName\");\r\n      let noDelete = doughList.filter((dough) => dough[\"_deleted\"] !== true);\r\n      let doughsToAdd = noDelete.map(no => ({doughType: no.doughName}))\r\n      doughsToAdd.push({doughType: \"NA\"})\r\n      setDoughTypes(doughsToAdd);\r\n  \r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    let stageProducts = products.map(prod => ({depends: prod[\"prodName\"]}))\r\n    stageProducts.push({depends: \"NONE\"})\r\n    \r\n    setFullProducts(stageProducts)\r\n  },[])\r\n  \r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-user\"></i> Baking Info\r\n      </h2>\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"doughType\">Dough Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"doughType\"\r\n          optionLabel=\"doughType\"\r\n          options={doughTypes}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.doughType : \"Select Dough Type\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakedWhere\">Baked Where</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"bakedWhere\"\r\n          optionLabel=\"bakedWhere\"\r\n          options={bakedWheres}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.bakedWhere : \"Baked Where\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"readyTime\">Guaranteed Ready (0-24)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"readyTime\"\r\n          placeholder={selectedProduct.readyTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"forBake\">Name for Bakers</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"forBake\"\r\n          placeholder={selectedProduct.forBake}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"batchSize\">Batch Size</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"batchSize\"\r\n          placeholder={selectedProduct.batchSize}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakeExtra\">Bake Extra</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"bakeExtra\"\r\n          placeholder={selectedProduct.bakeExtra}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"weight\">Dough Weight (lbs.)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"weight\"\r\n          placeholder={selectedProduct.weight}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"depends\">Dependant Product</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"depends\"\r\n          optionLabel=\"depends\"\r\n          options={fullProducts}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.depends : \"Depends On\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js",["740"],"import React, { useEffect } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ orderList, setRouteList, setRoute, routeList, database }) => {\r\n  \r\n  useEffect(() => {\r\n    if (orderList) {\r\n      let rtList = orderList.map((ord) => ord[\"route\"]);\r\n      let setRtList = new Set(rtList);\r\n      let rtListArray = Array.from(setRtList);\r\n      rtListArray = rtListArray.map((rt) => ({ route: rt }));\r\n    \r\n      setRouteList(rtListArray);\r\n    }\r\n  }, [orderList, database]);\r\n\r\n  const handleSelection = (e) => {\r\n    setRoute(e.value.route);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        <DataTable\r\n          value={routeList}\r\n          className=\"p-datatable-striped\"\r\n          selectionMode=\"single\"\r\n          onSelectionChange={handleSelection}\r\n          dataKey=\"id\"\r\n        >\r\n          <Column field=\"route\" header=\"Routes\"></Column>\r\n        </DataTable>\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js",["741","742","743","744","745","746","747","748","749","750","751","752","753","754","755"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { formatter } from \"../../../../helpers/billingGridHelpers\";\r\n\r\n\r\nimport {\r\n  buildProductArray,\r\n  createRouteGridColumns,\r\n  createColumns,\r\n  createListOfCustomers,\r\n  createQtyGrid,\r\n} from \"../../../../helpers/delivGridHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-content: flex-end;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteGrid = ({ route,\r\n  orderList,\r\n  altPricing,\r\n  database,\r\n  delivDate }) => {\r\n\r\n  const dt = useRef(null);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const constructColumns = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let columns;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n      let listOfProducts = buildProductArray(buildGridSetUp, products);\r\n\r\n      columns = createRouteGridColumns(listOfProducts);\r\n    }\r\n  \r\n    return columns;\r\n  };\r\n\r\n  const constructData = () => {\r\n    let qtyGrid;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter(\r\n        (order) => order[\"route\"] === route\r\n      );\r\n      let listOfCustomers = createListOfCustomers(gridToEdit, route);\r\n      qtyGrid = createQtyGrid(listOfCustomers, gridToEdit);\r\n    }\r\n    return qtyGrid;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let col = constructColumns();\r\n    let dat = constructData();\r\n    setColumns(col ? col : []);\r\n    setData(dat ? dat : []);\r\n  }, [route, orderList ]);\r\n\r\n  const dynamicColumns = columns.map((col, i) => {\r\n    return (\r\n      <Column\r\n        npmkey={col.field}\r\n        field={col.field}\r\n        header={col.header}\r\n        style={col.width}\r\n      />\r\n    );\r\n  });\r\n\r\n  const exportColumns = columns.map((col) => ({\r\n    title: col.header,\r\n    dataKey: col.field,\r\n  }));\r\n  \r\n  const exportListPdf = () => {\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(10, 20, \"Delivery Sheet\");\r\n    doc.autoTable({\r\n      columns: exportColumns,\r\n      body: data,\r\n      margin: { top: 26 },\r\n      styles: { fontSize: 12 },\r\n    });\r\n    doc.save(\"products.pdf\");\r\n  };\r\n\r\n  const ratePull = (ord) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n        ].wholePrice;\r\n      for (let alt of altPricing) {\r\n        if (\r\n          alt[\"custName\"] === ord[\"custName\"] &&\r\n          alt[\"prodName\"] === ord[\"prodName\"]\r\n        ) {\r\n          ratePull = alt[\"wholePrice\"];\r\n        }\r\n      }\r\n      return ratePull\r\n  }\r\n  \r\n\r\n  const exportInvPdf = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let invListFilt = orderList.filter((ord) => ord.route === route);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    const doc = new jsPDF(\"0\", \"mm\", \"a4\");\r\n\r\n    let init = true;\r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      !init && doc.addPage(\"0\", \"mm\", \"a4\");\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      init = false;\r\n    }\r\n  }\r\n    doc.save(\"invoices.pdf\");\r\n  };\r\n\r\n  const exportFullPdf = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let init = true;\r\n    let routeList = Array.from(new Set(orderList.map((ord) => ord.route)));\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    for (let rt of routeList) {\r\n      let columns;\r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n\r\n        let gridToEdit = buildGridSetUp.filter((grd) => grd[\"route\"] === rt);\r\n        let listOfProducts = buildProductArray(gridToEdit, products);\r\n\r\n        columns = createRouteGridColumns(listOfProducts);\r\n      }\r\n      columns = columns.map((col) => ({\r\n        title: col.header,\r\n        dataKey: col.field,\r\n      }));\r\n      let qtyGrid;\r\n     \r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n        \r\n        \r\n        let listOfCustomers = createListOfCustomers(buildGridSetUp, rt);\r\n        qtyGrid = createQtyGrid(listOfCustomers, buildGridSetUp);\r\n        \r\n      }\r\n\r\n      !init && doc.addPage(\"a4\",'l');\r\n      doc.setFontSize(20);\r\n      doc.text(10, 20, rt);\r\n      doc.autoTable({\r\n        columns: columns,\r\n        body: qtyGrid,\r\n        margin: { top: 26 },\r\n        styles: { fontSize: 12 },\r\n      });\r\n  \r\n      let invListFilt = orderList.filter((ord) => ord.route === rt);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    \r\n\r\n    \r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      doc.addPage('a4','portrait');\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n    }}\r\n      \r\n    init = false\r\n    }\r\n    doc.save(\"invoices.pdf\");\r\n    \r\n  };\r\n  \r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportListPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Delivery List\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportInvPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Invoices\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportFullPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Full Delivery Lists\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n    \r\n  const onRowReorder = (e) => {\r\n    setData(e.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable\r\n          header={header}\r\n          ref={dt}\r\n          className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n          value={data}\r\n          resizableColumns\r\n          columnResizeMode=\"fit\"\r\n          onRowReorder={onRowReorder}\r\n        >\r\n          <Column rowReorder style={{ width: \"3em\" }} />\r\n          {dynamicColumns}\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js",["756","757","758","759","760","761","762"],"\r\n\r\nimport { getFullOrders } from \"../../../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../../../helpers/delivGridHelpers\";\r\nimport { sortZtoADataByIndex } from \"../../../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"./utils\";\r\n\r\n\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n        for (let rte of routes) {\r\n          for (let grd of prodGrid) {\r\n            console.log(rte)\r\n            let dayNum = calcDayNum(delivDate);\r\n            \r\n            if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n              continue;\r\n            } else {\r\n              if (\r\n                routeRunsThatDay(rte, dayNum) &&\r\n                productCanBeInPlace(grd, routes, customers, rte) &&\r\n                productReadyBeforeRouteStarts(\r\n                  products,\r\n                  customers,\r\n                  routes,\r\n                  grd,\r\n                  rte\r\n                ) &&\r\n                customerIsOpen(customers, grd, routes, rte)\r\n              ) {\r\n                grd.route = rte.routeName;\r\n                grd.routeDepart = rte.RouteDepart;\r\n                grd.routeStart = rte.routeStart;\r\n                grd.routeServe = rte.RouteServe;\r\n              }\r\n\r\n\r\n            }\r\n          }\r\n        }\r\n        for (let grd of prodGrid) {\r\n          if (grd.zone===\"slopick\" || grd.zone===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.zone===\"atownpick\" || grd.zone===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"slopick\" || grd.route===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.route===\"atownpick\" || grd.route===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"deliv\"){\r\n            grd.route=\"NOT ASSIGNED\"\r\n          }\r\n        }\r\n\r\n   \r\n    return prodGrid\r\n}\r\n\r\n\r\n\r\nexport default class ComposeProductGrid {\r\n  returnProdGrid = (database, delivDate) => {\r\n    let prodGrid = this.getProdGrid(database, delivDate);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      prodGrid: prodGrid,     \r\n    };\r\n  };\r\n\r\n  getProdGrid(database, delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodGrid = getFullOrders(delivDate, database);\r\n    prodGrid = zerosDelivFilter(prodGrid, delivDate, database);\r\n    prodGrid = buildGridOrderArray(prodGrid, database);\r\n    prodGrid = addRoutes(delivDate, prodGrid, database);\r\n   \r\n    //prodGrid = addAttr(database, prodGrid);\r\n    console.log(prodGrid)\r\n    return prodGrid;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js",["763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783"],"import {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  createColumns,\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../ByRoute/Parts/utils/utils\";\r\nimport { first } from \"lodash\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\nlet convertedToday = convertDatetoBPBDate(today);\r\nlet convertedTomorrow = convertDatetoBPBDate(tomorrow);\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getProdNickNames = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  let fullNames = Array.from(\r\n    new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.prodName))\r\n  );\r\n  let nickNames = fullNames.map(\r\n    (fil) =>\r\n      products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n  );\r\n  return nickNames;\r\n};\r\n\r\nconst getCustNames = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  return Array.from(\r\n    new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.custName))\r\n  );\r\n};\r\n\r\n\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder\r\n};\r\n\r\nconst makeOrders = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let prodNames = getProdNickNames(delivDate, database, filter);\r\n  let custNames = getCustNames(delivDate, database, filter);\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  let orderArray = [];\r\n  for (let cust of custNames) {\r\n    let custItem = {};\r\n    custItem = {\r\n      customer: cust,\r\n    };\r\n    for (let prod of prodNames) {\r\n      let prodFullName =\r\n        products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n      try {\r\n        custItem[prod] =\r\n          fullOrder[\r\n            fullOrder.findIndex(\r\n              (ord) => ord.prodName === prodFullName && ord.custName === cust\r\n            )\r\n          ].qty;\r\n      } catch {\r\n        custItem[prod] = null;\r\n      }\r\n    }\r\n    orderArray.push(custItem);\r\n  }\r\n  return orderArray;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeNorthList {\r\n  returnNorthBreakDown = (delivDate, database) => {\r\n    let croixNorth = this.returnCroixNorth(delivDate, database);\r\n    let shelfProdsNorth = this.returnShelfProdsNorth(database);\r\n    let pocketsNorth = this.returnPocketsNorth(database);\r\n    let CarltonToPrado = this.returnCarltonToPrado(database);\r\n    let Baguettes = this.returnBaguettes(database);\r\n    let otherRustics = this.returnOtherRustics(database);\r\n    let retailStuff = this.returnRetailStuff(database);\r\n    let earlyDeliveries = this.returnEarlyDeliveries(database);\r\n    let columnsShelfProdsNorth = this.returnColumnsShelfProdsNorth(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsPocketsNorth = this.returnColumnsPocketsNorth(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsCarltonToPrado = this.returnColumnsCarltonToPrado(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsBaguettes = this.returnColumnsBaguettes(delivDate, database);\r\n    let columnsOtherRustics = this.returnColumnsOtherRustics(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsRetailStuff = this.returnColumnsRetailStuff(delivDate, database);\r\n    let columnsEarlyDeliveries = this.returnColumnsEarlyDeliveries(\r\n      delivDate,\r\n      database\r\n    );\r\n\r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      croixNorth: croixNorth,\r\n      shelfProdsNorth: shelfProdsNorth,\r\n      pocketsNorth: pocketsNorth,\r\n      CarltonToPrado: CarltonToPrado,\r\n      Baguettes: Baguettes,\r\n      otherRustics: otherRustics,\r\n      retailStuff: retailStuff,\r\n      earlyDeliveries: earlyDeliveries,\r\n      columnsShelfProdsNorth: columnsShelfProdsNorth,\r\n      columnsPocketsNorth: columnsPocketsNorth,\r\n      columnsCarltonToPrado: columnsCarltonToPrado,\r\n      columnsBaguettes: columnsBaguettes,\r\n      columnsOtherRustics: columnsOtherRustics,\r\n      columnsRetailStuff: columnsRetailStuff,\r\n      columnsEarlyDeliveries: columnsEarlyDeliveries,\r\n    };\r\n  };\r\n\r\n  returnCroixNorth = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let frozensOrdersList = getOrdersList(today, database);\r\n    let frozenToday = frozensOrdersList.filter((frz) =>\r\n      this.frzNorthFilter(frz)\r\n    );\r\n    frozenToday = this.makeAddFrozenQty(frozenToday);\r\n    \r\n    let bakedOrdersList = getOrdersList(tomorrow, database);\r\n    let bakedTomorrow = bakedOrdersList.filter((frz) =>\r\n      this.tomBakeFilter(frz)\r\n    );\r\n    bakedTomorrow = this.makeAddQty(bakedTomorrow);\r\n    \r\n\r\n    let combogrid = this.combineGrids(frozenToday, bakedTomorrow);\r\n    combogrid = this.subtractCurrentStock(products, combogrid)\r\n    combogrid = this.adjustForPackSize(combogrid);\r\n    \r\n    return combogrid;\r\n  };\r\n\r\n  frzNorthFilter = (ord) => {\r\n    return (\r\n      ord.packGroup === \"frozen pastries\" &&\r\n      ord.doughType === \"Croissant\" &&\r\n      (ord.route === \"Pick up Carlton\" || ord.routeDepart === \"Carlton\")\r\n    );\r\n  };\r\n\r\n  tomBakeFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Mixed\") &&\r\n      ord.packGroup === \"baked pastries\" &&\r\n      ord.doughType === \"Croissant\" &&\r\n      (ord.route === \"Pick up Carlton\" || ord.routeDepart === \"Carlton\")\r\n    );\r\n  };\r\n\r\n  makeAddFrozenQty = (frozenToday) => {\r\n    let makeList = frozenToday.map(frz => frz.prodNick)\r\n    makeList = new Set(makeList)\r\n    makeList = Array.from(makeList)\r\n    makeList = makeList.map((mk) => ({\r\n      prodNick: mk.substring(2),\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList) {\r\n\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n      \r\n\r\n      let qtyToday = frozenToday\r\n        .filter((frz) => make.prodNick === frz.prodNick.substring(2))\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList;\r\n  \r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.prodNick))\r\n    ).map((mk) => ({\r\n      prodNick: mk,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n      \r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.prodNick === frz.prodNick)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  \r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n    console.log(obj1);\r\n    console.log(obj2);\r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject){\r\n      for (let first of firstObject){\r\n        if (sec.prodNick === first.prodNick){\r\n          sec.qty = first.qty\r\n          continue\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\"+sec.prodNick\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n\r\n  subtractCurrentStock = (products, grid) => {\r\n    for ( let gr of grid){\r\n      let subQty = products[products.findIndex(prod => prod.nickName === gr.prodNick)].currentStock\r\n      gr.qty -=subQty\r\n    }\r\n    return grid\r\n  }\r\n    \r\n    \r\n    \r\n  \r\n\r\n  adjustForPackSize = (grid) => {\r\n    for ( let gr of grid){\r\n      gr.qty = Math.ceil(gr.qty/12)*12\r\n    }\r\n    return grid\r\n  };\r\n\r\n  returnPocketsNorth = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.pocketsNorthFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  pocketsNorthFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Mixed\") &&\r\n      ord.packGroup !== \"baked pastries\" &&\r\n      ord.route === \"Pick up Carlton\"\r\n    );\r\n  };\r\n\r\n  returnShelfProdsNorth = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.shelfProdsFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  shelfProdsFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Prado\") &&\r\n      ord.packGroup !== \"frozen pastries\" &&\r\n      (ord.routeDepart === \"Carlton\" || ord.route === \"Pick up Carlton\")\r\n    );\r\n  };\r\n\r\n  returnCarltonToPrado = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.CarltonToPradoFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  CarltonToPradoFilter = (ord) => {\r\n    let fil =\r\n      ord.delivDate === convertedToday && ord.route === \"Carlton to Prado\";\r\n\r\n    return fil;\r\n  };\r\n\r\n  returnBaguettes = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.BaguettesFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  BaguettesFilter = (ord) => {\r\n    return (\r\n      ord.prodName === \"Baguette\" &&\r\n      ord.routeDepart !== \"Carlton\" &&\r\n      ord.routeArrive !== \"Carlton\"\r\n    );\r\n  };\r\n\r\n  returnOtherRustics = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.otherRusticsFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  otherRusticsFilter = (ord) => {\r\n    return (\r\n      ord.prodName !== \"Baguette\" &&\r\n      ord.packGroup !== \"retail\" &&\r\n      ord.where.includes(\"Carlton\") &&\r\n      ord.routeDepart === \"Prado\" &&\r\n      (ord.routeStart > 8 || ord.route === \"Pick up SLO\")\r\n    );\r\n  };\r\n\r\n  returnRetailStuff = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.retailStuffFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  retailStuffFilter = (ord) => {\r\n    return ord.packGroup === \"retail\" && ord.routeDepart === \"Prado\";\r\n  };\r\n\r\n  returnEarlyDeliveries = (database) => {\r\n    let shelfProds = makeOrders(tomorrow, database, this.earlyDeliveriesFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  earlyDeliveriesFilter = (ord) => {\r\n    return (\r\n      ord.routeDepart === \"Prado\" &&\r\n      ord.where.includes(\"Carlton\") &&\r\n      ord.routeStart < 8\r\n    );\r\n  };\r\n\r\n  returnColumnsShelfProdsNorth = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.shelfProdsFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsPocketsNorth = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.pocketsNorthFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsCarltonToPrado = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.CarltonToPradoFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsBaguettes = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.BaguettesFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsOtherRustics = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.otherRusticsFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsRetailStuff = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.retailStuffFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsEarlyDeliveries = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      tomorrow,\r\n      database,\r\n      this.earlyDeliveriesFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js",["784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807"],"import {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport { createColumns } from \"../../../helpers/delivGridHelpers\";\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst getProdNickNames = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  console.log(\"orders\",orders)\r\n  let fullNames = Array.from(\r\n    new Set(\r\n      orders\r\n        .filter(\r\n          (ord) =>\r\n            !customers.map((cust) => cust.custName).includes(ord.custName) &&\r\n            ord.delivDate === convertDatetoBPBDate(today) &&\r\n            ord.route === loc\r\n        )\r\n        .map((fil) => fil.prodName)\r\n    )\r\n  );\r\n  let nickNames = fullNames.map(\r\n    (fil) =>\r\n      products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n  );\r\n  return nickNames;\r\n};\r\n\r\nconst getCustNames = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  return Array.from(\r\n    new Set(\r\n      orders\r\n        .filter(\r\n          (ord) =>\r\n            !customers.map((cust) => cust.custName).includes(ord.custName) &&\r\n            ord.delivDate === convertDatetoBPBDate(today) &&\r\n            ord.route === loc\r\n        )\r\n        .map((fil) => fil.custName)\r\n    )\r\n  );\r\n};\r\n\r\nconst makeSpecialColumns = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let filteredOrders = getProdNickNames(database, loc);\r\n  filteredOrders = createColumns(filteredOrders);\r\n  return filteredOrders;\r\n};\r\n\r\nconst makeSpecialOrders = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let prodNames = getProdNickNames(database, loc);\r\n  let custNames = getCustNames(database, loc);\r\n  let orderArray = [];\r\n  for (let cust of custNames) {\r\n    let custItem = {};\r\n    custItem = {\r\n      customer: cust,\r\n    };\r\n    for (let prod of prodNames) {\r\n      let prodFullName =\r\n        products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n     \r\n      try {\r\n        custItem[prod] =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) =>\r\n                ord.custName === cust &&\r\n                ord.prodName === prodFullName &&\r\n                ord.delivDate === convertDatetoBPBDate(today) &&\r\n                ord.route === loc\r\n            )\r\n          ].qty;\r\n      } catch {\r\n        custItem[prod] = 0;\r\n      }\r\n    }\r\n    orderArray.push(custItem);\r\n  }\r\n  return orderArray;\r\n};\r\n\r\nexport default class ComposeSpecialOrders {\r\n  returnSpecialNorthColumns = (database) => {\r\n    let columns = this.getSpecialNorthColumns(database);\r\n    return {\r\n      columns: columns,\r\n    };\r\n  };\r\n\r\n  getSpecialNorthColumns(database) {\r\n    let specialNorthColumns = makeSpecialColumns(database, \"atownpick\");\r\n    return specialNorthColumns;\r\n  }\r\n\r\n  returnSpecialSouthColumns = (database) => {\r\n    let columns = this.getSpecialSouthColumns(database);\r\n    return {\r\n      columns: columns,\r\n    };\r\n  };\r\n\r\n  getSpecialSouthColumns(database) {\r\n    let specialSouthColumns = makeSpecialColumns(database, \"slopick\");\r\n    return specialSouthColumns;\r\n  }\r\n\r\n  returnBPBNSpecialOrders = (database) => {\r\n    let specialOrders = this.getBPBNSpecialOrders(database);\r\n    return {\r\n      specialOrders: specialOrders,\r\n    };\r\n  };\r\n\r\n  getBPBNSpecialOrders(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let BPBNSpecialOrders = makeSpecialOrders(database, \"atownpick\");\r\n    return BPBNSpecialOrders;\r\n  }\r\n\r\n  returnBPBSSpecialOrders = (database) => {\r\n    let specialOrders = this.getBPBSSpecialOrders(database);\r\n    return {\r\n      specialOrders: specialOrders,\r\n    };\r\n  };\r\n\r\n  getBPBSSpecialOrders(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let BPBSSpecialOrders = makeSpecialOrders(database, \"slopick\");\r\n    return BPBSSpecialOrders;\r\n  }\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js",["808","809","810","811","812"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addRetailBagQty\r\n} from \"./utils\";\r\n\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeRetailBags = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.prodName))\r\n  ).map((make) => ({\r\n    prodName: make,\r\n    qty: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getRetailBags = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\n\r\n\r\nexport default class ComposeRetailBags {\r\n  returnRetailBags = (database) => {\r\n    let retailBags = this.getRetailBags(database);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      retailBags: retailBags,     \r\n    };\r\n  };\r\n\r\n  getRetailBags(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let retailBags = makeRetailBags(products, this.retailBagsFilter);\r\n    let fullOrdersToday = getRetailBags(today, database);\r\n    for (let ret of retailBags) {\r\n      addRetailBagQty(ret, fullOrdersToday);\r\n    }\r\n    return retailBags;\r\n  }\r\n\r\n  retailBagsFilter = (prod) => {\r\n    let fil =\r\n      prod.packGroup === \"retail\"\r\n    return fil;\r\n  };\r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js",["813","814","815","816","817","818","819","820","821","822","823","824","825"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport { getFullProdOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addFresh,\r\n  addNeedEarly,\r\n  addShelf,\r\n  addPocketsQty,\r\n} from \"./utils\";\r\nimport { handleFrenchConundrum } from \"./conundrums\";\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeProds = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.forBake))\r\n  ).map((make) => ({\r\n    forBake: make,\r\n    qty: 0,\r\n    makeTotal: 0,\r\n    bagEOD: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getFullMakeOrders = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nconst getFullProdMakeOrders = (delivDate, database) => {\r\n  let fullOrder = getFullProdOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\n\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnMakeBreakDown = (database) => {\r\n    let pocketsNorth = this.getPocketsNorth(database);\r\n    let freshProds = this.getFreshProds(database);\r\n    let shelfProds = this.getShelfProds(database);\r\n    let freezerProds = this.getFreezerProds(database);\r\n\r\n    [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      pocketsNorth: pocketsNorth,\r\n      freshProds: freshProds,\r\n      shelfProds: shelfProds,\r\n      freezerProds: freezerProds,\r\n    };\r\n  };\r\n\r\n  getPocketsNorth(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makePocketsNorth = makeProds(products, this.pocketsNorthFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    for (let make of makePocketsNorth) {\r\n      addPocketsQty(make, fullOrdersToday);\r\n    }\r\n    return makePocketsNorth;\r\n  }\r\n\r\n  pocketsNorthFilter = (prod) => {\r\n    let fil =\r\n      prod.bakedWhere.includes(\"Mixed\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreshProds = (database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeFreshProds = makeProds(products, this.freshProdFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullMakeOrders(tomorrow, database);\r\n    for (let make of makeFreshProds) {\r\n      addFresh(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n    }\r\n    return makeFreshProds;\r\n  };\r\n\r\n  freshProdFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\";\r\n    return fil;\r\n  };\r\n\r\n  getShelfProds(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeShelfProds = makeProds(products, this.shelfProdsFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tomorrow, database);\r\n    for (let make of makeShelfProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n    return makeShelfProds;\r\n  }\r\n\r\n  shelfProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreezerProds(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeFreezerProds = makeProds(products, this.freezerProdsFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tomorrow, database);\r\n    for (let make of makeFreezerProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n    return makeFreezerProds;\r\n  }\r\n\r\n  freezerProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw === true;\r\n    return fil;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js",["826","827","828","829","830","831","832"],"import { convertDatetoBPBDate } from \"./dateTimeHelpers\";\r\nimport { sortZtoADataByIndex, sortAtoZDataByIndex } from \"./sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport const removeDoubles = (orderList) => {\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n  return orderList;\r\n};\r\n\r\nexport const zerosDelivFilter = (orderList, delivDate, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let noZeroDelivDateOrderList = orderList.filter(\r\n    (ord) =>\r\n      Number(ord[\"qty\"]) > 0 &&\r\n      ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n  );\r\n  for (let ord of noZeroDelivDateOrderList) {\r\n    if (ord[\"route\"] === undefined || ord[\"route\"] === \"deliv\") {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        let custZone = customers[ind][\"zoneName\"];\r\n        ord[\"zoneName\"] = custZone;\r\n      }\r\n    } else {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        ord[\"zoneName\"] = ord[\"route\"];\r\n      }\r\n    }\r\n  }\r\n  return noZeroDelivDateOrderList;\r\n};\r\n\r\nexport const filterForZoneService = (\r\n  noZeroDelivDateOrderList,\r\n  route,\r\n  routes\r\n) => {\r\n  let filterServe;\r\n  if (routes) {\r\n    let rtInd = routes.findIndex((rt) => rt[\"routeName\"] === route);\r\n    filterServe = noZeroDelivDateOrderList.filter((ord) =>\r\n      routes[rtInd][\"RouteServe\"].includes(ord[\"route\"])\r\n    );\r\n  }\r\n  return filterServe;\r\n};\r\n\r\nconst buildCustName = (ord, customers) => {\r\n  try {\r\n  return customers[\r\n    customers.findIndex((cust) => cust[\"custName\"] === ord[\"custName\"])\r\n  ].nickName\r\n} catch {\r\n  return\r\n}\r\n\r\n}\r\n\r\nexport const buildGridOrderArray = (filterServe, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let gridOrderArray;\r\n\r\n  gridOrderArray = filterServe.map((ord) => ({\r\n    prodName: ord[\"prodName\"],\r\n    prodNick: products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n    ].nickName,\r\n    custName: ord[\"custName\"],\r\n    custNick: buildCustName(ord,customers),\r\n    zone: ord[\"zoneName\"],\r\n    route: ord[\"route\"],\r\n    qty: ord[\"qty\"],\r\n    doughType:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"doughType\"],\r\n    where:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"bakedWhere\"],\r\n    when: products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n    ][\"readyTime\"],\r\n    forBake:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].forBake,\r\n    preshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].preshaped,\r\n      prepreshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].prepreshaped,\r\n      updatePreDate:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].updatePreDate,\r\n    prodID:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].id,\r\n    packSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packSize,\r\n    weight:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].weight,\r\n    currentStock:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].currentStock,\r\n    batchSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].batchSize,\r\n    bakeExtra:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].bakeExtra,\r\n    packGroup:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packGroup,\r\n  }));\r\n\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const isZoneIncludedInRoute = (\r\n  gridOrderArray,\r\n  routes,\r\n  delivDate,\r\n  customers\r\n) => {\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of gridOrderArray) {\r\n      let day = DateTime.fromSQL(delivDate);\r\n      let dayNum = day.weekday;\r\n      if (dayNum === 7) {\r\n        dayNum = 0;\r\n      }\r\n      dayNum = dayNum + 1;\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n          grd[\"route\"] = rte[\"routeName\"];\r\n        } else {\r\n          grd[\"route\"] = \"Pick up Carlton\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const buildProductArray = (gridToEdit, products) => {\r\n  let listOfProducts;\r\n\r\n  listOfProducts = gridToEdit.map((order) => order[\"prodName\"]);\r\n  listOfProducts = new Set(listOfProducts);\r\n  listOfProducts = Array.from(listOfProducts);\r\n  let prodArray = [];\r\n  for (let prod of listOfProducts) {\r\n    for (let item of products) {\r\n      if (prod === item[\"prodName\"]) {\r\n        let newItem = [\r\n          prod,\r\n          item[\"nickName\"],\r\n          item[\"packGroup\"],\r\n          item[\"packSize\"],\r\n        ];\r\n        prodArray.push(newItem);\r\n      }\r\n    }\r\n  }\r\n  return prodArray;\r\n};\r\n\r\nexport const createColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"10%\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod,\r\n      header: prod,\r\n      dataKey: prod,\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createRouteGridColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"10%\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod[0],\r\n      header: prod[1],\r\n      dataKey: prod[1],\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createListOfCustomers = (orderList) => {\r\n  let listOfCustomers = orderList.map((order) => order[\"custName\"]);\r\n  listOfCustomers = Array.from(new Set(listOfCustomers));\r\n  return listOfCustomers;\r\n};\r\n\r\nexport const createQtyGrid = (listOfCustomers, orderList) => {\r\n  console.log(orderList);\r\n  let data = [];\r\n  for (let cust of listOfCustomers) {\r\n    let newData = { customer: cust };\r\n    for (let order of orderList) {\r\n      if (order[\"custName\"] === cust) {\r\n        newData[order[\"prodName\"]] = order[\"qty\"];\r\n      }\r\n    }\r\n    data.push(newData);\r\n  }\r\n  console.log(data);\r\n  return data;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js",["833","834","835","836","837","838","839"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix = fullToFix.filter(full => full.qty !== 0)\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, database))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addQty = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n \r\n  \r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.prodName === full.prodName \r\n    )\r\n    .map((ord) => ord.qty);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n  make.qty = qtyAccToday;\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst update = (order, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let atownPick\r\n  let routeDepart = \"\";\r\n  let route = \"\";\r\n  let rtcheckNorthRun = routes[routes.findIndex(rt => rt.routeName === \"AM North\")].RouteServe\r\n  let rtcheckCarltonToPrado = routes[routes.findIndex(rt => rt.routeName === \"Carlton to Prado\")].RouteServe\r\n  if (rtcheckNorthRun.includes(order.zone) || rtcheckCarltonToPrado.includes(order.zone)){\r\n    routeDepart = \"Carlton\"\r\n  }\r\n  if (rtcheckCarltonToPrado.includes(order.zone)){\r\n    route = \"Carlton to Prado\"\r\n  }\r\n  \r\n \r\n\r\n  let routeStart = 5.5\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n    bakedWhere: ind.bakedWhere,\r\n    packGroup: ind.packGroup,\r\n    routeDepart: routeDepart,\r\n    route: route,\r\n    routeStart: routeStart\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport const calcDayNum = (delivDate) => {\r\n  let day = DateTime.fromSQL(delivDate);\r\n  let dayNum = day.weekday;\r\n  if (dayNum === 7) {\r\n    dayNum = 0;\r\n  }\r\n  dayNum = dayNum + 1;\r\n  return dayNum;\r\n};\r\n\r\nexport const routeRunsThatDay = (rte, dayNum) => {\r\n    if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  export const productCanBeInPlace = (grd, routes, customers, rte) => {\r\n    if (\r\n      grd[\"where\"].includes(\"Mixed\") ||\r\n      grd[\"where\"].includes(\r\n        routes[\r\n          routes.findIndex((route) => route[\"routeName\"] === rte[\"routeName\"])\r\n        ][\"RouteDepart\"]\r\n      )\r\n    ) {\r\n      return true;\r\n    } else {\r\n      if (productCanMakeIt(grd, routes, customers, rte)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const productCanMakeIt = (grd, routes, customers, rte) => {\r\n    for (let testRte of routes) {\r\n      if (\r\n        grd[\"where\"].includes(testRte[\"RouteDepart\"]) &&\r\n        testRte[\"RouteArrive\"] === rte[\"RouteDepart\"] &&\r\n        (Number(testRte[\"routeStart\"] + testRte[\"routeTime\"]) <\r\n          Number(rte[\"routeStart\"]) ||\r\n          Number(testRte[\"routeStart\"] + testRte[\"routeTime\"]) >\r\n          customers[\r\n            customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n          ][\"latestFinalDeliv\"])\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n  \r\n    return false;\r\n  };\r\n\r\n  export const productReadyBeforeRouteStarts = (\r\n    products,\r\n    customers,\r\n    routes,\r\n    grd,\r\n    rte\r\n  ) => {\r\n    if (\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n      ][\"readyTime\"] <\r\n        routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n          \"routeStart\"\r\n        ] ||\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n      ][\"readyTime\"] >\r\n        customers[\r\n          customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n        ][\"latestFinalDeliv\"]\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  export const customerIsOpen = (customers, grd, routes, rte) => {\r\n    if (\r\n      customers[\r\n        customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n      ][\"latestFirstDeliv\"] <\r\n      Number(\r\n        routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n          \"routeStart\"\r\n        ]\r\n      ) +\r\n        Number(\r\n          routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n            \"routeTime\"\r\n          ]\r\n        )\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js",["840","841","842","843","844","845","846"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix = fullToFix.filter(full => full.qty !== 0)\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, database))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addRetailBagQty = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n \r\n  \r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.prodName === full.prodName \r\n    )\r\n    .map((ord) => ord.qty);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n  make.qty = qtyAccToday;\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst update = (order, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let atownPick\r\n  let routeDepart = \"\";\r\n  let route = \"\";\r\n  let rtcheckNorthRun = routes[routes.findIndex(rt => rt.routeName === \"AM North\")].RouteServe\r\n  let rtcheckCarltonToPrado = routes[routes.findIndex(rt => rt.routeName === \"Carlton to Prado\")].RouteServe\r\n  if (rtcheckNorthRun.includes(order.zone) || rtcheckCarltonToPrado.includes(order.zone)){\r\n    routeDepart = \"Carlton\"\r\n  }\r\n  if (rtcheckCarltonToPrado.includes(order.zone)){\r\n    route = \"Carlton to Prado\"\r\n  }\r\n  \r\n \r\n\r\n  let routeStart = 5.5\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n    bakedWhere: ind.bakedWhere,\r\n    packGroup: ind.packGroup,\r\n    routeDepart: routeDepart,\r\n    route: route,\r\n    routeStart: routeStart\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport const addDelivQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n\r\n\r\nexport const addPocketsQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake && full.atownPick === true)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const addCroixBakedAndFrozen = (croix, fullOrdersTomorrow) => {\r\n  return\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\utils.js",["847","848","849"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, products, customers))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addSetOut = (\r\n  make,\r\n  fullTwoDay,\r\n  fullOrdersTomorrow,\r\n  routes,\r\n  loc\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccTomorrow = 0;\r\n\r\n  let availableRoutes = routes.filter((rt) => rt.RouteDepart === loc);\r\n\r\n  let qtyTomorrow = fullOrdersTomorrow\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        checkZone(full, availableRoutes) === true\r\n    )\r\n    .map((ord) => ord.qty);\r\n  if (qtyTomorrow.length > 0) {\r\n    qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n\r\n    make.qty = qtyAccTomorrow;\r\n  }\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst checkZone = (full, availableRoutes) => {\r\n  for (let av of availableRoutes) {\r\n    if (av.RouteServe.includes(full.zone)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst update = (order, products, customers) => {\r\n    let atownPick = \"atownpick\";\r\n    let ind =\r\n      products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n    try {\r\n      let custInd =\r\n        customers[\r\n          customers.findIndex((cust) => cust.custName === order.custName)\r\n        ];\r\n      atownPick = custInd.zoneName;\r\n    } catch {\r\n      atownPick = \"atownpick\";\r\n    }\r\n  \r\n    let pick = false;\r\n    if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n      pick = true;\r\n    }\r\n  \r\n    let toAdd = {\r\n      forBake: ind.forBake,\r\n      packSize: ind.packSize,\r\n      currentStock: ind.currentStock,\r\n      batchSize: ind.batchSize,\r\n      bakeExtra: ind.bakeExtra,\r\n      readyTime: ind.readyTime,\r\n      zone: atownPick,\r\n      atownPick: pick,\r\n    };\r\n  \r\n    return toAdd;\r\n  };\r\n  \r\n",["850","851"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js",["852","853","854"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, products, customers))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addFresh = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n  let qtyAccTomorrow = 0;\r\n  let guaranteeTimeToday = Number(\r\n    products[products.findIndex((prod) => prod.forBake === make.forBake)]\r\n      .readyTime\r\n  );\r\n  let availableRoutesToday = routes.filter(\r\n    (rt) =>\r\n      (rt.RouteDepart === \"Prado\") &\r\n        (Number(rt.routeStart) > guaranteeTimeToday) ||\r\n      rt.routeName === \"Pick up SLO\"\r\n  );\r\n  let availableRoutesTomorrow = routes.filter(\r\n    (rt) => rt.RouteDepart === \"Carlton\"\r\n  );\r\n\r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        full.atownPick !== true &&\r\n        checkZone(full, availableRoutesToday) === true\r\n    )\r\n    .map((ord) => ord.qty * ord.packSize);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n\r\n  let qtyTomorrow = fullOrdersTomorrow\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        full.atownPick !== true &&\r\n        checkZone(full, availableRoutesTomorrow) === true\r\n    )\r\n    .map((ord) => ord.qty * ord.packSize);\r\n\r\n  if (qtyTomorrow.length > 0) {\r\n    qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n  }\r\n\r\n  make.qty = qtyAccToday;\r\n  make.makeTotal = qtyAccToday + qtyAccTomorrow;\r\n  make.bagEOD = qtyAccTomorrow;\r\n};\r\n\r\nexport const addNeedEarly = (make, products) => {\r\n  let curr = products\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.currentStock * ord.packSize);\r\n\r\n  if (curr.length > 0) {\r\n    let currAcc = curr.reduce(addUp);\r\n    make.needEarly -= currAcc;\r\n    make.makeTotal -= currAcc;\r\n  }\r\n  if (make.needEarly < 0) {\r\n    make.needEarly = 0;\r\n  }\r\n  if (make.makeTotal < 0) {\r\n    make.makeTotal = 0;\r\n  }\r\n  let batchSize =\r\n    products[products.findIndex((prod) => prod.forBake === make.forBake)]\r\n      .batchSize;\r\n\r\n  if (batchSize > 0) {\r\n    let num = Math.ceil(Number(make.makeTotal) / Number(batchSize));\r\n    make.makeTotal = num * Number(batchSize);\r\n  }\r\n};\r\n\r\nexport const addShelf = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n\r\n  let qtyAccToday = 0;\r\n  let qtyAccTomorrow = 0;\r\n\r\n  let qtyToday = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n\r\n    let qtyTomorrow = fullOrdersTomorrow\r\n      .filter((full) => make.forBake === full.forBake)\r\n      .map((ord) => ord.qty * ord.packSize);\r\n\r\n    if (qtyTomorrow.length > 0) {\r\n      qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n    }\r\n\r\n    make.qty = qtyAccToday;\r\n    make.needEarly = qtyAccToday;\r\n    make.makeTotal = qtyAccTomorrow + qtyAccToday;\r\n  }\r\n};\r\n\r\nconst update = (order, products, customers) => {\r\n  let atownPick = \"atownpick\";\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\nconst freshProdFilter = (prod) => {\r\n  let fil =\r\n    !prod.bakedWhere.includes(\"Carlton\") &&\r\n    Number(prod.readyTime) < 15 &&\r\n    prod.packGroup !== \"frozen pastries\" &&\r\n    prod.packGroup !== \"baked pastries\";\r\n  return fil;\r\n};\r\n\r\nconst makeProds = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.forBake))\r\n  ).map((make) => ({\r\n    forBake: make,\r\n    qty: 0,\r\n    makeTotal: 0,\r\n    bagEOD: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nexport const buildMakeFreshProdTemplate = (products) => {\r\n  let makeFreshProds;\r\n  makeFreshProds = makeProds(products, freshProdFilter);\r\n\r\n  return makeFreshProds;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport const addDelivQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n\r\nconst checkZone = (full, availableRoutes) => {\r\n  for (let av of availableRoutes) {\r\n    if (av.RouteServe.includes(full.zone)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const addPocketsQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake && full.atownPick === true)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["855","856","857","858"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport TrashCan from \"./BuildCurrentCartListParts/TrashCan\";\r\nimport Product from \"./BuildCurrentCartListParts/Product\";\r\nimport Previous from \"./BuildCurrentCartListParts/Previous\"\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { buildCurrentOrder } from \"../../../../helpers/CartBuildingHelpers\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 0.5fr 3fr 0.5fr 0.5fr;\r\n  row-gap: 4px;\r\n  flex-shrink: 1;\r\n`;\r\nconst TrashCanContainer = styled.div`\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst BuildCurrentCartList = ({ database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    ponote,\r\n    route,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const {\r\n    reload,\r\n    setModifications\r\n  } = useContext(ToggleContext)\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      if (chosen !== \"  \") {\r\n        let currentOrderList = buildCurrentOrder(\r\n          chosen,\r\n          delivDate,\r\n          orders,\r\n          standing,\r\n          route,\r\n          ponote\r\n        );\r\n       \r\n        for (let curr in currentOrderList){\r\n          if (curr.SO !== curr.qty){\r\n            setModifications(true)\r\n          }\r\n        }\r\n        setCurrentCartList(currentOrderList);\r\n       \r\n      }\r\n    }\r\n  }, [chosen, delivDate, orders, standing, reload]);\r\n\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label></label>\r\n        <label>PRODUCT</label>\r\n        <label>QTY</label>\r\n        <label>PREV</label>\r\n        {currentCartList.filter(curr => curr.qty !==0).map((order) => (\r\n          <React.Fragment key={uuidv4() + \"b\"}>\r\n            <TrashCanContainer>\r\n              <TrashCan order={order} database={database} setDatabase={setDatabase} />\r\n            </TrashCanContainer>\r\n\r\n            <Product order={order} database={database} setDatabase={setDatabase}/>\r\n            <Previous order={order}/>\r\n              \r\n          </React.Fragment>\r\n        ))}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentCartList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["859","860","861","862","863"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  font-size: 1em;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-self: center;\r\n  row-gap: 10px;\r\n`;\r\nconst StandInput = styled.input`\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  width: 80%;\r\n`;\r\n\r\nconst entryNotZero = {\r\n  fontSize: \"1.1em\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst entryZero = {\r\n  fontSize: \"1em\",\r\n  fontWeight: \"normal\",\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst BuildCurrentStandingList = ({ database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { setStandList, setModifications } = useContext(ToggleContext);\r\n  const { chosen, standArray, setStandArray } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let Stand = standing.filter((stand) => stand[\"custName\"] === chosen);\r\n    if (Stand.length > 0) {\r\n      Stand = Stand[0][\"isStand\"];\r\n    } else {\r\n      Stand = true;\r\n    }\r\n\r\n    setStandList(Stand);\r\n    let buildStandArray = standing.filter(\r\n      (stand) => stand[\"isStand\"] === Stand && stand[\"custName\"] === chosen\r\n    );\r\n\r\n    setStandArray(buildStandArray);\r\n    \r\n  }, [chosen, standing]);\r\n\r\n  const handleRemove = (index) => {\r\n    let ind = standArray.findIndex((stand) => stand[\"prodName\"] === index);\r\n    let adjustedStanding = clonedeep(standArray);\r\n    adjustedStanding[ind][\"Sun\"] = 0;\r\n    adjustedStanding[ind][\"Mon\"] = 0;\r\n    adjustedStanding[ind][\"Tue\"] = 0;\r\n    adjustedStanding[ind][\"Wed\"] = 0;\r\n    adjustedStanding[ind][\"Thu\"] = 0;\r\n    adjustedStanding[ind][\"Fri\"] = 0;\r\n    adjustedStanding[ind][\"Sat\"] = 0;\r\n    setStandArray(adjustedStanding);\r\n    setModifications(true)\r\n    \r\n  };\r\n\r\n  const handleQtyModify = (e, qty) => {\r\n    if (isNaN(e.target.value)) {\r\n      e.target.value = null;\r\n      swal({\r\n        text: \"Only Numbers Please\",\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    }\r\n    let day = e.target.dataset.day;\r\n    let prod = e.target.name;\r\n    let arrayToModify = clonedeep(standArray);\r\n    let ind = arrayToModify.findIndex((array) => array[\"prodName\"] === prod);\r\n    arrayToModify[ind][day] = qty;\r\n\r\n    setStandArray(arrayToModify);\r\n\r\n   \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label>PRODUCT</label>\r\n        <label>S</label>\r\n        <label>M</label>\r\n        <label>T</label>\r\n        <label>W</label>\r\n        <label>T</label>\r\n        <label>F</label>\r\n        <label>S</label>\r\n        <label></label>\r\n        {standArray\r\n          ? standArray.map((order) => (\r\n              <React.Fragment key={order[\"prodName\"] + \"frag\"}>\r\n                <label key={order[\"prodName\"] + \"prod\"}>\r\n                  {order[\"prodName\"]}\r\n                </label>\r\n\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sun\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sun\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_1\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sun\"]}\r\n                  data-day=\"Sun\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = null;\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Mon\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Mon\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_2\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Mon\"]}\r\n                  data-day=\"Mon\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Tue\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Tue\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_3\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Tue\"]}\r\n                  data-day=\"Tue\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Wed\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Wed\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_4\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Wed\"]}\r\n                  data-day=\"Wed\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Thu\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Thu\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_5\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Thu\"]}\r\n                  data-day=\"Thu\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Fri\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Fri\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_6\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Fri\"]}\r\n                  data-day=\"Fri\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sat\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sat\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_7\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sat\"]}\r\n                  data-day=\"Sat\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n\r\n                <Button\r\n                  icon=\"pi pi-trash\"\r\n                  className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                  key={order[\"prodName\"] + \"rem\"}\r\n                  name={order[\"prodName\"]}\r\n                  onClick={(e) => handleRemove(order[\"prodName\"])}\r\n                ></Button>\r\n              </React.Fragment>\r\n            ))\r\n          : \"\"}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentStandingList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js",["864"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport { fetchInfo } from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { listHeldforWeeklyInvoicings } from \"../../../graphql/queries\";\r\n\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst SelectDate = ({\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n}) => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n\r\n  const [pickedCustomer, setPickedCustomer] = useState();\r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n  };\r\n\r\n  const handleAddCustomer = (e) => {\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let dateSplit = delivDate.split(\"-\");\r\n    let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n    invToModify.push({\r\n      custName: e.target.value,\r\n      invNum: newDate+customers[customers.findIndex(cst => cst.custName===e.target.value)].nickName,\r\n      orders: [],\r\n    });\r\n    setDailyInvoices(invToModify);\r\n    setPickedCustomer(\"\");\r\n  };\r\n\r\n  const exportCSV = async () => {\r\n    \r\n  \r\n    let data = [];\r\n    for (let inv of dailyInvoices) {\r\n      for (let ord of inv.orders) {\r\n       \r\n        let ddate = convertDatetoBPBDate(delivDate);\r\n        let dueDate = convertDatetoBPBDate(\r\n          DateTime.now()\r\n            .setZone(\"America/Los_Angeles\")\r\n            .plus({ days: 15 })\r\n            .toString()\r\n            .split(\"T\")[0]\r\n        );\r\n        let custIndex = customers.findIndex(\r\n          (cust) => cust[\"custName\"] === inv[\"custName\"]\r\n        );\r\n        let BillAddrLine1 = customers[custIndex].addr1;\r\n        let BillAddrLine2 = customers[custIndex].addr2;\r\n        let BillAddrCity = customers[custIndex].city;\r\n        let PostalCode = customers[custIndex].zip;\r\n        let ponote;\r\n        try {\r\n          ponote =\r\n            orders[\r\n              orders.findIndex(\r\n                (order) =>\r\n                  order.delivDate === delivDate &&\r\n                  order.custName === ord.custName\r\n              )\r\n            ].PONote;\r\n        } catch {\r\n          ponote = \"na\";\r\n        }\r\n\r\n        let newEntry = [\r\n          inv.invNum,\r\n          inv.custName,\r\n          ddate,\r\n          dueDate,\r\n          ddate,\r\n          \"net15\",\r\n          \"Wholesale\",\r\n          BillAddrLine1,\r\n          BillAddrLine2,\r\n          \"\",\r\n          BillAddrCity,\r\n          \"CA\",\r\n          PostalCode,\r\n          ponote,\r\n          true,\r\n          ord.prodName,\r\n          ord.prodName,\r\n          ord.qty,\r\n          ord.rate,\r\n          \"Y\",\r\n        ];\r\n        data.push(newEntry);\r\n      }\r\n    }\r\n\r\n    let todayDay = DateTime.now().setZone(\"America/Los_Angeles\").weekdayLong;\r\n\r\n    if (todayDay === \"Thursday\") {\r\n      let weeklyInfo = await fetchInfo(\r\n        listHeldforWeeklyInvoicings,\r\n        \"listHeldforWeeklyInvoicings\",\r\n        \"1000\"\r\n      );\r\n\r\n      let custSet = weeklyInfo.map((week) => week.custName);\r\n      custSet = new Set(custSet);\r\n      let custArray = Array.from(custSet);\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      custArray = custArray.map((cust) => ({\r\n        custName: cust,\r\n        invNum: newDate+customers[customers.findIndex(cst => cst.custName===cust)].nickName,\r\n      }));\r\n      let weeklyOrders = [];\r\n      for (let cust of custArray) {\r\n        let newOrders = [];\r\n        for (let inv of weeklyInfo) {\r\n          if (inv.custName === cust.custName) {\r\n            let newOrder = {\r\n              prodName: inv.prodName,\r\n              qty: inv.qty,\r\n              rate: inv.rate,\r\n              fullDate: inv.delivDate,\r\n            };\r\n            newOrders.push(newOrder);\r\n          }\r\n        }\r\n\r\n        let newCust = {\r\n          custName: cust.custName,\r\n          invNum: cust.invNum,\r\n          orders: newOrders,\r\n        };\r\n        weeklyOrders.push(newCust);\r\n      }\r\n      for (let inv of weeklyOrders) {\r\n        for (let ord of inv.orders) {\r\n        \r\n          let ddate = convertDatetoBPBDate(delivDate);\r\n          let fullDate=convertDatetoBPBDate(ord.fullDate)\r\n          let dueDate = convertDatetoBPBDate(\r\n            DateTime.now()\r\n              .setZone(\"America/Los_Angeles\")\r\n              .plus({ days: 15 })\r\n              .toString()\r\n              .split(\"T\")[0]\r\n          );\r\n          let custIndex = customers.findIndex(\r\n            (cust) => cust[\"custName\"] === inv[\"custName\"]\r\n          );\r\n          let BillAddrLine1 = customers[custIndex].addr1;\r\n          let BillAddrLine2 = customers[custIndex].addr2;\r\n          let BillAddrCity = customers[custIndex].city;\r\n          let PostalCode = customers[custIndex].zip;\r\n          let ponote;\r\n          try {\r\n            ponote =\r\n              orders[\r\n                orders.findIndex(\r\n                  (order) =>\r\n                    order.delivDate === delivDate &&\r\n                    order.custName === ord.custName\r\n                )\r\n              ].PONote;\r\n          } catch {\r\n            ponote = \"na\";\r\n          }\r\n  \r\n          let newEntry = [\r\n            inv.invNum,\r\n            inv.custName,\r\n            ddate,\r\n            dueDate,\r\n            fullDate,\r\n            \"net15\",\r\n            \"Wholesale\",\r\n            BillAddrLine1,\r\n            BillAddrLine2,\r\n            \"\",\r\n            BillAddrCity,\r\n            \"CA\",\r\n            PostalCode,\r\n            ponote,\r\n            true,\r\n            ord.prodName,\r\n            ord.prodName,\r\n            ord.qty,\r\n            ord.rate,\r\n            \"Y\",\r\n          ];\r\n        \r\n          data.push(newEntry);\r\n         \r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    var csv =\r\n      \"RefNumber,Customer,TxnDate,DueDate,ShpDate,SalesTerm,Class,BillAddrLine1,BillAddrLine2,BillAddrLine3,BillAddrCity,BillAddrState,BillAddrPostalCode,Msg,AllowOnlineACHPayment,LineItem,LineDescrip,LineQty,LineUnitPrice,LineTaxable\\n\";\r\n    data.forEach(function (row) {\r\n      csv += row.join(\",\");\r\n      csv += \"\\n\";\r\n    });\r\n    \r\n    \r\n    var hiddenElement = document.createElement(\"a\");\r\n    hiddenElement.href = \"data:text/csv;charset=utf-8,\" + encodeURI(csv);\r\n    hiddenElement.target = \"_blank\";\r\n    hiddenElement.download = `${delivDate}invoiceExport.csv`;\r\n    hiddenElement.click();\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <div className=\"p-field p-col-12 p-md-4\">\r\n          <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n          <Calendar\r\n            id=\"delivDate\"\r\n            placeholder={convertDatetoBPBDate(delivDate)}\r\n            disabled\r\n            dateFormat=\"mm/dd/yy\"\r\n            onChange={(e) => setDate(e.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button value={pickedCustomer} onClick={(e) => handleAddCustomer(e)}>\r\n            ADD CUSTOMER +\r\n          </Button>\r\n\r\n          <Dropdown\r\n            optionLabel=\"custName\"\r\n            options={customers}\r\n            placeholder={pickedCustomer}\r\n            name=\"customers\"\r\n            value={pickedCustomer}\r\n            onChange={(e) => setPickedCustomer(e.target.value.custName)}\r\n          />\r\n        </div>\r\n       \r\n        <Button className=\"p-button-success\" onClick={exportCSV}>\r\n          EXPORT CSV\r\n        </Button>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectDate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\WeeklyBillingGrid.js",["865","866","867"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  buildCustList,\r\n  buildInvList,\r\n  attachInvoiceOrders,\r\n  fetchInfo,\r\n} from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { ExpandedWeeklyRows } from \"./Parts/ExpandedWeeklyRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { listHeldforWeeklyInvoicings } from \"../../../graphql/queries\";\r\nimport { createHeldforWeeklyInvoicing } from \"../../../graphql/mutations\";\r\n\r\nconst WeeklyBillingGrid = ({\r\n  altPricing,\r\n  nextInv,\r\n  weeklyInvoices,\r\n  setWeeklyInvoices,\r\n  zones,\r\n}) => {\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n  const [ weeklyLoaded, setWeeklyLoaded ] = useState(false)\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { readyForWeekly, setReadyForWeekly, setIsLoading } = useContext(\r\n    ToggleContext\r\n  );\r\n\r\n  useEffect(()=> {\r\n    if(!weeklyLoaded){\r\n    addOrdersToDB(weeklyInvoices)\r\n  }\r\n  },[weeklyInvoices])\r\n\r\n  useEffect(() => {\r\n    try{\r\n      if (\r\n        orders.length>0 &&\r\n        standing.length>0 &&\r\n        customers.length>0 &&\r\n        products.length>0){\r\n          setReadyForWeekly(true)\r\n        }\r\n\r\n\r\n    } catch {\r\n      console.log(\"Not ready for weeklies\")\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n      let buildStand = buildStandList(\"*\", delivDate, standing);\r\n      let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n      let custListArray = buildCustList(fullOrder);\r\n      let invList = buildInvList(custListArray, customers, delivDate);\r\n      let invOrders = attachInvoiceOrders(\r\n        invList,\r\n        fullOrder,\r\n        products,\r\n        altPricing,\r\n        customers,\r\n        zones,\r\n        \"weekly\"\r\n      );\r\n      setWeeklyInvoices(invOrders);\r\n      \r\n      setIsLoading(true);\r\n    } catch {\r\n      console.log(\"Trouble building invOrders\");\r\n    }\r\n  }, [readyForWeekly]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    try {\r\n      let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === pickedProduct)\r\n        ].wholePrice;\r\n\r\n      setPickedRate(ratePull);\r\n    } catch {\r\n      console.log(\"no product chosen\");\r\n    }\r\n  }, [pickedProduct]);\r\n\r\n  const addOrdersToDB = async (invOrders) => {\r\n    setIsLoading(true)\r\n    \r\n    let thisWeeksOrders;\r\n    // fetch thisWeeksOrders\r\n    try {\r\n      thisWeeksOrders = await fetchInfo(\r\n        listHeldforWeeklyInvoicings,\r\n        \"listHeldforWeeklyInvoicings\",\r\n        \"1000\"\r\n      );\r\n      \r\n      for (let inv of invOrders) {\r\n    \r\n      \r\n\r\n        if (\r\n          thisWeeksOrders.findIndex(\r\n            (ord) =>\r\n              ord[\"delivDate\"] === delivDate &&\r\n              ord[\"custName\"] === inv[\"custName\"] &&\r\n              inv[\"custName\"] !== \"\"\r\n          ) < 0\r\n        ) {\r\n          for (let ord of inv.orders) {\r\n            let newWeeklyOrder = {\r\n              custName: inv[\"custName\"],\r\n              delivDate: delivDate,\r\n              prodName: ord[\"prodName\"],\r\n              qty: ord[\"qty\"],\r\n              rate: ord[\"rate\"],\r\n            };\r\n            thisWeeksOrders.push(newWeeklyOrder);\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(createHeldforWeeklyInvoicing, {\r\n                  input: { ...newWeeklyOrder },\r\n                })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on creating Orders\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Filter delivDate back to last Monday\r\n\r\n        let custStart = thisWeeksOrders.map((ord) => ord[\"custName\"]);\r\n        custStart = new Set(custStart);\r\n        custStart = Array.from(custStart);\r\n        let addDeliv = custStart.map((cust) => ({\r\n          custName: cust,\r\n          delivDate: [],\r\n        }));\r\n\r\n        for (let cust of custStart) {\r\n          for (let ord of thisWeeksOrders) {\r\n            if (ord.custName === cust) {\r\n              if (\r\n                !addDeliv[\r\n                  addDeliv.findIndex((add) => add.custName === cust)\r\n                ].delivDate.includes(ord.delivDate)\r\n              ) {\r\n                addDeliv[\r\n                  addDeliv.findIndex((add) => add.custName === cust)\r\n                ].delivDate.push(ord.delivDate);\r\n              }\r\n            }\r\n          }\r\n          let reformatted = addDeliv[\r\n            addDeliv.findIndex((add) => add.custName === cust)\r\n          ].delivDate.map((dt) => ({ delivDate: dt, orders: [] }));\r\n          addDeliv[\r\n            addDeliv.findIndex((add) => add.custName === cust)\r\n          ].delivDate = reformatted;\r\n        }\r\n\r\n        for (let ord of thisWeeksOrders) {\r\n          let ordToAdd = {\r\n            prodName: ord.prodName,\r\n            qty: ord.qty,\r\n            rate: ord.rate,\r\n          };\r\n          let custInd = addDeliv.findIndex(\r\n            (add) => add.custName === ord.custName\r\n          );\r\n          let delivInd = addDeliv[custInd].delivDate.findIndex(\r\n            (deliv) => deliv.delivDate === ord.delivDate\r\n          );\r\n          let check = addDeliv[custInd].delivDate[delivInd].orders.map(\r\n            (item) => item.prodName\r\n          );\r\n          if (!check.includes(ord.prodName)) {\r\n            addDeliv[custInd].delivDate[delivInd].orders.push(ordToAdd);\r\n          }\r\n        }\r\n\r\n        setIsLoading(false);\r\n        setWeeklyInvoices(addDeliv);\r\n        setWeeklyLoaded(true)\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error on fetching listHeldforWeeklyInvoicings List\", error);\r\n    }\r\n  };\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedWeeklyRows\r\n        data={data}\r\n        weeklyInvoices={weeklyInvoices}\r\n        setWeeklyInvoices={setWeeklyInvoices}\r\n        products={products}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={weeklyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"custName\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(e.invNum, weeklyInvoices, setWeeklyInvoices)\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeeklyBillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js",["868","869"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  buildCustList,\r\n  buildInvList,\r\n  attachInvoiceOrders,\r\n  formatter,\r\n} from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { ExpandedBillingRows } from \"./Parts/ExpandedBillingRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nconst BillingGrid = ({\r\n  altPricing,\r\n  nextInv,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  zones,\r\n}) => {\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n      let buildStand = buildStandList(\"*\", delivDate, standing);\r\n      let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n      let custListArray = buildCustList(fullOrder);\r\n      let invList = buildInvList(custListArray, customers, delivDate);\r\n      let invOrders = attachInvoiceOrders(\r\n        invList,\r\n        fullOrder,\r\n        products,\r\n        altPricing,\r\n        customers,\r\n        zones,\r\n        \"daily\"\r\n      );\r\n\r\n      setDailyInvoices(invOrders);\r\n    } catch {\r\n      console.log(\"Whoops\");\r\n    }\r\n  }, [delivDate, orders, standing, nextInv, zones]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === pickedProduct)\r\n        ].wholePrice;\r\n\r\n      setPickedRate(ratePull);\r\n    } catch {\r\n      console.log(\"no product chosen\");\r\n    }\r\n  }, [pickedProduct]);\r\n\r\n  const calcSumTotal = (data) => {\r\n    let sum = 0;\r\n    try {\r\n      for (let i of data) {\r\n        sum = sum + Number(i.qty) * Number(i.rate);\r\n      }\r\n    } catch {\r\n      console.log(\"No data to calc.\");\r\n    }\r\n    sum = formatter.format(sum);\r\n\r\n    return <div>{sum}</div>;\r\n  };\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedBillingRows\r\n        data={data}\r\n        dailyInvoices={dailyInvoices}\r\n        setDailyInvoices={setDailyInvoices}\r\n        products={products}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={dailyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"invNum\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n          <Column field=\"invNum\" header=\"Invoice#\" />\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n          <Column header=\"total\" body={(e) => calcSumTotal(e.orders)} />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(e.invNum, dailyInvoices, setDailyInvoices)\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyOrdersRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js",["870","871","872","873","874","875","876","877","878","879","880","881","882","883","884"],"import {\r\n    todayPlus,\r\n  } from \"../../../helpers/dateTimeHelpers\";\r\n  import {\r\n    createColumns,\r\n    zerosDelivFilter,\r\n    buildGridOrderArray,\r\n  } from \"../../../helpers/delivGridHelpers\";\r\n  \r\n  import { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n  \r\n  import { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n  import {\r\n    calcDayNum,\r\n    routeRunsThatDay,\r\n    productCanBeInPlace,\r\n    productReadyBeforeRouteStarts,\r\n    customerIsOpen,\r\n  } from \"../ByRoute/Parts/utils/utils\";\r\n \r\n  let today = todayPlus()[0];\r\n  \r\n  const addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n    for (let rte of routes) {\r\n      for (let grd of prodGrid) {\r\n        let dayNum = calcDayNum(delivDate);\r\n  \r\n        if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n          continue;\r\n        } else {\r\n          if (\r\n            routeRunsThatDay(rte, dayNum) &&\r\n            productCanBeInPlace(grd, routes, customers, rte) &&\r\n            productReadyBeforeRouteStarts(\r\n              products,\r\n              customers,\r\n              routes,\r\n              grd,\r\n              rte\r\n            ) &&\r\n            customerIsOpen(customers, grd, routes, rte)\r\n          ) {\r\n            grd.route = rte.routeName;\r\n            grd.routeDepart = rte.RouteDepart;\r\n            grd.routeStart = rte.routeStart;\r\n            grd.routeServe = rte.RouteServe;\r\n            grd.routeArrive = rte.RouteArrive;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let grd of prodGrid) {\r\n      if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"deliv\") {\r\n        grd.route = \"NOT ASSIGNED\";\r\n      }\r\n    }\r\n  \r\n    return prodGrid;\r\n  };\r\n  \r\n  const getProdNickNames = (delivDate, database, filt) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let fullNames = Array.from(\r\n      new Set(fullOrder.filter((fu) => filt(fu)).map((fil) => fil.prodName))\r\n    );\r\n    let nickNames = fullNames.map(\r\n      (fil) =>\r\n        products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n    );\r\n    return nickNames;\r\n  };\r\n  \r\n  const getCustNames = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    return Array.from(\r\n      new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.custName))\r\n    );\r\n  };\r\n  \r\n  \r\n  const makeOrders = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodNames = getProdNickNames(delivDate, database, filter);\r\n    let custNames = getCustNames(delivDate, database, filter);\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let orderArray = [];\r\n    for (let cust of custNames) {\r\n      let custItem = {};\r\n      custItem = {\r\n        customer: cust,\r\n      };\r\n      for (let prod of prodNames) {\r\n        let prodFullName =\r\n          products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n        try {\r\n          custItem[prod] =\r\n            fullOrder[\r\n              fullOrder.findIndex(\r\n                (ord) => ord.prodName === prodFullName && ord.custName === cust\r\n              )\r\n            ].qty;\r\n        } catch {\r\n          custItem[prod] = null;\r\n        }\r\n      }\r\n      orderArray.push(custItem);\r\n    }\r\n    return orderArray;\r\n  };\r\n  \r\n \r\n  export default class ComposeAMPastry {\r\n    returnAMPastryBreakDown = (delivDate, database) => {\r\n      let AMPastry = this.returnAMPastry(database);\r\n      \r\n      let columnsAMPastry = this.returnColumnsAMPastry(\r\n        delivDate,\r\n        database\r\n      );\r\n\r\n      let AMOthers = this.returnAMOthers(database);\r\n      \r\n      let columnsAMOthers = this.returnColumnsAMOthers(\r\n        delivDate,\r\n        database\r\n      );\r\n  \r\n      // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n  \r\n      return {\r\n        AMPastry: AMPastry,\r\n        columnsAMPastry: columnsAMPastry,\r\n        AMOthers: AMOthers,\r\n        columnsAMOthers: columnsAMOthers\r\n      };\r\n    };\r\n  \r\n    \r\n  \r\n    \r\n    returnAMPastry = (database) => {\r\n      let shelfProds = makeOrders(today, database, this.AMPastryFilter);\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMPastryFilter = (ord) => {\r\n      return (\r\n        (ord.where.includes(\"Mixed\") || ord.where.includes(\"Prado\")) &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMPastry = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMPastryFilter\r\n      );\r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n    returnAMOthers = (database) => {\r\n      let custos = makeOrders(today, database, this.AMPastryFilter);\r\n      custos = Array.from(new Set(custos.map(cust => cust.customer)))\r\n      let shelfProds = makeOrders(today, database, this.AMOthersFilter);\r\n      console.log(shelfProds)\r\n      shelfProds = shelfProds.filter(shelf => custos.includes(shelf.customer))\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMOthersFilter = (ord) => {\r\n      return (\r\n        \r\n        ord.packGroup !== \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMOthers = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMOthersFilter\r\n      );\r\n      console.log(filteredOrders)\r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n\r\n  }\r\n  ","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composePastryPrep.js",["885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\nlet twoDay = todayPlus()[2];\r\nlet threeDay = todayPlus()[3];\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposePastryPrep {\r\n  returnPastryPrepBreakDown = (delivDate, database, loc) => {\r\n    let setOut = this.returnSetOut(delivDate, database, loc);\r\n    let pastryPrep = this.returnPastryPrep(delivDate, database, loc);\r\n    let almondPrep = this.returnAlmondPrep(delivDate, database, loc);\r\n\r\n    return {\r\n      setOut: setOut,\r\n      pastryPrep: pastryPrep,\r\n      almondPrep: almondPrep,\r\n    };\r\n  };\r\n\r\n  returnSetOut = (delivDate, database, loc) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let setOutList = getOrdersList(tomorrow, database);\r\n    let twoDayList = getOrdersList(twoDay, database);\r\n    let threeDayList = getOrdersList(threeDay, database);\r\n    let setOutToday = setOutList.filter((set) => this.setOutFilter(set, loc));\r\n    let twoDayToday = twoDayList.filter((set) =>\r\n      this.twoDayFrozenFilter(set, loc)\r\n    );\r\n    let threeDayToday = threeDayList.filter((set) =>\r\n      this.threeDayAlFilter(set, loc)\r\n    );\r\n\r\n    setOutToday = this.makeAddQty(setOutToday);\r\n    let twoDayPlains = this.makeAddQty(twoDayToday);\r\n    let threeDayPlains = this.makeAddQty(threeDayToday);\r\n    let twoDayFreeze = 0;\r\n    let threeDayFreeze = 0;\r\n    try {\r\n      twoDayFreeze = twoDayPlains[0].qty\r\n    } catch {\r\n      twoDayFreeze = 0;\r\n    }\r\n    try {\r\n      threeDayFreeze = threeDayPlains[0].qty\r\n    } catch {\r\n      threeDayFreeze = 0;\r\n    }\r\n  \r\n    if (loc === \"Prado\") {\r\n      setOutToday[setOutToday.findIndex((set) => set.prodNick === \"pl\")].qty +=\r\n      twoDayFreeze + threeDayFreeze;\r\n    }\r\n    return setOutToday;\r\n  };\r\n\r\n  setOutFilter = (ord, loc) => {\r\n    return (\r\n      ord.routeDepart === loc &&\r\n      ord.packGroup === \"baked pastries\" &&\r\n      ord.prodNick !== \"al\" &&\r\n      ord.doughType === \"Croissant\"\r\n    );\r\n  };\r\n\r\n  twoDayFrozenFilter = (ord, loc) => {\r\n    return ord.prodNick === \"fral\";\r\n  };\r\n\r\n  threeDayAlFilter = (ord, loc) => {\r\n    return ord.routeDepart === \"Carlton\" && ord.prodNick === \"al\";\r\n  };\r\n\r\n  returnPastryPrep = (delivDate, database, loc) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let setOutList = getOrdersList(tomorrow, database);\r\n    let setOutToday = setOutList.filter((set) =>\r\n      this.pastryPrepFilter(set, loc)\r\n    );\r\n    setOutToday = this.makeAddQty(setOutToday);\r\n\r\n   \r\n    return setOutToday;\r\n  };\r\n\r\n  pastryPrepFilter = (ord, loc) => {\r\n    return (\r\n      (ord.where.includes(loc) &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.doughType !== \"Croissant\") ||\r\n      (ord.where.includes(\"Mixed\") &&\r\n        ord.routeDepart === loc &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.doughType !== \"Croissant\")\r\n    );\r\n  };\r\n\r\n  returnAlmondPrep = (delivDate, database, loc) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let setOutList = getOrdersList(tomorrow, database);\r\n    let twoDayList = getOrdersList(twoDay, database);\r\n    let threeDayList = getOrdersList(threeDay, database);\r\n    let setOutToday = setOutList.filter((set) => this.setOutFilter(set, loc));\r\n    let twoDayToday = twoDayList.filter((set) =>\r\n      this.twoDayFrozenFilter(set, loc)\r\n    );\r\n    let threeDayToday = threeDayList.filter((set) =>\r\n      this.threeDayAlFilter(set, loc)\r\n    );\r\n\r\n    setOutToday = this.makeAddQty(setOutToday);\r\n    let twoDayPlains = this.makeAddQty(twoDayToday);\r\n    let threeDayPlains = this.makeAddQty(threeDayToday);\r\n    let twoDayFreeze = 0;\r\n    let threeDayFreeze = 0;\r\n    try {\r\n      twoDayFreeze = twoDayPlains[0].qty\r\n    } catch {\r\n      twoDayFreeze = 0;\r\n    }\r\n    try {\r\n      threeDayFreeze = threeDayPlains[0].qty\r\n    } catch {\r\n      threeDayFreeze = 0;\r\n    }\r\n    let freezerAmt = twoDayFreeze + threeDayFreeze\r\n    let newAlmondList = [\r\n      {\r\n        prodNick: \"fridge\",\r\n        qty: setOutToday[0].qty,\r\n      },\r\n      { prodNick: \"freezer\", qty: freezerAmt },\r\n    ];\r\n    return newAlmondList;\r\n  };\r\n\r\n  almondPrepFilter = (ord, loc) => {\r\n    return ord.prodNick === \"al\";\r\n  };\r\n\r\n  almondFridgePrepFilter = (ord, loc) => {\r\n    return (\r\n      ord.prodNick === \"al\" &&\r\n      ord.routeDepart === \"Prado\"\r\n    )\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.prodNick))\r\n    ).map((mk) => ({\r\n      prodNick: mk,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.prodNick === frz.prodNick)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n    console.log(obj1);\r\n    console.log(obj2);\r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject) {\r\n      for (let first of firstObject) {\r\n        if (sec.prodNick === first.prodNick) {\r\n          sec.qty = first.qty;\r\n          continue;\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\" + sec.prodNick;\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToMake.js",["902","903","904","905","906","907","908"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullProdOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullProdOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnWhatToMakeBreakDown = (delivDate, database, loc) => {\r\n    let whatToMake = this.returnWhatToMake(delivDate, database, loc);\r\n    return {\r\n      whatToMake: whatToMake,\r\n      \r\n    };\r\n  };\r\n\r\n  returnWhatToMake = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(tomorrow, database);\r\n    let whatToMakeToday = whatToMakeList.filter((set) => this.whatToMakeFilter(set));\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    console.log(whatToMake)\r\n    \r\n    return whatToMake;\r\n  };\r\n\r\n  whatToMakeFilter = (ord, loc) => {\r\n    return (\r\n      ord.where.includes(\"Carlton\") &&\r\n      (ord.packGroup === \"rustic breads\" || ord.packGroup === \"retail\")\r\n      \r\n    );\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    console.log(\"bakedTomorrow\",bakedTomorrow)\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.forBake))\r\n    ).map((mk) => ({\r\n      forBake: mk,\r\n      dough: '',\r\n      weight: 0,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday * bakedTomorrow[bakedTomorrow.findIndex(baked => baked.forBake === make.forBake)].packSize;\r\n      make.dough = bakedTomorrow[bakedTomorrow.findIndex(baked => baked.forBake === make.forBake)].doughType\r\n      make.weight = bakedTomorrow[bakedTomorrow.findIndex(baked => baked.forBake === make.forBake)].weight\r\n      make.id = bakedTomorrow[bakedTomorrow.findIndex(baked => baked.forBake === make.forBake)].prodID\r\n      \r\n    }\r\n    return makeList2;\r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n    console.log(obj1);\r\n    console.log(obj2);\r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject) {\r\n      for (let first of firstObject) {\r\n        if (sec.prodNick === first.prodNick) {\r\n          sec.qty = first.qty;\r\n          continue;\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\" + sec.prodNick;\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeDough.js",["909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969"],"import {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullProdOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nlet twoDay = todayPlus()[2];\r\nlet oneDay = todayPlus()[1];\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullProdOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeDough {\r\n  returnDoughBreakDown = (delivDate, database, loc) => {\r\n    let doughs = this.returnDoughs(delivDate, database, loc);\r\n    let doughComponents = this.returnDoughComponents(delivDate, database, loc);\r\n    let pockets = this.returnPockets(tomorrow, database, loc);\r\n    let Baker1Dough = this.returnBaker1Doughs(delivDate, database, loc);\r\n    let Baker1DoughComponents = this.returnBaker1DoughComponents(\r\n      delivDate,\r\n      database,\r\n      loc\r\n    );\r\n    let Baker1Pockets = this.returnBaker1Pockets(tomorrow, database, loc);\r\n    let bagAndEpiCount = this.returnbagAndEpiCount(tomorrow, database, loc);\r\n    let oliveCount = this.returnoliveCount(tomorrow, database, loc);\r\n    let bcCount = this.returnbcCount(tomorrow, database, loc);\r\n    let bagDoughTwoDays = this.returnBagDoughTwoDays(twoDay, database, loc);\r\n    return {\r\n      doughs: doughs,\r\n      doughComponents: doughComponents,\r\n      pockets: pockets,\r\n      Baker1Dough: Baker1Dough,\r\n      Baker1DoughComponents: Baker1DoughComponents,\r\n      Baker1Pockets: Baker1Pockets,\r\n      bagAndEpiCount: bagAndEpiCount,\r\n      oliveCount: oliveCount,\r\n      bcCount: bcCount,\r\n      bagDoughTwoDays: bagDoughTwoDays,\r\n    };\r\n  };\r\n\r\n  returnbagAndEpiCount = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(delivDate, database);\r\n\r\n    let whatToMakeToday = whatToMakeList\r\n      .filter((set) => this.whatToMakeFilter(set))\r\n      .filter((bag) => bag.forBake === \"Baguette\" || bag.forBake === \"Epi\");\r\n\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    let qty = 0;\r\n    for (let make of whatToMake) {\r\n      qty += Number(make.qty);\r\n    }\r\n\r\n    return qty;\r\n  };\r\n\r\n  returnoliveCount = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(delivDate, database);\r\n    let whatToMakeToday = whatToMakeList\r\n      .filter((set) => this.whatToMakeFilter(set))\r\n      .filter((bag) => bag.forBake === \"Olive Herb\");\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    let qty = 0;\r\n    for (let make of whatToMake) {\r\n      qty += Number(make.qty);\r\n    }\r\n    return qty;\r\n  };\r\n\r\n  returnbcCount = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(delivDate, database);\r\n    let whatToMakeToday = whatToMakeList\r\n      .filter((set) => this.whatToMakeFilter(set))\r\n      .filter((bag) => bag.forBake === \"Blue Cheese Walnut\");\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    let qty = 0;\r\n    for (let make of whatToMake) {\r\n      qty += Number(make.qty);\r\n    }\r\n    return qty;\r\n  };\r\n\r\n  returnBagDoughTwoDays = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(delivDate, database);\r\n    let whatToMakeToday = whatToMakeList\r\n      .filter((set) => this.whatToMakeFilter(set))\r\n      .filter((bag) => bag.doughType === \"Baguette\");\r\n    let qty = 0;\r\n    for (let make of whatToMakeToday) {\r\n      qty += Number(make.qty * make.weight);\r\n    }\r\n\r\n    return Math.floor(qty / 83);\r\n  };\r\n\r\n  returnPockets = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let pocketList = getOrdersList(tomorrow, database);\r\n    let pocketsToday = pocketList.filter((set) => this.pocketFilter(set, loc));\r\n    pocketsToday = this.makePocketQty(pocketsToday);\r\n\r\n    return pocketsToday;\r\n  };\r\n\r\n  pocketFilter = (ord, loc) => {\r\n    return ord.doughType === \"French\";\r\n  };\r\n\r\n  makePocketQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.weight))\r\n    ).map((mk) => ({\r\n      pocketSize: mk,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.pocketSize === frz.weight)\r\n        .map((ord) => ord.qty * ord.packSize);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  };\r\n\r\n  returnDoughs = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let twoDayOrderList = getOrdersList(twoDay, database);\r\n    let oneDayOrderList = getOrdersList(oneDay, database);\r\n\r\n    let doughList = Array.from(\r\n      new Set(\r\n        doughs\r\n          .filter(\r\n            (dgh) => dgh.mixedWhere === loc && dgh.doughName !== \"Baguette\"\r\n          )\r\n          .map((dgh) => dgh.doughName)\r\n      )\r\n    ).map((dgh) => ({\r\n      doughName: dgh,\r\n      isBakeReady:\r\n        doughs[doughs.findIndex((dg) => dg.doughName === dgh)].isBakeReady,\r\n      oldDough: 0,\r\n      buffer: 0,\r\n      needed: 0,\r\n      batchSize: 0,\r\n    }));\r\n\r\n    for (let dgh of doughList) {\r\n      dgh.id =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].id;\r\n      dgh.hydration =\r\n        doughs[\r\n          doughs.findIndex((d) => d.doughName === dgh.doughName)\r\n        ].hydration;\r\n      dgh.oldDough =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].oldDough;\r\n      dgh.buffer =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].buffer;\r\n      dgh.batchSize =\r\n        doughs[\r\n          doughs.findIndex((d) => d.doughName === dgh.doughName)\r\n        ].batchSize;\r\n      if (dgh.isBakeReady === true) {\r\n        dgh.needed = this.getDoughAmt(dgh.doughName, oneDayOrderList).toFixed(\r\n          2\r\n        );\r\n      } else {\r\n        dgh.needed = this.getDoughAmt(dgh.doughName, twoDayOrderList).toFixed(\r\n          2\r\n        );\r\n      }\r\n    }\r\n    return doughList;\r\n  };\r\n\r\n  returnDoughComponents = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let doughComponentInfo = doughComponents;\r\n    return doughComponentInfo;\r\n  };\r\n\r\n  getDoughAmt = (doughName, orders) => {\r\n    let qtyAccToday = 0;\r\n    let qtyArray = orders\r\n      .filter((ord) => ord.doughType === doughName)\r\n      .map((ord) => ord.qty * ord.weight * ord.packSize);\r\n    if (qtyArray.length > 0) {\r\n      qtyAccToday = qtyArray.reduce(addUp);\r\n    }\r\n    return qtyAccToday;\r\n  };\r\n\r\n  getPreshapedDoughAmt = (doughName, orders) => {\r\n    let qtyAccToday = 0;\r\n    let qtyArray = orders\r\n      .filter((ord) => ord.doughType === doughName)\r\n      .map((ord) => Number(ord.preshaped) * ord.weight * ord.packSize);\r\n    if (qtyArray.length > 0) {\r\n      qtyAccToday = qtyArray.reduce(addUp);\r\n    }\r\n    return qtyAccToday;\r\n  };\r\n\r\n  returnBaker1Pockets = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let pocketList = getOrdersList(tomorrow, database);\r\n    let pocketsToday = pocketList.filter((set) =>\r\n      this.baker1PocketFilter(set, loc)\r\n    );\r\n    pocketsToday = this.makePocketQty(pocketsToday);\r\n\r\n    return pocketsToday;\r\n  };\r\n\r\n  whatToMakeFilter = (ord, loc) => {\r\n    return (\r\n      ord.where.includes(\"Carlton\") &&\r\n      (ord.packGroup === \"rustic breads\" || ord.packGroup === \"retail\")\r\n    );\r\n  };\r\n\r\n  baker1PocketFilter = (ord, loc) => {\r\n    return ord.doughType === \"Baguette\";\r\n  };\r\n\r\n  returnBaker1Doughs = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let twoDayOrderList = getOrdersList(twoDay, database);\r\n    let oneDayOrderList = getOrdersList(oneDay, database);\r\n\r\n    let doughList = Array.from(\r\n      new Set(\r\n        doughs\r\n          .filter(\r\n            (dgh) => dgh.mixedWhere === loc && dgh.doughName === \"Baguette\"\r\n          )\r\n          .map((dgh) => dgh.doughName)\r\n      )\r\n    ).map((dgh) => ({\r\n      doughName: dgh,\r\n      isBakeReady:\r\n        doughs[doughs.findIndex((dg) => dg.doughName === dgh)].isBakeReady,\r\n      oldDough: 0,\r\n      buffer: 0,\r\n      needed: 0,\r\n      batchSize: 0,\r\n      short: 0,\r\n      bucketSets: 0,\r\n    }));\r\n\r\n    for (let dgh of doughList) {\r\n      dgh.id =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].id;\r\n      dgh.bucketSets =\r\n        doughs[\r\n          doughs.findIndex((d) => d.doughName === dgh.doughName)\r\n        ].bucketSets;\r\n      dgh.hydration =\r\n        doughs[\r\n          doughs.findIndex((d) => d.doughName === dgh.doughName)\r\n        ].hydration;\r\n      dgh.oldDough =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].oldDough;\r\n      dgh.buffer =\r\n        doughs[doughs.findIndex((d) => d.doughName === dgh.doughName)].buffer;\r\n      dgh.batchSize =\r\n        doughs[\r\n          doughs.findIndex((d) => d.doughName === dgh.doughName)\r\n        ].batchSize;\r\n      if (dgh.isBakeReady === true) {\r\n        dgh.needed = this.getDoughAmt(dgh.doughName, oneDayOrderList).toFixed(\r\n          2\r\n        );\r\n      } else {\r\n        dgh.needed = this.getDoughAmt(dgh.doughName, twoDayOrderList).toFixed(\r\n          2\r\n        );\r\n      }\r\n      let preshaped;\r\n      if (dgh.isBakeReady === true) {\r\n        preshaped = this.getPreshapedDoughAmt(\r\n          dgh.doughName,\r\n          oneDayOrderList\r\n        ).toFixed(2);\r\n      } else {\r\n        preshaped = this.getPreshapedDoughAmt(\r\n          dgh.doughName,\r\n          twoDayOrderList\r\n        ).toFixed(2);\r\n      }\r\n\r\n      if (Number(dgh.needed) - Number(preshaped) > 0) {\r\n        dgh.short = (Number(preshaped) - Number(dgh.needed)).toFixed(2);\r\n      } else {\r\n        dgh.short = 0;\r\n      }\r\n    }\r\n\r\n    return doughList;\r\n  };\r\n\r\n  returnBaker1DoughComponents = (delivDate, database, loc) => {\r\n    const [\r\n      products,\r\n      customers,\r\n      routes,\r\n      standing,\r\n      orders,\r\n      doughs,\r\n      doughComponents,\r\n    ] = database;\r\n    let doughComponentInfo = doughComponents;\r\n    return doughComponentInfo;\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.forBake))\r\n    ).map((mk) => ({\r\n      forBake: mk,\r\n      qty: 0,\r\n      short: 0,\r\n      needEarly: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n\r\n      let pocketsAccToday = 0;\r\n\r\n      let pocketsToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.preshaped);\r\n\r\n      if (pocketsToday.length > 0) {\r\n        pocketsAccToday = qtyAccToday - pocketsToday[0];\r\n      }\r\n\r\n      if (pocketsAccToday > 0) {\r\n        make.short = \"Short \" + pocketsAccToday;\r\n      } else if (pocketsAccToday < 0) {\r\n        pocketsAccToday = -pocketsAccToday;\r\n        make.short = \"Over \" + pocketsAccToday;\r\n      } else {\r\n        make.short = \"\";\r\n      }\r\n\r\n      let needEarlyAccToday = 0;\r\n\r\n      let needEarlyToday = bakedTomorrow\r\n        .filter(\r\n          (frz) =>\r\n            make.forBake === frz.forBake &&\r\n            frz.routeDepart === \"Carlton\" &&\r\n            frz.zone !== \"Carlton Retail\"\r\n        )\r\n        .map((ord) => ord.qty);\r\n\r\n      if (needEarlyToday.length > 0) {\r\n        needEarlyAccToday = needEarlyToday.reduce(addUp);\r\n      }\r\n\r\n      if (needEarlyAccToday > 0) {\r\n        make.needEarly = needEarlyAccToday;\r\n      } else {\r\n        make.needEarly = \"\";\r\n      }\r\n\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js",["970"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { ColumnGroup } from \"primereact/columngroup\";\r\nimport { Row } from \"primereact/row\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeAllOrders from \"./BPBNSetOutUtils/composeAllOrders\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { sortAtoZDataByIndex } from \"../../helpers/sortDataHelpers\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeAllOrders();\r\n\r\nfunction WhoBake() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [allOrders, setAllOrders] = useState([]);\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherAllOrdersInfo(database)\r\n    );\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherAllOrdersInfo = (database) => {\r\n    let allOrdersData = compose.returnAllOrdersBreakDown(\r\n      delivDate,\r\n      database,\r\n      \"Carlton\"\r\n    );\r\n\r\n    setAllOrders(allOrdersData.allOrders);\r\n  };\r\n\r\n  const exportWhoBakePdf = () => {\r\n    let finalY;\r\n    let pageMargin = 20;\r\n    let tableToNextTitle = 5;\r\n    let titleToNextTable = tableToNextTitle + 3;\r\n    let tableFont = 11;\r\n    let titleFont = 14;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `Who Bake ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Set Out`);\r\n    for (let ord of allOrdersList) {\r\n\r\n      let total = 0\r\n      for ( let num of allOrders.filter((fil) => fil.forBake === ord)){\r\n        total = total + num.qty\r\n      }\r\n\r\n      doc.autoTable({\r\n        body: allOrders.filter((fil) => fil.forBake === ord),\r\n        margin: pageMargin,\r\n        columns: [\r\n          { header: ord, dataKey: \"custName\" },\r\n          { header: \"Qty\", dataKey: \"qty\" },\r\n        ],\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n\r\n      finalY = doc.previousAutoTable.finalY;\r\n      doc.text(pageMargin+100, finalY+8, `Total: ${total}`)\r\n      finalY=finalY+10\r\n    }\r\n    doc.save(`WhoBake${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportWhoBakePdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Who Bake\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  let allOrdersList = Array.from(\r\n    new Set(allOrders.map((all) => all.forBake).filter((all) => all !== null))\r\n  );\r\n\r\n  const footerGroup = (e) => {\r\n    let total = 0;\r\n    for (let prod of e) {\r\n      total += prod.qty;\r\n    }\r\n\r\n    return (\r\n      <ColumnGroup>\r\n        <Row>\r\n          <Column\r\n            footer=\"Total:\"\r\n            colSpan={1}\r\n            footerStyle={{ textAlign: \"right\" }}\r\n          />\r\n          <Column footer={total} />\r\n        </Row>\r\n      </ColumnGroup>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>Who Bake {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n        {allOrdersList &&\r\n          allOrdersList.map((all) => (\r\n            <React.Fragment>\r\n              <h3>{all}</h3>\r\n              <DataTable\r\n                value={allOrders.filter((fil) => fil.forBake === all)}\r\n                className=\"p-datatable-sm\"\r\n                footerColumnGroup={footerGroup(\r\n                  allOrders.filter((fil) => fil.forBake === all)\r\n                )}\r\n              >\r\n                <Column field=\"custName\" header=\"Customer\"></Column>\r\n                <Column field=\"qty\" header=\"Qty\"></Column>\r\n              </DataTable>\r\n            </React.Fragment>\r\n          ))}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default WhoBake;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeAllOrders.js",["971","972","973","974","975","976","977","978","979"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\nimport { whenTransitionDone } from \"@fullcalendar/common\";\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nexport default class ComposeAllOrders {\r\n  returnAllOrdersBreakDown = (delivDate, database, loc) => {\r\n    let allOrders = this.returnAllOrders(delivDate, database, loc);\r\n\r\n    return {\r\n      allOrders: allOrders,\r\n    };\r\n  };\r\n\r\n  returnAllOrders = (delivDate, database, loc) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let allOrdersList = getOrdersList(delivDate, database);\r\n    \r\n    let allOrdersToday = allOrdersList.filter((set) =>\r\n      this.allOrdersFilter(set, loc)\r\n    );\r\n    \r\n    for (let ord of allOrdersToday){\r\n      ord.qty = ord.qty*ord.packSize\r\n    }\r\n    return allOrdersToday;\r\n  };\r\n\r\n  allOrdersFilter = (ord, loc) => {\r\n    return (\r\n      (ord.packGroup === \"rustic breads\" || (ord.packGroup === \"retail\" && ord.where.includes(loc))) ||\r\n      (ord.routeDepart === \"Carlton\" &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.doughType !== \"Croissant\") || \r\n        ord.doughType === \"Ciabatta\"\r\n      \r\n    );\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToBake.js",["980","981","982","983","984","985","986","987","988","989"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\nlet twoDay = todayPlus()[2];\r\nlet today = todayPlus()[0];\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnWhatToMakeBreakDown = (delivDate, database, loc) => {\r\n    let whatToMake = this.returnWhatToMake(delivDate, database, loc);\r\n   \r\n    return {\r\n      whatToMake: whatToMake,\r\n     \r\n      \r\n    };\r\n  };\r\n\r\n\r\n  \r\n  returnWhatToMake = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToMakeList = getOrdersList(delivDate, database);\r\n    let whatToMakeToday = whatToMakeList.filter((set) => this.whatToMakeFilter(set));\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    \r\n    return whatToMake;\r\n  };\r\n\r\n  whatToMakeFilter = (ord, loc) => {\r\n    return (\r\n      ord.where.includes(\"Carlton\") &&\r\n      (ord.packGroup === \"rustic breads\" || ord.packGroup === \"retail\")\r\n      \r\n      \r\n    );\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.forBake))\r\n    ).map((mk) => ({\r\n      forBake: mk,\r\n      qty: 0,\r\n      shaped: 0,\r\n      short: 0,\r\n      needEarly: 0\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.qty*ord.packSize);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n\r\n      let pocketsAccToday = 0;\r\n\r\n      let pocketsToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.preshaped);\r\n\r\n\r\n      if (pocketsToday.length > 0) {\r\n        pocketsAccToday = qtyAccToday-pocketsToday[0]\r\n      }\r\n\r\n      let shapedSum = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.preshaped);\r\n\r\n        if (shapedSum.length > 0) {\r\n          \r\n          make.shaped=shapedSum[0]\r\n        }\r\n\r\n      if (pocketsAccToday>0) {\r\n          make.short = \"Short \"+pocketsAccToday\r\n      } else if (pocketsAccToday<0) {\r\n        pocketsAccToday = -pocketsAccToday\r\n        make.short = \"Over \"+pocketsAccToday\r\n    } else {\r\n        make.short = \"\"\r\n    }\r\n\r\n    let needEarlyAccToday = 0;\r\n\r\n      let needEarlyToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake && \r\n          frz.routeDepart===\"Carlton\" && \r\n          frz.routeArrive===\"Carlton\" && \r\n          frz.zone !== \"Carlton Retail\" &&\r\n          frz.zone !== \"atownpick\")\r\n        .map((ord) => ord.qty);\r\n\r\n      if (needEarlyToday.length > 0) {\r\n        needEarlyAccToday = needEarlyToday.reduce(addUp);\r\n      }\r\n      \r\n      if (needEarlyAccToday>0) {\r\n        make.needEarly = needEarlyAccToday}\r\n     else {\r\n      make.needEarly = \"\"\r\n  }\r\n\r\n  make.qty = qtyAccToday\r\n      \r\n     \r\n    }\r\n    return makeList2;\r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n    console.log(obj1);\r\n    console.log(obj2);\r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject) {\r\n      for (let first of firstObject) {\r\n        if (sec.prodNick === first.prodNick) {\r\n          sec.qty = first.qty;\r\n          continue;\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\" + sec.prodNick;\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js",["990","991","992","993","994"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { tomorrow } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { createRetailOrderCustomers } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst CustomerGroup = ({ database, customerGroup, setCustomerGroup }) => {\r\n  const { orderTypeWhole, setModifications } = useContext(ToggleContext);\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n\r\n    setChosen,\r\n    setDelivDate,\r\n  } = useContext(CurrentDataContext);\r\n\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      orderTypeWhole\r\n        ? setCustomerGroup(customers)\r\n        : setCustomerGroup(createRetailOrderCustomers(orders));\r\n    }\r\n  }, [customers, orderTypeWhole, orders, database]);\r\n\r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen);\r\n    setDelivDate(tomorrow());\r\n   \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dropdown\r\n        id=\"customers\"\r\n        value={chosen}\r\n        options={customerGroup}\r\n        optionLabel=\"custName\"\r\n        placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n        onChange={(e) => handleChosen(e.value.custName)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CustomerGroup;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js",["995","996","997","998","999","1000"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst RouteSelect = ({ database, setDatabase, customerGroup }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const { setModifications, cartList } = useContext(ToggleContext);\r\n\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    if (customerGroup) {\r\n      for (let cust of customerGroup) {\r\n        if (cust[\"custName\"] === chosen) {\r\n          switch (cust[\"zoneName\"]) {\r\n            case \"slopick\":\r\n              setRoute(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setRoute(\"atownpick\");\r\n              break;\r\n            default:\r\n              setRoute(\"deliv\");\r\n          }\r\n        }\r\n      }\r\n      if (currentCartList) {\r\n        let orderCheck = currentCartList.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate) &&\r\n            Number(ord.qty > 0)\r\n        );\r\n\r\n        if (orderCheck.length > 0) {\r\n          switch (orderCheck[0].route) {\r\n            case \"slopick\":\r\n              setRoute(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setRoute(\"atownpick\");\r\n              break;\r\n            default:\r\n              setRoute(\"deliv\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [chosen, delivDate, customerGroup, currentCartList]);\r\n\r\n  const handleSetRoute = (e) => {\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.route = e;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.route = route;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true)\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RadioButton\r\n        value=\"deliv\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"deliv\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"delivery\">Delivery</label>\r\n      <RadioButton\r\n        value=\"slopick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"slopick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n      <RadioButton\r\n        value=\"atownpick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"atownpick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RouteSelect;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js",["1001","1002","1003","1004","1005","1006","1007"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst PONote = ({ database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const { cartList, setModifications } = useContext(ToggleContext);\r\n\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    ponote,\r\n    setPonote,\r\n    delivDate,\r\n    currentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const orderCheck = () => {\r\n    let orderCheck = orders.filter(\r\n      (ord) =>\r\n        ord[\"custName\"] === chosen &&\r\n        ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n\r\n    if (orderCheck.length > 0) {\r\n      return orderCheck[0];\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      setPonote(\"\");\r\n      let checkOrder = orderCheck();\r\n      if (checkOrder) {\r\n        setPonote(checkOrder.PONote);\r\n      }\r\n    }\r\n  }, [chosen, delivDate, database]);\r\n\r\n  const updateOrders = (e) => {\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.PONote = e.target.value;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.PONote = ponote;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true)\r\n    \r\n    setPonote(e.target.value);\r\n    document.getElementById(\"inPo\").value = \"\";\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateOrders(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    if (e.target.value) {\r\n      updateOrders(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <span className=\"p-float-label\">\r\n        <InputText\r\n          id=\"inPo\"\r\n          size=\"50\"\r\n          placeholder={ponote}\r\n          onChange={(e) => handleChange(e)}\r\n          onBlur={(e) => handleBlur(e)}\r\n          disabled={\r\n            currentCartList.length !== 0 || cartList === true ? false : true\r\n          }\r\n        />\r\n        <label htmlFor=\"in\">\r\n          {ponote === \"\" ? \"PO#/Special Instructions...\" : \"\"}\r\n        </label>\r\n      </span>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PONote;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js",["1008","1009","1010","1011","1012"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate, currentCartList } = useContext(CurrentDataContext);\r\n\r\n  const [productList, setProductList] = useState();\r\n\r\n  useEffect(() => {\r\n    if (database.length>0 && currentCartList){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      currentCartList,\r\n      chosen,\r\n      delivDate\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate, currentCartList]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      placeholder=\"Select a product\"\r\n      name=\"products\"\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen !== \"  \" ? false : true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js",["1013","1014","1015","1016","1017","1018"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\nimport { decideWhetherToAddOrModify } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst AddProduct = ({ database, setDatabase, pickedProduct, setPickedProduct }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n  const { orderTypeWhole, setModifications } = useContext(ToggleContext);\r\n\r\n  const handleAdd = () => {\r\n    let qty = Number(document.getElementById(\"addedProdQty\").value);\r\n\r\n    let newOrder = {\r\n      qty: qty,\r\n      prodName: pickedProduct.prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      SO: 0,\r\n      isWhole: orderTypeWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    let newOrderList = decideWhetherToAddOrModify(\r\n      orders,\r\n      newOrder,\r\n      delivDate\r\n    );\r\n    \r\n    let DBToUpdate = clonedeep(database)\r\n    DBToUpdate[4] = newOrderList\r\n    setDatabase(DBToUpdate)\r\n    setModifications(true)\r\n    document.getElementById(\"addedProdQty\").value = null;\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      label=\"ADD\"\r\n      disabled={chosen === \"  \" || pickedProduct === \"\"}\r\n      icon=\"pi pi-plus\"\r\n      onClick={() => handleAdd()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js",["1019","1020","1021","1022","1023"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst InputBox = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Product = ({ order, database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  } = useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  const updateProduct = (prodName, e) => {\r\n    let qty = Number(e.target.value)\r\n    let ordToMod = clonedeep(orders)\r\n    let ind = ordToMod.findIndex(ord => ord.prodName === prodName && ord.custName === chosen && ord.delivDate === convertDatetoBPBDate(delivDate))\r\n    console.log(ind)\r\n    if (ind>-1){\r\n      ordToMod[ind].qty = qty;\r\n      } else{\r\n        // find item in currentCartOrder\r\n        let cartInd = currentCartList.findIndex(curr => curr.prodName === prodName)\r\n        console.log(\"cartInd\",cartInd)\r\n        currentCartList[cartInd].route = route;\r\n        currentCartList[cartInd].PONote = ponote;\r\n        currentCartList[cartInd].qty = qty;\r\n        console.log(currentCartList[cartInd])\r\n        ordToMod.push(currentCartList[cartInd])\r\n      }\r\n    let DBToUpdate = clonedeep(database)\r\n    DBToUpdate[4] = ordToMod\r\n    setDatabase(DBToUpdate)\r\n    setModifications(true)\r\n  }\r\n\r\n  const handleQtyModify = (prodName, e) => {\r\n    if (e.code === \"Enter\"){\r\n    updateProduct(prodName,e)\r\n    }\r\n  };\r\n\r\n  const handleBlur = (prodName, e) => {\r\n    if (e.target.value){\r\n    updateProduct(prodName,e)\r\n  }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <label key={uuidv4()}>{order[\"prodName\"]}</label>\r\n      <InputBox>\r\n        <input\r\n          type=\"text\"\r\n          size=\"3\"\r\n          maxLength=\"4\"\r\n          key={uuidv4() + \"c\"}\r\n          id={order[\"prodName\"] + \"item\"}\r\n          name={order[\"prodName\"]}\r\n          data-qty={order[\"qty\"]}\r\n          placeholder={order[\"qty\"]}\r\n          onKeyUp={(e) => {\r\n            handleQtyModify(order[\"prodName\"], e);\r\n          }}\r\n          onBlur={(e) => {\r\n            handleBlur(order[\"prodName\"], e);\r\n          }}\r\n        ></input>\r\n      </InputBox>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js",["1024","1025","1026","1027"],"import React, { useContext } from \"react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst TrashCan = ({ order, database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate } =\r\n    useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  const handleTrash = (prodName) => {\r\n    \r\n    let ordToMod = clonedeep(orders)\r\n    let ind = ordToMod.findIndex(ord => ord.prodName === prodName && ord.custName === chosen && ord.delivDate === convertDatetoBPBDate(delivDate))\r\n    ordToMod[ind].qty = 0;\r\n    let DBToUpdate = clonedeep(database)\r\n    DBToUpdate[4] = ordToMod\r\n    setDatabase(DBToUpdate)\r\n    setModifications(true)\r\n   \r\n  };\r\n\r\n  return (\r\n    <Button\r\n      icon=\"pi pi-trash\"\r\n      className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n      value={0}\r\n      onClick={(e) => {\r\n        handleTrash(order[\"prodName\"]);\r\n      }}\r\n      key={uuidv4() + \"e\"}\r\n      name={order[\"prodName\"]}\r\n      data-qty={order[\"qty\"]}\r\n      id={order[\"prodName\"]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TrashCan;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js",["1028","1029","1030","1031","1032"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct, productList, setProductList }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate } =\r\n    useContext(CurrentDataContext);\r\n  \r\n  \r\n  useEffect(() => {\r\n    if (database.length>0){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      orders,\r\n      chosen,\r\n      delivDate\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value.prodName);\r\n  };\r\n\r\n  \r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      placeholder={\r\n        pickedProduct === \"\" ? \"Select a Product ...\" : pickedProduct\r\n      }\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen !== \"  \" ? false : true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js",["1033"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\n\r\nconst StandOrHold = ({ standHold, setStandHold }) => {\r\n  const { standList, setStandList, setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    standList ? setStandHold(\"MAKE H.O.\") : setStandHold(\"MAKE S.O.\");\r\n  }, [standList]);\r\n\r\n  const handleStandHold = () => {\r\n    let newStand = !standList;\r\n    setModifications(true)\r\n    setStandList(newStand);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className={\r\n        !standList\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n      onClick={handleStandHold}\r\n      label={standHold}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StandOrHold;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js",["1034","1035","1036","1037","1038","1039","1040"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\n\r\nimport {\r\n  updateOrder,\r\n  createOrder,\r\n  createStanding,\r\n  updateStanding,\r\n} from \"../../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction AddUpdate({ database, setDatabase }) {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { route, ponote } = useContext(CurrentDataContext);\r\n  const {\r\n    delivDate,\r\n    chosen,\r\n    currentCartList,\r\n    standArray,\r\n  } = useContext(CurrentDataContext);\r\n  const {\r\n      reload,\r\n      setReload \r\n  } = useContext(ToggleContext)\r\n\r\n  const {\r\n    orderTypeWhole,\r\n    modifications,\r\n    setModifications,\r\n    cartList,\r\n    standList,\r\n    setIsLoading,\r\n  } = useContext(ToggleContext);\r\n\r\n  const handleUpdateCart = async () => {\r\n    for (let ord of currentCartList) {\r\n        let rte = route;\r\n\r\n        const updateDetails = {\r\n          qty: ord[\"qty\"],\r\n          prodName: ord[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: rte,\r\n          SO: ord[\"qty\"],\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n          timeStamp: new Date(),\r\n        };\r\n\r\n        if (ord[\"id\"]) {\r\n          updateDetails.id = ord[\"id\"];\r\n          updateDetails._version = ord[\"_version\"];\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on updating Orders\", error);\r\n          }\r\n        } else {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n      setReload(!reload) \r\n  }\r\n\r\n\r\n  const handleUpdateStanding = async () => {\r\n    for (let stand of standArray) {\r\n        if (stand[\"id\"]) {\r\n          const updateDetails = {\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n            id: stand[\"id\"],\r\n            _version: stand[\"_version\"],\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        } else {\r\n          const updateDetails = {\r\n            custName: chosen,\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n     setReload(!reload) \r\n  }\r\n  \r\n  const handleAddUpdate = async () => {\r\n    setIsLoading(true);\r\n    if (cartList) {\r\n      handleUpdateCart()\r\n    } else {\r\n      handleUpdateStanding()\r\n    }\r\n    //setReload(!reload)\r\n    setIsLoading(false);\r\n   \r\n    document.getElementById(\"orderCommand\").focus();\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      label=\"Add/Update\"\r\n      icon=\"pi pi-plus\"\r\n      disabled={chosen === \"  \"}\r\n      onClick={handleAddUpdate}\r\n      className={\r\n        modifications\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default AddUpdate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOutUtils\\composeWhatToPrep.js",["1041","1042","1043","1044","1045","1046","1047","1048","1049"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\nlet twoDay = todayPlus()[2];\r\nlet today = todayPlus()[0];\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n  return fullOrder;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnWhatToPrepBreakDown = (delivDate, database, loc) => {\r\n    let whatToPrep = this.returnWhatToPrep(delivDate, database, loc);\r\n\r\n    return {\r\n      whatToPrep: whatToPrep,\r\n    };\r\n  };\r\n\r\n  returnWhatToPrep = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let whatToPrepList = getOrdersList(delivDate, database);\r\n    let whatToPrepListTom = getOrdersList(tomorrow, database);\r\n    let whatToMakeToday = whatToPrepList.filter((set) =>\r\n      this.whatToPrepFilter(set)\r\n    );\r\n    let whatToMakeTomorrow = whatToPrepListTom.filter((set) =>\r\n      this.whatToPrepTomFilter(set)\r\n    );\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    let whatToMakeTom = this.makeAddQty(whatToMakeTomorrow);\r\n\r\n    console.log(whatToMake)\r\n    console.log(whatToMakeTom)\r\n    whatToMake = whatToMake.concat(whatToMakeTom)\r\n    return whatToMake;\r\n  };\r\n\r\n  whatToPrepFilter = (ord, loc) => {\r\n    return (\r\n      (ord.where.includes(\"Carlton\") || ord.where.includes(\"Mixed\")) &&\r\n      ord.packGroup !== \"rustic breads\" &&\r\n      ord.doughType !== \"Croissant\" &&\r\n      ord.packGroup !== \"retail\" &&\r\n      ord.routeDepart === \"Carlton\" &&\r\n      ord.when < 14\r\n    );\r\n  };\r\n\r\n  whatToPrepTomFilter = (ord, loc) => {\r\n    return (\r\n      (ord.where.includes(\"Carlton\") || ord.where.includes(\"Mixed\")) &&\r\n      ord.packGroup !== \"rustic breads\" &&\r\n      ord.doughType !== \"Croissant\" &&\r\n      ord.packGroup !== \"retail\" &&\r\n      ord.routeDepart === \"Carlton\" &&\r\n      ord.when > 14\r\n    );\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.prodName))\r\n    ).map((mk) => ({\r\n      prodName: mk,\r\n      qty: 0,\r\n      shaped: 0,\r\n      short: 0,\r\n      needEarly: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.prodName === frz.prodName)\r\n        .map((ord) => ord.qty * ord.packSize);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n    console.log(obj1);\r\n    console.log(obj2);\r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject) {\r\n      for (let first of firstObject) {\r\n        if (sec.prodNick === first.prodNick) {\r\n          sec.qty = first.qty;\r\n          continue;\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\" + sec.prodNick;\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n}\r\n",{"ruleId":"1050","replacedBy":"1051"},{"ruleId":"1052","replacedBy":"1053"},{"ruleId":"1054","severity":1,"message":"1055","line":38,"column":7,"nodeType":"1056","endLine":38,"endColumn":9,"suggestions":"1057"},{"ruleId":"1058","severity":1,"message":"1059","line":3,"column":10,"nodeType":"1060","messageId":"1061","endLine":3,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1062","line":34,"column":26,"nodeType":"1060","messageId":"1061","endLine":34,"endColumn":45},{"ruleId":"1054","severity":1,"message":"1063","line":38,"column":7,"nodeType":"1056","endLine":38,"endColumn":9,"suggestions":"1064"},{"ruleId":"1058","severity":1,"message":"1065","line":45,"column":11,"nodeType":"1060","messageId":"1061","endLine":45,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1066","line":45,"column":38,"nodeType":"1060","messageId":"1061","endLine":45,"endColumn":55},{"ruleId":"1054","severity":1,"message":"1067","line":51,"column":6,"nodeType":"1056","endLine":51,"endColumn":8,"suggestions":"1068"},{"ruleId":"1054","severity":1,"message":"1069","line":57,"column":6,"nodeType":"1056","endLine":57,"endColumn":24,"suggestions":"1070"},{"ruleId":"1058","severity":1,"message":"1071","line":90,"column":9,"nodeType":"1060","messageId":"1061","endLine":90,"endColumn":16},{"ruleId":"1054","severity":1,"message":"1072","line":38,"column":9,"nodeType":"1056","endLine":38,"endColumn":11,"suggestions":"1073"},{"ruleId":"1058","severity":1,"message":"1074","line":34,"column":25,"nodeType":"1060","messageId":"1061","endLine":34,"endColumn":43},{"ruleId":"1054","severity":1,"message":"1075","line":38,"column":7,"nodeType":"1056","endLine":38,"endColumn":9,"suggestions":"1076"},{"ruleId":"1054","severity":1,"message":"1077","line":38,"column":9,"nodeType":"1056","endLine":38,"endColumn":11,"suggestions":"1078"},{"ruleId":"1054","severity":1,"message":"1079","line":52,"column":7,"nodeType":"1056","endLine":52,"endColumn":70,"suggestions":"1080"},{"ruleId":"1058","severity":1,"message":"1081","line":44,"column":33,"nodeType":"1060","messageId":"1061","endLine":44,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1082","line":47,"column":22,"nodeType":"1060","messageId":"1061","endLine":47,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":47,"column":33,"nodeType":"1060","messageId":"1061","endLine":47,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":47,"column":41,"nodeType":"1060","messageId":"1061","endLine":47,"endColumn":49},{"ruleId":"1054","severity":1,"message":"1085","line":64,"column":6,"nodeType":"1056","endLine":64,"endColumn":8,"suggestions":"1086"},{"ruleId":"1054","severity":1,"message":"1087","line":65,"column":6,"nodeType":"1056","endLine":65,"endColumn":8,"suggestions":"1088"},{"ruleId":"1054","severity":1,"message":"1089","line":78,"column":6,"nodeType":"1056","endLine":78,"endColumn":8,"suggestions":"1090"},{"ruleId":"1054","severity":1,"message":"1079","line":85,"column":6,"nodeType":"1056","endLine":85,"endColumn":8,"suggestions":"1091"},{"ruleId":"1058","severity":1,"message":"1092","line":60,"column":10,"nodeType":"1060","messageId":"1061","endLine":60,"endColumn":19},{"ruleId":"1058","severity":1,"message":"1093","line":61,"column":10,"nodeType":"1060","messageId":"1061","endLine":61,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1094","line":134,"column":9,"nodeType":"1060","messageId":"1061","endLine":134,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1095","line":135,"column":9,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1096","line":136,"column":9,"nodeType":"1060","messageId":"1061","endLine":136,"endColumn":17},{"ruleId":"1058","severity":1,"message":"1097","line":137,"column":9,"nodeType":"1060","messageId":"1061","endLine":137,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1098","line":138,"column":9,"nodeType":"1060","messageId":"1061","endLine":138,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1099","line":6,"column":10,"nodeType":"1060","messageId":"1061","endLine":6,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1100","line":21,"column":10,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":23},{"ruleId":"1054","severity":1,"message":"1087","line":88,"column":6,"nodeType":"1056","endLine":88,"endColumn":8,"suggestions":"1101"},{"ruleId":"1054","severity":1,"message":"1102","line":95,"column":6,"nodeType":"1056","endLine":95,"endColumn":16,"suggestions":"1103"},{"ruleId":"1054","severity":1,"message":"1104","line":60,"column":6,"nodeType":"1056","endLine":60,"endColumn":8,"suggestions":"1105"},{"ruleId":"1058","severity":1,"message":"1099","line":6,"column":10,"nodeType":"1060","messageId":"1061","endLine":6,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1106","line":50,"column":10,"nodeType":"1060","messageId":"1061","endLine":50,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1107","line":74,"column":9,"nodeType":"1060","messageId":"1061","endLine":74,"endColumn":31},{"ruleId":"1054","severity":1,"message":"1108","line":39,"column":6,"nodeType":"1056","endLine":39,"endColumn":8,"suggestions":"1109"},{"ruleId":"1054","severity":1,"message":"1079","line":61,"column":6,"nodeType":"1056","endLine":61,"endColumn":8,"suggestions":"1110"},{"ruleId":"1054","severity":1,"message":"1104","line":57,"column":6,"nodeType":"1056","endLine":57,"endColumn":8,"suggestions":"1111"},{"ruleId":"1054","severity":1,"message":"1104","line":60,"column":6,"nodeType":"1056","endLine":60,"endColumn":8,"suggestions":"1112"},{"ruleId":"1054","severity":1,"message":"1104","line":57,"column":6,"nodeType":"1056","endLine":57,"endColumn":8,"suggestions":"1113"},{"ruleId":"1058","severity":1,"message":"1114","line":10,"column":7,"nodeType":"1060","messageId":"1061","endLine":10,"endColumn":12},{"ruleId":"1058","severity":1,"message":"1115","line":13,"column":11,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":19},{"ruleId":"1058","severity":1,"message":"1082","line":13,"column":21,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":30},{"ruleId":"1058","severity":1,"message":"1083","line":13,"column":32,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":38},{"ruleId":"1058","severity":1,"message":"1115","line":21,"column":11,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":19},{"ruleId":"1058","severity":1,"message":"1082","line":21,"column":21,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":30},{"ruleId":"1058","severity":1,"message":"1083","line":21,"column":32,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":38},{"ruleId":"1054","severity":1,"message":"1116","line":32,"column":6,"nodeType":"1056","endLine":32,"endColumn":13,"suggestions":"1117"},{"ruleId":"1054","severity":1,"message":"1118","line":40,"column":6,"nodeType":"1056","endLine":40,"endColumn":16,"suggestions":"1119"},{"ruleId":"1054","severity":1,"message":"1120","line":46,"column":6,"nodeType":"1056","endLine":46,"endColumn":16,"suggestions":"1121"},{"ruleId":"1054","severity":1,"message":"1122","line":32,"column":6,"nodeType":"1056","endLine":32,"endColumn":14,"suggestions":"1123"},{"ruleId":"1058","severity":1,"message":"1124","line":47,"column":10,"nodeType":"1060","messageId":"1061","endLine":47,"endColumn":16},{"ruleId":"1054","severity":1,"message":"1079","line":68,"column":6,"nodeType":"1056","endLine":68,"endColumn":8,"suggestions":"1125"},{"ruleId":"1058","severity":1,"message":"1126","line":23,"column":7,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":20},{"ruleId":"1054","severity":1,"message":"1118","line":40,"column":6,"nodeType":"1056","endLine":40,"endColumn":16,"suggestions":"1127"},{"ruleId":"1054","severity":1,"message":"1120","line":46,"column":6,"nodeType":"1056","endLine":46,"endColumn":16,"suggestions":"1128"},{"ruleId":"1058","severity":1,"message":"1083","line":36,"column":31,"nodeType":"1060","messageId":"1061","endLine":36,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1129","line":45,"column":5,"nodeType":"1060","messageId":"1061","endLine":45,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1130","line":46,"column":5,"nodeType":"1060","messageId":"1061","endLine":46,"endColumn":23},{"ruleId":"1058","severity":1,"message":"1081","line":54,"column":5,"nodeType":"1060","messageId":"1061","endLine":54,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1115","line":24,"column":10,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":24,"column":20,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":24,"column":31,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1081","line":25,"column":11,"nodeType":"1060","messageId":"1061","endLine":25,"endColumn":27},{"ruleId":"1054","severity":1,"message":"1131","line":58,"column":6,"nodeType":"1056","endLine":58,"endColumn":35,"suggestions":"1132"},{"ruleId":"1058","severity":1,"message":"1081","line":32,"column":5,"nodeType":"1060","messageId":"1061","endLine":32,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1115","line":36,"column":10,"nodeType":"1060","messageId":"1061","endLine":36,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1083","line":36,"column":31,"nodeType":"1060","messageId":"1061","endLine":36,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":36,"column":39,"nodeType":"1060","messageId":"1061","endLine":36,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":36,"column":49,"nodeType":"1060","messageId":"1061","endLine":36,"endColumn":55},{"ruleId":"1054","severity":1,"message":"1079","line":44,"column":6,"nodeType":"1056","endLine":44,"endColumn":8,"suggestions":"1134"},{"ruleId":"1054","severity":1,"message":"1135","line":71,"column":5,"nodeType":"1056","endLine":71,"endColumn":7,"suggestions":"1136"},{"ruleId":"1054","severity":1,"message":"1137","line":28,"column":6,"nodeType":"1056","endLine":28,"endColumn":27,"suggestions":"1138"},{"ruleId":"1058","severity":1,"message":"1139","line":15,"column":3,"nodeType":"1060","messageId":"1061","endLine":15,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1082","line":55,"column":22,"nodeType":"1060","messageId":"1061","endLine":55,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":55,"column":33,"nodeType":"1060","messageId":"1061","endLine":55,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":55,"column":41,"nodeType":"1060","messageId":"1061","endLine":55,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":55,"column":51,"nodeType":"1060","messageId":"1061","endLine":55,"endColumn":57},{"ruleId":"1054","severity":1,"message":"1140","line":86,"column":6,"nodeType":"1056","endLine":86,"endColumn":25,"suggestions":"1141"},{"ruleId":"1058","severity":1,"message":"1082","line":118,"column":22,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":118,"column":33,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":118,"column":41,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":118,"column":51,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":136,"column":12,"nodeType":"1060","messageId":"1061","endLine":136,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1083","line":136,"column":33,"nodeType":"1060","messageId":"1061","endLine":136,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":136,"column":41,"nodeType":"1060","messageId":"1061","endLine":136,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1083","line":263,"column":33,"nodeType":"1060","messageId":"1061","endLine":263,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":263,"column":41,"nodeType":"1060","messageId":"1061","endLine":263,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1084","line":20,"column":41,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":20,"column":51,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":88,"column":12,"nodeType":"1060","messageId":"1061","endLine":88,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":88,"column":22,"nodeType":"1060","messageId":"1061","endLine":88,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":88,"column":33,"nodeType":"1060","messageId":"1061","endLine":88,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":88,"column":41,"nodeType":"1060","messageId":"1061","endLine":88,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":88,"column":51,"nodeType":"1060","messageId":"1061","endLine":88,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1142","line":21,"column":10,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1143","line":27,"column":5,"nodeType":"1060","messageId":"1061","endLine":27,"endColumn":22},{"ruleId":"1058","severity":1,"message":"1084","line":30,"column":39,"nodeType":"1060","messageId":"1061","endLine":30,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":30,"column":49,"nodeType":"1060","messageId":"1061","endLine":30,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1082","line":82,"column":20,"nodeType":"1060","messageId":"1061","endLine":82,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":82,"column":31,"nodeType":"1060","messageId":"1061","endLine":82,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":82,"column":39,"nodeType":"1060","messageId":"1061","endLine":82,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":82,"column":49,"nodeType":"1060","messageId":"1061","endLine":82,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":99,"column":10,"nodeType":"1060","messageId":"1061","endLine":99,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":99,"column":20,"nodeType":"1060","messageId":"1061","endLine":99,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":99,"column":31,"nodeType":"1060","messageId":"1061","endLine":99,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":99,"column":39,"nodeType":"1060","messageId":"1061","endLine":99,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":99,"column":49,"nodeType":"1060","messageId":"1061","endLine":99,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1082","line":121,"column":20,"nodeType":"1060","messageId":"1061","endLine":121,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":121,"column":31,"nodeType":"1060","messageId":"1061","endLine":121,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":121,"column":39,"nodeType":"1060","messageId":"1061","endLine":121,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":121,"column":49,"nodeType":"1060","messageId":"1061","endLine":121,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1082","line":213,"column":22,"nodeType":"1060","messageId":"1061","endLine":213,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":213,"column":33,"nodeType":"1060","messageId":"1061","endLine":213,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":213,"column":41,"nodeType":"1060","messageId":"1061","endLine":213,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":213,"column":51,"nodeType":"1060","messageId":"1061","endLine":213,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1144","line":7,"column":5,"nodeType":"1060","messageId":"1061","endLine":7,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1083","line":11,"column":31,"nodeType":"1060","messageId":"1061","endLine":11,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":11,"column":39,"nodeType":"1060","messageId":"1061","endLine":11,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1115","line":33,"column":10,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1083","line":33,"column":31,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":33,"column":39,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1115","line":49,"column":10,"nodeType":"1060","messageId":"1061","endLine":49,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":49,"column":20,"nodeType":"1060","messageId":"1061","endLine":49,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":49,"column":31,"nodeType":"1060","messageId":"1061","endLine":49,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":49,"column":39,"nodeType":"1060","messageId":"1061","endLine":49,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":49,"column":49,"nodeType":"1060","messageId":"1061","endLine":49,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1082","line":56,"column":20,"nodeType":"1060","messageId":"1061","endLine":56,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":56,"column":31,"nodeType":"1060","messageId":"1061","endLine":56,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":56,"column":39,"nodeType":"1060","messageId":"1061","endLine":56,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1115","line":122,"column":12,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":122,"column":22,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":122,"column":33,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":122,"column":41,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":122,"column":51,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":135,"column":12,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":135,"column":22,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":135,"column":33,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":135,"column":41,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":135,"column":51,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1144","line":9,"column":5,"nodeType":"1060","messageId":"1061","endLine":9,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1082","line":42,"column":22,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":42,"column":33,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":42,"column":41,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":42,"column":51,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":60,"column":22,"nodeType":"1060","messageId":"1061","endLine":60,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":60,"column":33,"nodeType":"1060","messageId":"1061","endLine":60,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":60,"column":41,"nodeType":"1060","messageId":"1061","endLine":60,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":60,"column":51,"nodeType":"1060","messageId":"1061","endLine":60,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":80,"column":22,"nodeType":"1060","messageId":"1061","endLine":80,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1084","line":80,"column":41,"nodeType":"1060","messageId":"1061","endLine":80,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":80,"column":51,"nodeType":"1060","messageId":"1061","endLine":80,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":100,"column":22,"nodeType":"1060","messageId":"1061","endLine":100,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1084","line":100,"column":41,"nodeType":"1060","messageId":"1061","endLine":100,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":100,"column":51,"nodeType":"1060","messageId":"1061","endLine":100,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":122,"column":22,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1084","line":122,"column":41,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":122,"column":51,"nodeType":"1060","messageId":"1061","endLine":122,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":21,"column":10,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1083","line":21,"column":31,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":21,"column":39,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":21,"column":49,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1083","line":75,"column":31,"nodeType":"1060","messageId":"1061","endLine":75,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":75,"column":39,"nodeType":"1060","messageId":"1061","endLine":75,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":75,"column":49,"nodeType":"1060","messageId":"1061","endLine":75,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":4,"column":10,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":4,"column":20,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":4,"column":31,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":4,"column":39,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":4,"column":49,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1084","line":52,"column":39,"nodeType":"1060","messageId":"1061","endLine":52,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":52,"column":49,"nodeType":"1060","messageId":"1061","endLine":52,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":4,"column":10,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":4,"column":20,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":4,"column":31,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":4,"column":39,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":4,"column":49,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1084","line":52,"column":39,"nodeType":"1060","messageId":"1061","endLine":52,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":52,"column":49,"nodeType":"1060","messageId":"1061","endLine":52,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1083","line":4,"column":31,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":4,"column":39,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":4,"column":49,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":55},{"ruleId":"1050","replacedBy":"1145"},{"ruleId":"1052","replacedBy":"1146"},{"ruleId":"1058","severity":1,"message":"1083","line":4,"column":31,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":4,"column":39,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":4,"column":49,"nodeType":"1060","messageId":"1061","endLine":4,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":33,"column":10,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":33,"column":20,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":33,"column":31,"nodeType":"1060","messageId":"1061","endLine":33,"endColumn":37},{"ruleId":"1054","severity":1,"message":"1147","line":69,"column":6,"nodeType":"1056","endLine":69,"endColumn":51,"suggestions":"1148"},{"ruleId":"1058","severity":1,"message":"1115","line":42,"column":10,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":42,"column":20,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":42,"column":31,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1133","line":42,"column":49,"nodeType":"1060","messageId":"1061","endLine":42,"endColumn":55},{"ruleId":"1054","severity":1,"message":"1149","line":61,"column":6,"nodeType":"1056","endLine":61,"endColumn":24,"suggestions":"1150"},{"ruleId":"1054","severity":1,"message":"1151","line":50,"column":6,"nodeType":"1056","endLine":50,"endColumn":8,"suggestions":"1152"},{"ruleId":"1054","severity":1,"message":"1153","line":60,"column":5,"nodeType":"1056","endLine":60,"endColumn":21,"suggestions":"1154"},{"ruleId":"1054","severity":1,"message":"1155","line":101,"column":6,"nodeType":"1056","endLine":101,"endColumn":22,"suggestions":"1156"},{"ruleId":"1054","severity":1,"message":"1135","line":116,"column":6,"nodeType":"1056","endLine":116,"endColumn":21,"suggestions":"1157"},{"ruleId":"1054","severity":1,"message":"1158","line":68,"column":6,"nodeType":"1056","endLine":68,"endColumn":51,"suggestions":"1159"},{"ruleId":"1054","severity":1,"message":"1135","line":81,"column":6,"nodeType":"1056","endLine":81,"endColumn":21,"suggestions":"1160"},{"ruleId":"1058","severity":1,"message":"1084","line":24,"column":41,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":24,"column":51,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":76,"column":22,"nodeType":"1060","messageId":"1061","endLine":76,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":76,"column":33,"nodeType":"1060","messageId":"1061","endLine":76,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":76,"column":41,"nodeType":"1060","messageId":"1061","endLine":76,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":76,"column":51,"nodeType":"1060","messageId":"1061","endLine":76,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":93,"column":12,"nodeType":"1060","messageId":"1061","endLine":93,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":93,"column":22,"nodeType":"1060","messageId":"1061","endLine":93,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":93,"column":33,"nodeType":"1060","messageId":"1061","endLine":93,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":93,"column":41,"nodeType":"1060","messageId":"1061","endLine":93,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":93,"column":51,"nodeType":"1060","messageId":"1061","endLine":93,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1082","line":106,"column":22,"nodeType":"1060","messageId":"1061","endLine":106,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":106,"column":33,"nodeType":"1060","messageId":"1061","endLine":106,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":106,"column":41,"nodeType":"1060","messageId":"1061","endLine":106,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":106,"column":51,"nodeType":"1060","messageId":"1061","endLine":106,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1084","line":24,"column":39,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":24,"column":49,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":101,"column":12,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":101,"column":22,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":101,"column":33,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":101,"column":41,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":101,"column":51,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":154,"column":12,"nodeType":"1060","messageId":"1061","endLine":154,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":154,"column":22,"nodeType":"1060","messageId":"1061","endLine":154,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":154,"column":33,"nodeType":"1060","messageId":"1061","endLine":154,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":154,"column":41,"nodeType":"1060","messageId":"1061","endLine":154,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":154,"column":51,"nodeType":"1060","messageId":"1061","endLine":154,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":178,"column":12,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":178,"column":22,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":178,"column":33,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":178,"column":41,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":178,"column":51,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1084","line":22,"column":39,"nodeType":"1060","messageId":"1061","endLine":22,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":22,"column":49,"nodeType":"1060","messageId":"1061","endLine":22,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":95,"column":12,"nodeType":"1060","messageId":"1061","endLine":95,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":95,"column":22,"nodeType":"1060","messageId":"1061","endLine":95,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":95,"column":33,"nodeType":"1060","messageId":"1061","endLine":95,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":95,"column":41,"nodeType":"1060","messageId":"1061","endLine":95,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":95,"column":51,"nodeType":"1060","messageId":"1061","endLine":95,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1114","line":21,"column":5,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":10},{"ruleId":"1058","severity":1,"message":"1084","line":24,"column":39,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":24,"column":49,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":118,"column":12,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":118,"column":22,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":118,"column":33,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":118,"column":41,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":118,"column":51,"nodeType":"1060","messageId":"1061","endLine":118,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":135,"column":12,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":135,"column":22,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":135,"column":33,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":135,"column":41,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":135,"column":51,"nodeType":"1060","messageId":"1061","endLine":135,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":149,"column":12,"nodeType":"1060","messageId":"1061","endLine":149,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":149,"column":22,"nodeType":"1060","messageId":"1061","endLine":149,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":149,"column":33,"nodeType":"1060","messageId":"1061","endLine":149,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":149,"column":41,"nodeType":"1060","messageId":"1061","endLine":149,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":149,"column":51,"nodeType":"1060","messageId":"1061","endLine":149,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":163,"column":12,"nodeType":"1060","messageId":"1061","endLine":163,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":163,"column":22,"nodeType":"1060","messageId":"1061","endLine":163,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":163,"column":33,"nodeType":"1060","messageId":"1061","endLine":163,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":163,"column":41,"nodeType":"1060","messageId":"1061","endLine":163,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":163,"column":51,"nodeType":"1060","messageId":"1061","endLine":163,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1115","line":178,"column":7,"nodeType":"1060","messageId":"1061","endLine":178,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":179,"column":7,"nodeType":"1060","messageId":"1061","endLine":179,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":180,"column":7,"nodeType":"1060","messageId":"1061","endLine":180,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":181,"column":7,"nodeType":"1060","messageId":"1061","endLine":181,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":182,"column":7,"nodeType":"1060","messageId":"1061","endLine":182,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1161","line":183,"column":7,"nodeType":"1060","messageId":"1061","endLine":183,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1162","line":184,"column":7,"nodeType":"1060","messageId":"1061","endLine":184,"endColumn":22},{"ruleId":"1058","severity":1,"message":"1115","line":223,"column":7,"nodeType":"1060","messageId":"1061","endLine":223,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":224,"column":7,"nodeType":"1060","messageId":"1061","endLine":224,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":225,"column":7,"nodeType":"1060","messageId":"1061","endLine":225,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":226,"column":7,"nodeType":"1060","messageId":"1061","endLine":226,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":227,"column":7,"nodeType":"1060","messageId":"1061","endLine":227,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1162","line":229,"column":7,"nodeType":"1060","messageId":"1061","endLine":229,"endColumn":22},{"ruleId":"1058","severity":1,"message":"1115","line":282,"column":7,"nodeType":"1060","messageId":"1061","endLine":282,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":283,"column":7,"nodeType":"1060","messageId":"1061","endLine":283,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":284,"column":7,"nodeType":"1060","messageId":"1061","endLine":284,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":285,"column":7,"nodeType":"1060","messageId":"1061","endLine":285,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":286,"column":7,"nodeType":"1060","messageId":"1061","endLine":286,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1161","line":287,"column":7,"nodeType":"1060","messageId":"1061","endLine":287,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1115","line":318,"column":7,"nodeType":"1060","messageId":"1061","endLine":318,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":319,"column":7,"nodeType":"1060","messageId":"1061","endLine":319,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":320,"column":7,"nodeType":"1060","messageId":"1061","endLine":320,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":321,"column":7,"nodeType":"1060","messageId":"1061","endLine":321,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":322,"column":7,"nodeType":"1060","messageId":"1061","endLine":322,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1161","line":323,"column":7,"nodeType":"1060","messageId":"1061","endLine":323,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1162","line":324,"column":7,"nodeType":"1060","messageId":"1061","endLine":324,"endColumn":22},{"ruleId":"1058","severity":1,"message":"1115","line":348,"column":7,"nodeType":"1060","messageId":"1061","endLine":348,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":349,"column":7,"nodeType":"1060","messageId":"1061","endLine":349,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":350,"column":7,"nodeType":"1060","messageId":"1061","endLine":350,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":351,"column":7,"nodeType":"1060","messageId":"1061","endLine":351,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":352,"column":7,"nodeType":"1060","messageId":"1061","endLine":352,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1162","line":354,"column":7,"nodeType":"1060","messageId":"1061","endLine":354,"endColumn":22},{"ruleId":"1058","severity":1,"message":"1115","line":432,"column":7,"nodeType":"1060","messageId":"1061","endLine":432,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1082","line":433,"column":7,"nodeType":"1060","messageId":"1061","endLine":433,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1083","line":434,"column":7,"nodeType":"1060","messageId":"1061","endLine":434,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1084","line":435,"column":7,"nodeType":"1060","messageId":"1061","endLine":435,"endColumn":15},{"ruleId":"1058","severity":1,"message":"1133","line":436,"column":7,"nodeType":"1060","messageId":"1061","endLine":436,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1161","line":437,"column":7,"nodeType":"1060","messageId":"1061","endLine":437,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1163","line":19,"column":10,"nodeType":"1060","messageId":"1061","endLine":19,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1164","line":1,"column":10,"nodeType":"1060","messageId":"1061","endLine":1,"endColumn":19},{"ruleId":"1058","severity":1,"message":"1165","line":17,"column":10,"nodeType":"1060","messageId":"1061","endLine":17,"endColumn":28},{"ruleId":"1058","severity":1,"message":"1084","line":20,"column":39,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":20,"column":49,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":89,"column":12,"nodeType":"1060","messageId":"1061","endLine":89,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":89,"column":22,"nodeType":"1060","messageId":"1061","endLine":89,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":89,"column":33,"nodeType":"1060","messageId":"1061","endLine":89,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":89,"column":41,"nodeType":"1060","messageId":"1061","endLine":89,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":89,"column":51,"nodeType":"1060","messageId":"1061","endLine":89,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1144","line":19,"column":5,"nodeType":"1060","messageId":"1061","endLine":19,"endColumn":13},{"ruleId":"1058","severity":1,"message":"1166","line":20,"column":5,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":11},{"ruleId":"1058","severity":1,"message":"1114","line":21,"column":5,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":10},{"ruleId":"1058","severity":1,"message":"1084","line":24,"column":39,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":24,"column":49,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":101,"column":12,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":101,"column":22,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":101,"column":33,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":101,"column":41,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":101,"column":51,"nodeType":"1060","messageId":"1061","endLine":101,"endColumn":57},{"ruleId":"1058","severity":1,"message":"1081","line":12,"column":27,"nodeType":"1060","messageId":"1061","endLine":12,"endColumn":43},{"ruleId":"1058","severity":1,"message":"1115","line":14,"column":10,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1083","line":14,"column":31,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":14,"column":39,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":47},{"ruleId":"1054","severity":1,"message":"1167","line":29,"column":6,"nodeType":"1056","endLine":29,"endColumn":51,"suggestions":"1168"},{"ruleId":"1058","severity":1,"message":"1115","line":13,"column":10,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":13,"column":20,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":13,"column":31,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":13,"column":39,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1130","line":23,"column":5,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":23},{"ruleId":"1054","severity":1,"message":"1169","line":64,"column":6,"nodeType":"1056","endLine":64,"endColumn":57,"suggestions":"1170"},{"ruleId":"1058","severity":1,"message":"1115","line":13,"column":10,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":13,"column":20,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":13,"column":31,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":13,"column":39,"nodeType":"1060","messageId":"1061","endLine":13,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1171","line":19,"column":5,"nodeType":"1060","messageId":"1061","endLine":19,"endColumn":10},{"ruleId":"1058","severity":1,"message":"1172","line":20,"column":5,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":13},{"ruleId":"1054","severity":1,"message":"1173","line":49,"column":6,"nodeType":"1056","endLine":49,"endColumn":35,"suggestions":"1174"},{"ruleId":"1058","severity":1,"message":"1082","line":10,"column":20,"nodeType":"1060","messageId":"1061","endLine":10,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":10,"column":31,"nodeType":"1060","messageId":"1061","endLine":10,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":10,"column":39,"nodeType":"1060","messageId":"1061","endLine":10,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":10,"column":49,"nodeType":"1060","messageId":"1061","endLine":10,"endColumn":55},{"ruleId":"1054","severity":1,"message":"1135","line":25,"column":6,"nodeType":"1056","endLine":25,"endColumn":52,"suggestions":"1175"},{"ruleId":"1058","severity":1,"message":"1115","line":14,"column":10,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":14,"column":20,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":14,"column":31,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":14,"column":39,"nodeType":"1060","messageId":"1061","endLine":14,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1129","line":20,"column":5,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1130","line":21,"column":5,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":23},{"ruleId":"1058","severity":1,"message":"1115","line":18,"column":10,"nodeType":"1060","messageId":"1061","endLine":18,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":18,"column":20,"nodeType":"1060","messageId":"1061","endLine":18,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":18,"column":31,"nodeType":"1060","messageId":"1061","endLine":18,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":18,"column":39,"nodeType":"1060","messageId":"1061","endLine":18,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1130","line":21,"column":5,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":23},{"ruleId":"1058","severity":1,"message":"1115","line":15,"column":10,"nodeType":"1060","messageId":"1061","endLine":15,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":15,"column":20,"nodeType":"1060","messageId":"1061","endLine":15,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":15,"column":31,"nodeType":"1060","messageId":"1061","endLine":15,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":15,"column":39,"nodeType":"1060","messageId":"1061","endLine":15,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1176","line":1,"column":17,"nodeType":"1060","messageId":"1061","endLine":1,"endColumn":25},{"ruleId":"1058","severity":1,"message":"1082","line":11,"column":20,"nodeType":"1060","messageId":"1061","endLine":11,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":11,"column":31,"nodeType":"1060","messageId":"1061","endLine":11,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":11,"column":39,"nodeType":"1060","messageId":"1061","endLine":11,"endColumn":47},{"ruleId":"1054","severity":1,"message":"1177","line":26,"column":6,"nodeType":"1056","endLine":26,"endColumn":35,"suggestions":"1178"},{"ruleId":"1054","severity":1,"message":"1179","line":13,"column":6,"nodeType":"1056","endLine":13,"endColumn":17,"suggestions":"1180"},{"ruleId":"1058","severity":1,"message":"1181","line":20,"column":7,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":16},{"ruleId":"1058","severity":1,"message":"1115","line":23,"column":10,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":18},{"ruleId":"1058","severity":1,"message":"1082","line":23,"column":20,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":29},{"ruleId":"1058","severity":1,"message":"1083","line":23,"column":31,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":37},{"ruleId":"1058","severity":1,"message":"1084","line":23,"column":39,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":23,"column":49,"nodeType":"1060","messageId":"1061","endLine":23,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1081","line":39,"column":5,"nodeType":"1060","messageId":"1061","endLine":39,"endColumn":21},{"ruleId":"1058","severity":1,"message":"1166","line":20,"column":5,"nodeType":"1060","messageId":"1061","endLine":20,"endColumn":11},{"ruleId":"1058","severity":1,"message":"1114","line":21,"column":5,"nodeType":"1060","messageId":"1061","endLine":21,"endColumn":10},{"ruleId":"1058","severity":1,"message":"1084","line":24,"column":39,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":47},{"ruleId":"1058","severity":1,"message":"1133","line":24,"column":49,"nodeType":"1060","messageId":"1061","endLine":24,"endColumn":55},{"ruleId":"1058","severity":1,"message":"1115","line":98,"column":12,"nodeType":"1060","messageId":"1061","endLine":98,"endColumn":20},{"ruleId":"1058","severity":1,"message":"1082","line":98,"column":22,"nodeType":"1060","messageId":"1061","endLine":98,"endColumn":31},{"ruleId":"1058","severity":1,"message":"1083","line":98,"column":33,"nodeType":"1060","messageId":"1061","endLine":98,"endColumn":39},{"ruleId":"1058","severity":1,"message":"1084","line":98,"column":41,"nodeType":"1060","messageId":"1061","endLine":98,"endColumn":49},{"ruleId":"1058","severity":1,"message":"1133","line":98,"column":51,"nodeType":"1060","messageId":"1061","endLine":98,"endColumn":57},"no-native-reassign",["1182"],"no-negated-in-lhs",["1183"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["1184"],"no-unused-vars","'FilterStandHoldDups' is defined but never used.","Identifier","unusedVar","'setOriginalStanding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["1185"],"'readyForSq' is assigned a value but never used.","'setReadyForWeekly' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'buildOrders'. Either include it or remove the dependency array.",["1186"],"React Hook useEffect has a missing dependency: 'setReadyForSq'. Either include it or remove the dependency array.",["1187"],"'fetchSq' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["1188"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["1189"],"React Hook useEffect has a missing dependency: 'fetchRoutes'. Either include it or remove the dependency array.",["1190"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["1191"],"'setModifications' is assigned a value but never used.","'customers' is assigned a value but never used.","'routes' is assigned a value but never used.","'standing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1192"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1193"],"React Hook useEffect has missing dependencies: 'customers', 'orders', 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setStandLoaded', and 'standing'. Either include them or remove the dependency array.",["1194"],["1195"],"'titleInfo' is assigned a value but never used.","'mix1Info' is assigned a value but never used.","'baguetteBins' is assigned a value but never used.","'oliveWeight' is assigned a value but never used.","'bcWeight' is assigned a value but never used.","'fullPockets' is assigned a value but never used.","'extraPockets' is assigned a value but never used.","'Button' is defined but never used.","'ToggleContext' is defined but never used.",["1196"],"React Hook useEffect has a missing dependency: 'loc'. Either include it or remove the dependency array.",["1197"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1198"],"'AMOthers' is assigned a value but never used.","'dynamicColumnsAMOthers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setRoutesLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1199"],["1200"],["1201"],["1202"],["1203"],"'today' is assigned a value but never used.","'products' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["1204"],"React Hook useEffect has missing dependencies: 'setDoughs' and 'setIsLoading'. Either include them or remove the dependency array.",["1205"],"React Hook useEffect has missing dependencies: 'setDoughComponents' and 'setIsLoading'. Either include them or remove the dependency array.",["1206"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["1207"],"'target' is assigned a value but never used.",["1208"],"'buildDateTime' is assigned a value but never used.",["1209"],["1210"],"'currentCartList' is assigned a value but never used.","'setCurrentCartList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["1211"],"'orders' is assigned a value but never used.",["1212"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["1213"],"React Hook useEffect has a missing dependency: 'setRouteList'. Either include it or remove the dependency array. If 'setRouteList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1214"],"'createColumns' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["1215"],"'first' is defined but never used.","'convertedTomorrow' is assigned a value but never used.","'tomorrow' is assigned a value but never used.",["1182"],["1183"],"React Hook useEffect has missing dependencies: 'database.length', 'ponote', 'route', 'setCurrentCartList', and 'setModifications'. Either include them or remove the dependency array.",["1216"],"React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["1217"],"React Hook useEffect has a missing dependency: 'setDelivDate'. Either include it or remove the dependency array.",["1218"],"React Hook useEffect has missing dependencies: 'addOrdersToDB' and 'weeklyLoaded'. Either include them or remove the dependency array.",["1219"],"React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'delivDate', 'orders', 'products', 'setIsLoading', 'setWeeklyInvoices', 'standing', and 'zones'. Either include them or remove the dependency array. If 'setWeeklyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1220"],["1221"],"React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'products', and 'setDailyInvoices'. Either include them or remove the dependency array. If 'setDailyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1222"],["1223"],"'doughs' is assigned a value but never used.","'doughComponents' is assigned a value but never used.","'sortAtoZDataByIndex' is defined but never used.","'todayPlus' is defined but never used.","'whenTransitionDone' is defined but never used.","'twoDay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setCustomerGroup'. Either include it or remove the dependency array. If 'setCustomerGroup' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1224"],"React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["1225"],"'route' is assigned a value but never used.","'setRoute' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCheck' and 'setPonote'. Either include them or remove the dependency array.",["1226"],["1227"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'orders', 'products', and 'setProductList'. Either include them or remove the dependency array. If 'setProductList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1228"],"React Hook useEffect has a missing dependency: 'setStandHold'. Either include it or remove the dependency array. If 'setStandHold' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1229"],"'clonedeep' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1230","fix":"1231"},{"desc":"1232","fix":"1233"},{"desc":"1234","fix":"1235"},{"desc":"1236","fix":"1237"},{"desc":"1238","fix":"1239"},{"desc":"1240","fix":"1241"},{"desc":"1242","fix":"1243"},{"desc":"1244","fix":"1245"},{"desc":"1246","fix":"1247"},{"desc":"1248","fix":"1249"},{"desc":"1250","fix":"1251"},{"desc":"1252","fix":"1253"},{"desc":"1248","fix":"1254"},{"desc":"1255","fix":"1256"},{"desc":"1257","fix":"1258"},{"desc":"1259","fix":"1260"},{"desc":"1252","fix":"1261"},{"desc":"1257","fix":"1262"},{"desc":"1257","fix":"1263"},{"desc":"1257","fix":"1264"},{"desc":"1265","fix":"1266"},{"desc":"1267","fix":"1268"},{"desc":"1269","fix":"1270"},{"desc":"1271","fix":"1272"},{"desc":"1252","fix":"1273"},{"desc":"1267","fix":"1274"},{"desc":"1269","fix":"1275"},{"desc":"1276","fix":"1277"},{"desc":"1252","fix":"1278"},{"desc":"1279","fix":"1280"},{"desc":"1281","fix":"1282"},{"desc":"1283","fix":"1284"},{"desc":"1285","fix":"1286"},{"desc":"1287","fix":"1288"},{"desc":"1289","fix":"1290"},{"desc":"1291","fix":"1292"},{"desc":"1293","fix":"1294"},{"desc":"1295","fix":"1296"},{"desc":"1297","fix":"1298"},{"desc":"1295","fix":"1299"},{"desc":"1300","fix":"1301"},{"desc":"1302","fix":"1303"},{"desc":"1304","fix":"1305"},{"desc":"1306","fix":"1307"},{"desc":"1308","fix":"1309"},{"desc":"1310","fix":"1311"},"Update the dependencies array to be: [fetchCustomers]",{"range":"1312","text":"1313"},"Update the dependencies array to be: [fetchStanding]",{"range":"1314","text":"1315"},"Update the dependencies array to be: [buildOrders]",{"range":"1316","text":"1317"},"Update the dependencies array to be: [orders, products, setReadyForSq]",{"range":"1318","text":"1319"},"Update the dependencies array to be: [fetchProducts]",{"range":"1320","text":"1321"},"Update the dependencies array to be: [fetchHolding]",{"range":"1322","text":"1323"},"Update the dependencies array to be: [fetchRoutes]",{"range":"1324","text":"1325"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"1326","text":"1327"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1328","text":"1329"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1330","text":"1331"},"Update the dependencies array to be: [customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",{"range":"1332","text":"1333"},"Update the dependencies array to be: [setIsLoading]",{"range":"1334","text":"1335"},{"range":"1336","text":"1331"},"Update the dependencies array to be: [loc, products]",{"range":"1337","text":"1338"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1339","text":"1340"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",{"range":"1341","text":"1342"},{"range":"1343","text":"1335"},{"range":"1344","text":"1340"},{"range":"1345","text":"1340"},{"range":"1346","text":"1340"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"1347","text":"1348"},"Update the dependencies array to be: [isReload, setDoughs, setIsLoading]",{"range":"1349","text":"1350"},"Update the dependencies array to be: [isReload, setDoughComponents, setIsLoading]",{"range":"1351","text":"1352"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"1353","text":"1354"},{"range":"1355","text":"1335"},{"range":"1356","text":"1350"},{"range":"1357","text":"1352"},"Update the dependencies array to be: [chosen, delivDate, database, standing, orders, setCalendarEvents]",{"range":"1358","text":"1359"},{"range":"1360","text":"1335"},"Update the dependencies array to be: [products]",{"range":"1361","text":"1362"},"Update the dependencies array to be: [orderList, database, setRouteList]",{"range":"1363","text":"1364"},"Update the dependencies array to be: [route, orderList, constructColumns, constructData]",{"range":"1365","text":"1366"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications]",{"range":"1367","text":"1368"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"1369","text":"1370"},"Update the dependencies array to be: [setDelivDate]",{"range":"1371","text":"1372"},"Update the dependencies array to be: [addOrdersToDB, weeklyInvoices, weeklyLoaded]",{"range":"1373","text":"1374"},"Update the dependencies array to be: [altPricing, customers, delivDate, orders, products, readyForWeekly, setIsLoading, setWeeklyInvoices, standing, zones]",{"range":"1375","text":"1376"},"Update the dependencies array to be: [pickedProduct, products]",{"range":"1377","text":"1378"},"Update the dependencies array to be: [delivDate, orders, standing, nextInv, zones, customers, products, altPricing, setDailyInvoices]",{"range":"1379","text":"1380"},{"range":"1381","text":"1378"},"Update the dependencies array to be: [customers, orderTypeWhole, orders, database, setCustomerGroup]",{"range":"1382","text":"1383"},"Update the dependencies array to be: [chosen, delivDate, customerGroup, currentCartList, setRoute]",{"range":"1384","text":"1385"},"Update the dependencies array to be: [chosen, delivDate, database, setPonote, orderCheck]",{"range":"1386","text":"1387"},"Update the dependencies array to be: [database, chosen, delivDate, currentCartList, products]",{"range":"1388","text":"1389"},"Update the dependencies array to be: [database, chosen, delivDate, products, orders, setProductList]",{"range":"1390","text":"1391"},"Update the dependencies array to be: [setStandHold, standList]",{"range":"1392","text":"1393"},[901,903],"[fetchCustomers]",[1069,1071],"[fetchStanding]",[1535,1537],"[buildOrders]",[1657,1675],"[orders, products, setReadyForSq]",[899,901],"[fetchProducts]",[990,992],"[fetchHolding]",[883,885],"[fetchRoutes]",[1560,1623],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[2427,2429],"[customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",[2554,2556],"[setIsLoading]",[2389,2391],[2570,2580],"[loc, products]",[1847,1849],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1457,1459],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",[1823,1825],[1693,1695],[1863,1865],[1693,1695],[896,903],"[fetchZones, setIsLoading, zones]",[945,955],"[isReload, setDoughs, setIsLoading]",[1085,1095],"[isReload, setDoughComponents, setIsLoading]",[903,911],"[fetchRoutes, routes, setIsLoading]",[1895,1897],[942,952],[1082,1092],[1732,1761],"[chosen, delivDate, database, standing, orders, setCalendarEvents]",[1111,1113],[1931,1933],"[products]",[790,811],"[orderList, database, setRouteList]",[2168,2187],"[route, orderList, constructColumns, constructData]",[1754,1799],"[chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications]",[1608,1626],"[chosen, setStandArray, setStandList, standing]",[1370,1372],"[setDelivDate]",[2046,2062],"[addOrdersToDB, weeklyInvoices, weeklyLoaded]",[3047,3063],"[altPricing, customers, delivDate, orders, products, readyForWeekly, setIsLoading, setWeeklyInvoices, standing, zones]",[3349,3364],"[pickedProduct, products]",[2153,2198],"[delivDate, orders, standing, nextInv, zones, customers, products, altPricing, setDailyInvoices]",[2478,2493],[933,978],"[customers, orderTypeWhole, orders, database, setCustomerGroup]",[1817,1868],"[chosen, delivDate, customerGroup, currentCartList, setRoute]",[1252,1281],"[chosen, delivDate, database, setPonote, orderCheck]",[823,869],"[database, chosen, delivDate, currentCartList, products]",[765,794],"[database, chosen, delivDate, products, orders, setProductList]",[424,435],"[setStandHold, standList]"]