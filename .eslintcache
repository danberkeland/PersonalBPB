[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\a_OrderingFunctions.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\Customers.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\customers.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\poNotes.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\deliveryDate.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\routes.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Customers.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Products.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"58"},{"size":362,"mtime":1609089131749,"results":"59","hashOfConfig":"60"},{"size":1740,"mtime":1614260847883,"results":"61","hashOfConfig":"60"},{"size":500,"mtime":1609089131749,"results":"62","hashOfConfig":"60"},{"size":1295,"mtime":1614344944182,"results":"63","hashOfConfig":"60"},{"size":2420,"mtime":1614463535731,"results":"64","hashOfConfig":"60"},{"size":1640,"mtime":1614261201293,"results":"65","hashOfConfig":"60"},{"size":1222,"mtime":1614261206070,"results":"66","hashOfConfig":"60"},{"size":1570,"mtime":1614261215940,"results":"67","hashOfConfig":"60"},{"size":5384,"mtime":1614432297814,"results":"68","hashOfConfig":"60"},{"size":2698,"mtime":1614347758284,"results":"69","hashOfConfig":"60"},{"size":1039,"mtime":1614431630716,"results":"70","hashOfConfig":"60"},{"size":1480,"mtime":1614261195577,"results":"71","hashOfConfig":"60"},{"size":1624,"mtime":1614194873642,"results":"72","hashOfConfig":"60"},{"size":1692,"mtime":1613912501900,"results":"73","hashOfConfig":"60"},{"size":1290,"mtime":1613420662672,"results":"74","hashOfConfig":"60"},{"size":7062,"mtime":1614464891130,"results":"75","hashOfConfig":"60"},{"size":430,"mtime":1613420662670,"results":"76","hashOfConfig":"60"},{"size":4779,"mtime":1614126195479,"results":"77","hashOfConfig":"60"},{"size":737,"mtime":1614467424802,"results":"78","hashOfConfig":"60"},{"size":2583,"mtime":1614467798967,"results":"79","hashOfConfig":"60"},{"size":6006,"mtime":1614467698866,"results":"80","hashOfConfig":"60"},{"size":3357,"mtime":1614464284096,"results":"81","hashOfConfig":"60"},{"size":4552,"mtime":1614456351602,"results":"82","hashOfConfig":"60"},{"size":325,"mtime":1614429638224,"results":"83","hashOfConfig":"60"},{"size":4207,"mtime":1614456342116,"results":"84","hashOfConfig":"60"},{"size":321,"mtime":1614470393455,"results":"85","hashOfConfig":"60"},{"size":6061,"mtime":1614470817199,"results":"86","hashOfConfig":"60"},{"size":4899,"mtime":1614470042235,"results":"87","hashOfConfig":"60"},{"size":1902,"mtime":1614214618656,"results":"88","hashOfConfig":"60"},{"size":1697,"mtime":1613154238674,"results":"89","hashOfConfig":"60"},{"size":1679,"mtime":1613420662700,"results":"90","hashOfConfig":"60"},{"size":1683,"mtime":1613420662702,"results":"91","hashOfConfig":"60"},{"size":564,"mtime":1613420662701,"results":"92","hashOfConfig":"60"},{"size":1758,"mtime":1613420662704,"results":"93","hashOfConfig":"60"},{"size":2783,"mtime":1614261151539,"results":"94","hashOfConfig":"60"},{"size":190,"mtime":1613420662655,"results":"95","hashOfConfig":"60"},{"size":190,"mtime":1613420662654,"results":"96","hashOfConfig":"60"},{"size":193,"mtime":1613420662657,"results":"97","hashOfConfig":"60"},{"size":1270,"mtime":1614199638255,"results":"98","hashOfConfig":"60"},{"size":200,"mtime":1613420662663,"results":"99","hashOfConfig":"60"},{"size":197,"mtime":1613420662656,"results":"100","hashOfConfig":"60"},{"size":191,"mtime":1613420662650,"results":"101","hashOfConfig":"60"},{"size":1137,"mtime":1614193925835,"results":"102","hashOfConfig":"60"},{"size":0,"mtime":1613769374633,"results":"103","hashOfConfig":"60"},{"size":3570,"mtime":1613941048675,"results":"104","hashOfConfig":"60"},{"size":3691,"mtime":1613940913819,"results":"105","hashOfConfig":"60"},{"size":2439,"mtime":1613936701168,"results":"106","hashOfConfig":"60"},{"size":1672,"mtime":1614213826585,"results":"107","hashOfConfig":"60"},{"size":2992,"mtime":1614261098077,"results":"108","hashOfConfig":"60"},{"size":4187,"mtime":1614453260365,"results":"109","hashOfConfig":"60"},{"size":1684,"mtime":1614213826585,"results":"110","hashOfConfig":"60"},{"size":2266,"mtime":1614346077311,"results":"111","hashOfConfig":"60"},{"size":4554,"mtime":1614260535651,"results":"112","hashOfConfig":"60"},{"size":1077,"mtime":1614191788178,"results":"113","hashOfConfig":"60"},{"size":4687,"mtime":1614465468976,"results":"114","hashOfConfig":"60"},{"size":5887,"mtime":1614466452308,"results":"115","hashOfConfig":"60"},{"size":1334,"mtime":1614213824864,"results":"116","hashOfConfig":"60"},{"size":2989,"mtime":1614462212216,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"1dwemmr",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"120"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"120"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"120"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"120"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"120"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"120"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"120"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"120"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"120"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"120"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"120"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"120"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"120"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"120"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"120"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"120"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"120"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"120"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"120"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"120"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"120"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"120"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"120"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"120"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["264","265"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["266"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { useFetch } from '../helpers/useFetch'\r\n\r\nimport { ToggleContext } from './ToggleContext';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const CustomerContext = createContext();\r\n\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n    const { setIsLoading } = useContext(ToggleContext)\r\n\r\n    \r\n    let { data } = useFetch(process.env.REACT_APP_API_GETOBJCUSTOMER,[]);\r\n\r\n\r\n    useEffect(() => { \r\n        setIsLoading(true) \r\n        if(data){\r\n            if(data.length>0){\r\n                setCustomer(data);\r\n                setCustLoaded(true)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n    },[data]);\r\n    \r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["267"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { useFetch, FilterOrdersDups } from '../helpers/useFetch'\r\n\r\nimport { ToggleContext } from './ToggleContext';\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n    \r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ ordersLoaded, setOrdersLoaded ] = useState(false)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            ordersLoaded, setOrdersLoaded\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { setOrders, setOriginalOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { setIsLoading } = useContext(ToggleContext)\r\n\r\n    const { data } = useFetch(process.env.REACT_APP_API_ORDERS, []);\r\n\r\n    \r\n\r\n    useEffect(() => { \r\n        setIsLoading(true) \r\n        if(data){\r\n            if(data.length>0){\r\n                let currentData = FilterOrdersDups(data)\r\n                setOrders(currentData);\r\n                setOriginalOrders(currentData);\r\n                setOrdersLoaded(true)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n    },[data]);\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["268"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { useFetch } from '../helpers/useFetch'\r\n\r\nimport { ToggleContext } from './ToggleContext';\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const ProductsContext = createContext();\r\n\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n\r\n    return (\r\n        <ProductsContext.Provider value={{ products, setProducts, prodLoaded, setProdLoaded }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { data } = useFetch(process.env.REACT_APP_API_PRODUCTS,[]);\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n    const { setIsLoading } = useContext(ToggleContext)\r\n\r\n    useEffect(() => { \r\n        setIsLoading(true) \r\n        if(data){\r\n            if(data.length>0){\r\n                setProducts(data);\r\n                setProdLoaded(true)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n    },[data]);\r\n    \r\n    \r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["269","270"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\nimport { useFetch, FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { ToggleContext } from './ToggleContext';\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { data } = useFetch(process.env.REACT_APP_API_STANDING,[]);\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n    const { setIsLoading } = useContext(ToggleContext)\r\n    \r\n\r\n    useEffect(() => { \r\n        setIsLoading(true) \r\n        if(data){\r\n            if(data.length>0){\r\n                let currentData = FilterStandHoldDups(data)\r\n                setOriginalStanding(currentData);\r\n                setStanding(currentData);\r\n                setStandLoaded(true)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n    },[data]);\r\n    \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",["271"],"\r\nimport { convertDatetoBPBDate } from './dateTimeHelpers'\r\nimport { buildCartList, buildStandList, compileOrderList } from './CartBuildingHelpers'\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport { DayCellContent } from '@fullcalendar/react';\r\n\r\n\r\n\r\nexport const sortAtoZDataByIndex = (data,index) => {\r\n    data.sort(function(a,b){return a[index]>b[index] ? 1 : -1;})\r\n    return data\r\n}\r\n\r\nexport const sortZtoADataByIndex = (data,index) => {\r\n    data.sort(function(a,b){return a[index]>b[index] ? -1 : 1;})\r\n    return data\r\n}\r\n\r\n\r\n\r\nexport const addAnEmptyRowToTop = (data) => {\r\n    let len = data.length;\r\n    let newArray = [];\r\n    for (let i=0; i<len; i++){\r\n        newArray.push('')\r\n        }\r\n    data.unshift(newArray);\r\n    return data\r\n}\r\n\r\nexport const createRetailOrderCustomers = orders => {\r\n    let special = orders.filter(order => order[6] === false)\r\n    special = special.map(order => [\"\",\"\",order[2],\"\"])\r\n    let unique = special.map(ar => JSON.stringify(ar))\r\n        .filter((itm, idx, arr) => arr.indexOf(itm) === idx)\r\n        .map(str => JSON.parse(str))\r\n    if (unique[0] !== ['','','','']){\r\n        unique.unshift(['','','',''])\r\n    }\r\n    return unique\r\n}\r\n\r\n\r\nexport const createRouteList = customers => {\r\n    let routesArray = [...customers]\r\n    routesArray = routesArray.map(cust => cust[3])\r\n    const uniqueRoutesSet = new Set(routesArray)\r\n    const newRoutesArray = Array.from(uniqueRoutesSet)\r\n    return newRoutesArray\r\n}\r\n\r\nexport const findNewRoute = (chosen, delivDate, standing, orders, customers) => {\r\n    let newRoute\r\n    let cartList = buildCartList(chosen,delivDate,orders)\r\n    let standList = buildStandList(chosen, delivDate, standing)\r\n    let currentOrderList = compileOrderList(cartList,standList)\r\n    let currentRoutes = currentOrderList.filter(order => order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate) );\r\n    let custRoute = customers.find(element => element[2] === chosen)\r\n    custRoute ? newRoute = custRoute[3] : newRoute = \"Pick up Carlton\"\r\n    if (currentRoutes.length>0) {\r\n        newRoute = currentRoutes[0][4]\r\n    }\r\n    return newRoute\r\n}\r\n\r\n\r\nexport const findCurrentPonote =(chosen, delivDate, orders) => {\r\n    let po\r\n    let currentOrders = orders.filter(order => order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate) );\r\n    if (currentOrders.length>0) {\r\n        po = currentOrders[0][3]\r\n    } else {\r\n        po = \"na\"\r\n    }\r\n    return po\r\n}\r\n\r\n\r\nexport const findAvailableProducts = (products, orders, chosen, delivDate) => {\r\n    let availableProducts = [...products]\r\n    for (let prod of orders) {\r\n        let prodPull = prod[0]===\"0\" && prod[2] === chosen && \r\n        prod[7] === convertDatetoBPBDate(delivDate) ? prod[1] : ''\r\n        availableProducts = availableProducts.filter(availProd => availProd[1] !== prodPull)\r\n    }\r\n    availableProducts.unshift(['','','','','','','','','','','','','','','','','','','']);\r\n    return availableProducts\r\n}\r\n\r\nexport const decideWhetherToAddOrModify = (orders, newOrder, delivDate) => {\r\n    let newOrderList = [...orders]\r\n    let chosen = newOrder[\"custName\"]\r\n    let prodToAdd = newOrder[\"prodName\"]\r\n    let qty = newOrder[\"qty\"]\r\n    let prodIndex = newOrderList.findIndex(order => \r\n        order[\"prodName\"] === prodToAdd && \r\n        order[\"custName\"] === chosen && \r\n        order[\"delivDate\"] === convertDatetoBPBDate(delivDate))\r\n    if(prodIndex >= 0){\r\n        newOrderList[prodIndex][\"qty\"] = qty\r\n    } else {\r\n\r\n        newOrderList.push(newOrder)\r\n    }\r\n    return newOrderList\r\n}\r\n\r\n\r\nexport const createOrderUpdatesClip = (orders, originalOrders) => {\r\n    let orderData = cloneDeep(orders)\r\n    let originalOrderData = cloneDeep(originalOrders)\r\n    \r\n    for (let i=0; i<orderData.length; ++i ){\r\n        for (let j=0; j<originalOrderData.length; ++j){\r\n            if (  orderData[i][0] === originalOrderData[j][0] &&\r\n                orderData[i][1] === originalOrderData[j][1] &&\r\n                orderData[i][2] === originalOrderData[j][2] &&\r\n                orderData[i][3] === originalOrderData[j][3] &&\r\n                orderData[i][4] === originalOrderData[j][4] &&\r\n                orderData[i][7] === originalOrderData[j][7] \r\n                ){\r\n                    orderData.splice(i,1);\r\n                }\r\n            }\r\n        }\r\n\r\n    let timeStamp = new Date()\r\n    let timeStampedData = orderData.map(order => [order[5],order[1],order[2],order[3],order[4],order[5],order[6],order[7],timeStamp])\r\n    return timeStampedData\r\n}\r\n\r\n\r\nexport const createStandHoldClip = (orders, originalOrders) => {\r\n    let orderData = cloneDeep(orders)\r\n    let originalOrderData = cloneDeep(originalOrders)\r\n    \r\n    for (let i=0; i<orderData.length; ++i ){\r\n        for (let j=0; j<originalOrderData.length; ++j){\r\n            if (  orderData[i][0] === originalOrderData[j][0] &&\r\n                orderData[i][2] === originalOrderData[j][2] &&\r\n                orderData[i][7] === originalOrderData[j][7] &&\r\n                orderData[i][8] === originalOrderData[j][8] \r\n                ){\r\n                    orderData.splice(i,1);\r\n                }\r\n            }\r\n        }\r\n\r\n    let timeStamp = new Date()\r\n    let timeStampedData = orderData.map(order => [order[0],order[1],order[2],order[3],timeStamp,order[5],order[6],order[7],order[8]])\r\n    return timeStampedData\r\n}","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["272"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { useFetch, FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { ToggleContext } from './ToggleContext';\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n    const { data } = useFetch(process.env.REACT_APP_API_HOLDING,[]);\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n    const { setIsLoading } = useContext(ToggleContext)\r\n\r\n    useEffect(() => { \r\n        setIsLoading(true) \r\n        if(data){\r\n            if(data.length>0){\r\n                let currentData = FilterStandHoldDups(data)\r\n                setOriginalHolding(currentData);\r\n                setHolding(currentData);\r\n                setHoldLoaded(true)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n    },[data]);\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",["273"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\n\r\nimport Ordering from './pages/ordering/Ordering'\r\nimport DeliveryRouteGrid from './pages/logistics/DeliveryRouteGrid'\r\nimport DeliveryCustomerGrid from './pages/logistics/DeliveryCustomerGrid'\r\nimport DeliveryProductGrid from './pages/logistics/DeliveryProductGrid'\r\nimport BPBS from './BPBS'\r\nimport BPBN from './BPBN'\r\nimport Croix from './Croix'\r\nimport Customers from './Customers'\r\nimport Products from './Products'\r\nimport Billing from './Billing'\r\nimport Admin from './Admin'\r\nimport Loader from './Loader'\r\n\r\nimport Nav from './Nav'\r\n\r\n\r\nfunction AppRoutes() {\r\n\r\n  return (\r\n    <Router>\r\n      <Loader />\r\n      <div className=\"bigPicture\">\r\n        <Switch>\r\n          <Route path=\"/ordering\" component={Ordering} /> \r\n          <Route path=\"/logistics/byRoute\" component={DeliveryRouteGrid} />  \r\n          <Route path=\"/logistics/byCustomer\" component={DeliveryCustomerGrid} />  \r\n          <Route path=\"/logistics/byProduct\" component={DeliveryProductGrid} />  \r\n          <Route path=\"/bpbs\" component={BPBS} />\r\n          <Route path=\"/bpbn\" component={BPBN} />\r\n          <Route path=\"/croix\" component={Croix} />\r\n          <Route path=\"/products\" component={Products} />\r\n          <Route path=\"/customers\" component={Customers} />\r\n          <Route path=\"/billing\" component={Billing} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/\" exact component={Ordering} />\r\n        </Switch>\r\n      </div>\r\n    </Router>        \r\n  );\r\n}\r\n\r\nexport default AppRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],["274","275"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\a_OrderingFunctions.js",["276","277","278","279","280"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList, findCurrentPonote, findNewRoute } from '../../helpers/sortDataHelpers'\r\nimport { \r\n    CreateStandingArray,\r\n    CreateCartDateArray,\r\n    CreateBlankCartDateArray\r\n    } from '../../helpers/calendarBuildHelper';\r\n\r\n\r\n\r\nconst OrderingFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { holding, setHoldLoaded } = useContext(HoldingContext)\r\n    const { chosen, setRoute, delivDate, setPonote, currentCartList, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn, setPONoteIsOn, setEditOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (holding.length<1){\r\n            setHoldLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    useEffect(() => {\r\n        setEditOn(true)\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        chosen && setRouteIsOn(true)\r\n        chosen && setPONoteIsOn(true)\r\n    },[chosen, setRouteIsOn, setPONoteIsOn])\r\n    \r\n\r\n    // Turn PO Note Off and ON based on currentEntryList\r\n    useEffect(() => {\r\n        currentCartList.length<1 && setPONoteIsOn(false)\r\n        currentCartList.length>0 && setPONoteIsOn(true)\r\n    },[currentCartList, setPONoteIsOn])\r\n\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n\r\n    // Find new current route based on customer, date, standing, orders, or customers change\r\n    useEffect(() => {\r\n        let newRoute = findNewRoute(chosen, delivDate, standing, orders, customers)\r\n        setRoute(newRoute)      \r\n    },[chosen, delivDate, customers, standing, setRoute, orders])\r\n\r\n\r\n    // find new current PO Note when customer, delivDate, or orders are changed\r\n    useEffect(() => {\r\n        let po = findCurrentPonote(chosen, delivDate, orders)\r\n        document.getElementById('PONotes').value = '';\r\n        setPonote(po)\r\n\r\n    },[chosen, delivDate, setPonote, orders])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let backToStandingArray = CreateStandingArray(standing,chosen);\r\n        let cartDateArray = CreateCartDateArray(orders,chosen);\r\n        let cartBlankDateArray = CreateBlankCartDateArray(orders,chosen);\r\n        \r\n\r\n        let standingEvents = {title: '',\r\n                            daysOfWeek: backToStandingArray,\r\n                            display: 'background'}\r\n\r\n\r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        calendarEvents.push(standingEvents)\r\n\r\n\r\n        for (let order of cartDateArray) {\r\n            let newEvent = {title: '',\r\n                        date: order,\r\n                        display: 'background'}\r\n            calendarEvents.push(newEvent)\r\n        }\r\n\r\n\r\n        for (let order of cartBlankDateArray) {\r\n            let newEvent2 = {title: '',\r\n                        date: order,\r\n                        display: 'inverse-background'}\r\n            calendarEvents.push(newEvent2)\r\n        }\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default OrderingFunctions",["281","282"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js",["283"],"import React from 'react';\r\n\r\nimport RecentOrderList from './g_recentOrderList/RecentOrderList';\r\nimport RecentOrderListButtons from './g_recentOrderList/RecentOrderListButtons';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst RecentList = styled.div`\r\n  text-align: left;\r\n  box-sizing: border-box;\r\n  height: 12px;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n  font-size: 1em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: white;\r\n  background-color: transparent;  \r\n  `\r\n\r\nconst RecentOrders = () => {\r\n\r\n  return (\r\n      <React.Fragment>  \r\n        <h2>Recent Orders</h2>\r\n        \r\n        <RecentOrderList />\r\n        \r\n        <RecentOrderListButtons />\r\n        \r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrders;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js",["284"],"import React,{ useContext } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { createOrderUpdatesClip, createStandHoldClip } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst RecentButton = styled.div`\r\n  display: flex;\r\n  margin: 20px 0;\r\n  \r\n  `\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\n\r\nconst RecentOrderListButtons = () => {\r\n\r\n  const { orders, originalOrders, setRecentOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n  const { standing, originalStanding, setStandLoaded } = useContext(StandingContext)\r\n  const { holding, originalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n  const handleUpload = () => {\r\n    let orderData = createOrderUpdatesClip(orders, originalOrders)\r\n    let standingData = createStandHoldClip(standing, originalStanding)\r\n    let holdingData = createStandHoldClip(holding, originalHolding)\r\n    // need to trigger reload of orders from API\r\n\r\n    const uploadOrders = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type':'application/json'},\r\n      body: JSON.stringify(orderData)\r\n    };\r\n\r\n    const uploadStanding = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type':'application/json'},\r\n      body: JSON.stringify(standingData)\r\n    };\r\n\r\n    const uploadHolding = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type':'application/json'},\r\n      body: JSON.stringify(holdingData)\r\n    };\r\n\r\n\r\n    fetch(process.env.REACT_APP_API_SENDORDERS, uploadOrders)\r\n      .then(response => response.status===200 ? setOrdersLoaded(false): '')\r\n      \r\n      \r\n\r\n    fetch(process.env.REACT_APP_API_SENDSTANDING, uploadStanding)\r\n    .then(response => response.status===200 ? setStandLoaded(false): '')\r\n\r\n    fetch(process.env.REACT_APP_API_SENDHOLDING, uploadHolding)\r\n    .then(response => response.status===200 ? setHoldLoaded(false): '')\r\n\r\n\r\n    \r\n    setRecentOrders([])\r\n    swal ({\r\n      text: \"Recent Orders are now live!\",\r\n      icon: \"success\",\r\n      buttons: false,\r\n      timer: 2000\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n      <React.Fragment>      \r\n        <RecentButton>\r\n        <Button label=\"Upload\" icon=\"pi pi-upload\" className=\"p-button-raised p-button-rounded p-button-success\" />\r\n        </RecentButton>\r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrderListButtons;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["285","286","287","288"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport { convertDatetoBPBDate } from '../../../../helpers/dateTimeHelpers';\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../../helpers/sortDataHelpers';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst AddProductButtons = styled.div`\r\n        display: flex;\r\n        width: 100%;\r\n        margin: 20px 0;\r\n        justify-content: space-around;\r\n        background-color: lightgrey;\r\n        padding: 10px 0;\r\n        `\r\n\r\n\r\n\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const cities = [\r\n        {name: 'New York', code: 'NY'},\r\n        {name: 'Rome', code: 'RM'},\r\n        {name: 'London', code: 'LDN'},\r\n        {name: 'Istanbul', code: 'IST'},\r\n        {name: 'Paris', code: 'PRS'}\r\n        ];\r\n    \r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { chosen, delivDate, route, ponote } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications }= useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, orders, chosen.name, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let qty = document.getElementById(\"addedProdQty\").value\r\n       \r\n        let newOrder ={\r\n            \"qty\": qty, \r\n            \"prodName\": pickedProduct.name,\r\n            \"custName\": chosen.name, \r\n            \"PONote\": ponote, \r\n            \"route\": route, \r\n            \"SO\": \"0\", \r\n            \"isWhole\": orderTypeWhole, \r\n            \"delivDate\": convertDatetoBPBDate(delivDate)\r\n        }\r\n        let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate)\r\n        setOrders(newOrderList)\r\n        document.getElementById(\"addedProdQty\").value = '';\r\n        setPickedProduct('');\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <AddProductButtons>\r\n            <Dropdown options={products} optionLabel=\"name\" placeholder=\"Select a product\"\r\n                name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen!=='  ' ? false : true}/>\r\n            <span className=\"p-float-label\">\r\n                <InputText id=\"addedProdQty\" size=\"10\" disabled={chosen!=='  ' ? false : true}/>\r\n                <label htmlFor=\"qty\">Quantity</label>\r\n            </span>\r\n            <Button label=\"ADD\" disabled={chosen==='  ' || pickedProduct===''} icon=\"pi pi-plus\" onClick={() => handleAdd()}/>\r\n        </AddProductButtons>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",["289"],"import React, { useState, useContext, useEffect, useRef } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../../dataContexts/HoldingContext';\r\nimport { ProductsContext } from '../../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport { findAvailableProducts } from '../../../../helpers/sortDataHelpers';\r\n\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { standing, setStanding } = useContext(StandingContext)\r\n    const { holding, setHolding } = useContext(HoldingContext)\r\n    const { orders } = useContext(OrdersContext)\r\n    const { chosen, delivDate } = useContext(CurrentDataContext)\r\n    const { standList, setModifications } = useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n   let standHold =useRef();\r\n\r\n    useEffect(() => { \r\n        standList ? standHold.current = \"MAKE H.O.\" : standHold.current = \"MAKE S.O.\"\r\n    },[standList])\r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, orders, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let newStandingList = clonedeep(standing)\r\n        if (pickedProduct !==\"\" && pickedProduct){\r\n            for (let i=1; i<8; i++){\r\n                let newOrder =[i.toString(),\"na\",\"0\",\"na\",\"na\",\"na\",\"na\",pickedProduct,chosen] \r\n                newStandingList.push(newOrder)\r\n            }\r\n        }\r\n        setStanding(newStandingList)\r\n        \r\n        setPickedProduct('');\r\n    }\r\n\r\n    const handleStandHold = async () => {\r\n        let currentStandList = await clonedeep(standing)\r\n        let currentHoldList = await clonedeep(holding)\r\n\r\n        let standID = clonedeep(standList)\r\n\r\n        if(standID){\r\n            let currentStandListClip = currentStandList.filter(stand => stand[8] === chosen)\r\n            let clipToManipulate = clonedeep(currentStandListClip)\r\n            let timeStamp = new Date().toISOString()\r\n            let zeroCurrentStand = clipToManipulate.map(stand => \r\n                [stand[0],\"na\",\"0\",\"na\",timeStamp,\"na\",\"na\",stand[7],stand[8]])\r\n            let reducedStandList = await currentStandList.filter(stand => stand[8] !== chosen)\r\n            let sendStand = reducedStandList.concat(zeroCurrentStand)\r\n            let sendHold = currentHoldList.concat(currentStandListClip)\r\n            setStanding(sendStand)\r\n            setHolding(sendHold)\r\n        } else {\r\n            let currentHoldListClip = await currentHoldList.filter(hold => hold[8] === chosen)\r\n            let clipToManipulate = clonedeep(currentHoldListClip)\r\n            let timeStamp = new Date().toISOString()\r\n            let zeroCurrentHold = Array.from(clipToManipulate, stand => \r\n                [stand[0],\"na\",\"0\",\"na\",timeStamp,\"na\",\"na\",stand[7],stand[8]])\r\n            let reducedHoldList = await currentHoldList.filter(hold => hold[8] !== chosen)\r\n            let sendHold = reducedHoldList.concat(zeroCurrentHold)\r\n            let sendStand = currentStandList.concat(currentHoldListClip)\r\n            setHolding(sendHold)\r\n            setStanding(sendStand)\r\n            \r\n        }\r\n    }\r\n\r\n    const ho = {\r\n        backgroundColor: \"red\"\r\n      }\r\n\r\n    const so = {\r\n        backgroundColor: \"green\"\r\n      }\r\n\r\n\r\n    return (\r\n        <div className=\"addAProductToStanding\">\r\n            <select id = \"products\" name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen ? false : true}>\r\n            {\r\n                productList ? productList.map((product) => \r\n                    <option key = {uuidv4()} value={product[1]}>{product[1]}</option>\r\n                ) : ''\r\n                }; \r\n            </select>\r\n           \r\n            <button onClick={handleAdd}>ADD</button>\r\n            <button style={standList ? so : ho } onClick={handleStandHold}>{standHold.current}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["290","291"],"\r\nimport React, { useContext, useEffect } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { buildCurrentOrder, \r\n    filterOutZeros, \r\n    setCurrentCartLineToQty, \r\n    updateCurrentLineInOrdersWithQty,\r\n    checkForMods\r\n} from '../../../../helpers/CartBuildingHelpers'\r\n\r\n\r\nconst OrderGrid = styled.div`\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    border: none;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: .5fr 3fr .5fr .5fr;\r\n    row-gap: 4px;\r\n    flex-shrink: 1; \r\n    `\r\nconst TrashCan = styled.div`\r\n    background-color: transparent;\r\n    border: none;\r\n    `\r\n\r\nconst InputBox = styled.div`\r\n    width: 50%;\r\n    `\r\n\r\nconst Previous = styled.div`\r\n    font-weight: bold;\r\n    color: red;\r\n    `\r\n\r\nconst BuildCurrentCartList = () => {\r\n\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate, currentCartList, setCurrentCartList, ponote, route } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let currentOrderList = buildCurrentOrder(chosen.name,delivDate,orders,standing)\r\n        let noZerosOrderList = filterOutZeros(currentOrderList)\r\n        setModifications(checkForMods(noZerosOrderList))\r\n        setCurrentCartList(noZerosOrderList)\r\n\r\n    }, [chosen, delivDate, orders, setCurrentCartList, standing])\r\n\r\n\r\n\r\n    const handleQtyModify = (prodName,qty,SO) => {\r\n        let presentedListToModify = setCurrentCartLineToQty(prodName,currentCartList,qty)\r\n        let updatedOrders = updateCurrentLineInOrdersWithQty(prodName,chosen, delivDate, orders, ponote, route, orderTypeWhole, qty, SO)\r\n       \r\n        setCurrentCartList(presentedListToModify)\r\n        setOrders(updatedOrders) \r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OrderGrid>\r\n            <label></label>\r\n            <label>PRODUCT</label>\r\n            <label>QTY</label>\r\n            <label>PREV</label>\r\n        {currentCartList.map(order => \r\n            <React.Fragment key={order[\"prodName\"]+\"b\"}>\r\n                <TrashCan>\r\n                <Button icon=\"pi pi-trash\" \r\n                    className=\"p-button-raised p-button-rounded p-button-warning p-button-sm\"\r\n                    value=\"0\"\r\n                    onClick={e => {handleQtyModify(order[\"prodName\"],\"0\",order[\"SO\"])}}\r\n                    key={order[\"prodName\"]+\"e\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]}\r\n                    id={order[\"prodName\"]} />\r\n                </TrashCan>\r\n                <label key={order[\"prodName\"]}>{order[\"prodName\"]}</label>   \r\n                <InputBox>\r\n                <input  \r\n                    type=\"text\" \r\n                    size=\"3\"\r\n                    maxLength=\"4\"\r\n                    key={order[\"prodName\"]+\"c\"} \r\n                    id={order[\"prodName\"]+\"item\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]} \r\n                    placeholder={order[\"qty\"]} \r\n                    onKeyUp={e => {handleQtyModify(order[\"prodName\"],e.target.value, order[\"SO\"])}}\r\n                    onBlur={(e) => {\r\n\r\n                        e.target.value = ''\r\n\r\n                    }}\r\n                        >\r\n                </input>\r\n                </InputBox>\r\n                <Previous>\r\n                <label \r\n                    key={order[\"prodName\"]+\"d\"}>{order[\"SO\"] === order[\"qty\"] ? '' : order[\"SO\"]}\r\n                </label>\r\n                </Previous>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        </OrderGrid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BuildCurrentCartList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\Customers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\customers.js",[],["292","293"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\poNotes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\deliveryDate.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reusableComponents\\routes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",["294","295"],"import React, { useRef, useState } from 'react';\r\n\r\nimport { Menubar } from 'primereact/menubar';\r\nimport { TabMenu } from 'primereact/tabmenu';\r\n\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport 'primereact/resources/themes/bootstrap4-light-purple/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst BackGround = styled.div`\r\n      width: 100%;\r\n      background-color: white\r\n   `\r\n\r\nfunction Nav() {\r\n\r\n   \r\n   const [ selectedMenu, setSelectedMenu ] = useState(\"\")\r\n\r\n   \r\n   const items = [\r\n      {label: 'Production', icon: 'pi pi-fw pi-chart-bar', command:()=>{ setSelectedMenu(\"prod\")}},\r\n      {label: 'Logistics', icon: 'pi pi-fw pi-map', command:()=>{ setSelectedMenu(\"log\")}},\r\n      {label: 'Ordering', icon: 'pi pi-fw pi-shopping-cart', command:()=>{ window.location=\"/Ordering\"; }},\r\n      {label: 'Customers', icon: 'pi pi-fw pi-users', command:()=>{ window.location=\"/Customers\"; }},\r\n      {label: 'Products', icon: 'pi pi-fw pi-tags', command:()=>{ setSelectedMenu(\"items\")}},\r\n      {label: 'Billing', icon: 'pi pi-fw pi-money-bill', command:()=>{ setSelectedMenu(\"billing\")}},\r\n      {label: 'Settings', icon: 'pi pi-fw pi-cog', command:()=>{ setSelectedMenu(\"settings\")}}\r\n   ];\r\n\r\n\r\n\r\n   const noitems = [\r\n      {label: ''},\r\n   ];\r\n\r\n   const proditems = [\r\n      {label: 'BPBN'},\r\n      {label: 'BPBS'},\r\n      {label: 'Croix'},\r\n   ];\r\n\r\n   const logitems = [\r\n      {label: 'By Route', command:()=>{ window.location=\"/logistics/byRoute\"; }},\r\n      {label: 'By Customer', command:()=>{ window.location=\"/logistics/byCustomer\"; }},\r\n      {label: 'By Product', command:()=>{ window.location=\"/logistics/byProduct\"; }},\r\n   ];\r\n\r\n   const orderitems = [\r\n      {label: 'Ordering'},\r\n   ];\r\n\r\n   const custitems = [\r\n      {label: 'Customers', command:()=>{ window.location=\"/Customers\"; }},\r\n   ];\r\n\r\n   const itemitems = [\r\n      {label: 'Products'},\r\n   ];\r\n\r\n   const billingitems = [\r\n      {label: 'Billing'},\r\n   ];\r\n\r\n   const settingsitems = [\r\n      {label: 'Settings'},\r\n   ];\r\n\r\n\r\n \r\n\r\n  return (\r\n      <div className = \"card\">\r\n         <Menubar model={items} />\r\n         <BackGround>\r\n         <TabMenu model={\r\n           selectedMenu === \"prod\" ? proditems :\r\n           selectedMenu === \"log\" ? logitems :\r\n           selectedMenu === \"order\" ? orderitems :\r\n           selectedMenu === \"cust\" ? custitems :\r\n           selectedMenu === \"items\" ? itemitems :\r\n           selectedMenu === \"billing\" ? billingitems :\r\n           selectedMenu === \"settings\" ? settingsitems :\r\n           selectedMenu === \"\" ? noitems :\r\n\r\n           ''\r\n           } />\r\n         </BackGround>\r\n      </div>          \r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Customers.js",["296"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CustomerContext, CustomerLoad } from './dataContexts/CustomerContext'\r\n\r\n\r\n\r\n\r\nfunction Customers() {\r\n\r\n  const { customer, custLoaded, setCustLoaded } = useContext(CustomerContext)\r\n\r\n  useEffect(() => {\r\n    if (!customer){\r\n        setCustLoaded(false)\r\n    }\r\n  },[])\r\n\r\n  const MainWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : ''}\r\n        <MainWrapper>\r\n          <DataTable value={customer} className=\"p-datatable-striped\" selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"name\" header=\"Customer\"sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n            <Column field=\"zoneName\" header=\"Zone\" sortable></Column>\r\n            <Column field=\"email\" header=\"Email\"></Column>\r\n            <Column field=\"phone\" header=\"Phone\"></Column>\r\n          </DataTable>\r\n      </MainWrapper> \r\n    </React.Fragment>         \r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Products.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["297","298","299","300","301","302","303","304"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\n\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n    let { custLoaded, fullCustLoaded } = useContext(CustomerContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n\r\n\r\n   \r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading ? <div className = \"Loader\"><div className = \"loaderBack\"><ProgressSpinner/></div></div> :''}\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js",[],["305","306"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js",["307","308","309","310"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.customer}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        \r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"customer\"]= order[2]\r\n                    newData[\"product\"] = order[1]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n\r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    \r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"customer\" \r\n                    sortMode=\"single\" sortField=\"customer\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js",["311","312","313","314","315"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByProduct = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.product}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"product\"]= order[1]\r\n                    newData[\"customer\"] = order[2]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"product\" \r\n                    sortMode=\"single\" sortField=\"product\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        \r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByProduct","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js",["316","317","318","319","320"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList } from '../../helpers/sortDataHelpers'\r\n\r\n\r\n\r\nconst LogisticsFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { chosen, delivDate, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    setRouteIsOn(true)\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n    \r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default LogisticsFunctions","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js",["321","322"],"import React, { useContext } from 'react';\r\n\r\n\r\nimport Calendar from '../ordering/Parts/Calendar'\r\nimport ByCustomer from './ByCustomer.js'\r\nimport Routes from '../../reusableComponents/routes';\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { OrdersContext, OrdersLoad } from '../../dataContexts/OrdersContext'\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { StandingContext, StandingLoad } from '../../dataContexts/StandingContext'\r\nimport LogisticsFunctions from './LogisticsFunctions';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LogisticsContainer = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr; \r\n    `\r\n\r\n  const InfoContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    box-sizing: border-box;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    `\r\n  const BasicContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    `\r\n\r\n\r\n\r\n\r\n\r\nfunction Logistics() {\r\n\r\n  const delivDate = \"01/02/2021\"\r\n\r\n  const cities = [\r\n    {name: 'New York', code: 'NY'},\r\n    {name: 'Rome', code: 'RM'},\r\n    {name: 'London', code: 'LDN'},\r\n    {name: 'Istanbul', code: 'IST'},\r\n    {name: 'Paris', code: 'PRS'}\r\n  ];\r\n\r\n  \r\n  const { standLoaded } = useContext(StandingContext)\r\n  const { prodLoaded } = useContext(ProductsContext)\r\n  const { custLoaded } = useContext(CustomerContext)\r\n  const { ordersLoaded } = useContext(OrdersContext)\r\n\r\n  return (\r\n      <LogisticsContainer>\r\n       \r\n        {!standLoaded ? <StandingLoad /> : ''}\r\n        {!prodLoaded ? <ProductsLoad /> : ''}\r\n        {!custLoaded ? <CustomerLoad /> : ''}\r\n        {!ordersLoaded ? <OrdersLoad /> : ''}\r\n        <BasicContainer>\r\n          <Calendar />\r\n        </BasicContainer>\r\n        \r\n          <div id=\"orderCommand\">\r\n            <InfoContainer>\r\n              <label htmlFor=\"delivDate\" className=\"p-d-block\">Delivery Date</label>\r\n              <InputText id=\"delivDate\" value={delivDate} />\r\n              <Dropdown options={cities} optionLabel=\"name\" placeholder=\"Select a route\"/>\r\n              <Button label=\"Print\" icon=\"pi pi-print\" className=\"p-button-raised p-button-rounded p-button-success\" />\r\n              <Button label=\"Refresh\" icon=\"pi pi-refresh\" className=\"p-button-raised p-button-rounded p-button-info\" />\r\n            </InfoContainer>\r\n            <BasicContainer><ByCustomer /> </BasicContainer>\r\n          </div> \r\n         \r\n\r\n\r\n          </LogisticsContainer>\r\n        \r\n\r\n      \r\n        \r\n      \r\n            \r\n  );\r\n}\r\n\r\nexport default Logistics;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js",["323"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { products } = useContext(ProductsContext)\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ columns, setColumns ] = useState([])\r\n    const [ data, setData ] = useState([])\r\n\r\n\r\n    const constructColumns = () => {\r\n      \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && \r\n                    orderList[i][2] === orderList[j][2] \r\n                    ){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => order[4] === route)\r\n\r\n        let listOfProducts = orderList.map(order => order[1])\r\n        listOfProducts = new Set(listOfProducts)\r\n        let prodArray = []\r\n        for (let prod of listOfProducts){\r\n            for (let item of products){\r\n                if (prod === item[1]){\r\n                    let newItem = [prod, item[2],item[4],item[5]]\r\n                    prodArray.push(newItem)\r\n                }\r\n            }\r\n        }\r\n\r\n        sortAtoZDataByIndex(prodArray,2)\r\n\r\n\r\n        let columns = [{field: 'customer', header: 'Customer', width: {width:'10%'} }]\r\n        for (let prod of prodArray){\r\n            let newCol = {field: prod[0], header: prod[1], width: {width:'30px'}}\r\n            columns.push(newCol)\r\n        }\r\n        return columns\r\n        \r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n\r\n        orderList = orderList.filter(order => order[4] === route)\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let cust of listOfCustomers){\r\n            let newData = {\"customer\": cust}\r\n            for (let order of orderList){\r\n                if (order[2] === cust){\r\n                    newData[order[1]] = order[0]\r\n                }\r\n            }\r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let col = constructColumns()\r\n        let dat = constructData()\r\n        setColumns(col)\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n\r\n    \r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column npmkey={col.field} field={col.field} header={col.header} style={col.width}/>;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\" \r\n                    value={data} resizableColumns columnResizeMode=\"fit\">\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",["324"],"import React, { useContext } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { todayPlus, daysOfTheWeek } from '../../../helpers/dateTimeHelpers'\r\nimport { \r\n  buildCurrentOrder, \r\n  testEntryForProduct, \r\n  createArrayofEnteredProducts,\r\n  createOrdersToUpdate,\r\n  buildOrdersToModify,\r\n  addUpdatesToOrders\r\n  } from '../../../helpers/CartBuildingHelpers'\r\n\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst CommandLine = styled.span`\r\n    display: grid;\r\n    justify-self: stretch;\r\n\r\n    `\r\n \r\nconst OrderCommandLine = () => {\r\n\r\n  const { chosen, setChosen, delivDate, setDelivDate, route, ponote } = useContext(CurrentDataContext)\r\n  const { orders, setOrders } = useContext(OrdersContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { products } = useContext(ProductsContext)\r\n  const { orderTypeWhole, setOrderTypeWhole, setRouteIsOn } = useContext(ToggleContext)\r\n  \r\n  let tomorrow = todayPlus()[1]\r\n\r\n\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n\r\n    let nextCustomer = chosen\r\n\r\n    if (entry.includes(\"retail \")){\r\n      setOrderTypeWhole(false)\r\n      let newRetailCustName = entry.replace(\"retail \",\"\")\r\n      let newRetailCustList = [...orders]\r\n      let newRetailCustEntry = [\"\",\"\",newRetailCustName,\"\",\"\",\"\",false,\"\"]\r\n      newRetailCustList.push(newRetailCustEntry)\r\n      setOrders(newRetailCustList)\r\n      setDelivDate(tomorrow)\r\n      setChosen(newRetailCustName);\r\n      return\r\n    } \r\n\r\n    for (let cust of customers) {\r\n      if (entry.includes(cust[2]) || entry.includes(cust[0])) {\r\n        nextCustomer = cust[2];\r\n        if (nextCustomer !== ''){\r\n          setChosen(nextCustomer)\r\n          setRouteIsOn(true)\r\n          setDelivDate(tomorrow)\r\n          setOrderTypeWhole(true)\r\n          return\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    if (nextCustomer === '' && chosen === ''){\r\n      swal ({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000\r\n      })\r\n      return\r\n    }\r\n\r\n    \r\n    return false\r\n  };\r\n  \r\n  \r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [ today, tomorrow, twoDay ] = todayPlus()\r\n    let [ Sun, Mon, Tues, Wed, Thurs, Fri, Sat ] = daysOfTheWeek()\r\n    let dateWords = [ ['today',today],['tomorrow',tomorrow],['twoday',twoDay],\r\n                      ['sun',Sun],['mon',Mon],['tue',Tues],['tues',Tues],['wed',Wed],['thu',Thurs],\r\n                      ['thur',Thurs],['thurs',Thurs],['fri',Fri],['sat',Sat]]\r\n    for (let wordSet of dateWords){\r\n      if(entry.includes(wordSet[0])){\r\n        setDelivDate(wordSet[1])\r\n      }\r\n      \r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  const checkForProducts = (entry) => {\r\n    \r\n    if (testEntryForProduct(entry)){\r\n      let enteredProducts = createArrayofEnteredProducts(entry)\r\n      let ordersToUpdate = createOrdersToUpdate(products, enteredProducts, chosen, ponote, route, orderTypeWhole, delivDate)\r\n      let custOrderList = buildCurrentOrder(chosen,delivDate,orders,standing)\r\n      let ordersToModify = [...orders]\r\n      if (custOrderList.length>0){\r\n        ordersToModify = buildOrdersToModify(orders, chosen, delivDate, ordersToUpdate, custOrderList)   \r\n      }\r\n      let addedOrdersToUpdate = addUpdatesToOrders(chosen, delivDate, ordersToUpdate, ordersToModify) \r\n      setOrders(addedOrdersToUpdate)\r\n    }\r\n  }\r\n\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers)\r\n    checkForDelivDate(entry)\r\n    checkForProducts(entry)\r\n  };\r\n\r\n  \r\n\r\n  const handleInput = (entry) => {\r\n     if (entry.key === \"Enter\") {\r\n        interpretEntry(entry.target.value)\r\n        document.getElementById(\"orderCommand\").value = ''; \r\n        \r\n    }\r\n    return\r\n  };\r\n\r\n  \r\n  return (  \r\n    <CommandLine>\r\n    <span className=\"p-float-label\">\r\n      <InputText id=\"orderCommand\" size=\"50\"/>\r\n      <label htmlFor=\"orderCommand\">Enter Customers, Orders, Dates ...</label>\r\n    </span>\r\n    </CommandLine>\r\n      \r\n  );\r\n}\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["325"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext';\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\n\r\nimport { tomorrow } from \"../../../helpers/dateTimeHelpers\"\r\n\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst CurrentInfo = styled.div`\r\n    width: 100%;\r\n    display: grid;\r\n    margin: 10px 0;\r\n    grid-template-columns: 1fr;\r\n    column-gap: 10px;\r\n    row-gap: 10px; \r\n    background-color: lightgrey;\r\n    `\r\n\r\n  const SpecialInfo = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    margin: 0px 10px 10px 10px;\r\n    `\r\n\r\n  const TitleBox = styled.div`\r\n    display: flex;\r\n    width: 90%;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    `\r\n  const Title = styled.h2`\r\n    padding: 0;\r\n    margin: 10px 0;\r\n    `\r\n  const DateStyle = styled.h4`\r\n    padding: 0;\r\n    color: grey;\r\n    margin: 10px 0;\r\n    `\r\n  const FulfillOptions = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n    margin: 10px;\r\n    align-items: center;\r\n    justify-items: left;\r\n    `\r\n\r\n  const ho = {\r\n    color: \"red\"\r\n    }\r\n\r\n  const so = {\r\n    color: \"rgb(66, 97, 201)\"\r\n    }\r\n\r\n\r\nconst CurrentOrderInfo = () => {\r\n\r\n  const {cartList, standList, orderTypeWhole } = useContext(ToggleContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { chosen, setRoute, ponote, setPonote, setChosen, delivDate, setDelivDate, currentCartList } = useContext(CurrentDataContext)\r\n\r\n  const [ customerGroup, setCustomerGroup ] = useState(customers)\r\n  const [ delivStatus, setDelivStatus ] = useState('slopick')\r\n\r\n\r\n  let orderType\r\n  cartList ? orderType = \"Cart\" : standList ? orderType = \"Standing\" : orderType = \"Holding\"\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n      setCustomerGroup(customers)\r\n    },[ customers ])\r\n\r\n\r\n    useEffect(() => {\r\n      if (currentCartList.length>0){\r\n        setDelivStatus(currentCartList[0][\"route\"])\r\n        setRoute(currentCartList[0][\"route\"])\r\n        if (currentCartList[0][\"ponote\"]!==\"na\" && currentCartList[0][\"ponote\"] !==undefined){\r\n          setPonote(currentCartList[0][\"ponote\"])\r\n        } else {\r\n          setPonote(\"\")\r\n        }\r\n      }\r\n    }, [currentCartList])\r\n\r\n    \r\n    const handleChosen = (chosen) => {\r\n      setChosen(chosen)\r\n      setDelivDate(tomorrow())\r\n    }\r\n\r\n    const changeDate = (date) => {\r\n      let fd = new Date(date)\r\n      fd.setMinutes(fd.getMinutes()+fd.getTimezoneOffset()) \r\n      let returnDate = fd.toDateString()\r\n      \r\n      return returnDate\r\n      \r\n    }\r\n\r\n  return (   \r\n    <React.Fragment>\r\n      {orderTypeWhole ?\r\n      <React.Fragment> \r\n        <TitleBox>\r\n          <Title style={cartList ? so : standList ? so : ho }>Wholesale {orderType} Order</Title>\r\n          <DateStyle>{delivDate ? changeDate(delivDate) : ''}</DateStyle>\r\n        </TitleBox>\r\n      </React.Fragment> : <h2 style={standList ? so : ho }>Retail {orderType} Order</h2>}\r\n\r\n      \r\n        <CurrentInfo>\r\n         \r\n          <FulfillOptions> \r\n\r\n            <Dropdown id=\"customers\" \r\n              value={chosen} options={customerGroup} \r\n              optionLabel=\"name\" placeholder=\"Select a customer\"\r\n              onChange={(e) => handleChosen(e.value)}/>     \r\n            \r\n            <RadioButton value=\"deliv\" name=\"delivery\" \r\n              onChange={(e) => setDelivStatus(e.value)} checked={delivStatus === 'deliv'}/>\r\n            <label htmlFor=\"delivery\">Delivery</label>\r\n            \r\n            <RadioButton value=\"slopick\" name=\"delivery\"\r\n              onChange={(e) => setDelivStatus(e.value)} checked={delivStatus === 'slopick'} />\r\n            <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n            \r\n            <RadioButton value=\"atownpick\" name=\"delivery\" \r\n              onChange={(e) => setDelivStatus(e.value)} checked={delivStatus === 'atownpick'}/>\r\n            <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n\r\n          </FulfillOptions>\r\n\r\n          <SpecialInfo>\r\n            <span className=\"p-float-label\">\r\n              <InputText id=\"in\" size=\"50\" value={ponote} onChange={(e) => setPonote(e.target.value)}/>\r\n              <label htmlFor=\"in\">{ponote===\"\" ? \"PO#/Special Instructions...\" : \"\"}</label>\r\n            </span>\r\n          </SpecialInfo>\r\n        </CurrentInfo>\r\n    </React.Fragment>\r\n      \r\n  );\r\n}\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["326","327"],"import React, { useContext } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { convertDatetoBPBDate } from '../../../helpers/dateTimeHelpers';\r\nimport { buildCurrentOrder } from '../../../helpers/CartBuildingHelpers'\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst OrderButtons = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    `\r\n\r\n\r\n\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nfunction OrderEntryButtons() {\r\n\r\n  \r\n\r\n  const { route, ponote } = useContext(CurrentDataContext)\r\n  const { setChosen, delivDate, chosen, currentCartList } = useContext(CurrentDataContext)\r\n  const { orders, setOrders, recentOrders, setRecentOrders } = useContext(OrdersContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { orderTypeWhole, setOrderTypeWhole,modifications, setModifications, \r\n          cartList, setCartList, standList, setRouteIsOn } = useContext(ToggleContext)\r\n\r\n  let type = orderTypeWhole ? \"Special\" : \"Whole\";\r\n  let cartStand = cartList ? \"Standing\" : \"Cart\"\r\n\r\n\r\n\r\n  const handleChangeorderTypeWhole = () => {\r\n    document.getElementById('orderCommand').focus()\r\n    setOrderTypeWhole(!orderTypeWhole)\r\n    setChosen('')\r\n  }\r\n\r\n  const handleCartStandToggle = () => {\r\n    document.getElementById('orderCommand').focus()\r\n    let realCartList = clonedeep(cartList)\r\n    realCartList ? setRouteIsOn(false) : setRouteIsOn(true)\r\n    setCartList(!cartList)\r\n  }\r\n  \r\n  const handleClear = () => {\r\n\r\n    let orderList = clonedeep(currentCartList)  \r\n    console.log(orderList)\r\n    orderList = orderList.map(order => ({\r\n      \"qty\": \"0\",\r\n      \"prodName\": order[\"prodName\"],\r\n      \"custName\": order[\"custName\"],\r\n      \"PONote\": order[\"PONote\"],\r\n      \"route\": order[\"route\"],\r\n      \"SO\": order[\"SO\"], \r\n      \"isWhole\": orderTypeWhole,\r\n      \"delivDate\":convertDatetoBPBDate(delivDate)}\r\n      ))\r\n\r\n    let currentOrderList = orderList.concat(orders)\r\n\r\n    for (let i=0; i<currentOrderList.length; ++i ){\r\n        for (let j=i+1; j<currentOrderList.length; ++j){\r\n            if (currentOrderList[i][\"prodName\"] === currentOrderList[j][\"prodName\"] &&\r\n              currentOrderList[i][\"custName\"] === currentOrderList[j][\"custName\"] &&\r\n              currentOrderList[i][\"delivDate\"] === currentOrderList[j][\"delivDate\"]){\r\n                currentOrderList.splice(j,1);\r\n            }\r\n        }\r\n    }\r\n    setOrders(currentOrderList);\r\n  }\r\n\r\n\r\n  \r\n  const handleAddUpdate =  () => {\r\n\r\n    let orderList = buildCurrentOrder(chosen,delivDate,orders,standing)\r\n    setModifications(false)\r\n    // set route if route has changed\r\n    if (orderList.length>0) {\r\n      if (orderList[0][\"route\"]!==route){\r\n        orderList.map(item => item[\"route\"] = route)\r\n      }\r\n      if (orderList[0][\"PONote\"]!==ponote){\r\n        orderList.map(item => item[\"PONote\"] = ponote)\r\n      } \r\n    }    \r\n    // Set SO to equal QTY \r\n    orderList.map(item => item[\"SO\"] = item[\"qty\"])\r\n    // Add present List to Orders\r\n    let recent = clonedeep(orders)\r\n    let newOrderList = orderList.concat(recent)\r\n        for (let i=0; i<newOrderList.length; ++i ){\r\n            for (let j=i+1; j<newOrderList.length; ++j){\r\n                if (  newOrderList[i][\"prodName\"] === newOrderList[j][\"prodName\"] &&\r\n                      newOrderList[i][\"custName\"] === newOrderList[j][\"custName\"] &&\r\n                      newOrderList[i][\"delivDate\"] === newOrderList[j][\"delivDate\"]){\r\n                    newOrderList.splice(j,1);\r\n                }\r\n            }\r\n          }\r\n  \r\n    if (newOrderList){\r\n      document.getElementById('orderCommand').focus()\r\n      setOrders(newOrderList)\r\n    }\r\n\r\n\r\n    // Create item (date, name, whole) to add to recent list\r\n    let newRecentOrder = [delivDate,chosen.name,orderTypeWhole,cartList,standList]\r\n    let stringRecentOrder = JSON.stringify(newRecentOrder)\r\n    const currentRecentOrders = [...recentOrders]\r\n    let stringCurrentRecentOrders = JSON.stringify(currentRecentOrders)\r\n\r\n    // If item already exists, send update message\r\n    if (stringCurrentRecentOrders.indexOf(stringRecentOrder) !== -1){\r\n      swal ({\r\n        text: \"Order Updated\",\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000\r\n      })\r\n      } else {\r\n        currentRecentOrders.push(newRecentOrder)\r\n        swal ({\r\n          text: \"Order Updated\",\r\n          icon: \"success\",\r\n          buttons: false,\r\n          timer: 2000\r\n        })\r\n      }\r\n    setRecentOrders(currentRecentOrders)\r\n  }\r\n  \r\n  const noMods = {\r\n    backgroundColor: \"green\"\r\n  }\r\n  \r\n  const mods = {\r\n    backgroundColor: \"red\"\r\n  }\r\n\r\n  return (         \r\n    <OrderButtons>\r\n      <Button label=\"Add/Update\" icon=\"pi pi-plus\" disabled={chosen==='  '} onClick={handleAddUpdate}\r\n        className={modifications ? \"p-button-raised p-button-rounded p-button-danger\" : \"p-button-raised p-button-rounded p-button-success\"} />\r\n      <Button label=\"Clear\" icon=\"pi pi-trash\" disabled={!cartList} onClick={handleClear}\r\n        className=\"p-button-raised p-button-rounded p-button-info\" />\r\n      <Button label={cartStand} icon=\"pi pi-shopping-cart\" onClick={handleCartStandToggle} \r\n        className=\"p-button-raised p-button-rounded p-button-secondary\" />\r\n      <Button label={type} icon=\"pi pi-dollar\" onClick={handleChangeorderTypeWhole}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\" />\r\n      \r\n    </OrderButtons>    \r\n  );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default OrderEntryButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["328"],"import React,{ useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nimport { \r\n    CreateStandingArray,\r\n    CreateCartDateArray,\r\n    CreateBlankCartDateArray\r\n    } from '../../../helpers/calendarBuildHelper';\r\n\r\n\r\n\r\nconst Calendar = () => {\r\n\r\n    const { chosen, delivDate, setDelivDate, calendarEvents, setCalendarEvents } = useContext(CurrentDataContext);\r\n    const { standing } = useContext(StandingContext)\r\n    const { orders } = useContext(OrdersContext)\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let backToStandingArray = CreateStandingArray(standing,chosen.name);\r\n        let cartDateArray = CreateCartDateArray(orders,chosen.name);\r\n        let cartBlankDateArray = CreateBlankCartDateArray(orders,chosen.name);\r\n        \r\n\r\n        let standingEvents = {title: '',\r\n                            daysOfWeek: backToStandingArray,\r\n                            display: 'background'}\r\n\r\n\r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        calendarEvents.push(standingEvents)\r\n\r\n\r\n        for (let order of cartDateArray) {\r\n            let newEvent = {title: '',\r\n                        date: order,\r\n                        display: 'background'}\r\n            calendarEvents.push(newEvent)\r\n        }\r\n\r\n\r\n        for (let order of cartBlankDateArray) {\r\n            let newEvent2 = {title: '',\r\n                        date: order,\r\n                        display: 'inverse-background'}\r\n            calendarEvents.push(newEvent2)\r\n        }\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate])\r\n  \r\n\r\n\r\n    const handleDateSelect = (selectInfo) => {\r\n        document.getElementById(\"orderCommand\").focus()\r\n        console.log(selectInfo.dateStr)\r\n        setDelivDate(selectInfo.dateStr)\r\n    }\r\n\r\n    return(  \r\n        <React.Fragment> \r\n            <div className=\"calendarApp\" id=\"test\">\r\n                <FullCalendar\r\n                    plugins={[ dayGridPlugin, interactionPlugin ]}\r\n                    defaultView=\"dayGridMonth\"\r\n                    aspectRatio={1}\r\n                    contentHeight=\"auto\"\r\n                    eventBackgroundColor = \"blue\"\r\n                    dateClick = {handleDateSelect}\r\n                    headerToolbar ={{\r\n                        start: 'title',\r\n                        center: '',\r\n                        end: 'prev,next'\r\n                    }}\r\n                    events = {calendarEvents}    \r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n\r\n  \r\nexport default Calendar;\r\n\r\n",{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","severity":1,"message":"334","line":50,"column":7,"nodeType":"335","endLine":50,"endColumn":13,"suggestions":"336"},{"ruleId":"333","severity":1,"message":"337","line":56,"column":7,"nodeType":"335","endLine":56,"endColumn":13,"suggestions":"338"},{"ruleId":"333","severity":1,"message":"339","line":42,"column":7,"nodeType":"335","endLine":42,"endColumn":13,"suggestions":"340"},{"ruleId":"341","severity":1,"message":"342","line":3,"column":10,"nodeType":"343","messageId":"344","endLine":3,"endColumn":29},{"ruleId":"333","severity":1,"message":"345","line":47,"column":7,"nodeType":"335","endLine":47,"endColumn":13,"suggestions":"346"},{"ruleId":"341","severity":1,"message":"347","line":6,"column":10,"nodeType":"343","messageId":"344","endLine":6,"endColumn":24},{"ruleId":"333","severity":1,"message":"348","line":45,"column":7,"nodeType":"335","endLine":45,"endColumn":13,"suggestions":"349"},{"ruleId":"341","severity":1,"message":"350","line":20,"column":8,"nodeType":"343","messageId":"344","endLine":20,"endColumn":11},{"ruleId":"329","replacedBy":"351"},{"ruleId":"331","replacedBy":"352"},{"ruleId":"333","severity":1,"message":"353","line":42,"column":7,"nodeType":"335","endLine":42,"endColumn":9,"suggestions":"354"},{"ruleId":"333","severity":1,"message":"355","line":48,"column":7,"nodeType":"335","endLine":48,"endColumn":9,"suggestions":"356"},{"ruleId":"333","severity":1,"message":"357","line":54,"column":7,"nodeType":"335","endLine":54,"endColumn":9,"suggestions":"358"},{"ruleId":"333","severity":1,"message":"359","line":60,"column":7,"nodeType":"335","endLine":60,"endColumn":9,"suggestions":"360"},{"ruleId":"333","severity":1,"message":"361","line":66,"column":7,"nodeType":"335","endLine":66,"endColumn":9,"suggestions":"362"},{"ruleId":"329","replacedBy":"363"},{"ruleId":"331","replacedBy":"364"},{"ruleId":"341","severity":1,"message":"365","line":8,"column":7,"nodeType":"343","messageId":"344","endLine":8,"endColumn":17},{"ruleId":"341","severity":1,"message":"366","line":31,"column":9,"nodeType":"343","messageId":"344","endLine":31,"endColumn":21},{"ruleId":"341","severity":1,"message":"367","line":3,"column":16,"nodeType":"343","messageId":"344","endLine":3,"endColumn":22},{"ruleId":"341","severity":1,"message":"368","line":35,"column":11,"nodeType":"343","messageId":"344","endLine":35,"endColumn":17},{"ruleId":"341","severity":1,"message":"369","line":47,"column":29,"nodeType":"343","messageId":"344","endLine":47,"endColumn":45},{"ruleId":"341","severity":1,"message":"370","line":50,"column":13,"nodeType":"343","messageId":"344","endLine":50,"endColumn":24},{"ruleId":"341","severity":1,"message":"369","line":25,"column":24,"nodeType":"343","messageId":"344","endLine":25,"endColumn":40},{"ruleId":"341","severity":1,"message":"371","line":4,"column":8,"nodeType":"343","messageId":"344","endLine":4,"endColumn":12},{"ruleId":"333","severity":1,"message":"372","line":63,"column":8,"nodeType":"335","endLine":63,"endColumn":65,"suggestions":"373"},{"ruleId":"329","replacedBy":"374"},{"ruleId":"331","replacedBy":"375"},{"ruleId":"341","severity":1,"message":"376","line":1,"column":17,"nodeType":"343","messageId":"344","endLine":1,"endColumn":23},{"ruleId":"341","severity":1,"message":"371","line":7,"column":8,"nodeType":"343","messageId":"344","endLine":7,"endColumn":12},{"ruleId":"333","severity":1,"message":"377","line":21,"column":5,"nodeType":"335","endLine":21,"endColumn":7,"suggestions":"378"},{"ruleId":"341","severity":1,"message":"379","line":1,"column":29,"nodeType":"343","messageId":"344","endLine":1,"endColumn":38},{"ruleId":"341","severity":1,"message":"380","line":16,"column":22,"nodeType":"343","messageId":"344","endLine":16,"endColumn":34},{"ruleId":"341","severity":1,"message":"381","line":17,"column":11,"nodeType":"343","messageId":"344","endLine":17,"endColumn":21},{"ruleId":"341","severity":1,"message":"382","line":17,"column":23,"nodeType":"343","messageId":"344","endLine":17,"endColumn":37},{"ruleId":"341","severity":1,"message":"383","line":18,"column":11,"nodeType":"343","messageId":"344","endLine":18,"endColumn":23},{"ruleId":"341","severity":1,"message":"384","line":19,"column":11,"nodeType":"343","messageId":"344","endLine":19,"endColumn":21},{"ruleId":"341","severity":1,"message":"385","line":20,"column":11,"nodeType":"343","messageId":"344","endLine":20,"endColumn":22},{"ruleId":"341","severity":1,"message":"386","line":21,"column":11,"nodeType":"343","messageId":"344","endLine":21,"endColumn":21},{"ruleId":"329","replacedBy":"387"},{"ruleId":"331","replacedBy":"388"},{"ruleId":"341","severity":1,"message":"389","line":8,"column":10,"nodeType":"343","messageId":"344","endLine":8,"endColumn":25},{"ruleId":"341","severity":1,"message":"342","line":12,"column":10,"nodeType":"343","messageId":"344","endLine":12,"endColumn":29},{"ruleId":"333","severity":1,"message":"390","line":83,"column":7,"nodeType":"335","endLine":83,"endColumn":25,"suggestions":"391"},{"ruleId":"333","severity":1,"message":"392","line":87,"column":7,"nodeType":"335","endLine":87,"endColumn":9,"suggestions":"393"},{"ruleId":"341","severity":1,"message":"389","line":8,"column":10,"nodeType":"343","messageId":"344","endLine":8,"endColumn":25},{"ruleId":"341","severity":1,"message":"342","line":12,"column":10,"nodeType":"343","messageId":"344","endLine":12,"endColumn":29},{"ruleId":"341","severity":1,"message":"394","line":61,"column":35,"nodeType":"343","messageId":"344","endLine":61,"endColumn":50},{"ruleId":"333","severity":1,"message":"390","line":84,"column":7,"nodeType":"335","endLine":84,"endColumn":25,"suggestions":"395"},{"ruleId":"333","severity":1,"message":"392","line":89,"column":7,"nodeType":"335","endLine":89,"endColumn":9,"suggestions":"396"},{"ruleId":"341","severity":1,"message":"397","line":8,"column":10,"nodeType":"343","messageId":"344","endLine":8,"endColumn":24},{"ruleId":"333","severity":1,"message":"353","line":36,"column":7,"nodeType":"335","endLine":36,"endColumn":9,"suggestions":"398"},{"ruleId":"333","severity":1,"message":"355","line":42,"column":7,"nodeType":"335","endLine":42,"endColumn":9,"suggestions":"399"},{"ruleId":"333","severity":1,"message":"357","line":48,"column":7,"nodeType":"335","endLine":48,"endColumn":9,"suggestions":"400"},{"ruleId":"333","severity":1,"message":"359","line":54,"column":7,"nodeType":"335","endLine":54,"endColumn":9,"suggestions":"401"},{"ruleId":"341","severity":1,"message":"402","line":6,"column":8,"nodeType":"343","messageId":"344","endLine":6,"endColumn":14},{"ruleId":"341","severity":1,"message":"403","line":12,"column":8,"nodeType":"343","messageId":"344","endLine":12,"endColumn":26},{"ruleId":"333","severity":1,"message":"404","line":109,"column":7,"nodeType":"335","endLine":109,"endColumn":25,"suggestions":"405"},{"ruleId":"341","severity":1,"message":"406","line":131,"column":9,"nodeType":"343","messageId":"344","endLine":131,"endColumn":20},{"ruleId":"333","severity":1,"message":"407","line":95,"column":8,"nodeType":"335","endLine":95,"endColumn":25,"suggestions":"408"},{"ruleId":"341","severity":1,"message":"409","line":149,"column":9,"nodeType":"343","messageId":"344","endLine":149,"endColumn":15},{"ruleId":"341","severity":1,"message":"410","line":153,"column":9,"nodeType":"343","messageId":"344","endLine":153,"endColumn":13},{"ruleId":"333","severity":1,"message":"411","line":62,"column":7,"nodeType":"335","endLine":62,"endColumn":26,"suggestions":"412"},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCustLoaded', 'setCustomer', and 'setIsLoading'. Either include them or remove the dependency array.","ArrayExpression",["415"],"React Hook useEffect has missing dependencies: 'setIsLoading', 'setOrders', 'setOrdersLoaded', and 'setOriginalOrders'. Either include them or remove the dependency array.",["416"],"React Hook useEffect has missing dependencies: 'setIsLoading', 'setProdLoaded', and 'setProducts'. Either include them or remove the dependency array.",["417"],"no-unused-vars","'sortAtoZDataByIndex' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'setIsLoading', 'setOriginalStanding', 'setStandLoaded', and 'setStanding'. Either include them or remove the dependency array.",["418"],"'DayCellContent' is defined but never used.","React Hook useEffect has missing dependencies: 'setHoldLoaded', 'setHolding', 'setIsLoading', and 'setOriginalHolding'. Either include them or remove the dependency array.",["419"],"'Nav' is defined but never used.",["413"],["414"],"React Hook useEffect has missing dependencies: 'orders.length' and 'setOrdersLoaded'. Either include them or remove the dependency array.",["420"],"React Hook useEffect has missing dependencies: 'customers.length' and 'setCustLoaded'. Either include them or remove the dependency array.",["421"],"React Hook useEffect has missing dependencies: 'products.length' and 'setProdLoaded'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has missing dependencies: 'setStandLoaded' and 'standing.length'. Either include them or remove the dependency array.",["423"],"React Hook useEffect has missing dependencies: 'holding.length' and 'setHoldLoaded'. Either include them or remove the dependency array.",["424"],["413"],["414"],"'RecentList' is assigned a value but never used.","'handleUpload' is assigned a value but never used.","'uuidv4' is defined but never used.","'cities' is assigned a value but never used.","'setModifications' is assigned a value but never used.","'productList' is assigned a value but never used.","'swal' is defined but never used.","React Hook useEffect has a missing dependency: 'setModifications'. Either include it or remove the dependency array.",["425"],["413"],["414"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'customer' and 'setCustLoaded'. Either include them or remove the dependency array.",["426"],"'useEffect' is defined but never used.","'setIsLoading' is assigned a value but never used.","'custLoaded' is assigned a value but never used.","'fullCustLoaded' is assigned a value but never used.","'ordersLoaded' is assigned a value but never used.","'prodLoaded' is assigned a value but never used.","'standLoaded' is assigned a value but never used.","'holdLoaded' is assigned a value but never used.",["413"],["414"],"'ProductsContext' is defined but never used.","React Hook useEffect has a missing dependency: 'constructData'. Either include it or remove the dependency array.",["427"],"React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["428"],"'listOfCustomers' is assigned a value but never used.",["429"],["430"],"'HoldingContext' is defined but never used.",["431"],["432"],["433"],["434"],"'Routes' is defined but never used.","'LogisticsFunctions' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["435"],"'handleInput' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setPonote' and 'setRoute'. Either include them or remove the dependency array.",["436"],"'noMods' is assigned a value but never used.","'mods' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["437"],"no-global-assign","no-unsafe-negation",{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"462","fix":"466"},{"desc":"464","fix":"467"},{"desc":"448","fix":"468"},{"desc":"450","fix":"469"},{"desc":"452","fix":"470"},{"desc":"454","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},"Update the dependencies array to be: [data, setCustLoaded, setCustomer, setIsLoading]",{"range":"478","text":"479"},"Update the dependencies array to be: [data, setIsLoading, setOrders, setOrdersLoaded, setOriginalOrders]",{"range":"480","text":"481"},"Update the dependencies array to be: [data, setIsLoading, setProdLoaded, setProducts]",{"range":"482","text":"483"},"Update the dependencies array to be: [data, setIsLoading, setOriginalStanding, setStandLoaded, setStanding]",{"range":"484","text":"485"},"Update the dependencies array to be: [data, setHoldLoaded, setHolding, setIsLoading, setOriginalHolding]",{"range":"486","text":"487"},"Update the dependencies array to be: [orders.length, setOrdersLoaded]",{"range":"488","text":"489"},"Update the dependencies array to be: [customers.length, setCustLoaded]",{"range":"490","text":"491"},"Update the dependencies array to be: [products.length, setProdLoaded]",{"range":"492","text":"493"},"Update the dependencies array to be: [setStandLoaded, standing.length]",{"range":"494","text":"495"},"Update the dependencies array to be: [holding.length, setHoldLoaded]",{"range":"496","text":"497"},"Update the dependencies array to be: [chosen, delivDate, orders, setCurrentCartList, setModifications, standing]",{"range":"498","text":"499"},"Update the dependencies array to be: [customer, setCustLoaded]",{"range":"500","text":"501"},"Update the dependencies array to be: [constructData, delivDate, route]",{"range":"502","text":"503"},"Update the dependencies array to be: [setRoute]",{"range":"504","text":"505"},{"range":"506","text":"503"},{"range":"507","text":"505"},{"range":"508","text":"489"},{"range":"509","text":"491"},{"range":"510","text":"493"},{"range":"511","text":"495"},"Update the dependencies array to be: [constructColumns, constructData, delivDate, route]",{"range":"512","text":"513"},"Update the dependencies array to be: [currentCartList, setPonote, setRoute]",{"range":"514","text":"515"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"516","text":"517"},[1187,1193],"[data, setCustLoaded, setCustomer, setIsLoading]",[1534,1540],"[data, setIsLoading, setOrders, setOrdersLoaded, setOriginalOrders]",[1118,1124],"[data, setIsLoading, setProdLoaded, setProducts]",[1464,1470],"[data, setIsLoading, setOriginalStanding, setStandLoaded, setStanding]",[1368,1374],"[data, setHoldLoaded, setHolding, setIsLoading, setOriginalHolding]",[1713,1715],"[orders.length, setOrdersLoaded]",[1828,1830],"[customers.length, setCustLoaded]",[1942,1944],"[products.length, setProdLoaded]",[2057,2059],"[setStandLoaded, standing.length]",[2170,2172],"[holding.length, setHoldLoaded]",[1827,1884],"[chosen, delivDate, orders, setCurrentCartList, setModifications, standing]",[475,477],"[customer, setCustLoaded]",[2444,2462],"[constructData, delivDate, route]",[2518,2520],"[setRoute]",[2548,2566],[2632,2634],[1408,1410],[1523,1525],[1637,1639],[1752,1754],[3600,3618],"[constructColumns, constructData, delivDate, route]",[2506,2523],"[currentCartList, setPonote, setRoute]",[1990,2009],"[chosen, delivDate, orders, setCalendarEvents, standing]"]