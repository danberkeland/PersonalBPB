[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"74"},{"size":362,"mtime":1609089131749,"results":"75","hashOfConfig":"76"},{"size":1920,"mtime":1614734016687,"results":"77","hashOfConfig":"76"},{"size":500,"mtime":1609089131749,"results":"78","hashOfConfig":"76"},{"size":1552,"mtime":1615234090706,"results":"79","hashOfConfig":"76"},{"size":2712,"mtime":1615553819367,"results":"80","hashOfConfig":"76"},{"size":2082,"mtime":1615813943751,"results":"81","hashOfConfig":"76"},{"size":1437,"mtime":1615383938668,"results":"82","hashOfConfig":"76"},{"size":1821,"mtime":1615751621965,"results":"83","hashOfConfig":"76"},{"size":5581,"mtime":1615553840302,"results":"84","hashOfConfig":"76"},{"size":1963,"mtime":1615553936489,"results":"85","hashOfConfig":"76"},{"size":1147,"mtime":1615769660331,"results":"86","hashOfConfig":"76"},{"size":1785,"mtime":1615751644484,"results":"87","hashOfConfig":"76"},{"size":1897,"mtime":1615432009534,"results":"88","hashOfConfig":"76"},{"size":1692,"mtime":1613912501900,"results":"89","hashOfConfig":"90"},{"size":1290,"mtime":1613420662672,"results":"91","hashOfConfig":"76"},{"size":7396,"mtime":1615896862992,"results":"92","hashOfConfig":"76"},{"size":430,"mtime":1613420662670,"results":"93","hashOfConfig":"76"},{"size":3152,"mtime":1615320263249,"results":"94","hashOfConfig":"76"},{"size":3551,"mtime":1615834253418,"results":"95","hashOfConfig":"76"},{"size":325,"mtime":1614642664576,"results":"96","hashOfConfig":"76"},{"size":4139,"mtime":1615896492009,"results":"97","hashOfConfig":"76"},{"size":411,"mtime":1615754223065,"results":"98","hashOfConfig":"76"},{"size":8769,"mtime":1615856032827,"results":"99","hashOfConfig":"76"},{"size":5034,"mtime":1615680842855,"results":"100","hashOfConfig":"76"},{"size":1941,"mtime":1615553782688,"results":"101","hashOfConfig":"76"},{"size":3141,"mtime":1615413131142,"results":"102","hashOfConfig":"76"},{"size":190,"mtime":1613420662655,"results":"103","hashOfConfig":"76"},{"size":190,"mtime":1613420662654,"results":"104","hashOfConfig":"76"},{"size":193,"mtime":1613420662657,"results":"105","hashOfConfig":"76"},{"size":197,"mtime":1613420662656,"results":"106","hashOfConfig":"76"},{"size":191,"mtime":1613420662650,"results":"107","hashOfConfig":"76"},{"size":1873,"mtime":1614706269300,"results":"108","hashOfConfig":"76"},{"size":0,"mtime":1613769374633,"results":"109","hashOfConfig":"90"},{"size":3570,"mtime":1613941048675,"results":"110","hashOfConfig":"76"},{"size":3691,"mtime":1613940913819,"results":"111","hashOfConfig":"76"},{"size":2439,"mtime":1613936701168,"results":"112","hashOfConfig":"76"},{"size":1511,"mtime":1614642664563,"results":"113","hashOfConfig":"76"},{"size":2937,"mtime":1614642664560,"results":"114","hashOfConfig":"76"},{"size":4187,"mtime":1614642664559,"results":"115","hashOfConfig":"76"},{"size":1460,"mtime":1614642664562,"results":"116","hashOfConfig":"76"},{"size":2846,"mtime":1615676410616,"results":"117","hashOfConfig":"76"},{"size":6590,"mtime":1615899602190,"results":"118","hashOfConfig":"76"},{"size":1083,"mtime":1615769721773,"results":"119","hashOfConfig":"76"},{"size":6512,"mtime":1615899163008,"results":"120","hashOfConfig":"76"},{"size":6829,"mtime":1615897458614,"results":"121","hashOfConfig":"76"},{"size":1334,"mtime":1614213824864,"results":"122","hashOfConfig":"90"},{"size":2488,"mtime":1615553767652,"results":"123","hashOfConfig":"76"},{"size":3526,"mtime":1615553539269,"results":"124","hashOfConfig":"76"},{"size":3768,"mtime":1615557169324,"results":"125","hashOfConfig":"76"},{"size":734,"mtime":1615833303228,"results":"126","hashOfConfig":"76"},{"size":6949,"mtime":1615833299641,"results":"127","hashOfConfig":"76"},{"size":10861,"mtime":1615833299905,"results":"128","hashOfConfig":"76"},{"size":1517,"mtime":1615553494489,"results":"129","hashOfConfig":"76"},{"size":1490,"mtime":1615553525148,"results":"130","hashOfConfig":"76"},{"size":4563,"mtime":1615582400731,"results":"131","hashOfConfig":"76"},{"size":2575,"mtime":1615553481891,"results":"132","hashOfConfig":"76"},{"size":2657,"mtime":1615553431625,"results":"133","hashOfConfig":"76"},{"size":6787,"mtime":1615553453368,"results":"134","hashOfConfig":"76"},{"size":1807,"mtime":1615577573426,"results":"135","hashOfConfig":"76"},{"size":2518,"mtime":1615491853492,"results":"136","hashOfConfig":"76"},{"size":2210,"mtime":1615497203094,"results":"137","hashOfConfig":"76"},{"size":8306,"mtime":1615507596884,"results":"138","hashOfConfig":"76"},{"size":4133,"mtime":1615507927817,"results":"139","hashOfConfig":"76"},{"size":2503,"mtime":1615472433068,"results":"140","hashOfConfig":"76"},{"size":2180,"mtime":1615476472722,"results":"141","hashOfConfig":"76"},{"size":3691,"mtime":1615472199948,"results":"142","hashOfConfig":"76"},{"size":1853,"mtime":1615472143997,"results":"143","hashOfConfig":"76"},{"size":1899,"mtime":1615571050337,"results":"144","hashOfConfig":"76"},{"size":1514,"mtime":1615818212264,"results":"145","hashOfConfig":"76"},{"size":4027,"mtime":1615577933420,"results":"146","hashOfConfig":"76"},{"size":2186,"mtime":1615578317981,"results":"147","hashOfConfig":"76"},{"size":2492,"mtime":1615664308665,"results":"148","hashOfConfig":"76"},{"size":5809,"mtime":1615818205241,"results":"149","hashOfConfig":"76"},{"size":1488,"mtime":1615570828178,"results":"150","hashOfConfig":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"1cny99d",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"153"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"153"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"153"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"153"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"153"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},"1dwemmr",{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"153"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"153"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"153"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"153"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"153"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"153"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"153"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"153"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"153"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"153"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"153"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"153"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"153"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"153"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"153"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"153"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"153"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"153"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"153"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"153"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"153"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"153"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"153"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"153"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"153"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["332","333"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["334"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["335","336","337"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterOrdersDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex, sortZtoADataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listOrders } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n    \r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ ordersLoaded, setOrdersLoaded ] = useState(false)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            ordersLoaded, setOrdersLoaded\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { setOrders, setOriginalOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n\r\n    useEffect(() => {\r\n        fetchOrders()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchOrders = async () => {\r\n        try{\r\n            const ordData = await API.graphql(graphqlOperation(listOrders, {\r\n                  limit: '5000'\r\n                  }))\r\n            const ordList = ordData.data.listOrders.items;\r\n                \r\n            let noDelete = ordList.filter(cust => cust[\"_deleted\"]!==true)\r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            sortedData = sortAtoZDataByIndex(sortedData, \"prodName\")\r\n                \r\n          \r\n            setOrders(sortedData)\r\n            setOrdersLoaded(true)\r\n            setOriginalOrders(sortedData);\r\n        }  catch (error){\r\n            console.log('error on fetching Orders List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["338"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["339","340","341"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["342","343","344"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n           \r\n         \r\n            setHolding(sortedData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],["345","346"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",["347"],"import {\r\n  convertDatetoBPBDate,\r\n  convertDatetoStandingDate,\r\n} from \"../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\n\r\nimport { wildcardRegExp } from \"wildcard-regex\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const buildCartList = (chosen, delivDate, orders) => {\r\n  let BPBDate = convertDatetoBPBDate(delivDate);\r\n  let filteredOrders = clonedeep(orders);\r\n  let builtCartList = [];\r\n  if (filteredOrders) {\r\n    builtCartList = filteredOrders.filter(\r\n      (order) =>\r\n        order[\"delivDate\"] === BPBDate &&\r\n        order[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n    );\r\n  }\r\n\r\n  return builtCartList;\r\n};\r\n\r\nexport const buildStandList = (chosen, delivDate, standing, route, ponote ) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter((standing) =>\r\n    standing[\"custName\"]===chosen && standing[\"isStand\"]===true\r\n  );\r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nconst convertStandListtoStandArray = (\r\n  builtStandList,\r\n  delivDate,\r\n  route,\r\n  ponote\r\n) => {\r\n  let dateSplit = delivDate.split(\"-\");\r\n  let dayOfWeek = DateTime.local(\r\n    Number(dateSplit[0]),\r\n    Number(dateSplit[1]),\r\n    Number(dateSplit[2])\r\n  ).weekdayShort;\r\n  let convertedStandList = builtStandList.map((order) => ({\r\n    id: null,\r\n    version: order[\"_version\"],\r\n    qty: order[dayOfWeek],\r\n    prodName: order[\"prodName\"],\r\n    custName: order[\"custName\"],\r\n    PONote: ponote,\r\n    route: route,\r\n    isWhole: true,\r\n    delivDate: convertDatetoBPBDate(delivDate),\r\n    timeStamp: order[\"timeStamp\"],\r\n    SO: order[dayOfWeek],\r\n  }));\r\n  return convertedStandList;\r\n};\r\n\r\nexport const compileOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (orderList[i][\"prodName\"] === orderList[j][\"prodName\"]) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\nexport const buildCurrentOrder = (\r\n  chosen,\r\n  delivDate,\r\n  orders,\r\n  standing,\r\n  route,\r\n  ponote\r\n) => {\r\n  let cartList = buildCartList(chosen, delivDate, orders);\r\n  let standList = buildStandList(chosen, delivDate, standing, route, ponote);\r\n  let currentOrderList = compileOrderList(cartList, standList);\r\n\r\n  return currentOrderList;\r\n};\r\n\r\nexport const filterOutZeros = (currentOrderList) => {\r\n  let filteredZeros = currentOrderList.filter(\r\n    (order) => Number(order[\"qty\"]) + Number(order[\"SO\"]) > 0\r\n  );\r\n  return filteredZeros;\r\n};\r\n\r\nexport const addNewInfoToOrders = (currentOrderList, orders) => {\r\n  let recent = clonedeep(orders);\r\n  let newOrderList = currentOrderList.concat(recent);\r\n  for (let i = 0; i < newOrderList.length; ++i) {\r\n    for (let j = i + 1; j < newOrderList.length; ++j) {\r\n      if (\r\n        newOrderList[i][1] === newOrderList[j][1] &&\r\n        newOrderList[i][2] === newOrderList[j][2] &&\r\n        newOrderList[i][7] === newOrderList[j][7]\r\n      ) {\r\n        newOrderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n  return newOrderList;\r\n};\r\n\r\nexport const setCurrentCartLineToQty = (prodName, currentCartList, qty) => {\r\n  let newQty = qty;\r\n  let indexToFind = prodName;\r\n\r\n  let foundPresentedIndex = currentCartList.findIndex(\r\n    (line) => line[\"prodName\"] === indexToFind\r\n  );\r\n  let presentedListToModify = clonedeep(currentCartList);\r\n\r\n  presentedListToModify[foundPresentedIndex][\"qty\"] = newQty;\r\n  return presentedListToModify;\r\n};\r\n\r\nexport const updateCurrentLineInOrdersWithQty = (\r\n  prodName,\r\n  chosen,\r\n  delivDate,\r\n  orders,\r\n  ponote,\r\n  route,\r\n  isWhole,\r\n  qty,\r\n  SO\r\n) => {\r\n  let updatedOrders = clonedeep(orders);\r\n  let foundOrdersIndex = updatedOrders.findIndex(\r\n    (line) =>\r\n      line[\"prodName\"] === prodName &&\r\n      line[\"custName\"] === chosen &&\r\n      line[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n  );\r\n  if (foundOrdersIndex >= 0) {\r\n    updatedOrders[foundOrdersIndex][\"qty\"] = qty;\r\n  } else {\r\n    let orderToAdd = {\r\n      qty: qty,\r\n      prodName: prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      SO: SO,\r\n      isWhole: isWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    updatedOrders.push(orderToAdd);\r\n  }\r\n  return updatedOrders;\r\n};\r\n\r\nexport const testEntryForProduct = (entry) => {\r\n  return /\\d+\\s\\w+/g.test(entry);\r\n};\r\n\r\nexport const createArrayofEnteredProducts = (entry) => {\r\n  const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n  let enteredProducts = array.map((item) => item[0].split(\" \"));\r\n  return enteredProducts;\r\n};\r\n\r\nexport const createOrdersToUpdate = (\r\n  products,\r\n  enteredProducts,\r\n  chosen,\r\n  ponote,\r\n  route,\r\n  orderTypeWhole,\r\n  delivDate\r\n) => {\r\n  let ordersToUpdate = [];\r\n  for (let product of products) {\r\n    for (let enteredItem of enteredProducts) {\r\n      if (product[\"nickName\"] === enteredItem[1]) {\r\n        let newOrder = {\r\n          qty: Number(enteredItem[0]),\r\n          prodName: product[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: route,\r\n          SO: 0,\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n        };\r\n        ordersToUpdate.push(newOrder);\r\n      }\r\n    }\r\n  }\r\n  return ordersToUpdate;\r\n};\r\n\r\nexport const buildOrdersToModify = (\r\n  orders,\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  custOrderList\r\n) => {\r\n  let ordersToModify = [...orders];\r\n  for (let orderToUpdate of ordersToUpdate) {\r\n    for (let custOrder of custOrderList) {\r\n      if (orderToUpdate[\"prodName\"] === custOrder[\"prodName\"]) {\r\n        let index = ordersToModify.findIndex(\r\n          (order) =>\r\n            order[\"prodName\"] === custOrder[\"prodName\"] &&\r\n            order[\"custName\"] === chosen &&\r\n            order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n        );\r\n        if (index >= 0) {\r\n          ordersToModify[index][\"qty\"] = orderToUpdate[\"qty\"];\r\n        } else {\r\n          orderToUpdate[\"SO\"] = custOrder[\"SO\"];\r\n          ordersToModify.push(orderToUpdate);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n\r\nexport const addUpdatesToOrders = (\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  ordersToModify\r\n) => {\r\n  for (let ord of ordersToUpdate) {\r\n    let index = ordersToModify.findIndex(\r\n      (order) =>\r\n        order[\"prodName\"] === ord[\"prodName\"] &&\r\n        order[\"custName\"] === chosen &&\r\n        order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n    if (index < 0) {\r\n      ordersToModify.push(ord);\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n\r\nexport const checkForMods = (noZerosOrderList) => {\r\n  let qty;\r\n  let SO;\r\n  if (noZerosOrderList.length > 0) {\r\n    qty = noZerosOrderList.map((order) => Number(order[\"qty\"]));\r\n    SO = noZerosOrderList.map((order) => Number(order[\"SO\"]));\r\n    qty = qty.reduce((acc, red) => acc + red);\r\n    SO = SO.reduce((acc, red) => acc + red);\r\n\r\n    if (qty === SO) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["348","349","350"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport { convertDatetoBPBDate } from '../../../../helpers/dateTimeHelpers';\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../../helpers/sortDataHelpers';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst AddProductButtons = styled.div`\r\n        display: flex;\r\n        width: 100%;\r\n        margin: 20px 0;\r\n        justify-content: space-around;\r\n        background-color: lightgrey;\r\n        padding: 10px 0;\r\n        `\r\n\r\n\r\n\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { chosen, delivDate, route, ponote, currentCartList } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications }= useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, currentCartList, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let qty = Number(document.getElementById(\"addedProdQty\").value)\r\n       \r\n        let newOrder ={\r\n            \"qty\": qty, \r\n            \"prodName\": pickedProduct.prodName,\r\n            \"custName\": chosen, \r\n            \"PONote\": ponote, \r\n            \"route\": route, \r\n            \"SO\": 0, \r\n            \"isWhole\": orderTypeWhole, \r\n            \"delivDate\": convertDatetoBPBDate(delivDate)\r\n        }\r\n        let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate)\r\n        setOrders(newOrderList)\r\n        document.getElementById(\"addedProdQty\").value = null;\r\n        setPickedProduct('');\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <AddProductButtons>\r\n            <Dropdown options={productList} optionLabel=\"prodName\" placeholder=\"Select a product\"\r\n                name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen!=='  ' ? false : true}/>\r\n            <span className=\"p-float-label\">\r\n                <InputText id=\"addedProdQty\" size=\"10\" disabled={chosen!=='  ' ? false : true}/>\r\n                <label htmlFor=\"qty\">Quantity</label>\r\n            </span>\r\n            <Button label=\"ADD\" disabled={chosen==='  ' || pickedProduct===''} icon=\"pi pi-plus\" onClick={() => handleAdd()}/>\r\n        </AddProductButtons>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",["351","352","353","354"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../../dataContexts/HoldingContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { findAvailableProducts } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst AddProductButtons = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  justify-content: space-around;\r\n  background-color: lightgrey;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst AddStandingOrderEntryItem = () => {\r\n  const { products } = useContext(ProductsContext);\r\n  const { standing, setStanding } = useContext(StandingContext);\r\n  const { holding, setHolding } = useContext(HoldingContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { chosen, delivDate, standArray, setStandArray } = useContext(CurrentDataContext);\r\n  const { standList, setStandList } = useContext(ToggleContext);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [productList, setProductList] = useState();\r\n\r\n  const [standHold, setStandHold] = useState();\r\n\r\n  useEffect(() => {\r\n    standList ? setStandHold(\"MAKE H.O.\") : setStandHold(\"MAKE S.O.\");\r\n  }, [standList]);\r\n\r\n  useEffect(() => {\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      orders,\r\n      chosen,\r\n      delivDate\r\n    );\r\n    setProductList(availableProducts);\r\n  }, [products, orders, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value.prodName);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    let newList = clonedeep(standArray);\r\n\r\n    if (pickedProduct !== \"\" && pickedProduct) {\r\n      \r\n        let newOrder = {\r\n          prodName: pickedProduct,\r\n          custName: chosen,\r\n          isStand: standList ? true : false,\r\n          Sun: 0,\r\n          Mon: 0,\r\n          Tue: 0,\r\n          Wed: 0,\r\n          Thu: 0,\r\n          Fri: 0,\r\n          Sat: 0,\r\n        };\r\n        newList.push(newOrder);\r\n      \r\n    }\r\n    setStandArray(newList);\r\n\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  const handleStandHold = () => {\r\n      let newStand = !standList\r\n      console.log(newStand)\r\n      setStandList(newStand);\r\n    \r\n  };\r\n\r\n  return (\r\n    <AddProductButtons>\r\n      <Dropdown\r\n        options={productList}\r\n        optionLabel=\"prodName\"\r\n        placeholder={\r\n          pickedProduct === \"\" ? \"Select a Product ...\" : pickedProduct\r\n        }\r\n        value={pickedProduct}\r\n        onChange={handleChange}\r\n        disabled={chosen !== \"  \" ? false : true}\r\n      />\r\n      <Button\r\n        label=\"ADD\"\r\n        disabled={chosen === \"  \" || pickedProduct === \"\"}\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAdd}\r\n      />\r\n\r\n      <Button\r\n        className={\r\n          !standList\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n        onClick={handleStandHold}\r\n        label={standHold}\r\n      />\r\n    </AddProductButtons>\r\n  );\r\n};\r\n\r\nexport default AddStandingOrderEntryItem;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["355","356","357","358","359","360","361"],"\r\nimport React, { useContext, useEffect } from 'react';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { buildCurrentOrder, \r\n    filterOutZeros, \r\n    setCurrentCartLineToQty, \r\n    updateCurrentLineInOrdersWithQty,\r\n    checkForMods\r\n} from '../../../../helpers/CartBuildingHelpers'\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst OrderGrid = styled.div`\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    border: none;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: .5fr 3fr .5fr .5fr;\r\n    row-gap: 4px;\r\n    flex-shrink: 1; \r\n    `\r\nconst TrashCan = styled.div`\r\n    background-color: transparent;\r\n    border: none;\r\n    `\r\n\r\nconst InputBox = styled.div`\r\n    width: 50%;\r\n    `\r\n\r\nconst Previous = styled.div`\r\n    font-weight: bold;\r\n    color: red;\r\n    `\r\n\r\nconst BuildCurrentCartList = () => {\r\n\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate, currentCartList, setCurrentCartList, ponote, route } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n        if (chosen!=='  '){\r\n        let currentOrderList = buildCurrentOrder(chosen,delivDate,orders,standing,route,ponote) \r\n        currentOrderList = currentOrderList.filter(order => order[\"qty\"]!==0)\r\n        \r\n        setCurrentCartList(currentOrderList)\r\n    }\r\n       \r\n        \r\n\r\n    }, [chosen, delivDate, orders, standing, route, ponote])\r\n\r\n\r\n\r\n    const handleQtyModify = (prodName,qty) => {\r\n        let cartToMod = clonedeep(currentCartList)\r\n        let ind = cartToMod.findIndex(cur => cur[\"prodName\"]===prodName)\r\n        cartToMod[ind][\"qty\"]=qty\r\n        \r\n        setCurrentCartList(cartToMod)\r\n        setModifications(true)\r\n        \r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OrderGrid>\r\n            <label></label>\r\n            <label>PRODUCT</label>\r\n            <label>QTY</label>\r\n            <label>PREV</label>\r\n        {currentCartList.map(order => \r\n            <React.Fragment key={order[\"prodName\"]+\"b\"}>\r\n                <TrashCan>\r\n                <Button icon=\"pi pi-trash\" \r\n                    className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                    value={0}\r\n                    onClick={e => {handleQtyModify(order[\"prodName\"],0)}}\r\n                    key={order[\"prodName\"]+\"e\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]}\r\n                    id={order[\"prodName\"]} />\r\n                </TrashCan>\r\n                <label key={order[\"prodName\"]}>{order[\"prodName\"]}</label>   \r\n                <InputBox>\r\n                <input  \r\n                    type=\"text\" \r\n                    size=\"3\"\r\n                    maxLength=\"4\"\r\n                    key={order[\"prodName\"]+\"c\"} \r\n                    id={order[\"prodName\"]+\"item\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]} \r\n                    placeholder={order[\"qty\"]} \r\n                    onKeyUp={e => {handleQtyModify(order[\"prodName\"],Number(e.target.value))}}\r\n                    onBlur={(e) => {\r\n\r\n                        e.target.value = null\r\n\r\n                    }}\r\n                        >\r\n                </input>\r\n                </InputBox>\r\n                <Previous>\r\n                <label \r\n                    key={order[\"prodName\"]+\"d\"}>{order[\"SO\"] === order[\"qty\"] ? '' : order[\"SO\"]}\r\n                </label>\r\n                </Previous>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        </OrderGrid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BuildCurrentCartList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["362","363","364","365"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../../dataContexts/HoldingContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport {\r\n  checkStandHoldStatus,\r\n  checkForStandMods,\r\n} from \"../../../../helpers/StandBuildingHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  font-size: 1em;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-self: center;\r\n  row-gap: 10px;\r\n`;\r\nconst StandInput = styled.input`\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  width: 80%;\r\n`;\r\n\r\nconst entryNotZero = {\r\n  fontSize: \"1.1em\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst entryZero = {\r\n  fontSize: \"1em\",\r\n  fontWeight: \"normal\",\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst BuildCurrentStandingList = () => {\r\n  const { standing } = useContext(StandingContext);\r\n  const { holding } = useContext(HoldingContext);\r\n  const { setStandList, setModifications } = useContext(\r\n    ToggleContext\r\n  );\r\n  const { chosen, standArray, setStandArray } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let Stand = standing.filter(stand => stand[\"custName\"]===chosen)\r\n    if (Stand.length>0){\r\n      Stand = Stand[0][\"isStand\"]\r\n    } else {\r\n      Stand = true\r\n    }\r\n\r\n    \r\n    setStandList(Stand);\r\n    let buildStandArray = standing.filter(\r\n        (stand) => stand[\"isStand\"] === Stand && stand[\"custName\"]===chosen\r\n      );\r\n      \r\n    setStandArray(buildStandArray);\r\n  }, [chosen, standing]);\r\n\r\n  const handleRemove = (index) => {\r\n    let ind = standArray.findIndex(stand => stand[\"prodName\"]===index)\r\n    let adjustedStanding = clonedeep(standArray)\r\n    adjustedStanding[ind][\"Sun\"]=0\r\n    adjustedStanding[ind][\"Mon\"]=0\r\n    adjustedStanding[ind][\"Tue\"]=0\r\n    adjustedStanding[ind][\"Wed\"]=0\r\n    adjustedStanding[ind][\"Thu\"]=0\r\n    adjustedStanding[ind][\"Fri\"]=0\r\n    adjustedStanding[ind][\"Sat\"]=0\r\n    setStandArray(adjustedStanding);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleQtyModify = (e, qty) => {\r\n    if (isNaN(e.target.value)) {\r\n      e.target.value = null;\r\n      swal({\r\n        text: \"Only Numbers Please\",\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    }\r\n    let day = e.target.dataset.day;\r\n    let prod = e.target.name;\r\n    let arrayToModify = clonedeep(standArray);\r\n    let ind = arrayToModify.findIndex((array) => array[\"prodName\"] === prod);\r\n    arrayToModify[ind][day] = qty;\r\n\r\n    setStandArray(arrayToModify);\r\n\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label>PRODUCT</label>\r\n        <label>S</label>\r\n        <label>M</label>\r\n        <label>T</label>\r\n        <label>W</label>\r\n        <label>T</label>\r\n        <label>F</label>\r\n        <label>S</label>\r\n        <label></label>\r\n        {standArray\r\n          ? standArray.map((order) => (\r\n              <React.Fragment key={order[\"prodName\"] + \"frag\"}>\r\n                <label key={order[\"prodName\"] + \"prod\"}>\r\n                  {order[\"prodName\"]}\r\n                </label>\r\n\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sun\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sun\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_1\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sun\"]}\r\n                  data-day=\"Sun\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = null;\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Mon\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Mon\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_2\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Mon\"]}\r\n                  data-day=\"Mon\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Tue\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Tue\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_3\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Tue\"]}\r\n                  data-day=\"Tue\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Wed\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Wed\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_4\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Wed\"]}\r\n                  data-day=\"Wed\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Thu\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Thu\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_5\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Thu\"]}\r\n                  data-day=\"Thu\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Fri\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Fri\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_6\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Fri\"]}\r\n                  data-day=\"Fri\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sat\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sat\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_7\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sat\"]}\r\n                  data-day=\"Sat\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n\r\n                <Button\r\n                  icon=\"pi pi-trash\"\r\n                  className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                  key={order[\"prodName\"] + \"rem\"}\r\n                  name={order[\"prodName\"]}\r\n                  onClick={(e) => handleRemove(order[\"prodName\"])}\r\n                ></Button>\r\n              </React.Fragment>\r\n            ))\r\n          : \"\"}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentStandingList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["366"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n\r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js",[],["367","368"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js",["369","370","371","372"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.customer}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        \r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"customer\"]= order[2]\r\n                    newData[\"product\"] = order[1]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n\r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    \r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"customer\" \r\n                    sortMode=\"single\" sortField=\"customer\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js",["373","374","375","376","377"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByProduct = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.product}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"product\"]= order[1]\r\n                    newData[\"customer\"] = order[2]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"product\" \r\n                    sortMode=\"single\" sortField=\"product\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        \r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByProduct","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js",["378","379","380","381","382"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList } from '../../helpers/sortDataHelpers'\r\n\r\n\r\n\r\nconst LogisticsFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { chosen, delivDate, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    setRouteIsOn(true)\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n    \r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default LogisticsFunctions","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js",["383"],"import React, { useContext } from 'react';\r\n\r\n\r\nimport Calendar from '../ordering/Parts/Calendar'\r\nimport ByCustomer from './ByCustomer.js'\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { OrdersContext, OrdersLoad } from '../../dataContexts/OrdersContext'\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { StandingContext, StandingLoad } from '../../dataContexts/StandingContext'\r\nimport LogisticsFunctions from './LogisticsFunctions';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LogisticsContainer = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr; \r\n    `\r\n\r\n  const InfoContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    box-sizing: border-box;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    `\r\n  const BasicContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    `\r\n\r\n\r\n\r\n\r\n\r\nfunction Logistics() {\r\n\r\n  const delivDate = \"01/02/2021\"\r\n\r\n  const cities = [\r\n    {name: 'New York', code: 'NY'},\r\n    {name: 'Rome', code: 'RM'},\r\n    {name: 'London', code: 'LDN'},\r\n    {name: 'Istanbul', code: 'IST'},\r\n    {name: 'Paris', code: 'PRS'}\r\n  ];\r\n\r\n  \r\n  const { standLoaded } = useContext(StandingContext)\r\n  const { prodLoaded } = useContext(ProductsContext)\r\n  const { custLoaded } = useContext(CustomerContext)\r\n  const { ordersLoaded } = useContext(OrdersContext)\r\n\r\n  return (\r\n      <LogisticsContainer>\r\n       \r\n        {!standLoaded ? <StandingLoad /> : ''}\r\n        {!prodLoaded ? <ProductsLoad /> : ''}\r\n        {!custLoaded ? <CustomerLoad /> : ''}\r\n        {!ordersLoaded ? <OrdersLoad /> : ''}\r\n        <BasicContainer>\r\n          <Calendar />\r\n        </BasicContainer>\r\n        \r\n          <div id=\"orderCommand\">\r\n            <InfoContainer>\r\n              <label htmlFor=\"delivDate\" className=\"p-d-block\">Delivery Date</label>\r\n              <InputText id=\"delivDate\" value={delivDate} />\r\n              <Dropdown options={cities} optionLabel=\"name\" placeholder=\"Select a route\"/>\r\n              <Button label=\"Print\" icon=\"pi pi-print\" className=\"p-button-raised p-button-rounded p-button-success\" />\r\n              <Button label=\"Refresh\" icon=\"pi pi-refresh\" className=\"p-button-raised p-button-rounded p-button-info\" />\r\n            </InfoContainer>\r\n            <BasicContainer><ByCustomer /> </BasicContainer>\r\n          </div> \r\n         \r\n\r\n\r\n          </LogisticsContainer>\r\n        \r\n\r\n      \r\n        \r\n      \r\n            \r\n  );\r\n}\r\n\r\nexport default Logistics;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js",["384"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { products } = useContext(ProductsContext)\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ columns, setColumns ] = useState([])\r\n    const [ data, setData ] = useState([])\r\n\r\n\r\n    const constructColumns = () => {\r\n      \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && \r\n                    orderList[i][2] === orderList[j][2] \r\n                    ){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => order[4] === route)\r\n\r\n        let listOfProducts = orderList.map(order => order[1])\r\n        listOfProducts = new Set(listOfProducts)\r\n        let prodArray = []\r\n        for (let prod of listOfProducts){\r\n            for (let item of products){\r\n                if (prod === item[1]){\r\n                    let newItem = [prod, item[2],item[4],item[5]]\r\n                    prodArray.push(newItem)\r\n                }\r\n            }\r\n        }\r\n\r\n        sortAtoZDataByIndex(prodArray,2)\r\n\r\n\r\n        let columns = [{field: 'customer', header: 'Customer', width: {width:'10%'} }]\r\n        for (let prod of prodArray){\r\n            let newCol = {field: prod[0], header: prod[1], width: {width:'30px'}}\r\n            columns.push(newCol)\r\n        }\r\n        return columns\r\n        \r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n\r\n        orderList = orderList.filter(order => order[4] === route)\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let cust of listOfCustomers){\r\n            let newData = {\"customer\": cust}\r\n            for (let order of orderList){\r\n                if (order[2] === cust){\r\n                    newData[order[1]] = order[0]\r\n                }\r\n            }\r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let col = constructColumns()\r\n        let dat = constructData()\r\n        setColumns(col)\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n\r\n    \r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column npmkey={col.field} field={col.field} header={col.header} style={col.width}/>;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\" \r\n                    value={data} resizableColumns columnResizeMode=\"fit\">\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["385"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext, HoldingLoad } from \"../../dataContexts/HoldingContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 0px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Ordering(props) {\r\n  const { standLoaded } = useContext(StandingContext);\r\n  const { prodLoaded } = useContext(ProductsContext);\r\n  const { custLoaded } = useContext(CustomerContext);\r\n  const { ordersLoaded } = useContext(OrdersContext);\r\n  const { holdLoaded } = useContext(HoldingContext);\r\n  const { setChosen } = useContext(CurrentDataContext);\r\n  const { setCartList } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (props.location.search) {\r\n      setChosen(\r\n        props.location.search\r\n          .split(\"&\")[1]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\")\r\n      );\r\n      if (\r\n        props.location.search\r\n          .split(\"&\")[0]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\") === \"true\"\r\n      ) {\r\n        setCartList(true);\r\n      } else {\r\n        setCartList(false);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <MainWindow>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      {!holdLoaded ? <HoldingLoad /> : \"\"}\r\n\r\n      <BasicContainer>\r\n        <Calendar />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <OrderCommandLine />\r\n        <CurrentOrderInfo />\r\n        <CurrentOrderList />\r\n        <OrderEntryButtons />\r\n      </BasicContainer>\r\n      \r\n    </MainWindow>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",["386"],"import React, { useContext, useState } from \"react\";\r\n\r\nimport CartEntryItem from \"../e_CurrentOrderList/CartOrder/CartEntryItem\";\r\nimport AddCartEntryItem from \"../e_CurrentOrderList/CartOrder/AddCartEntryItem\";\r\nimport StandingOrderEntry from \"../e_CurrentOrderList/StandingOrder/StandingOrderEntry\";\r\nimport AddStandingOrderEntry from \"../e_CurrentOrderList/StandingOrder/AddStandingOrderEntry\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nconst CurrentOrderList = () => {\r\n  const { cartList } = useContext(ToggleContext);\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {cartList ? (\r\n        <React.Fragment>\r\n          <div className=\"currentOrderList\">\r\n            <CartEntryItem />\r\n          </div>\r\n          <AddCartEntryItem />\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div className=\"currentStandingList\">\r\n            <StandingOrderEntry />\r\n          </div>\r\n          <AddStandingOrderEntry />\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["387","388","389","390","391","392","393","394"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["395","396","397","398","399","400","401","402","403","404","405"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["406"],"import React, { useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\nconst Calendar = () => {\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    calendarEvents,\r\n    setCalendarEvents,\r\n  } = useContext(CurrentDataContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { orders } = useContext(OrdersContext);\r\n\r\n  useEffect(() => {\r\n    let backToStandingArray = CreateStandingArray(standing, chosen);\r\n    let cartDateArray = CreateCartDateArray(orders, chosen);\r\n    let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n    let standingEvents = {\r\n      title: \"\",\r\n      daysOfWeek: backToStandingArray,\r\n      display: \"background\",\r\n    };\r\n\r\n    let calendarEvents = [\r\n      { title: \"\", date: delivDate, display: \"background\" },\r\n    ];\r\n\r\n    calendarEvents.push(standingEvents);\r\n\r\n    for (let order of cartDateArray) {\r\n      let newEvent = { title: \"\", date: order, display: \"background\" };\r\n      calendarEvents.push(newEvent);\r\n    }\r\n\r\n    for (let order of cartBlankDateArray) {\r\n      let newEvent2 = { title: \"\", date: order, display: \"inverse-background\" };\r\n      calendarEvents.push(newEvent2);\r\n    }\r\n\r\n    setCalendarEvents(calendarEvents);\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setDelivDate(selectInfo.dateStr);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"calendarApp\" id=\"test\">\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          defaultView=\"dayGridMonth\"\r\n          aspectRatio={1}\r\n          contentHeight=\"auto\"\r\n          eventBackgroundColor=\"blue\"\r\n          dateClick={handleDateSelect}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"\",\r\n            end: \"prev,next\",\r\n          }}\r\n          events={calendarEvents}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["407"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["408"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",["409","410"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\n\r\nimport {\r\n  updateCustomer,\r\n  deleteCustomer,\r\n  createCustomer,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst handleOrderClick = (e, selectedCustomer) => {\r\n  e &&\r\n    window.open(\r\n      \"./Ordering?cartList=true&selectedCustomer=\" + selectedCustomer.custName\r\n    );\r\n};\r\n\r\nconst handleStandClick = (e, selectedCustomer) => {\r\n  e &&\r\n    window.open(\r\n      \"./Ordering?cartList=false&selectedCustomer=\" + selectedCustomer.custName\r\n    );\r\n};\r\n\r\nconst Buttons = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n\r\n  const handleAddCust = () => {\r\n    let custName;\r\n    let nickName;\r\n\r\n    swal(\"Enter Customer Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      custName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        nickName = value;\r\n        const addDetails = {\r\n          nickName: nickName,\r\n          custName: custName,\r\n          zoneName: \"\",\r\n          addr1: \"\",\r\n          addr2: \"\",\r\n          city: \"\",\r\n          zip: \"\",\r\n          email: \"\",\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          phone: \"\",\r\n          toBePrinted: \"\",\r\n          toBeEmailed: \"\",\r\n          terms: \"\",\r\n          invoicing: \"\",\r\n        };\r\n        createCust(addDetails, nickName, custName);\r\n      });\r\n    });\r\n  };\r\n\r\n  const createCust = async (addDetails, nickName, custName) => {\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(createCustomer, { input: { ...addDetails } })\r\n      );\r\n      let id = custData.data.createCustomer.id;\r\n      let version = custData.data.createCustomer.version;\r\n\r\n      const fullDetails = {\r\n        id: id,\r\n        _version: version,\r\n        nickName: nickName,\r\n        custName: custName,\r\n        zoneName: \"\",\r\n        addr1: \"\",\r\n        addr2: \"\",\r\n        city: \"\",\r\n        zip: \"\",\r\n        email: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        toBePrinted: \"\",\r\n        toBeEmailed: \"\",\r\n        terms: \"\",\r\n        invoicing: \"\",\r\n      };\r\n\r\n      setCustLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateCust = async () => {\r\n    const updateDetails = {\r\n      id: selectedCustomer[\"id\"],\r\n      nickName: selectedCustomer[\"nickName\"],\r\n      custName: selectedCustomer[\"custName\"],\r\n      zoneName: selectedCustomer[\"zoneName\"],\r\n      addr1: selectedCustomer[\"addr1\"],\r\n      addr2: selectedCustomer[\"addr2\"],\r\n      city: selectedCustomer[\"city\"],\r\n      zip: selectedCustomer[\"zip\"],\r\n      email: selectedCustomer[\"email\"],\r\n      firstName: selectedCustomer[\"firstName\"],\r\n      lastName: selectedCustomer[\"lastName\"],\r\n      phone: selectedCustomer[\"phone\"],\r\n      toBePrinted: selectedCustomer[\"toBePrinted\"],\r\n      toBeEmailed: selectedCustomer[\"toBeEmailed\"],\r\n      terms: selectedCustomer[\"terms\"],\r\n      invoicing: selectedCustomer[\"invoicing\"],\r\n      _version: selectedCustomer[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(updateCustomer, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${custData.data.updateCustomer.custName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      setCustLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteCustWarn = async () => {\r\n    swal({\r\n      text:\r\n        \" Are you sure that you would like to permanently delete this customer?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteCust();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteCust = async () => {\r\n    const deleteDetails = {\r\n      id: selectedCustomer[\"id\"],\r\n      _version: selectedCustomer[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(deleteCustomer, { input: { ...deleteDetails } })\r\n      );\r\n      setCustLoaded(false);\r\n      setSelectedCustomer();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Customer\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddCust}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Customer\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateCust}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Customer\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteCustWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            id=\"order\"\r\n            label=\"Tomorrow's Order\"\r\n            icon=\"pi pi-shopping-cart\"\r\n            onClick={(e) => {\r\n              handleOrderClick(e, selectedCustomer);\r\n            }}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"}\r\n            disabled={selectedCustomer.custName ? false : true}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Edit Standing Order\"\r\n            icon=\"pi pi-calendar\"\r\n            onClick={(e) => {\r\n              handleStandClick(e, selectedCustomer);\r\n            }}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"}\r\n            disabled={selectedCustomer.custName ? false : true}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["411"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext'\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport RouteList from './RouteList'\r\nimport Info from './Info'\r\nimport Buttons from './Buttons'\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr  2fr 1fr;\r\n  height: 100vh;\r\n  `\r\n\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n  `\r\n\r\n\r\n\r\nfunction EditRoutes() {\r\n\r\n  const [ selectedRoute, setSelectedRoute ] = useState()\r\n  const [ routes, setRoutes ] = useState(null)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext)\r\n  const { setProdLoaded } = useContext(ProductsContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true)\r\n    setProdLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n  \r\n  \r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n        {selectedRoute && \r\n        <React.Fragment>\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Info\">\r\n              <Info selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n\r\n          </React.Fragment>\r\n      }\r\n          <DescripWrapper>\r\n            <Buttons selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n          </DescripWrapper>\r\n        \r\n      </MainWrapper>\r\n    </React.Fragment>         \r\n  );\r\n}\r\nexport default EditRoutes;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["412"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\n\r\nimport { listRoutes } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ScrollPanel } from 'primereact/scrollpanel';\r\n\r\n\r\n\r\n\r\nconst ListWrapper = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: #ffffff;\r\n    `\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        fetchRoutes()\r\n        setIsLoading(false)\r\n    },[routes])\r\n\r\n\r\n\r\n    const fetchRoutes = async () => {\r\n        \r\n        try{    \r\n          const routeData = await API.graphql(graphqlOperation(listRoutes, {\r\n                limit: '50'\r\n                }))\r\n          const routeList = routeData.data.listRoutes.items;\r\n          sortAtoZDataByIndex(routeList,\"routeStart\")\r\n          let noDelete = routeList.filter(route => route[\"_deleted\"]!==true)\r\n          \r\n          setRoutes(noDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Route List', error)\r\n        }\r\n        \r\n      }\r\n\r\n\r\n    const handleSelection = e => {\r\n        setSelectedRoute(e.value)\r\n    }\r\n  \r\n  return (\r\n    \r\n        <ListWrapper>\r\n         \r\n          \r\n         <ScrollPanel style={{ width: '100%', height: '100vh' }}>\r\n          {routes && <DataTable value={routes} className=\"p-datatable-striped\" \r\n            selection={selectedRoute} onSelectionChange={handleSelection} selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"routeName\" header=\"Routes\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n           \r\n          </DataTable>}\r\n          </ScrollPanel>\r\n          \r\n          \r\n      </ListWrapper> \r\n               \r\n  );\r\n}\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["413","414"],"import React, { useEffect, useState, useContext, useRef } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from 'primereact/picklist';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport {Checkbox} from 'primereact/checkbox';\r\n\r\nimport { setValue, fixValue, setPickValue, setDropDownValue } from '../../../helpers/formHelpers'\r\n\r\nimport { listZones } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n  `\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n  `\r\n  \r\n\r\nconst hubDepart = [\r\n  {RouteDepart: \"Prado\",},\r\n  {RouteDepart: \"Carlton\"},\r\n]\r\n\r\nconst hubArrive = [\r\n  {RouteArrive: \"Prado\",},\r\n  {RouteArrive: \"Carlton\"},\r\n]\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n    \r\n    const [source, setSource] = useState([]);\r\n    const [target, setTarget] = useState([]);\r\n\r\n    const fullZones = useRef()\r\n\r\n    const [days, setDays] = useState([]);\r\n\r\n    const onDayChange = (e) => {\r\n        let selectedDays = [...days];\r\n        if(e.checked)\r\n            selectedDays.push(e.value);\r\n        else\r\n            selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n        \r\n        let itemToUpdate = clonedeep(selectedRoute)\r\n        itemToUpdate[\"RouteSched\"] = selectedDays\r\n        setSelectedRoute(itemToUpdate)\r\n        setDays(selectedDays);\r\n}\r\n\r\n    useEffect(() => {\r\n      setIsLoading(true)\r\n      fetchZones()\r\n      setIsLoading(false)\r\n    },[])\r\n\r\n\r\n    \r\n  \r\n    useEffect(() => {\r\n      setTarget(selectedRoute[\"RouteServe\"])\r\n    },[selectedRoute])\r\n\r\n    useEffect(() => {\r\n      setDays(selectedRoute[\"RouteSched\"])\r\n    },[selectedRoute])\r\n\r\n\r\n    useEffect(() => {\r\n      let parsedZones = []\r\n      if (fullZones.current){\r\n        parsedZones = fullZones.current.filter(full => !selectedRoute[\"RouteServe\"].includes(full))\r\n      }     \r\n      setSource(parsedZones)\r\n    },[selectedRoute])\r\n\r\n\r\n\r\n\r\n    const fetchZones = async () => {\r\n        \r\n        try{    \r\n          const zoneData = await API.graphql(graphqlOperation(listZones, {\r\n                limit: '50'\r\n                }))\r\n          const zoneList = zoneData.data.listZones.items;\r\n          sortAtoZDataByIndex(zoneList,\"zoneNum\")\r\n          let noDelete = zoneList.filter(zone => zone[\"_deleted\"]!==true)\r\n          let mappedNoDelete = noDelete.map(item => item[\"zoneName\"])\r\n          fullZones.current = mappedNoDelete\r\n          setSource(mappedNoDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n        \r\n      }\r\n\r\n    const itemTemplate = (item) => {\r\n        return (\r\n            <div>{item}</div>\r\n        )\r\n    }\r\n\r\n    const onChange = (event) => {\r\n    \r\n        setSource(event.source);\r\n        setSelectedRoute(setPickValue(event, selectedRoute))\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n    \r\n        <React.Fragment>\r\n         \r\n            <h2><i className=\"pi pi-map\"></i> Route Info</h2>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Name</label><br />\r\n                </span> \r\n\r\n            <InputText id=\"routeName\" placeholder={selectedRoute.routeName} disabled\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n\r\n            </div>< br/>\r\n            <DuoWrapper>\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n                </span> \r\n\r\n            <InputText id=\"routeStart\" placeholder={selectedRoute.routeStart}\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n\r\n            </div>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n                </span> \r\n\r\n            <InputText id=\"routeTime\" placeholder={selectedRoute.routeTime}\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n            \r\n            </div>\r\n            </DuoWrapper>\r\n            <DuoWrapper>\r\n            <div className=\"p-inputgroup\">\r\n            <span className=\"p-inputgroup-addon\">\r\n                <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n            </span>\r\n            <Dropdown id=\"RouteDepart\" optionLabel=\"RouteDepart\" options={hubDepart} \r\n                onChange={e => setSelectedRoute(setDropDownValue(e,selectedRoute))}\r\n                placeholder={selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"}/>\r\n            </div>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n            <span className=\"p-inputgroup-addon\">\r\n                <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n            </span>\r\n            <Dropdown id=\"RouteArrive\" optionLabel=\"RouteArrive\" options={hubArrive} \r\n                onChange={e => setSelectedRoute(setDropDownValue(e,selectedRoute))}\r\n                placeholder={selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"}/>\r\n            </div>\r\n            </DuoWrapper>\r\n            <WeekWrapper>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb1\" value=\"1\" onChange={onDayChange} checked={days.includes('1')}></Checkbox>\r\n              <label htmlFor=\"cb1\" className=\"p-checkbox-label\">Sun</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb2\" value=\"2\" onChange={onDayChange} checked={days.includes('2')}></Checkbox>\r\n              <label htmlFor=\"cb2\" className=\"p-checkbox-label\">Mon</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"3\" onChange={onDayChange} checked={days.includes('3')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Tues</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"4\" onChange={onDayChange} checked={days.includes('4')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Wed</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"5\" onChange={onDayChange} checked={days.includes('5')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Thurs</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"6\" onChange={onDayChange} checked={days.includes('6')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Fri</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"7\" onChange={onDayChange} checked={days.includes('7')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Sat</label>\r\n            </div>\r\n            </WeekWrapper>\r\n            <PickList  \r\n                sourceHeader=\"All Zones\" targetHeader=\"Served By This Route\" \r\n                source={source} target={selectedRoute[\"RouteServe\"]}\r\n                itemTemplate={itemTemplate} onChange={onChange}\r\n                sourceStyle={{ height: '250px' }} targetStyle={{ height: '250px' }}\r\n                >\r\n            </PickList>\r\n            \r\n\r\n            \r\n        </React.Fragment>   \r\n           \r\n  );\r\n}\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["415","416"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../../dataContexts/CustomerContext'\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport ZoneList from './ZoneList'\r\nimport Info from './Info'\r\nimport Buttons from './Buttons'\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr .5fr;\r\n  height: 100vh;\r\n  `\r\n\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n  `\r\n\r\n\r\n\r\nfunction EditZones() {\r\n\r\n  const [ selectedZone, setSelectedZone ] = useState(1)\r\n  const [ zones, setZones ] = useState(null)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext)\r\n  const { setProdLoaded } = useContext(ProductsContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true)\r\n    setProdLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n  \r\n  \r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n        {selectedZone && \r\n        <React.Fragment>\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Info\">\r\n              <Info selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n\r\n          </React.Fragment>\r\n      }\r\n          <DescripWrapper>\r\n            <Buttons selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n          </DescripWrapper>\r\n        \r\n      </MainWrapper>\r\n    </React.Fragment>         \r\n  );\r\n}\r\nexport default EditZones;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["417"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\n\r\nimport { listZones } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ScrollPanel } from 'primereact/scrollpanel';\r\n\r\n\r\n\r\n\r\nconst ListWrapper = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: #ffffff;\r\n    `\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        fetchZones()\r\n        setIsLoading(false)\r\n    },[zones])\r\n\r\n\r\n\r\n    const fetchZones = async () => {\r\n        \r\n        try{    \r\n          const zoneData = await API.graphql(graphqlOperation(listZones, {\r\n                limit: '50'\r\n                }))\r\n          const zoneList = zoneData.data.listZones.items;\r\n          sortAtoZDataByIndex(zoneList,\"zoneNum\")\r\n          let noDelete = zoneList.filter(zone => zone[\"_deleted\"]!==true)\r\n          \r\n          setZones(noDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n        \r\n      }\r\n\r\n\r\n    const handleSelection = e => {\r\n        setSelectedZone(e.value)\r\n    }\r\n  \r\n  return (\r\n    \r\n        <ListWrapper>\r\n         \r\n          \r\n         <ScrollPanel style={{ width: '100%', height: '100vh' }}>\r\n          {zones && <DataTable value={zones} className=\"p-datatable-striped\" \r\n            selection={selectedZone} onSelectionChange={handleSelection} selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"zoneName\" header=\"Zones\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n           \r\n          </DataTable>}\r\n          </ScrollPanel>\r\n          \r\n          \r\n      </ListWrapper> \r\n               \r\n  );\r\n}\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",["418"],"import React, { useEffect } from 'react';\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from '../../../helpers/formHelpers'\r\n\r\n\r\nconst Info = ({ selectedZone, setSelectedZone }) => {\r\n    \r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <h2><i className=\"pi pi-map\"></i> Zone Info</h2>\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Zone Name</label><br />\r\n                </span> \r\n\r\n            <InputText id=\"zoneName\" placeholder={selectedZone.zoneName} disabled\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n\r\n            </div><br />\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneNum\"> Zone Number</label><br />\r\n                </span>\r\n\r\n            <InputText id=\"zoneNum\" placeholder={selectedZone.zoneNum}  \r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n              \r\n            </div><br />\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneFee\"> Zone Fee</label><br />\r\n                </span>\r\n\r\n            <InputText id=\"zoneFee\" placeholder={selectedZone.zoneFee} \r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n              \r\n            </div><br />\r\n        </React.Fragment>         \r\n  );\r\n}\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["419"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setDropDownValue,\r\n  \r\n} from \"../../../helpers/formHelpers\";\r\n\r\nconst doughTypes = [\r\n  { doughType: \"Baguette\" },\r\n  { doughType: \"Brioche\" },\r\n  { doughType: \"French\" },\r\n  { doughType: \"Focaccia\" },\r\n  { doughType: \"Whole Wheat\" },\r\n  { doughType: \"Croissant\" },\r\n  { doughType: \"Rustic Rye\" },\r\n  { doughType: \"Levain\" },\r\n  { doughType: \"Multigrain\" },\r\n];\r\n\r\nconst bakedWheres = [\r\n  { bakedWhere: \"Prado\" },\r\n  { bakedWhere: \"Carlton\" },\r\n  { bakedWhere: \"Mixed\" },\r\n];\r\n\r\nconst Baking = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  const [ fullProducts, setFullProducts ] = useState([])\r\n\r\n  useEffect(() => {\r\n    let stageProducts = products.map(prod => ({depends: prod[\"prodName\"]}))\r\n    stageProducts.push({depends: \"NONE\"})\r\n    \r\n    setFullProducts(stageProducts)\r\n  },[])\r\n  \r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-user\"></i> Packing Info\r\n      </h2>\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"doughType\">Dough Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"doughType\"\r\n          optionLabel=\"doughType\"\r\n          options={doughTypes}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.doughType : \"Select Dough Type\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakedWhere\">Baked Where</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"bakedWhere\"\r\n          optionLabel=\"bakedWhere\"\r\n          options={bakedWheres}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.bakedWhere : \"Baked Where\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"readyTime\">Guaranteed Ready (0-24)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"readyTime\"\r\n          placeholder={selectedProduct.readyTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"weight\">Dough Weight (lbs.)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"weight\"\r\n          placeholder={selectedProduct.weight}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"depends\">Dependant Product</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"depends\"\r\n          optionLabel=\"depends\"\r\n          options={fullProducts}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.depends : \"Depends On\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",["420"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  deleteProduct,\r\n  createProduct,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst Buttons = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n\r\n  const handleAddProd = () => {\r\n    let prodName;\r\n    let nickName;\r\n\r\n    swal(\"Enter Product Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      prodName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        nickName = value;\r\n        const addDetails = {\r\n          prodName: prodName,\r\n          nickName: nickName,\r\n          packGroup: \"\",\r\n          packSize: 0,\r\n          doughType: \"\",\r\n          freezerThaw: false,\r\n          packGroupOrder: 0,\r\n          readyTime: 15,\r\n          bakedWhere: [\"\"],\r\n          wholePrice: 0,\r\n          retailPrice: 0,\r\n          isWhole: false,\r\n          depends: [\"\"],\r\n          weight: 0,\r\n          descrip: \"description\",\r\n          picURL: \"\",\r\n          squareID: \"\"\r\n        };\r\n        createProd(addDetails, nickName, prodName);\r\n      });\r\n    });\r\n  };\r\n\r\n  const createProd = async (addDetails, nickName, prodName) => {\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(createProduct, { input: { ...addDetails } })\r\n      );\r\n      let id = prodData.data.createProduct.id;\r\n      let version = prodData.data.createProduct.version;\r\n\r\n      const fullDetails = {\r\n        id: id,\r\n        _version: version,\r\n        prodName: prodName,\r\n        nickName: nickName,\r\n        packGroup: \"\",\r\n        packSize: 0,\r\n        doughType: \"\",\r\n        freezerThaw: false,\r\n        packGroupOrder: 0,\r\n        readyTime: 15,\r\n        bakedWhere: [\"\"],\r\n        wholePrice: 0,\r\n        retailPrice: 0,\r\n        isWhole: false,\r\n        depends: [\"\"],\r\n        weight: 0,\r\n        descrip: \"description\",\r\n        picURL: \"\",\r\n        squareID: \"\"\r\n      };\r\n\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateProd = async () => {\r\n    const updateDetails = {\r\n        id: selectedProduct[\"id\"],\r\n        _version: selectedProduct[\"_version\"],\r\n        prodName: selectedProduct[\"prodName\"],\r\n        nickName: selectedProduct[\"nickName\"],\r\n        packGroup: selectedProduct[\"packGroup\"],\r\n        packSize: selectedProduct[\"packSize\"],\r\n        doughType: selectedProduct[\"doughType\"],\r\n        freezerThaw: selectedProduct[\"freezerThaw\"],\r\n        packGroupOrder: selectedProduct[\"packGroupOrder\"],\r\n        readyTime: selectedProduct[\"readyTime\"],\r\n        bakedWhere: selectedProduct[\"bakedWhere\"],\r\n        wholePrice: selectedProduct[\"wholePrice\"],\r\n        retailPrice: selectedProduct[\"retailPrice\"],\r\n        isWhole: selectedProduct[\"isWhole\"],\r\n        depends: selectedProduct[\"depends\"],\r\n        weight: selectedProduct[\"weight\"],\r\n        descrip: selectedProduct[\"descrip\"],\r\n        picURL: selectedProduct[\"picURL\"],\r\n        squareID: selectedProduct[\"squareID\"]\r\n    };\r\n\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${prodData.data.updateProduct.prodName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteProdWarn = async () => {\r\n    swal({\r\n      text:\r\n        \" Are you sure that you would like to permanently delete this product?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteProd();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteProd = async () => {\r\n    const deleteDetails = {\r\n      id: selectedProduct[\"id\"],\r\n      _version: selectedProduct[\"_version\"]\r\n    };\r\n    \r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(deleteProduct, { input: { ...deleteDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setSelectedProduct();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Product\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddProd}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Product\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateProd}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Product\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteProdWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","replacedBy":"424"},{"ruleId":"425","severity":1,"message":"426","line":38,"column":7,"nodeType":"427","endLine":38,"endColumn":9,"suggestions":"428"},{"ruleId":"429","severity":1,"message":"430","line":3,"column":10,"nodeType":"431","messageId":"432","endLine":3,"endColumn":26},{"ruleId":"429","severity":1,"message":"433","line":5,"column":31,"nodeType":"431","messageId":"432","endLine":5,"endColumn":50},{"ruleId":"425","severity":1,"message":"434","line":47,"column":7,"nodeType":"427","endLine":47,"endColumn":9,"suggestions":"435"},{"ruleId":"425","severity":1,"message":"436","line":38,"column":9,"nodeType":"427","endLine":38,"endColumn":11,"suggestions":"437"},{"ruleId":"429","severity":1,"message":"438","line":3,"column":10,"nodeType":"431","messageId":"432","endLine":3,"endColumn":29},{"ruleId":"429","severity":1,"message":"439","line":34,"column":26,"nodeType":"431","messageId":"432","endLine":34,"endColumn":45},{"ruleId":"425","severity":1,"message":"440","line":38,"column":7,"nodeType":"427","endLine":38,"endColumn":9,"suggestions":"441"},{"ruleId":"429","severity":1,"message":"438","line":3,"column":10,"nodeType":"431","messageId":"432","endLine":3,"endColumn":29},{"ruleId":"429","severity":1,"message":"442","line":36,"column":25,"nodeType":"431","messageId":"432","endLine":36,"endColumn":43},{"ruleId":"425","severity":1,"message":"443","line":40,"column":7,"nodeType":"427","endLine":40,"endColumn":9,"suggestions":"444"},{"ruleId":"421","replacedBy":"445"},{"ruleId":"423","replacedBy":"446"},{"ruleId":"429","severity":1,"message":"447","line":3,"column":3,"nodeType":"431","messageId":"432","endLine":3,"endColumn":28},{"ruleId":"429","severity":1,"message":"448","line":3,"column":16,"nodeType":"431","messageId":"432","endLine":3,"endColumn":22},{"ruleId":"429","severity":1,"message":"449","line":38,"column":29,"nodeType":"431","messageId":"432","endLine":38,"endColumn":45},{"ruleId":"425","severity":1,"message":"450","line":47,"column":11,"nodeType":"427","endLine":47,"endColumn":49,"suggestions":"451"},{"ruleId":"429","severity":1,"message":"452","line":30,"column":11,"nodeType":"431","messageId":"432","endLine":30,"endColumn":19},{"ruleId":"429","severity":1,"message":"453","line":30,"column":21,"nodeType":"431","messageId":"432","endLine":30,"endColumn":32},{"ruleId":"429","severity":1,"message":"454","line":31,"column":11,"nodeType":"431","messageId":"432","endLine":31,"endColumn":18},{"ruleId":"429","severity":1,"message":"455","line":31,"column":20,"nodeType":"431","messageId":"432","endLine":31,"endColumn":30},{"ruleId":"429","severity":1,"message":"456","line":14,"column":5,"nodeType":"431","messageId":"432","endLine":14,"endColumn":19},{"ruleId":"429","severity":1,"message":"457","line":15,"column":5,"nodeType":"431","messageId":"432","endLine":15,"endColumn":28},{"ruleId":"429","severity":1,"message":"458","line":16,"column":5,"nodeType":"431","messageId":"432","endLine":16,"endColumn":37},{"ruleId":"429","severity":1,"message":"459","line":17,"column":5,"nodeType":"431","messageId":"432","endLine":17,"endColumn":17},{"ruleId":"429","severity":1,"message":"460","line":49,"column":21,"nodeType":"431","messageId":"432","endLine":49,"endColumn":30},{"ruleId":"429","severity":1,"message":"461","line":52,"column":13,"nodeType":"431","messageId":"432","endLine":52,"endColumn":27},{"ruleId":"425","severity":1,"message":"462","line":65,"column":8,"nodeType":"427","endLine":65,"endColumn":60,"suggestions":"463"},{"ruleId":"429","severity":1,"message":"464","line":12,"column":3,"nodeType":"431","messageId":"432","endLine":12,"endColumn":23},{"ruleId":"429","severity":1,"message":"465","line":13,"column":3,"nodeType":"431","messageId":"432","endLine":13,"endColumn":20},{"ruleId":"429","severity":1,"message":"454","line":49,"column":11,"nodeType":"431","messageId":"432","endLine":49,"endColumn":18},{"ruleId":"425","severity":1,"message":"466","line":70,"column":6,"nodeType":"427","endLine":70,"endColumn":24,"suggestions":"467"},{"ruleId":"425","severity":1,"message":"468","line":52,"column":7,"nodeType":"427","endLine":52,"endColumn":70,"suggestions":"469"},{"ruleId":"421","replacedBy":"470"},{"ruleId":"423","replacedBy":"471"},{"ruleId":"429","severity":1,"message":"472","line":8,"column":10,"nodeType":"431","messageId":"432","endLine":8,"endColumn":25},{"ruleId":"429","severity":1,"message":"473","line":12,"column":10,"nodeType":"431","messageId":"432","endLine":12,"endColumn":29},{"ruleId":"425","severity":1,"message":"474","line":83,"column":7,"nodeType":"427","endLine":83,"endColumn":25,"suggestions":"475"},{"ruleId":"425","severity":1,"message":"476","line":87,"column":7,"nodeType":"427","endLine":87,"endColumn":9,"suggestions":"477"},{"ruleId":"429","severity":1,"message":"472","line":8,"column":10,"nodeType":"431","messageId":"432","endLine":8,"endColumn":25},{"ruleId":"429","severity":1,"message":"473","line":12,"column":10,"nodeType":"431","messageId":"432","endLine":12,"endColumn":29},{"ruleId":"429","severity":1,"message":"478","line":61,"column":35,"nodeType":"431","messageId":"432","endLine":61,"endColumn":50},{"ruleId":"425","severity":1,"message":"474","line":84,"column":7,"nodeType":"427","endLine":84,"endColumn":25,"suggestions":"479"},{"ruleId":"425","severity":1,"message":"476","line":89,"column":7,"nodeType":"427","endLine":89,"endColumn":9,"suggestions":"480"},{"ruleId":"429","severity":1,"message":"481","line":8,"column":10,"nodeType":"431","messageId":"432","endLine":8,"endColumn":24},{"ruleId":"425","severity":1,"message":"482","line":36,"column":7,"nodeType":"427","endLine":36,"endColumn":9,"suggestions":"483"},{"ruleId":"425","severity":1,"message":"484","line":42,"column":7,"nodeType":"427","endLine":42,"endColumn":9,"suggestions":"485"},{"ruleId":"425","severity":1,"message":"486","line":48,"column":7,"nodeType":"427","endLine":48,"endColumn":9,"suggestions":"487"},{"ruleId":"425","severity":1,"message":"488","line":54,"column":7,"nodeType":"427","endLine":54,"endColumn":9,"suggestions":"489"},{"ruleId":"429","severity":1,"message":"490","line":11,"column":8,"nodeType":"431","messageId":"432","endLine":11,"endColumn":26},{"ruleId":"425","severity":1,"message":"491","line":109,"column":7,"nodeType":"427","endLine":109,"endColumn":25,"suggestions":"492"},{"ruleId":"425","severity":1,"message":"493","line":77,"column":6,"nodeType":"427","endLine":77,"endColumn":8,"suggestions":"494"},{"ruleId":"429","severity":1,"message":"495","line":1,"column":29,"nodeType":"431","messageId":"432","endLine":1,"endColumn":37},{"ruleId":"429","severity":1,"message":"496","line":16,"column":10,"nodeType":"431","messageId":"432","endLine":16,"endColumn":27},{"ruleId":"429","severity":1,"message":"497","line":71,"column":5,"nodeType":"431","messageId":"432","endLine":71,"endColumn":17},{"ruleId":"429","severity":1,"message":"449","line":73,"column":5,"nodeType":"431","messageId":"432","endLine":73,"endColumn":21},{"ruleId":"429","severity":1,"message":"452","line":79,"column":11,"nodeType":"431","messageId":"432","endLine":79,"endColumn":19},{"ruleId":"429","severity":1,"message":"454","line":80,"column":11,"nodeType":"431","messageId":"432","endLine":80,"endColumn":18},{"ruleId":"429","severity":1,"message":"498","line":91,"column":5,"nodeType":"431","messageId":"432","endLine":91,"endColumn":20},{"ruleId":"425","severity":1,"message":"499","line":145,"column":6,"nodeType":"427","endLine":145,"endColumn":25,"suggestions":"500"},{"ruleId":"425","severity":1,"message":"501","line":158,"column":6,"nodeType":"427","endLine":158,"endColumn":25,"suggestions":"502"},{"ruleId":"429","severity":1,"message":"447","line":11,"column":3,"nodeType":"431","messageId":"432","endLine":11,"endColumn":28},{"ruleId":"429","severity":1,"message":"503","line":16,"column":3,"nodeType":"431","messageId":"432","endLine":16,"endColumn":14},{"ruleId":"429","severity":1,"message":"504","line":26,"column":8,"nodeType":"431","messageId":"432","endLine":26,"endColumn":12},{"ruleId":"429","severity":1,"message":"505","line":40,"column":11,"nodeType":"431","messageId":"432","endLine":40,"endColumn":16},{"ruleId":"429","severity":1,"message":"506","line":48,"column":5,"nodeType":"431","messageId":"432","endLine":48,"endColumn":18},{"ruleId":"429","severity":1,"message":"507","line":51,"column":5,"nodeType":"431","messageId":"432","endLine":51,"endColumn":11},{"ruleId":"429","severity":1,"message":"460","line":52,"column":5,"nodeType":"431","messageId":"432","endLine":52,"endColumn":14},{"ruleId":"429","severity":1,"message":"508","line":54,"column":5,"nodeType":"431","messageId":"432","endLine":54,"endColumn":17},{"ruleId":"429","severity":1,"message":"509","line":55,"column":5,"nodeType":"431","messageId":"432","endLine":55,"endColumn":20},{"ruleId":"429","severity":1,"message":"452","line":57,"column":11,"nodeType":"431","messageId":"432","endLine":57,"endColumn":19},{"ruleId":"429","severity":1,"message":"454","line":58,"column":11,"nodeType":"431","messageId":"432","endLine":58,"endColumn":18},{"ruleId":"425","severity":1,"message":"510","line":55,"column":6,"nodeType":"427","endLine":55,"endColumn":25,"suggestions":"511"},{"ruleId":"425","severity":1,"message":"512","line":64,"column":6,"nodeType":"427","endLine":64,"endColumn":8,"suggestions":"513"},{"ruleId":"425","severity":1,"message":"514","line":65,"column":6,"nodeType":"427","endLine":65,"endColumn":8,"suggestions":"515"},{"ruleId":"429","severity":1,"message":"516","line":87,"column":13,"nodeType":"431","messageId":"432","endLine":87,"endColumn":24},{"ruleId":"429","severity":1,"message":"517","line":174,"column":13,"nodeType":"431","messageId":"432","endLine":174,"endColumn":21},{"ruleId":"425","severity":1,"message":"518","line":63,"column":5,"nodeType":"427","endLine":63,"endColumn":7,"suggestions":"519"},{"ruleId":"425","severity":1,"message":"520","line":38,"column":7,"nodeType":"427","endLine":38,"endColumn":15,"suggestions":"521"},{"ruleId":"429","severity":1,"message":"522","line":51,"column":12,"nodeType":"431","messageId":"432","endLine":51,"endColumn":18},{"ruleId":"425","severity":1,"message":"468","line":74,"column":7,"nodeType":"427","endLine":74,"endColumn":9,"suggestions":"523"},{"ruleId":"429","severity":1,"message":"524","line":6,"column":27,"nodeType":"431","messageId":"432","endLine":6,"endColumn":39},{"ruleId":"425","severity":1,"message":"518","line":63,"column":5,"nodeType":"427","endLine":63,"endColumn":7,"suggestions":"525"},{"ruleId":"425","severity":1,"message":"526","line":38,"column":7,"nodeType":"427","endLine":38,"endColumn":14,"suggestions":"527"},{"ruleId":"429","severity":1,"message":"528","line":1,"column":17,"nodeType":"431","messageId":"432","endLine":1,"endColumn":26},{"ruleId":"425","severity":1,"message":"529","line":44,"column":5,"nodeType":"427","endLine":44,"endColumn":7,"suggestions":"530"},{"ruleId":"429","severity":1,"message":"516","line":75,"column":13,"nodeType":"431","messageId":"432","endLine":75,"endColumn":24},"no-native-reassign",["531"],"no-negated-in-lhs",["532"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["533"],"no-unused-vars","'FilterOrdersDups' is defined but never used.","Identifier","unusedVar","'sortZtoADataByIndex' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["534"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["535"],"'FilterStandHoldDups' is defined but never used.","'setOriginalStanding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["536"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["537"],["531"],["532"],"'convertDatetoStandingDate' is defined but never used.","'uuidv4' is defined but never used.","'setModifications' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentCartList'. Either include it or remove the dependency array.",["538"],"'standing' is assigned a value but never used.","'setStanding' is assigned a value but never used.","'holding' is assigned a value but never used.","'setHolding' is assigned a value but never used.","'filterOutZeros' is defined but never used.","'setCurrentCartLineToQty' is defined but never used.","'updateCurrentLineInOrdersWithQty' is defined but never used.","'checkForMods' is defined but never used.","'setOrders' is assigned a value but never used.","'orderTypeWhole' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setCurrentCartList'. Either include it or remove the dependency array.",["539"],"'checkStandHoldStatus' is defined but never used.","'checkForStandMods' is defined but never used.","React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["540"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["541"],["531"],["532"],"'ProductsContext' is defined but never used.","'sortAtoZDataByIndex' is defined but never used.","React Hook useEffect has a missing dependency: 'constructData'. Either include it or remove the dependency array.",["542"],"React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["543"],"'listOfCustomers' is assigned a value but never used.",["544"],["545"],"'HoldingContext' is defined but never used.","React Hook useEffect has missing dependencies: 'orders.length' and 'setOrdersLoaded'. Either include them or remove the dependency array.",["546"],"React Hook useEffect has missing dependencies: 'customers.length' and 'setCustLoaded'. Either include them or remove the dependency array.",["547"],"React Hook useEffect has missing dependencies: 'products.length' and 'setProdLoaded'. Either include them or remove the dependency array.",["548"],"React Hook useEffect has missing dependencies: 'setStandLoaded' and 'standing.length'. Either include them or remove the dependency array.",["549"],"'LogisticsFunctions' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["550"],"React Hook useEffect has missing dependencies: 'props.location.search', 'setCartList', and 'setChosen'. Either include them or remove the dependency array.",["551"],"'useState' is defined but never used.","'buildCurrentOrder' is defined but never used.","'setStandList' is assigned a value but never used.","'currentCartList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customerGroup', 'orders', and 'setRoute'. Either include them or remove the dependency array.",["552"],"React Hook useEffect has missing dependencies: 'orders' and 'setPonote'. Either include them or remove the dependency array.",["553"],"'deleteOrder' is defined but never used.","'swal' is defined but never used.","'route' is assigned a value but never used.","'setStandArray' is assigned a value but never used.","'orders' is assigned a value but never used.","'recentOrders' is assigned a value but never used.","'setRecentOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["554"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["555"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["556"],"'fullDetails' is assigned a value but never used.","'custData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["557"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["558"],"'target' is assigned a value but never used.",["559"],"'CustomerLoad' is defined but never used.",["560"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["561"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["562"],"no-global-assign","no-unsafe-negation",{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"581","fix":"585"},{"desc":"583","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"609","fix":"615"},{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},"Update the dependencies array to be: [fetchCustomers]",{"range":"620","text":"621"},"Update the dependencies array to be: [fetchOrders]",{"range":"622","text":"623"},"Update the dependencies array to be: [fetchProducts]",{"range":"624","text":"625"},"Update the dependencies array to be: [fetchStanding]",{"range":"626","text":"627"},"Update the dependencies array to be: [fetchHolding]",{"range":"628","text":"629"},"Update the dependencies array to be: [products, orders, chosen, delivDate, currentCartList]",{"range":"630","text":"631"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",{"range":"632","text":"633"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"634","text":"635"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"636","text":"637"},"Update the dependencies array to be: [constructData, delivDate, route]",{"range":"638","text":"639"},"Update the dependencies array to be: [setRoute]",{"range":"640","text":"641"},{"range":"642","text":"639"},{"range":"643","text":"641"},"Update the dependencies array to be: [orders.length, setOrdersLoaded]",{"range":"644","text":"645"},"Update the dependencies array to be: [customers.length, setCustLoaded]",{"range":"646","text":"647"},"Update the dependencies array to be: [products.length, setProdLoaded]",{"range":"648","text":"649"},"Update the dependencies array to be: [setStandLoaded, standing.length]",{"range":"650","text":"651"},"Update the dependencies array to be: [constructColumns, constructData, delivDate, route]",{"range":"652","text":"653"},"Update the dependencies array to be: [props.location.search, setCartList, setChosen]",{"range":"654","text":"655"},"Update the dependencies array to be: [chosen, customerGroup, delivDate, orders, setRoute]",{"range":"656","text":"657"},"Update the dependencies array to be: [chosen, delivDate, orders, setPonote]",{"range":"658","text":"659"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"660","text":"661"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"662","text":"663"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"664","text":"665"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"666","text":"667"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"668","text":"669"},"Update the dependencies array to be: [setIsLoading]",{"range":"670","text":"671"},{"range":"672","text":"667"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"673","text":"674"},"Update the dependencies array to be: [products]",{"range":"675","text":"676"},[901,903],"[fetchCustomers]",[1226,1228],"[fetchOrders]",[899,901],"[fetchProducts]",[1069,1071],"[fetchStanding]",[1051,1053],"[fetchHolding]",[1653,1691],"[products, orders, chosen, delivDate, currentCartList]",[1857,1909],"[chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",[1887,1905],"[chosen, setStandArray, setStandList, standing]",[1556,1619],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[2444,2462],"[constructData, delivDate, route]",[2518,2520],"[setRoute]",[2548,2566],[2632,2634],[1408,1410],"[orders.length, setOrdersLoaded]",[1523,1525],"[customers.length, setCustLoaded]",[1637,1639],"[products.length, setProdLoaded]",[1752,1754],"[setStandLoaded, standing.length]",[3600,3618],"[constructColumns, constructData, delivDate, route]",[2276,2278],"[props.location.search, setCartList, setChosen]",[3736,3755],"[chosen, customerGroup, delivDate, orders, setRoute]",[4075,4094],"[chosen, delivDate, orders, setPonote]",[1731,1750],"[chosen, delivDate, orders, setCalendarEvents, standing]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1695,1697],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[938,946],"[fetchRoutes, routes, setIsLoading]",[1971,1973],"[setIsLoading]",[1707,1709],[931,938],"[fetchZones, setIsLoading, zones]",[1131,1133],"[products]"]