[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"28"},{"size":362,"mtime":1609089131749,"results":"29","hashOfConfig":"30"},{"size":1875,"mtime":1612533457262,"results":"31","hashOfConfig":"30"},{"size":500,"mtime":1609089131749,"results":"32","hashOfConfig":"30"},{"size":1059,"mtime":1612645189810,"results":"33","hashOfConfig":"30"},{"size":796,"mtime":1612533457264,"results":"34","hashOfConfig":"30"},{"size":4377,"mtime":1612533457263,"results":"35","hashOfConfig":"30"},{"size":7403,"mtime":1612645235662,"results":"36","hashOfConfig":"30"},{"size":7249,"mtime":1612640425310,"results":"37","hashOfConfig":"30"},{"size":458,"mtime":1612533457279,"results":"38","hashOfConfig":"30"},{"size":1200,"mtime":1612533457284,"results":"39","hashOfConfig":"30"},{"size":2415,"mtime":1612621713604,"results":"40","hashOfConfig":"30"},{"size":1569,"mtime":1612565892514,"results":"41","hashOfConfig":"30"},{"size":1602,"mtime":1612644272072,"results":"42","hashOfConfig":"30"},{"size":1180,"mtime":1612533457287,"results":"43","hashOfConfig":"30"},{"size":1123,"mtime":1612533457288,"results":"44","hashOfConfig":"30"},{"size":550,"mtime":1612635520554,"results":"45","hashOfConfig":"30"},{"size":8038,"mtime":1612621878533,"results":"46","hashOfConfig":"30"},{"size":2259,"mtime":1612533457272,"results":"47","hashOfConfig":"30"},{"size":4279,"mtime":1612621858619,"results":"48","hashOfConfig":"30"},{"size":4648,"mtime":1612621867528,"results":"49","hashOfConfig":"30"},{"size":292,"mtime":1612533457282,"results":"50","hashOfConfig":"30"},{"size":1700,"mtime":1612566764219,"results":"51","hashOfConfig":"30"},{"size":4873,"mtime":1612533457293,"results":"52","hashOfConfig":"30"},{"size":629,"mtime":1612533457294,"results":"53","hashOfConfig":"30"},{"size":1088,"mtime":1612563936792,"results":"54","hashOfConfig":"30"},{"size":794,"mtime":1612385307377,"results":"55","hashOfConfig":"30"},{"size":7406,"mtime":1612645849876,"results":"56","hashOfConfig":"30"},{"size":2274,"mtime":1612645133797,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1dwemmr",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["118","119"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js",["120","121","122"],"import React, { useContext } from 'react';\r\nimport { CurrentDataContext } from '../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../dataContexts/OrdersContext';\r\nimport { CustomerContext } from '../dataContexts/CustomerContext';\r\nimport { StandingContext } from '../dataContexts/StandingContext';\r\nimport { ProductsContext } from '../dataContexts/ProductsContext';\r\n\r\nimport { todayPlus, daysOfTheWeek, convertDatetoBPBDate, convertDatetoStandingDate } from '../helpers/dateTimeHelpers'\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst OrderCommandLine = () => {\r\n\r\n  const { chosen, setChosen, delivDate, setDelivDate, orderTypeWhole, setOrderTypeWhole, route, ponote } = useContext(CurrentDataContext)\r\n  const { orders, setOrders } = useContext(OrdersContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { products } = useContext(ProductsContext)\r\n  \r\n  let [ today, tomorrow, twoDay ] = todayPlus()\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n\r\n    let nextCustomer = chosen\r\n\r\n    if (entry.includes(\"retail \")){\r\n      setOrderTypeWhole(false)\r\n      let newRetailCustName = entry.replace(\"retail \",\"\")\r\n      let newRetailCustList = [...orders]\r\n      let newRetailCustEntry = [\"\",\"\",newRetailCustName,\"\",\"\",\"\",false,\"\"]\r\n      newRetailCustList.push(newRetailCustEntry)\r\n      setOrders(newRetailCustList)\r\n      setDelivDate(tomorrow)\r\n      setChosen(newRetailCustName);\r\n      return\r\n    } \r\n\r\n    for (let cust of customers) {\r\n      if (entry.includes(cust[2]) || entry.includes(cust[0])) {\r\n        nextCustomer = cust[2];\r\n        if (nextCustomer !== ''){\r\n          setChosen(nextCustomer)\r\n          setDelivDate(tomorrow)\r\n          setOrderTypeWhole(true)\r\n          return\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    if (nextCustomer === '' && chosen === ''){\r\n      swal ({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000\r\n      })\r\n      return\r\n    }\r\n\r\n    \r\n    return false\r\n  };\r\n  \r\n  \r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [ today, tomorrow, twoDay ] = todayPlus()\r\n    let [ Sun, Mon, Tues, Wed, Thurs, Fri, Sat ] = daysOfTheWeek()\r\n    let dateWords = [ ['today',today],['tomorrow',tomorrow],['twoday',twoDay],\r\n                      ['sun',Sun],['mon',Mon],['tue',Tues],['tues',Tues],['wed',Wed],['thu',Thurs],\r\n                      ['thur',Thurs],['thurs',Thurs],['fri',Fri],['sat',Sat]]\r\n    for (let wordSet of dateWords){\r\n      if(entry.includes(wordSet[0])){\r\n        setDelivDate(wordSet[1])\r\n      }\r\n      \r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  const checkForProducts = (entry) => {\r\n    \r\n    \r\n    let isThereAProduct = /\\d+\\s\\w+/g.test(entry)\r\n    if (isThereAProduct){\r\n      let newOrder\r\n      const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n      let enteredProducts = array.map(item => item[0].split(\" \"))\r\n      let ordersToUpdate = [];\r\n      for (let prod of products){\r\n        for (let item of enteredProducts){\r\n          if (prod[2] === item[1]){\r\n            newOrder = [item[0],prod[1], chosen, ponote, route, \"0\", orderTypeWhole, convertDatetoBPBDate(delivDate)] // [ qty, prod, cust, po, route, so, ty ]\r\n            ordersToUpdate.push(newOrder)\r\n          }\r\n  \r\n        }\r\n      }\r\n    \r\n      console.log(ordersToUpdate)\r\n\r\n      // create map of orders for cust, delivdate #1\r\n\r\n      // Build Orders List based on delivDate and Chosen\r\n      let BPBDate = convertDatetoBPBDate(delivDate)\r\n      let filteredOrders = clonedeep(orders)\r\n      let cartList = filteredOrders ? filteredOrders.filter(order => order[7] === BPBDate && order[2] === chosen) : [];\r\n      \r\n      // Build Standing LIst based on delivDate and Chosen\r\n      let standingDate = convertDatetoStandingDate(delivDate);  \r\n      let filteredStanding = clonedeep(standing)\r\n      let standingList = filteredStanding ? filteredStanding.filter(standing => standing[0] === standingDate && standing[8] === chosen) : [];\r\n      let convertedOrderList = standingList.map(order => [    order[2],\r\n                                                              order[7],\r\n                                                              order[8],\r\n                                                              'na',\r\n                                                              order[6],\r\n                                                              order[2], \r\n                                                              order[3] !== \"9999\" ? true : false,\r\n                                                              convertDatetoBPBDate(delivDate)])\r\n      \r\n      // Compare Order List to Stand List and give Order List precedence in final list                                                        \r\n      let custOrderList = cartList.concat(convertedOrderList)\r\n      for (let i=0; i<custOrderList.length; ++i ){\r\n          for (let j=i+1; j<custOrderList.length; ++j){\r\n              if (custOrderList[i][1] === custOrderList[j][1]){\r\n                  custOrderList.splice(j,1);\r\n              }\r\n          }\r\n      }\r\n\r\n      console.log(custOrderList)\r\n      // new product by new product, check if it exists\r\n      let ordersToModify = [...orders]\r\n      if (custOrderList.length>0){\r\n        for (let ord of ordersToUpdate){\r\n          for (let custOrd of custOrderList){\r\n            if (ord[1] === custOrd[1]){\r\n            \r\n              let index = ordersToModify.findIndex(order => order[1] === custOrd[1] &&\r\n                    order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n              if (index>=0){\r\n                ordersToModify[index][0] = ord[0] \r\n                     \r\n              } else{\r\n                ord[5] = custOrd[5]\r\n                ordersToModify.push(ord)\r\n                \r\n              }\r\n            }\r\n          }    \r\n        }\r\n      }\r\n      for (let ord of ordersToUpdate){\r\n        for (let mod in ordersToModify){\r\n          let index = ordersToModify.findIndex(order => order[1] === ord[1] &&\r\n            order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n          if (index<0){\r\n            ordersToModify.push(ord)\r\n          }\r\n        }\r\n      }\r\n      // for order in ordersToModify\r\n      //      if index not in orders - push order into ordersToModify\r\n      setOrders(ordersToModify)\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers)\r\n\r\n    checkForDelivDate(entry)\r\n    checkForProducts(entry)\r\n  };\r\n\r\n  \r\n\r\n  const handleInput = (entry) => {\r\n     if (entry.key === \"Enter\") {\r\n        interpretEntry(entry.target.value)\r\n        document.getElementById(\"orderCommand\").value = ''; \r\n        \r\n    }\r\n    return\r\n  };\r\n\r\n  \r\n\r\n  \r\n  \r\n  return (        \r\n    <div className = \"orderCommandLine\">\r\n      <input  type=\"text\" \r\n              id=\"orderCommand\" \r\n              className=\"orderCommand\"\r\n              name=\"orderCommand\" \r\n              placeholder=\"Enter Customers, Orders, Dates ...\"\r\n              onKeyUp={e => handleInput(e)}>\r\n\r\n      </input>\r\n    </div>     \r\n  );\r\n}\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js",["123","124"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\n\r\nimport { createRouteList, FindNewRoute } from '../../helpers/sortDataHelpers'\r\nimport { convertDatetoBPBDate, convertDatetoStandingDate } from '../../helpers/dateTimeHelpers'\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nconst Routes = () => {\r\n\r\n    const { customers } = useContext(CustomerContext)\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate, route, setRoute, orderTypeWhole, ponote } = useContext(CurrentDataContext)\r\n\r\n    const [ routes, setRoutes ] = useState()\r\n    \r\n    \r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n        let newRoute = FindNewRoute(chosen, delivDate, orders, customers)\r\n        setRoute(newRoute)      \r\n    },[chosen, delivDate, customers, setRoute, orders])\r\n    \r\n\r\n\r\n    const handleChange = e => {\r\n\r\n        let newRoute = e.target.value\r\n         // BUILD PRESENT LIST\r\n        // Build Orders List based on delivDate and Chosen\r\n        let BPBDate = convertDatetoBPBDate(delivDate)\r\n        let filteredOrders = clonedeep(orders)\r\n        let cartList = filteredOrders ? filteredOrders.filter(order => order[7] === BPBDate && order[2] === chosen) : [];\r\n        \r\n        // Build Standing List based on delivDate and Chosen\r\n        let standingDate = convertDatetoStandingDate(delivDate);  \r\n        let filteredStanding = clonedeep(standing)\r\n        let standingList = filteredStanding ? filteredStanding.filter(standing => standing[0] === standingDate && standing[8] === chosen) : [];\r\n        let convertedOrderList = standingList.map(order => [    order[2],\r\n                                                                order[7],\r\n                                                                order[8],\r\n                                                                'na',\r\n                                                                order[6],\r\n                                                                order[2], \r\n                                                                order[3] !== \"9999\" ? true : false,\r\n                                                                convertDatetoBPBDate(delivDate)])\r\n        \r\n        // Compare Order List to Stand List and give Order List precedence in final list                                                        \r\n        let orderList = cartList.concat(convertedOrderList)\r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // set route if route has changed\r\n        if (orderList.length>0) {\r\n            orderList.map(item => item[4] = newRoute)\r\n        } else {\r\n            swal ({\r\n                text: \"Need to enter a product first\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                timer: 2000\r\n              })\r\n            return\r\n        }\r\n\r\n        let recent = clonedeep(orders)\r\n        let newOrderList = orderList.concat(recent)\r\n            for (let i=0; i<newOrderList.length; ++i ){\r\n                for (let j=i+1; j<newOrderList.length; ++j){\r\n                    if (  newOrderList[i][1] === newOrderList[j][1] &&\r\n                          newOrderList[i][2] === newOrderList[j][2] &&\r\n                          newOrderList[i][7] === newOrderList[j][7]){\r\n                        newOrderList.splice(j,1);\r\n                    }\r\n                }\r\n              }\r\n          \r\n        if (newOrderList){\r\n          setOrders(newOrderList)\r\n\r\n        setRoute(newRoute);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <label>Routes:</label>\r\n            <select id=\"routes\" name=\"routes\" value={route} onChange={handleChange} disabled={chosen ? false : true}>\r\n            {routes ? routes.map(ro =>  <option id=\"routes\" key={uuidv4()} name={ro}>{ro}</option>) : ''}\r\n            </select>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Routes","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js",[],["125","126"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js",["127","128"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":23,"column":9,"nodeType":"135","messageId":"136","endLine":23,"endColumn":14},{"ruleId":"133","severity":1,"message":"137","line":23,"column":26,"nodeType":"135","messageId":"136","endLine":23,"endColumn":32},{"ruleId":"133","severity":1,"message":"138","line":160,"column":18,"nodeType":"135","messageId":"136","endLine":160,"endColumn":21},{"ruleId":"133","severity":1,"message":"139","line":21,"column":49,"nodeType":"135","messageId":"136","endLine":21,"endColumn":63},{"ruleId":"133","severity":1,"message":"140","line":21,"column":65,"nodeType":"135","messageId":"136","endLine":21,"endColumn":71},{"ruleId":"129","replacedBy":"141"},{"ruleId":"131","replacedBy":"142"},{"ruleId":"133","severity":1,"message":"143","line":56,"column":11,"nodeType":"135","messageId":"136","endLine":56,"endColumn":26},{"ruleId":"133","severity":1,"message":"144","line":115,"column":11,"nodeType":"135","messageId":"136","endLine":115,"endColumn":23},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'today' is assigned a value but never used.","Identifier","unusedVar","'twoDay' is assigned a value but never used.","'mod' is assigned a value but never used.","'orderTypeWhole' is assigned a value but never used.","'ponote' is assigned a value but never used.",["145"],["146"],"'handleQtyModify' is assigned a value but never used.","'handleRemove' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]