[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Ordering.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\deilveryGrid.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\BuildCurrentCartList.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\OrderingFunctions.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"38"},{"size":362,"mtime":1609089131749,"results":"39","hashOfConfig":"40"},{"size":1502,"mtime":1612978384029,"results":"41","hashOfConfig":"40"},{"size":500,"mtime":1609089131749,"results":"42","hashOfConfig":"40"},{"size":1059,"mtime":1612973217641,"results":"43","hashOfConfig":"40"},{"size":1100,"mtime":1612973195409,"results":"44","hashOfConfig":"40"},{"size":4377,"mtime":1612533457263,"results":"45","hashOfConfig":"40"},{"size":7991,"mtime":1612973527647,"results":"46","hashOfConfig":"40"},{"size":7401,"mtime":1612973290276,"results":"47","hashOfConfig":"40"},{"size":490,"mtime":1612790497832,"results":"48","hashOfConfig":"40"},{"size":1200,"mtime":1612972329564,"results":"49","hashOfConfig":"40"},{"size":2614,"mtime":1612792390167,"results":"50","hashOfConfig":"40"},{"size":1680,"mtime":1612978813364,"results":"51","hashOfConfig":"40"},{"size":1295,"mtime":1612972396003,"results":"52","hashOfConfig":"40"},{"size":1180,"mtime":1612533457287,"results":"53","hashOfConfig":"40"},{"size":1211,"mtime":1612875412932,"results":"54","hashOfConfig":"40"},{"size":550,"mtime":1612635520554,"results":"55","hashOfConfig":"40"},{"size":441,"mtime":1612969786973,"results":"56","hashOfConfig":"40"},{"size":2378,"mtime":1612972899485,"results":"57","hashOfConfig":"40"},{"size":779,"mtime":1612979107217,"results":"58","hashOfConfig":"40"},{"size":1030,"mtime":1612979139171,"results":"59","hashOfConfig":"40"},{"size":2173,"mtime":1612879421437,"results":"60","hashOfConfig":"40"},{"size":5033,"mtime":1612973126969,"results":"61","hashOfConfig":"40"},{"size":5189,"mtime":1612979055576,"results":"62","hashOfConfig":"40"},{"size":629,"mtime":1612533457294,"results":"63","hashOfConfig":"40"},{"size":1183,"mtime":1612972445010,"results":"64","hashOfConfig":"40"},{"size":794,"mtime":1612385307377,"results":"65","hashOfConfig":"40"},{"size":7592,"mtime":1612973070974,"results":"66","hashOfConfig":"40"},{"size":3639,"mtime":1612972992520,"results":"67","hashOfConfig":"40"},{"size":1190,"mtime":1612875376159,"results":"68","hashOfConfig":"40"},{"size":415,"mtime":1612908319684,"results":"69","hashOfConfig":"40"},{"size":1020,"mtime":1612977872731,"results":"70","hashOfConfig":"40"},{"size":811,"mtime":1612970266325,"results":"71","hashOfConfig":"40"},{"size":721,"mtime":1612912832881,"results":"72","hashOfConfig":"40"},{"size":2468,"mtime":1612971031346,"results":"73","hashOfConfig":"40"},{"size":1104,"mtime":1612975923242,"results":"74","hashOfConfig":"40"},{"size":3515,"mtime":1612973590564,"results":"75","hashOfConfig":"40"},{"size":2110,"mtime":1612979309024,"results":"76","hashOfConfig":"40"},{"size":430,"mtime":1612978454437,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1dwemmr",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["162","163"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\calendarApp.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderEntryButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\orderCommandLine.js",["164","165","166"],"import React, { useContext } from 'react';\r\n\r\nimport { CurrentDataContext } from '../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../dataContexts/OrdersContext';\r\nimport { CustomerContext } from '../dataContexts/CustomerContext';\r\nimport { StandingContext } from '../dataContexts/StandingContext';\r\nimport { ProductsContext } from '../dataContexts/ProductsContext';\r\nimport { ToggleContext } from '../dataContexts/ToggleContext';\r\n\r\nimport { todayPlus, daysOfTheWeek, convertDatetoBPBDate, convertDatetoStandingDate } from '../helpers/dateTimeHelpers'\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst OrderCommandLine = () => {\r\n\r\n  const { chosen, setChosen, delivDate, setDelivDate, route, ponote } = useContext(CurrentDataContext)\r\n  const { orders, setOrders } = useContext(OrdersContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { products } = useContext(ProductsContext)\r\n  const { orderTypeWhole, setOrderTypeWhole, setRouteIsOn } = useContext(ToggleContext)\r\n  \r\n  let [ today, tomorrow, twoDay ] = todayPlus()\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n\r\n    let nextCustomer = chosen\r\n\r\n    if (entry.includes(\"retail \")){\r\n      setOrderTypeWhole(false)\r\n      let newRetailCustName = entry.replace(\"retail \",\"\")\r\n      let newRetailCustList = [...orders]\r\n      let newRetailCustEntry = [\"\",\"\",newRetailCustName,\"\",\"\",\"\",false,\"\"]\r\n      newRetailCustList.push(newRetailCustEntry)\r\n      setOrders(newRetailCustList)\r\n      setDelivDate(tomorrow)\r\n      setChosen(newRetailCustName);\r\n      return\r\n    } \r\n\r\n    for (let cust of customers) {\r\n      if (entry.includes(cust[2]) || entry.includes(cust[0])) {\r\n        nextCustomer = cust[2];\r\n        if (nextCustomer !== ''){\r\n          setChosen(nextCustomer)\r\n          setRouteIsOn(true)\r\n          setDelivDate(tomorrow)\r\n          setOrderTypeWhole(true)\r\n          return\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    if (nextCustomer === '' && chosen === ''){\r\n      swal ({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000\r\n      })\r\n      return\r\n    }\r\n\r\n    \r\n    return false\r\n  };\r\n  \r\n  \r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [ today, tomorrow, twoDay ] = todayPlus()\r\n    let [ Sun, Mon, Tues, Wed, Thurs, Fri, Sat ] = daysOfTheWeek()\r\n    let dateWords = [ ['today',today],['tomorrow',tomorrow],['twoday',twoDay],\r\n                      ['sun',Sun],['mon',Mon],['tue',Tues],['tues',Tues],['wed',Wed],['thu',Thurs],\r\n                      ['thur',Thurs],['thurs',Thurs],['fri',Fri],['sat',Sat]]\r\n    for (let wordSet of dateWords){\r\n      if(entry.includes(wordSet[0])){\r\n        setDelivDate(wordSet[1])\r\n      }\r\n      \r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  const checkForProducts = (entry) => {\r\n    \r\n    \r\n    let isThereAProduct = /\\d+\\s\\w+/g.test(entry)\r\n    if (isThereAProduct){\r\n      let newOrder\r\n      const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n      let enteredProducts = array.map(item => item[0].split(\" \"))\r\n      let ordersToUpdate = [];\r\n      for (let prod of products){\r\n        for (let item of enteredProducts){\r\n          if (prod[2] === item[1]){\r\n            newOrder = [item[0],prod[1], chosen, ponote, route, \"0\", orderTypeWhole, convertDatetoBPBDate(delivDate)] // [ qty, prod, cust, po, route, so, ty ]\r\n            ordersToUpdate.push(newOrder)\r\n          }\r\n  \r\n        }\r\n      }\r\n    \r\n      console.log(ordersToUpdate)\r\n\r\n      // create map of orders for cust, delivdate #1\r\n\r\n      // Build Orders List based on delivDate and Chosen\r\n      let BPBDate = convertDatetoBPBDate(delivDate)\r\n      let filteredOrders = clonedeep(orders)\r\n      let cartList = filteredOrders ? filteredOrders.filter(order => order[7] === BPBDate && order[2] === chosen) : [];\r\n      \r\n      // Build Standing LIst based on delivDate and Chosen\r\n      let standingDate = convertDatetoStandingDate(delivDate);  \r\n      let filteredStanding = clonedeep(standing)\r\n      let standingList = filteredStanding ? filteredStanding.filter(standing => standing[0] === standingDate && standing[8] === chosen) : [];\r\n      let convertedOrderList = standingList.map(order => [    order[2],\r\n                                                              order[7],\r\n                                                              order[8],\r\n                                                              'na',\r\n                                                              order[6],\r\n                                                              order[2], \r\n                                                              order[3] !== \"9999\" ? true : false,\r\n                                                              convertDatetoBPBDate(delivDate)])\r\n      \r\n      // Compare Order List to Stand List and give Order List precedence in final list                                                        \r\n      let custOrderList = cartList.concat(convertedOrderList)\r\n      for (let i=0; i<custOrderList.length; ++i ){\r\n          for (let j=i+1; j<custOrderList.length; ++j){\r\n              if (custOrderList[i][1] === custOrderList[j][1]){\r\n                  custOrderList.splice(j,1);\r\n              }\r\n          }\r\n      }\r\n\r\n      console.log(custOrderList)\r\n      // new product by new product, check if it exists\r\n      let ordersToModify = [...orders]\r\n      if (custOrderList.length>0){\r\n        for (let ord of ordersToUpdate){\r\n          for (let custOrd of custOrderList){\r\n            if (ord[1] === custOrd[1]){\r\n            \r\n              let index = ordersToModify.findIndex(order => order[1] === custOrd[1] &&\r\n                    order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n              if (index>=0){\r\n                ordersToModify[index][0] = ord[0] \r\n                     \r\n              } else{\r\n                ord[5] = custOrd[5]\r\n                ordersToModify.push(ord)\r\n                \r\n              }\r\n            }\r\n          }    \r\n        }\r\n      }\r\n      for (let ord of ordersToUpdate){\r\n        for (let mod in ordersToModify){\r\n          let index = ordersToModify.findIndex(order => order[1] === ord[1] &&\r\n            order[2] === chosen && order[7] === convertDatetoBPBDate(delivDate));\r\n          if (index<0){\r\n            ordersToModify.push(ord)\r\n          }\r\n        }\r\n      }\r\n      // for order in ordersToModify\r\n      //      if index not in orders - push order into ordersToModify\r\n      setOrders(ordersToModify)\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers)\r\n\r\n    checkForDelivDate(entry)\r\n    checkForProducts(entry)\r\n  };\r\n\r\n  \r\n\r\n  const handleInput = (entry) => {\r\n     if (entry.key === \"Enter\") {\r\n        interpretEntry(entry.target.value)\r\n        document.getElementById(\"orderCommand\").value = ''; \r\n        \r\n    }\r\n    return\r\n  };\r\n\r\n  \r\n\r\n  \r\n  \r\n  return (        \r\n    <div className = \"orderCommandLine\">\r\n      <input  type=\"text\" \r\n              id=\"orderCommand\" \r\n              className=\"orderCommand\"\r\n              name=\"orderCommand\" \r\n              placeholder=\"Enter Customers, Orders, Dates ...\"\r\n              onKeyUp={e => handleInput(e)}>\r\n\r\n      </input>\r\n    </div>     \r\n  );\r\n}\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Customers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\DeliveryDate.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\PONotes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderInfo\\Routes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderListButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\recentOrderList\\RecentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",["167"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\handleInteractions.js",[],["168","169"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\StandingOrderEntry.js",["170","171"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nconst StandingOrderEntry = () => {\r\n\r\n    const [ standArray, setStandArray ] = useState()\r\n\r\n    const { standing, setStanding } = useContext(StandingContext);\r\n    const { holding, setHolding } = useContext(HoldingContext);\r\n    const { standList, setStandList, setModifications } = useContext(ToggleContext)\r\n    const { chosen } = useContext(CurrentDataContext);\r\n\r\n\r\n    useEffect(() => {\r\n        let buildStandArray = []\r\n        let Stand = false\r\n        let Hold = false\r\n        let standingToCheck = clonedeep(standing)\r\n        let holdingToCheck = clonedeep(holding)\r\n        // check for standing, if no, check for holding, if no return\r\n        \r\n        for (let stand in standingToCheck){\r\n            if (standingToCheck[stand][8] === chosen){\r\n                setStandList(true)\r\n                Stand = true\r\n            }\r\n        }\r\n        for (let hold in holdingToCheck){\r\n            if (holdingToCheck[hold][8] === chosen){\r\n                setStandList(false)\r\n                Hold = true\r\n            }\r\n        }\r\n        \r\n        \r\n        if (Stand){\r\n            let pullStand = clonedeep(standing)\r\n            for (let pull of pullStand){\r\n                // search index of item in buildArray\r\n                if (pull[8] === chosen){\r\n                    let ind = buildStandArray.findIndex(stand => stand[0] === pull[7])\r\n                    if (ind>=0){\r\n                        buildStandArray[ind][Number(pull[0])] = pull[2]\r\n                    } else {\r\n                        let newStand = [pull[7],\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\r\n                        newStand[Number(pull[0])] = pull[2]\r\n                        buildStandArray.push(newStand)\r\n\r\n                    }\r\n                }\r\n            } \r\n        }   \r\n\r\n        if (Hold){\r\n            let pullHold = clonedeep(holding)\r\n            for (let pull of pullHold){\r\n                // search index of item in buildArray\r\n                if (pull[8] === chosen){\r\n                    let ind = buildStandArray.findIndex(stand => stand[0] === pull[7])\r\n                    if (ind>=0){\r\n                        buildStandArray[ind][Number(pull[0])] = pull[2]\r\n                    } else {\r\n                        let newStand = [pull[7],\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\r\n                        newStand[Number(pull[0])] = pull[2]\r\n                        buildStandArray.push(newStand)\r\n\r\n                    }\r\n                }\r\n            } \r\n        }   \r\n\r\n        setStandArray(buildStandArray)\r\n    },[chosen, holding, standing])\r\n\r\n\r\n    const handleRemove = e => {\r\n        setModifications(true)\r\n        let newQty = \"0\"\r\n        let indexToFind = e.target.name\r\n        let foundStandIndex = standArray.findIndex(line => line[0] === indexToFind)\r\n        let StandListToModify = clonedeep(standArray)\r\n        for (let i = 1; i<8; ++i){\r\n            StandListToModify[foundStandIndex][i] = \"0\";\r\n        }\r\n\r\n        // create deepcopy of orders\r\n        \r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)\r\n        \r\n        for (let i = 1; i<8; ++i){\r\n            let ind = updatedStandorHold.findIndex(stand => stand[0] === i.toString() && stand[7] === indexToFind && stand[8] === chosen)\r\n            if (ind>=0){\r\n                updatedStandorHold[ind][2] = 0;\r\n            }\r\n        }\r\n        if(standList){\r\n            setStanding(updatedStandorHold)\r\n        } else {\r\n            setHolding(updatedStandorHold)\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    const handleQtyModify = e => {\r\n        if(isNaN(e.target.value)){\r\n            e.target.value = ''\r\n            swal ({\r\n                text: \"Only Numbers Please\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                timer: 2000\r\n              })\r\n        }\r\n\r\n        setModifications(true)\r\n        let newQty = e.target.value\r\n        let indexToFind = e.target.name\r\n        let foundStandIndex = standArray.findIndex(line => line[0] === indexToFind)\r\n        let StandListToModify = clonedeep(standArray)\r\n        let intTarg = e.target.id\r\n        intTarg = intTarg.split('_')\r\n        StandListToModify[foundStandIndex][intTarg[1]] = newQty;\r\n\r\n        let updatedStanding = clonedeep(standing)\r\n        let ind = updatedStanding.findIndex(stand => stand[0] === intTarg[1] \r\n            && stand[7] === indexToFind && stand[8] === chosen)\r\n        console.log(ind)\r\n        console.log(updatedStanding[ind])\r\n        updatedStanding[ind][2] = newQty\r\n\r\n        \r\n        setStanding(updatedStanding)\r\n      \r\n          \r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <React.Fragment> \r\n            <label>PRODUCT</label>\r\n            <label>S</label>\r\n            <label>M</label>\r\n            <label>T</label>\r\n            <label>W</label>\r\n            <label>T</label>\r\n            <label>F</label>\r\n            <label>S</label>\r\n            <label></label>\r\n\r\n            {standArray ? standArray.map(order =>\r\n                (<React.Fragment key={order[0]+\"frag\"}>\r\n                    <label key={order[0]+\"prod\"}>{order[0]}</label>\r\n\r\n                    <input type=\"text\" key={order[0]+\"sun\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_1\"} name={order[0]}\r\n                        placeholder={order[1]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"mon\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_2\"} name={order[0]}\r\n                        placeholder={order[2]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"tues\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_3\"} name={order[0]}\r\n                        placeholder={order[3]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"wed\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_4\"} name={order[0]}\r\n                        placeholder={order[4]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"thurs\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_5\"} name={order[0]}\r\n                        placeholder={order[5]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"fri\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_6\"} name={order[0]}\r\n                        placeholder={order[6]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n                    <input type=\"text\" key={order[0]+\"sat\"} size=\"3\" maxLength=\"3\" id={order[0]+\"_7\"} name={order[0]}\r\n                        placeholder={order[7]} onKeyUp={e => {handleQtyModify(e)}} onBlur={(e) => {e.target.value = ''}}></input>\r\n    \r\n                    <button className=\"trashButton\" key={order[0]+\"rem\"} name={order[0]} onClick={e => handleRemove(e)}>🗑️</button>\r\n                </React.Fragment>)) : ''}\r\n           \r\n           \r\n        </React.Fragment>\r\n        \r\n    )\r\n};\r\n\r\nexport default StandingOrderEntry","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\StandingOrder\\AddStandingOrderEntry.js",["172"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../helpers/sortDataHelpers';\r\n\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { standing, setStanding } = useContext(StandingContext)\r\n    const { holding, setHolding } = useContext(HoldingContext)\r\n    const { orders } = useContext(OrdersContext)\r\n    const { chosen, delivDate } = useContext(CurrentDataContext)\r\n    const { standList } = useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n    let standHold \r\n    standList ? standHold = \"MAKE H.O.\" : standHold = \"MAKE S.O.\"\r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, orders, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let newStandingList = clonedeep(standing)\r\n        for (let i=1; i<8; i++){\r\n            let newOrder =[i.toString(),\"na\",\"0\",\"na\",\"na\",\"na\",\"na\",pickedProduct,chosen] \r\n            newStandingList.push(newOrder)\r\n        }\r\n        \r\n        setStanding(newStandingList)\r\n        setPickedProduct('');\r\n    }\r\n\r\n    const handleStandHold = async () => {\r\n        let currentStandList = await clonedeep(standing)\r\n        let currentHoldList = await clonedeep(holding)\r\n\r\n        if(standList){\r\n            let currentStandListClip = await currentStandList.filter(stand => stand[8] === chosen)\r\n            let reducedStandList = await currentStandList.filter(stand => stand[8] !== chosen)\r\n            let send = currentHoldList.concat(currentStandListClip)\r\n            setStanding(await reducedStandList)\r\n            setHolding(send)\r\n        } else {\r\n            let currentHoldListClip = currentHoldList.filter(hold => hold[8] === chosen)\r\n            let reducedHoldList = currentHoldList.filter(hold => hold[8] !== chosen)\r\n            let send = currentStandList.concat(currentHoldListClip)\r\n            setHolding(reducedHoldList)\r\n            setStanding(send)\r\n            \r\n        }\r\n    }\r\n\r\n    const ho = {\r\n        backgroundColor: \"red\"\r\n      }\r\n\r\n      const so = {\r\n        backgroundColor: \"green\"\r\n      }\r\n\r\n\r\n    return (\r\n        <div className=\"addAProductToStanding\">\r\n            <select id = \"products\" name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen ? false : true}>\r\n            {\r\n                productList ? productList.map((product) => \r\n                    <option key = {uuidv4()} value={product[1]}>{product[1]}</option>\r\n                ) : ''\r\n                }; \r\n            </select>\r\n           \r\n            <button onClick={handleAdd}>ADD</button>\r\n            <button style={standList ? so : ho } onClick={handleStandHold}>{standHold}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",["173"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\nimport Ordering from './Ordering'\r\nimport Logistics from './Logistics'\r\n\r\n\r\n\r\nfunction AppRoutes() {\r\n\r\n  return (\r\n    <Router>\r\n      <Route path=\"/ordering\" component={Ordering} /> \r\n      <Route path=\"/logistics\" component={Logistics} />  \r\n    </Router>        \r\n  );\r\n}\r\n\r\nexport default AppRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Ordering.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\deilveryGrid.js",["174","175","176","177"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { CurrentDataContext } from '../dataContexts/CurrentDataContext';\r\n\r\n\r\nconst DeliveryGrid = () => {\r\n\r\n\r\n    /*\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ delivListGrid, setDelivListGrid ] = useState([])\r\n\r\n    useEffect(() => {\r\n        let orderList = buildFullOrderList()\r\n        let orderListByDateAndRoute = filterByDateAndRoute(orderList, delivDate, route)\r\n        setDelivListGrid(orderListByDateAndRoute)    \r\n    }, [delivDate, route])\r\n    */\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Nothing to see yet</h1>\r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\nexport default DeliveryGrid;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\currentOrderList\\CartOrder\\BuildCurrentCartList.js",["178"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\n\r\nimport { buildCartList, buildStandList, compileOrderList, filterOutZeros } from '../../../helpers/CartBuildingHelpers'\r\n\r\n\r\nconst BuildCurrentCartList = () => {\r\n\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate } = useContext(CurrentDataContext)\r\n\r\n    const [ currentList, setCurrentList ] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let cartList = buildCartList(chosen,delivDate,orders)\r\n        let standList = buildStandList(chosen, delivDate, standing)\r\n        let currentOrderList = compileOrderList(cartList,standList)\r\n        let noZerosOrderList = filterOutZeros(currentOrderList)\r\n        setCurrentList(noZerosOrderList)\r\n\r\n    }, [chosen, delivDate, orders, setOrders, standing])\r\n\r\n    const handleRemove = e => {}\r\n\r\n    const handleQtyModify = e => {}\r\n\r\n    return (\r\n        <React.Fragment>\r\n        {currentList.map(order => \r\n            <React.Fragment key={order[1]+\"b\"}>\r\n                <button \r\n                    className=\"trashButton\"\r\n                    onClick={e => {handleRemove(e)}} \r\n                    key={order[1]+\"e\"} \r\n                    name={order[1]}\r\n                    id={order[1]}>🗑️</button>\r\n                <label key={order[1]}>{order[1]}</label>   \r\n                <input  \r\n                    type=\"text\" \r\n                    size=\"4\"\r\n                    maxLength=\"5\"\r\n                    key={order[1]+\"c\"} \r\n                    id={order[1]+\"item\"} \r\n                    name={order[1]} \r\n                    placeholder={order[0]} \r\n                    onKeyUp={e => {handleQtyModify(e)}}\r\n                    onBlur={(e) => {\r\n\r\n                        e.target.value = ''\r\n\r\n                    }}\r\n                        >\r\n                </input>\r\n                <label \r\n                    key={order[1]+\"d\"} \r\n                    className=\"previous\">{order[5] === order[0] ? '' : order[5]}\r\n                </label>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BuildCurrentCartList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\components\\OrderingFunctions.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":27,"column":9,"nodeType":"185","messageId":"186","endLine":27,"endColumn":14},{"ruleId":"183","severity":1,"message":"187","line":27,"column":26,"nodeType":"185","messageId":"186","endLine":27,"endColumn":32},{"ruleId":"183","severity":1,"message":"188","line":165,"column":18,"nodeType":"185","messageId":"186","endLine":165,"endColumn":21},{"ruleId":"183","severity":1,"message":"189","line":3,"column":59,"nodeType":"185","messageId":"186","endLine":3,"endColumn":73},{"ruleId":"179","replacedBy":"190"},{"ruleId":"181","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":81,"column":7,"nodeType":"194","endLine":81,"endColumn":34,"suggestions":"195"},{"ruleId":"183","severity":1,"message":"196","line":86,"column":13,"nodeType":"185","messageId":"186","endLine":86,"endColumn":19},{"ruleId":"183","severity":1,"message":"197","line":12,"column":32,"nodeType":"185","messageId":"186","endLine":12,"endColumn":58},{"ruleId":"183","severity":1,"message":"198","line":3,"column":35,"nodeType":"185","messageId":"186","endLine":3,"endColumn":41},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":27},{"ruleId":"183","severity":1,"message":"200","line":1,"column":29,"nodeType":"185","messageId":"186","endLine":1,"endColumn":38},{"ruleId":"183","severity":1,"message":"201","line":1,"column":40,"nodeType":"185","messageId":"186","endLine":1,"endColumn":48},{"ruleId":"183","severity":1,"message":"202","line":2,"column":10,"nodeType":"185","messageId":"186","endLine":2,"endColumn":28},{"ruleId":"183","severity":1,"message":"203","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":12},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"no-unused-vars","'today' is assigned a value but never used.","Identifier","unusedVar","'twoDay' is assigned a value but never used.","'mod' is assigned a value but never used.","'filterOutZeros' is defined but never used.",["204"],["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setStandList'. Either include it or remove the dependency array.","ArrayExpression",["206"],"'newQty' is assigned a value but never used.","'decideWhetherToAddOrModify' is defined but never used.","'Switch' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'CurrentDataContext' is defined but never used.","'swal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},"Update the dependencies array to be: [chosen, holding, setStandList, standing]",{"range":"209","text":"210"},[2977,3004],"[chosen, holding, setStandList, standing]"]