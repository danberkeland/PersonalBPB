[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js":"77"},{"size":362,"mtime":1609089131749,"results":"78","hashOfConfig":"79"},{"size":1920,"mtime":1614734016687,"results":"80","hashOfConfig":"79"},{"size":500,"mtime":1609089131749,"results":"81","hashOfConfig":"79"},{"size":1552,"mtime":1615234090706,"results":"82","hashOfConfig":"79"},{"size":2712,"mtime":1615553819367,"results":"83","hashOfConfig":"79"},{"size":2132,"mtime":1615384778546,"results":"84","hashOfConfig":"79"},{"size":1437,"mtime":1615383938668,"results":"85","hashOfConfig":"79"},{"size":1944,"mtime":1615384597553,"results":"86","hashOfConfig":"79"},{"size":5581,"mtime":1615553840302,"results":"87","hashOfConfig":"79"},{"size":1963,"mtime":1615553936489,"results":"88","hashOfConfig":"79"},{"size":1039,"mtime":1614642664539,"results":"89","hashOfConfig":"79"},{"size":1895,"mtime":1615384650461,"results":"90","hashOfConfig":"79"},{"size":1897,"mtime":1615432009534,"results":"91","hashOfConfig":"79"},{"size":1692,"mtime":1613912501900,"results":"92","hashOfConfig":"93"},{"size":1290,"mtime":1613420662672,"results":"94","hashOfConfig":"79"},{"size":7256,"mtime":1615553798683,"results":"95","hashOfConfig":"79"},{"size":430,"mtime":1613420662670,"results":"96","hashOfConfig":"79"},{"size":4625,"mtime":1615384034677,"results":"97","hashOfConfig":"79"},{"size":5921,"mtime":1614642664584,"results":"98","hashOfConfig":"79"},{"size":3152,"mtime":1615320263249,"results":"99","hashOfConfig":"79"},{"size":5467,"mtime":1614951107786,"results":"100","hashOfConfig":"79"},{"size":325,"mtime":1614642664576,"results":"101","hashOfConfig":"79"},{"size":4173,"mtime":1615387252805,"results":"102","hashOfConfig":"79"},{"size":321,"mtime":1614642664581,"results":"103","hashOfConfig":"79"},{"size":7072,"mtime":1615384005467,"results":"104","hashOfConfig":"79"},{"size":5751,"mtime":1615553855425,"results":"105","hashOfConfig":"79"},{"size":1941,"mtime":1615553782688,"results":"106","hashOfConfig":"79"},{"size":3141,"mtime":1615413131142,"results":"107","hashOfConfig":"79"},{"size":190,"mtime":1613420662655,"results":"108","hashOfConfig":"79"},{"size":190,"mtime":1613420662654,"results":"109","hashOfConfig":"79"},{"size":193,"mtime":1613420662657,"results":"110","hashOfConfig":"79"},{"size":197,"mtime":1613420662656,"results":"111","hashOfConfig":"79"},{"size":191,"mtime":1613420662650,"results":"112","hashOfConfig":"79"},{"size":1873,"mtime":1614706269300,"results":"113","hashOfConfig":"79"},{"size":0,"mtime":1613769374633,"results":"114","hashOfConfig":"93"},{"size":3570,"mtime":1613941048675,"results":"115","hashOfConfig":"79"},{"size":3691,"mtime":1613940913819,"results":"116","hashOfConfig":"79"},{"size":2439,"mtime":1613936701168,"results":"117","hashOfConfig":"79"},{"size":1511,"mtime":1614642664563,"results":"118","hashOfConfig":"79"},{"size":2937,"mtime":1614642664560,"results":"119","hashOfConfig":"79"},{"size":4187,"mtime":1614642664559,"results":"120","hashOfConfig":"79"},{"size":1460,"mtime":1614642664562,"results":"121","hashOfConfig":"79"},{"size":2979,"mtime":1615553595127,"results":"122","hashOfConfig":"79"},{"size":6478,"mtime":1615553707864,"results":"123","hashOfConfig":"79"},{"size":1071,"mtime":1615553740006,"results":"124","hashOfConfig":"79"},{"size":6371,"mtime":1615553753240,"results":"125","hashOfConfig":"79"},{"size":5964,"mtime":1615553689785,"results":"126","hashOfConfig":"79"},{"size":1334,"mtime":1614213824864,"results":"127","hashOfConfig":"93"},{"size":2488,"mtime":1615553767652,"results":"128","hashOfConfig":"79"},{"size":3526,"mtime":1615553539269,"results":"129","hashOfConfig":"79"},{"size":3768,"mtime":1615557169324,"results":"130","hashOfConfig":"79"},{"size":734,"mtime":1615564649020,"results":"131","hashOfConfig":"79"},{"size":6467,"mtime":1615564867412,"results":"132","hashOfConfig":"79"},{"size":10035,"mtime":1615565225544,"results":"133","hashOfConfig":"79"},{"size":1517,"mtime":1615553494489,"results":"134","hashOfConfig":"79"},{"size":1490,"mtime":1615553525148,"results":"135","hashOfConfig":"79"},{"size":3430,"mtime":1615553509911,"results":"136","hashOfConfig":"79"},{"size":2575,"mtime":1615553481891,"results":"137","hashOfConfig":"79"},{"size":2657,"mtime":1615553431625,"results":"138","hashOfConfig":"79"},{"size":6787,"mtime":1615553453368,"results":"139","hashOfConfig":"79"},{"size":1785,"mtime":1615553829173,"results":"140","hashOfConfig":"79"},{"size":2518,"mtime":1615491853492,"results":"141","hashOfConfig":"79"},{"size":2210,"mtime":1615497203094,"results":"142","hashOfConfig":"79"},{"size":8306,"mtime":1615507596884,"results":"143","hashOfConfig":"79"},{"size":4133,"mtime":1615507927817,"results":"144","hashOfConfig":"79"},{"size":2503,"mtime":1615472433068,"results":"145","hashOfConfig":"79"},{"size":2180,"mtime":1615476472722,"results":"146","hashOfConfig":"79"},{"size":3691,"mtime":1615472199948,"results":"147","hashOfConfig":"79"},{"size":1853,"mtime":1615472143997,"results":"148","hashOfConfig":"79"},{"size":377,"mtime":1615557348300,"results":"149","hashOfConfig":"79"},{"size":1534,"mtime":1615563334551,"results":"150","hashOfConfig":"79"},{"size":362,"mtime":1615557306980,"results":"151","hashOfConfig":"79"},{"size":365,"mtime":1615557327477,"results":"152","hashOfConfig":"79"},{"size":365,"mtime":1615557387263,"results":"153","hashOfConfig":"79"},{"size":5835,"mtime":1615560222386,"results":"154","hashOfConfig":"79"},{"size":1959,"mtime":1615563262103,"results":"155","hashOfConfig":"79"},{"size":735,"mtime":1615557591222,"results":"156","hashOfConfig":"79"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},"1cny99d",{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"159"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"159"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"159"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"159"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"159"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},"1dwemmr",{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"159"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"159"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"159"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"159"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"159"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"159"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"159"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"159"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"159"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"159"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"159"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"159"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"159"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"159"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"159"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"159"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"159"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"159"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"159"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"159"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"159"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"159"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"159"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"159"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"159"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"159"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"159"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"159"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["348","349"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["350"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["351","352"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterOrdersDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex, sortZtoADataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listOrders } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n    \r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ ordersLoaded, setOrdersLoaded ] = useState(false)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            ordersLoaded, setOrdersLoaded\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { setOrders, setOriginalOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n\r\n    useEffect(() => {\r\n        fetchOrders()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchOrders = async () => {\r\n        try{\r\n            const ordData = await API.graphql(graphqlOperation(listOrders, {\r\n                  limit: '5000'\r\n                  }))\r\n            const ordList = ordData.data.listOrders.items;\r\n                \r\n            let noDelete = ordList.filter(cust => cust[\"_deleted\"]!==true)\r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            sortedData = sortAtoZDataByIndex(sortedData, \"prodName\")\r\n                \r\n            let currentData = FilterOrdersDups(sortedData)\r\n            setOrders(currentData)\r\n            setOrdersLoaded(true)\r\n            setOriginalOrders(currentData);\r\n        }  catch (error){\r\n            console.log('error on fetching Orders List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["353"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["354"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            let currentData = FilterStandHoldDups(sortedData)\r\n           \r\n           \r\n            setOriginalStanding(currentData);\r\n           \r\n            setStanding(currentData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["355"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            let currentData = FilterStandHoldDups(sortedData)\r\n         \r\n           \r\n            setOriginalHolding(currentData);\r\n            setHolding(currentData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],["356","357"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js",["358","359","360"],"import React,{ useContext } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { createOrderUpdatesClip, createStandHoldClip } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { createOrder, createHolding, createStanding } from '../../../graphql/mutations'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nconst RecentButton = styled.div`\r\n  display: flex;\r\n  margin: 20px 0;\r\n  \r\n  `\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\n\r\nconst RecentOrderListButtons = () => {\r\n\r\n  const { orders, originalOrders, recentOrders, setRecentOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n  const { standing, originalStanding, setStandLoaded } = useContext(StandingContext)\r\n  const { holding, originalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n  const handleUpload = () => {\r\n    let orderData = createOrderUpdatesClip(orders, originalOrders)\r\n    let standingData = createStandHoldClip(standing, originalStanding)\r\n    let holdingData = createStandHoldClip(holding, originalHolding)\r\n    // need to trigger reload of orders from API\r\n\r\n\r\n\r\n    const updateOrder = async () => {\r\n      \r\n      for (let ord of orderData) {\r\n        let updateDetails = {\r\n          qty: ord[\"qty\"],\r\n          prodName: ord[\"prodName\"],\r\n          custName: ord[\"custName\"],\r\n          PONote: ord[\"PONote\"],\r\n          route: ord[\"route\"],\r\n          SO: ord[\"SO\"],\r\n          isWhole: ord[\"isWhole\"],\r\n          delivDate: ord[\"delivDate\"],\r\n          timeStamp: ord[\"timeStamp\"]\r\n        };\r\n       \r\n        try{\r\n          const ordData = await API.graphql(graphqlOperation(createOrder, {input: {...updateDetails}}))\r\n          swal ({\r\n            text: `Orders have been updated.`,\r\n            icon: \"success\",\r\n            buttons: false,\r\n            timer: 2000\r\n        })\r\n        setOrdersLoaded(false)\r\n\r\n        } catch (error){\r\n          console.log('error on creating Orders', error)\r\n        }\r\n      }\r\n    }\r\n\r\n    const updateHolding = async () => {\r\n      \r\n      for (let hold of holdingData) {\r\n        let updateDetails = {\r\n          dayNum: hold[\"dayNum\"],\r\n          qty: hold[\"qty\"],\r\n          timeStamp: hold[\"timeStamp\"],\r\n          prodName: hold[\"prodName\"],\r\n          custName: hold[\"custName\"],\r\n          SO: hold[\"qty\"]\r\n        };\r\n \r\n        try{\r\n          const holdData = await API.graphql(graphqlOperation(createHolding, {input: {...updateDetails}}))\r\n          swal ({\r\n            text: `Holding Orders have been updated.`,\r\n            icon: \"success\",\r\n            buttons: false,\r\n            timer: 2000\r\n        })\r\n        setHoldLoaded(false)\r\n\r\n        } catch (error){\r\n          console.log('error on creating Holding Order', error)\r\n        }\r\n      }\r\n    }\r\n\r\n    const updateStanding = async () => {\r\n      \r\n      for (let stand of standingData) {\r\n        let updateDetails = {\r\n          dayNum: stand[\"dayNum\"],\r\n          qty: stand[\"qty\"],\r\n          timeStamp: stand[\"timeStamp\"],\r\n          prodName: stand[\"prodName\"],\r\n          custName: stand[\"custName\"],\r\n          SO: stand[\"qty\"]\r\n        };\r\n      \r\n        try{\r\n          const standData = await API.graphql(graphqlOperation(createStanding, {input: {...updateDetails}}))\r\n          swal ({\r\n            text: `Standing Orders have been updated.`,\r\n            icon: \"success\",\r\n            buttons: false,\r\n            timer: 2000\r\n        })\r\n        setStandLoaded(false)\r\n\r\n        } catch (error){\r\n          console.log('error on creating Holding Order', error)\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    updateOrder()\r\n    updateStanding()\r\n    updateHolding() \r\n    \r\n    setRecentOrders([])\r\n    swal ({\r\n      text: \"Recent Orders are now live!\",\r\n      icon: \"success\",\r\n      buttons: false,\r\n      timer: 2000\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n      <React.Fragment>      \r\n        <RecentButton>\r\n          {recentOrders.length>0 ? \r\n            <Button label=\"Upload\" icon=\"pi pi-upload\" \r\n            className=\"p-button-raised p-button-rounded p-button-danger\" onClick={handleUpload}/> :\r\n            <Button label=\"Upload\" icon=\"pi pi-upload\" \r\n            disabled className=\"p-button-raised p-button-rounded p-button-success\" onClick={handleUpload}/>}\r\n       \r\n        </RecentButton>\r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrderListButtons;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["361","362","363"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport { convertDatetoBPBDate } from '../../../../helpers/dateTimeHelpers';\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../../helpers/sortDataHelpers';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst AddProductButtons = styled.div`\r\n        display: flex;\r\n        width: 100%;\r\n        margin: 20px 0;\r\n        justify-content: space-around;\r\n        background-color: lightgrey;\r\n        padding: 10px 0;\r\n        `\r\n\r\n\r\n\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { chosen, delivDate, route, ponote, currentCartList } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications }= useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, currentCartList, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let qty = Number(document.getElementById(\"addedProdQty\").value)\r\n       \r\n        let newOrder ={\r\n            \"qty\": qty, \r\n            \"prodName\": pickedProduct.prodName,\r\n            \"custName\": chosen, \r\n            \"PONote\": ponote, \r\n            \"route\": route, \r\n            \"SO\": 0, \r\n            \"isWhole\": orderTypeWhole, \r\n            \"delivDate\": convertDatetoBPBDate(delivDate)\r\n        }\r\n        let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate)\r\n        setOrders(newOrderList)\r\n        document.getElementById(\"addedProdQty\").value = null;\r\n        setPickedProduct('');\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <AddProductButtons>\r\n            <Dropdown options={productList} optionLabel=\"prodName\" placeholder=\"Select a product\"\r\n                name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen!=='  ' ? false : true}/>\r\n            <span className=\"p-float-label\">\r\n                <InputText id=\"addedProdQty\" size=\"10\" disabled={chosen!=='  ' ? false : true}/>\r\n                <label htmlFor=\"qty\">Quantity</label>\r\n            </span>\r\n            <Button label=\"ADD\" disabled={chosen==='  ' || pickedProduct===''} icon=\"pi pi-plus\" onClick={() => handleAdd()}/>\r\n        </AddProductButtons>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["364"],"\r\nimport React, { useContext, useEffect } from 'react';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { buildCurrentOrder, \r\n    filterOutZeros, \r\n    setCurrentCartLineToQty, \r\n    updateCurrentLineInOrdersWithQty,\r\n    checkForMods\r\n} from '../../../../helpers/CartBuildingHelpers'\r\n\r\n\r\nconst OrderGrid = styled.div`\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    border: none;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: .5fr 3fr .5fr .5fr;\r\n    row-gap: 4px;\r\n    flex-shrink: 1; \r\n    `\r\nconst TrashCan = styled.div`\r\n    background-color: transparent;\r\n    border: none;\r\n    `\r\n\r\nconst InputBox = styled.div`\r\n    width: 50%;\r\n    `\r\n\r\nconst Previous = styled.div`\r\n    font-weight: bold;\r\n    color: red;\r\n    `\r\n\r\nconst BuildCurrentCartList = () => {\r\n\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { chosen, delivDate, currentCartList, setCurrentCartList, ponote, route } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let currentOrderList = buildCurrentOrder(chosen,delivDate,orders,standing,route,ponote)  \r\n        let noZerosOrderList = filterOutZeros(currentOrderList)\r\n        setModifications(checkForMods(noZerosOrderList))\r\n        setCurrentCartList(noZerosOrderList)\r\n\r\n    }, [chosen, delivDate, orders, standing, route, ponote])\r\n\r\n\r\n\r\n    const handleQtyModify = (prodName,qty,SO) => {\r\n        let presentedListToModify = setCurrentCartLineToQty(prodName,currentCartList,qty)\r\n        let updatedOrders = updateCurrentLineInOrdersWithQty(prodName,chosen, delivDate, orders, ponote, route, orderTypeWhole, qty, SO)\r\n       \r\n        setCurrentCartList(presentedListToModify)\r\n        setOrders(updatedOrders) \r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OrderGrid>\r\n            <label></label>\r\n            <label>PRODUCT</label>\r\n            <label>QTY</label>\r\n            <label>PREV</label>\r\n        {currentCartList.map(order => \r\n            <React.Fragment key={order[\"prodName\"]+\"b\"}>\r\n                <TrashCan>\r\n                <Button icon=\"pi pi-trash\" \r\n                    className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                    value={0}\r\n                    onClick={e => {handleQtyModify(order[\"prodName\"],0,order[\"SO\"])}}\r\n                    key={order[\"prodName\"]+\"e\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]}\r\n                    id={order[\"prodName\"]} />\r\n                </TrashCan>\r\n                <label key={order[\"prodName\"]}>{order[\"prodName\"]}</label>   \r\n                <InputBox>\r\n                <input  \r\n                    type=\"text\" \r\n                    size=\"3\"\r\n                    maxLength=\"4\"\r\n                    key={order[\"prodName\"]+\"c\"} \r\n                    id={order[\"prodName\"]+\"item\"} \r\n                    name={order[\"prodName\"]}\r\n                    data-qty={order[\"qty\"]} \r\n                    placeholder={order[\"qty\"]} \r\n                    onKeyUp={e => {handleQtyModify(order[\"prodName\"],Number(e.target.value), order[\"SO\"])}}\r\n                    onBlur={(e) => {\r\n\r\n                        e.target.value = null\r\n\r\n                    }}\r\n                        >\r\n                </input>\r\n                </InputBox>\r\n                <Previous>\r\n                <label \r\n                    key={order[\"prodName\"]+\"d\"}>{order[\"SO\"] === order[\"qty\"] ? '' : order[\"SO\"]}\r\n                </label>\r\n                </Previous>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        </OrderGrid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BuildCurrentCartList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["365"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../../dataContexts/HoldingContext';\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { \r\n    checkStandHoldStatus, \r\n    createStandListArray, \r\n    clearSelectedStandItem, \r\n    createUpdateWeeklyList,\r\n    setCurrentStandLineToQty,\r\n    createUpdateWeeklyStandList,\r\n    checkForStandMods \r\n    } from '../../../../helpers/StandBuildingHelpers';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst OrderGrid = styled.div`\r\n    width: 100%;\r\n    font-size: 1em;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    border: none;\r\n    display: grid;\r\n    grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr .5fr;\r\n    align-self: center;\r\n    row-gap: 10px;\r\n    `\r\nconst StandInput = styled.input`\r\n    border: 1px solid gray;\r\n    border-radius: 5px;\r\n    width: 80%;\r\n    `\r\n\r\nconst entryNotZero = {\r\n    fontSize: \"1.1em\",\r\n    fontWeight: \"bold\"\r\n}\r\n\r\nconst entryZero = {\r\n    fontSize: \"1em\",\r\n    fontWeight: \"normal\"\r\n}\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nconst BuildCurrentStandingList = () => {\r\n\r\n    const [ standArray, setStandArray ] = useState()\r\n\r\n    const { standing, setStanding } = useContext(StandingContext);\r\n    const { holding, setHolding } = useContext(HoldingContext);\r\n    const { standList, setStandList, setModifications } = useContext(ToggleContext)\r\n    const { chosen } = useContext(CurrentDataContext);\r\n\r\n\r\n    useEffect(() => {\r\n        let [Stand, Hold] = checkStandHoldStatus(standing, holding, chosen)\r\n        setStandList(Stand)   \r\n        let buildStandArray = createStandListArray(standing, holding, Stand, Hold, chosen) \r\n        setModifications(checkForStandMods(buildStandArray))\r\n        setStandArray(buildStandArray)\r\n    },[chosen, holding, standing, setStandList])\r\n\r\n\r\n\r\n    const handleRemove = (index) => {\r\n        \r\n        let standListToModify = clearSelectedStandItem(index,standArray)\r\n        setStandArray(standListToModify)\r\n        setModifications(true)\r\n        \r\n\r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)   \r\n        let updatedWeeklyList = createUpdateWeeklyList(index, updatedStandorHold, chosen)\r\n        standList ? setStanding(updatedWeeklyList) : setHolding(updatedWeeklyList)        \r\n    }\r\n\r\n\r\n    const handleQtyModify = (e,qty) => {\r\n        if(isNaN(e.target.value)){\r\n            e.target.value = null\r\n            swal ({\r\n                text: \"Only Numbers Please\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                timer: 2000\r\n              })\r\n        }\r\n\r\n        let StandListToModify = setCurrentStandLineToQty(e,standArray,qty)\r\n        setStandArray(StandListToModify)\r\n        \r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)   \r\n        let updatedWeeklyStandList = createUpdateWeeklyStandList(e, updatedStandorHold, chosen)\r\n        standList ? setStanding(updatedWeeklyStandList) : setHolding(updatedWeeklyStandList)            \r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <React.Fragment> \r\n        <OrderGrid>\r\n        <label>PRODUCT</label>\r\n            <label>S</label>\r\n            <label>M</label>\r\n            <label>T</label>\r\n            <label>W</label>\r\n            <label>T</label>\r\n            <label>F</label>\r\n            <label>S</label>\r\n            <label></label>\r\n            {standArray ? standArray.map(order =>\r\n                (<React.Fragment key={order[0]+\"frag\"}>\r\n                    <label key={order[0]+\"prod\"}>{order[0]}</label>\r\n\r\n                    <StandInput type=\"text\" key={order[0]+\"sun\"} size=\"3\" style={Number(order[1])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_1\"} name={order[0]} placeholder={order[1]} data-day=\"1\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = null}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"mon\"} size=\"3\" style={Number(order[2])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_2\"} name={order[0]} placeholder={order[2]} data-day=\"2\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"tues\"} size=\"3\" style={Number(order[3])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_3\"} name={order[0]} placeholder={order[3]} data-day=\"3\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"wed\"} size=\"3\" style={Number(order[4])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_4\"} name={order[0]} placeholder={order[4]} data-day=\"4\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"thurs\"} size=\"3\" style={Number(order[5])>0 ? entryNotZero : entryZero } \r\n                        maxLength=\"3\" id={order[0]+\"_5\"} name={order[0]} placeholder={order[5]} data-day=\"5\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"fri\"} size=\"3\" style={Number(order[6])>0 ? entryNotZero : entryZero } \r\n                        maxLength=\"3\" id={order[0]+\"_6\"} name={order[0]} placeholder={order[6]} data-day=\"6\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"sat\"} size=\"3\" style={Number(order[7])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_7\"} name={order[0]} placeholder={order[7]} data-day=\"7\" \r\n                        onKeyUp={e => {handleQtyModify(e,Number(e.target.value))}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n    \r\n                    <Button icon=\"pi pi-trash\" className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\" \r\n                        key={order[0]+\"rem\"} name={order[0]} onClick={e => handleRemove(order[0])}></Button>\r\n                </React.Fragment>)) : ''}\r\n           \r\n        </OrderGrid>    \r\n        </React.Fragment>\r\n        \r\n    )\r\n};\r\n\r\nexport default BuildCurrentStandingList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],["366","367"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["368"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n\r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js",[],["369","370"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js",["371","372","373","374"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.customer}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        \r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"customer\"]= order[2]\r\n                    newData[\"product\"] = order[1]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n\r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    \r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"customer\" \r\n                    sortMode=\"single\" sortField=\"customer\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js",["375","376","377","378","379"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByProduct = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.product}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"product\"]= order[1]\r\n                    newData[\"customer\"] = order[2]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"product\" \r\n                    sortMode=\"single\" sortField=\"product\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        \r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByProduct","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js",["380","381","382","383","384"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList } from '../../helpers/sortDataHelpers'\r\n\r\n\r\n\r\nconst LogisticsFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { chosen, delivDate, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    setRouteIsOn(true)\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n    \r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default LogisticsFunctions","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js",["385"],"import React, { useContext } from 'react';\r\n\r\n\r\nimport Calendar from '../ordering/Parts/Calendar'\r\nimport ByCustomer from './ByCustomer.js'\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { OrdersContext, OrdersLoad } from '../../dataContexts/OrdersContext'\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { StandingContext, StandingLoad } from '../../dataContexts/StandingContext'\r\nimport LogisticsFunctions from './LogisticsFunctions';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LogisticsContainer = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr; \r\n    `\r\n\r\n  const InfoContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    box-sizing: border-box;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    `\r\n  const BasicContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    `\r\n\r\n\r\n\r\n\r\n\r\nfunction Logistics() {\r\n\r\n  const delivDate = \"01/02/2021\"\r\n\r\n  const cities = [\r\n    {name: 'New York', code: 'NY'},\r\n    {name: 'Rome', code: 'RM'},\r\n    {name: 'London', code: 'LDN'},\r\n    {name: 'Istanbul', code: 'IST'},\r\n    {name: 'Paris', code: 'PRS'}\r\n  ];\r\n\r\n  \r\n  const { standLoaded } = useContext(StandingContext)\r\n  const { prodLoaded } = useContext(ProductsContext)\r\n  const { custLoaded } = useContext(CustomerContext)\r\n  const { ordersLoaded } = useContext(OrdersContext)\r\n\r\n  return (\r\n      <LogisticsContainer>\r\n       \r\n        {!standLoaded ? <StandingLoad /> : ''}\r\n        {!prodLoaded ? <ProductsLoad /> : ''}\r\n        {!custLoaded ? <CustomerLoad /> : ''}\r\n        {!ordersLoaded ? <OrdersLoad /> : ''}\r\n        <BasicContainer>\r\n          <Calendar />\r\n        </BasicContainer>\r\n        \r\n          <div id=\"orderCommand\">\r\n            <InfoContainer>\r\n              <label htmlFor=\"delivDate\" className=\"p-d-block\">Delivery Date</label>\r\n              <InputText id=\"delivDate\" value={delivDate} />\r\n              <Dropdown options={cities} optionLabel=\"name\" placeholder=\"Select a route\"/>\r\n              <Button label=\"Print\" icon=\"pi pi-print\" className=\"p-button-raised p-button-rounded p-button-success\" />\r\n              <Button label=\"Refresh\" icon=\"pi pi-refresh\" className=\"p-button-raised p-button-rounded p-button-info\" />\r\n            </InfoContainer>\r\n            <BasicContainer><ByCustomer /> </BasicContainer>\r\n          </div> \r\n         \r\n\r\n\r\n          </LogisticsContainer>\r\n        \r\n\r\n      \r\n        \r\n      \r\n            \r\n  );\r\n}\r\n\r\nexport default Logistics;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js",["386"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { products } = useContext(ProductsContext)\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ columns, setColumns ] = useState([])\r\n    const [ data, setData ] = useState([])\r\n\r\n\r\n    const constructColumns = () => {\r\n      \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && \r\n                    orderList[i][2] === orderList[j][2] \r\n                    ){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => order[4] === route)\r\n\r\n        let listOfProducts = orderList.map(order => order[1])\r\n        listOfProducts = new Set(listOfProducts)\r\n        let prodArray = []\r\n        for (let prod of listOfProducts){\r\n            for (let item of products){\r\n                if (prod === item[1]){\r\n                    let newItem = [prod, item[2],item[4],item[5]]\r\n                    prodArray.push(newItem)\r\n                }\r\n            }\r\n        }\r\n\r\n        sortAtoZDataByIndex(prodArray,2)\r\n\r\n\r\n        let columns = [{field: 'customer', header: 'Customer', width: {width:'10%'} }]\r\n        for (let prod of prodArray){\r\n            let newCol = {field: prod[0], header: prod[1], width: {width:'30px'}}\r\n            columns.push(newCol)\r\n        }\r\n        return columns\r\n        \r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n\r\n        orderList = orderList.filter(order => order[4] === route)\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let cust of listOfCustomers){\r\n            let newData = {\"customer\": cust}\r\n            for (let order of orderList){\r\n                if (order[2] === cust){\r\n                    newData[order[1]] = order[0]\r\n                }\r\n            }\r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let col = constructColumns()\r\n        let dat = constructData()\r\n        setColumns(col)\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n\r\n    \r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column npmkey={col.field} field={col.field} header={col.header} style={col.width}/>;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\" \r\n                    value={data} resizableColumns columnResizeMode=\"fit\">\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["387"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\nimport RecentOrderList from \"./g_recentOrderList\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext, HoldingLoad } from \"../../dataContexts/HoldingContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 0.8fr 1.4fr 0.6fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 0px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Ordering(props) {\r\n  const { standLoaded } = useContext(StandingContext);\r\n  const { prodLoaded } = useContext(ProductsContext);\r\n  const { custLoaded } = useContext(CustomerContext);\r\n  const { ordersLoaded } = useContext(OrdersContext);\r\n  const { holdLoaded } = useContext(HoldingContext);\r\n  const { setChosen } = useContext(CurrentDataContext);\r\n  const { setCartList } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (props.location.search) {\r\n      setChosen(\r\n        props.location.search\r\n          .split(\"&\")[1]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\")\r\n      );\r\n      if (\r\n        props.location.search\r\n          .split(\"&\")[0]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\") === \"true\"\r\n      ) {\r\n        setCartList(true);\r\n      } else {\r\n        setCartList(false);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <MainWindow>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      {!holdLoaded ? <HoldingLoad /> : \"\"}\r\n\r\n      <BasicContainer>\r\n        <Calendar />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <OrderCommandLine />\r\n        <CurrentOrderInfo />\r\n        <CurrentOrderList />\r\n        <OrderEntryButtons />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <RecentOrderList />\r\n      </BasicContainer>\r\n    </MainWindow>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["388","389","390","391"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport { tomorrow } from \"../../../helpers/dateTimeHelpers\";\r\nimport { createRetailOrderCustomers } from \"../../../helpers/sortDataHelpers\";\r\nimport { buildCurrentOrder } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  display: flex;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 10px 0;\r\n`;\r\nconst DateStyle = styled.h4`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 10px 0;\r\n`;\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst ho = {\r\n  color: \"red\",\r\n};\r\n\r\nconst so = {\r\n  color: \"rgb(66, 97, 201)\",\r\n};\r\n\r\nconst CurrentOrderInfo = () => {\r\n  const { cartList, standList, orderTypeWhole, setModifications } = useContext(\r\n    ToggleContext\r\n  );\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    ponote,\r\n    setPonote,\r\n    setChosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    currentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [customerGroup, setCustomerGroup] = useState(customers);\r\n\r\n  let orderType;\r\n  cartList\r\n    ? (orderType = \"Cart\")\r\n    : standList\r\n    ? (orderType = \"Standing\")\r\n    : (orderType = \"Holding\");\r\n\r\n  useEffect(() => {\r\n    orderTypeWhole\r\n      ? setCustomerGroup(customers)\r\n      : setCustomerGroup(createRetailOrderCustomers(orders));\r\n  }, [customers, orderTypeWhole, orders]);\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length > 0) {\r\n      setRoute(currentCartList[0][\"route\"]);\r\n    }\r\n    let ind = customers.findIndex((cust) => cust[\"custName\"] === chosen);\r\n    if (ind >= 0) {\r\n      if (\r\n        customers[ind][\"zoneName\"] !== \"slopick\" &&\r\n        customers[ind][\"zoneName\"] !== \"atownpick\"\r\n      ) {\r\n        setRoute(\"deliv\");\r\n      } else {\r\n        setRoute(customers[ind][\"zoneName\"]);\r\n      }\r\n    }\r\n  }, [currentCartList, chosen]);\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length > 0) {\r\n      if (\r\n        currentCartList[0][\"PONote\"] !== \"\" &&\r\n        currentCartList[0][\"PONote\"] !== undefined\r\n      ) {\r\n        setPonote(currentCartList[0][\"PONote\"]);\r\n      } else {\r\n        setPonote(\"\");\r\n      }\r\n    }\r\n  }, [currentCartList]);\r\n\r\n  useEffect(() => {\r\n    let currentOrderList = buildCurrentOrder(\r\n      chosen,\r\n      delivDate,\r\n      orders,\r\n      standing\r\n    );\r\n    if (currentCartList.length > 0) {\r\n      if (currentOrderList[0][\"route\"] !== route) {\r\n        setModifications(true);\r\n      }\r\n    }\r\n  }, [route]);\r\n\r\n  useEffect(() => {\r\n    let currentOrderList = buildCurrentOrder(\r\n      chosen,\r\n      delivDate,\r\n      orders,\r\n      standing\r\n    );\r\n    if (currentCartList.length > 0) {\r\n      if (currentOrderList[0][\"PONote\"] !== ponote) {\r\n        setModifications(true);\r\n      }\r\n    }\r\n  }, [ponote]);\r\n\r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen);\r\n    setDelivDate(tomorrow());\r\n  };\r\n\r\n  const changeDate = (date) => {\r\n    let fd = new Date(date);\r\n    fd.setMinutes(fd.getMinutes() + fd.getTimezoneOffset());\r\n    let returnDate = fd.toDateString();\r\n\r\n    return returnDate;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {orderTypeWhole ? (\r\n        <React.Fragment>\r\n          <TitleBox>\r\n            <Title style={cartList ? so : standList ? so : ho}>\r\n              Wholesale {orderType} Order\r\n            </Title>\r\n            <DateStyle>{delivDate ? changeDate(delivDate) : \"\"}</DateStyle>\r\n          </TitleBox>\r\n        </React.Fragment>\r\n      ) : (\r\n        <h2 style={standList ? so : ho}>Retail {orderType} Order</h2>\r\n      )}\r\n\r\n      <CurrentInfo>\r\n        <FulfillOptions>\r\n          <Dropdown\r\n            id=\"customers\"\r\n            value={chosen}\r\n            options={customerGroup}\r\n            optionLabel=\"custName\"\r\n            placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n            onChange={(e) => handleChosen(e.value.custName)}\r\n          />\r\n\r\n          <RadioButton\r\n            value=\"deliv\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"deliv\"}\r\n          />\r\n          <label htmlFor=\"delivery\">Delivery</label>\r\n\r\n          <RadioButton\r\n            value=\"slopick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"slopick\"}\r\n          />\r\n          <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n          <RadioButton\r\n            value=\"atownpick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"atownpick\"}\r\n          />\r\n          <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n        </FulfillOptions>\r\n\r\n        <SpecialInfo>\r\n          <span className=\"p-float-label\">\r\n            <InputText\r\n              id=\"in\"\r\n              size=\"50\"\r\n              value={ponote}\r\n              onChange={(e) => setPonote(e.target.value)}\r\n            />\r\n            <label htmlFor=\"in\">\r\n              {ponote === \"\" ? \"PO#/Special Instructions...\" : \"\"}\r\n            </label>\r\n          </span>\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["392"],"import React, { useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\nconst Calendar = () => {\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    calendarEvents,\r\n    setCalendarEvents,\r\n  } = useContext(CurrentDataContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { orders } = useContext(OrdersContext);\r\n\r\n  useEffect(() => {\r\n    let backToStandingArray = CreateStandingArray(standing, chosen);\r\n    let cartDateArray = CreateCartDateArray(orders, chosen);\r\n    let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n    let standingEvents = {\r\n      title: \"\",\r\n      daysOfWeek: backToStandingArray,\r\n      display: \"background\",\r\n    };\r\n\r\n    let calendarEvents = [\r\n      { title: \"\", date: delivDate, display: \"background\" },\r\n    ];\r\n\r\n    calendarEvents.push(standingEvents);\r\n\r\n    for (let order of cartDateArray) {\r\n      let newEvent = { title: \"\", date: order, display: \"background\" };\r\n      calendarEvents.push(newEvent);\r\n    }\r\n\r\n    for (let order of cartBlankDateArray) {\r\n      let newEvent2 = { title: \"\", date: order, display: \"inverse-background\" };\r\n      calendarEvents.push(newEvent2);\r\n    }\r\n\r\n    setCalendarEvents(calendarEvents);\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setDelivDate(selectInfo.dateStr);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"calendarApp\" id=\"test\">\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          defaultView=\"dayGridMonth\"\r\n          aspectRatio={1}\r\n          contentHeight=\"auto\"\r\n          eventBackgroundColor=\"blue\"\r\n          dateClick={handleDateSelect}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"\",\r\n            end: \"prev,next\",\r\n          }}\r\n          events={calendarEvents}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["393"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["394"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",["395","396"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\n\r\nimport {\r\n  updateCustomer,\r\n  deleteCustomer,\r\n  createCustomer,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst handleOrderClick = (e, selectedCustomer) => {\r\n  e &&\r\n    window.open(\r\n      \"./Ordering?cartList=true&selectedCustomer=\" + selectedCustomer.custName\r\n    );\r\n};\r\n\r\nconst handleStandClick = (e, selectedCustomer) => {\r\n  e &&\r\n    window.open(\r\n      \"./Ordering?cartList=false&selectedCustomer=\" + selectedCustomer.custName\r\n    );\r\n};\r\n\r\nconst Buttons = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n\r\n  const handleAddCust = () => {\r\n    let custName;\r\n    let nickName;\r\n\r\n    swal(\"Enter Customer Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      custName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        nickName = value;\r\n        const addDetails = {\r\n          nickName: nickName,\r\n          custName: custName,\r\n          zoneName: \"\",\r\n          addr1: \"\",\r\n          addr2: \"\",\r\n          city: \"\",\r\n          zip: \"\",\r\n          email: \"\",\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          phone: \"\",\r\n          toBePrinted: \"\",\r\n          toBeEmailed: \"\",\r\n          terms: \"\",\r\n          invoicing: \"\",\r\n        };\r\n        createCust(addDetails, nickName, custName);\r\n      });\r\n    });\r\n  };\r\n\r\n  const createCust = async (addDetails, nickName, custName) => {\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(createCustomer, { input: { ...addDetails } })\r\n      );\r\n      let id = custData.data.createCustomer.id;\r\n      let version = custData.data.createCustomer.version;\r\n\r\n      const fullDetails = {\r\n        id: id,\r\n        _version: version,\r\n        nickName: nickName,\r\n        custName: custName,\r\n        zoneName: \"\",\r\n        addr1: \"\",\r\n        addr2: \"\",\r\n        city: \"\",\r\n        zip: \"\",\r\n        email: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        toBePrinted: \"\",\r\n        toBeEmailed: \"\",\r\n        terms: \"\",\r\n        invoicing: \"\",\r\n      };\r\n\r\n      setCustLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateCust = async () => {\r\n    const updateDetails = {\r\n      id: selectedCustomer[\"id\"],\r\n      nickName: selectedCustomer[\"nickName\"],\r\n      custName: selectedCustomer[\"custName\"],\r\n      zoneName: selectedCustomer[\"zoneName\"],\r\n      addr1: selectedCustomer[\"addr1\"],\r\n      addr2: selectedCustomer[\"addr2\"],\r\n      city: selectedCustomer[\"city\"],\r\n      zip: selectedCustomer[\"zip\"],\r\n      email: selectedCustomer[\"email\"],\r\n      firstName: selectedCustomer[\"firstName\"],\r\n      lastName: selectedCustomer[\"lastName\"],\r\n      phone: selectedCustomer[\"phone\"],\r\n      toBePrinted: selectedCustomer[\"toBePrinted\"],\r\n      toBeEmailed: selectedCustomer[\"toBeEmailed\"],\r\n      terms: selectedCustomer[\"terms\"],\r\n      invoicing: selectedCustomer[\"invoicing\"],\r\n      _version: selectedCustomer[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(updateCustomer, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${custData.data.updateCustomer.custName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      setCustLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteCustWarn = async () => {\r\n    swal({\r\n      text:\r\n        \" Are you sure that you would like to permanently delete this customer?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteCust();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteCust = async () => {\r\n    const deleteDetails = {\r\n      id: selectedCustomer[\"id\"],\r\n      _version: selectedCustomer[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      const custData = await API.graphql(\r\n        graphqlOperation(deleteCustomer, { input: { ...deleteDetails } })\r\n      );\r\n      setCustLoaded(false);\r\n      setSelectedCustomer();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Customer\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddCust}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Customer\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateCust}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Customer\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteCustWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            id=\"order\"\r\n            label=\"Tomorrow's Order\"\r\n            icon=\"pi pi-shopping-cart\"\r\n            onClick={(e) => {\r\n              handleOrderClick(e, selectedCustomer);\r\n            }}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"}\r\n            disabled={selectedCustomer.custName ? false : true}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedCustomer && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Edit Standing Order\"\r\n            icon=\"pi pi-calendar\"\r\n            onClick={(e) => {\r\n              handleStandClick(e, selectedCustomer);\r\n            }}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"}\r\n            disabled={selectedCustomer.custName ? false : true}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["397"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext'\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport RouteList from './RouteList'\r\nimport Info from './Info'\r\nimport Buttons from './Buttons'\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr  2fr 1fr;\r\n  height: 100vh;\r\n  `\r\n\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n  `\r\n\r\n\r\n\r\nfunction EditRoutes() {\r\n\r\n  const [ selectedRoute, setSelectedRoute ] = useState()\r\n  const [ routes, setRoutes ] = useState(null)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext)\r\n  const { setProdLoaded } = useContext(ProductsContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true)\r\n    setProdLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n  \r\n  \r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n        {selectedRoute && \r\n        <React.Fragment>\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Info\">\r\n              <Info selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n\r\n          </React.Fragment>\r\n      }\r\n          <DescripWrapper>\r\n            <Buttons selectedRoute={selectedRoute} setSelectedRoute={setSelectedRoute} routes={routes} setRoutes={setRoutes}/>\r\n          </DescripWrapper>\r\n        \r\n      </MainWrapper>\r\n    </React.Fragment>         \r\n  );\r\n}\r\nexport default EditRoutes;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["398"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\n\r\nimport { listRoutes } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ScrollPanel } from 'primereact/scrollpanel';\r\n\r\n\r\n\r\n\r\nconst ListWrapper = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: #ffffff;\r\n    `\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        fetchRoutes()\r\n        setIsLoading(false)\r\n    },[routes])\r\n\r\n\r\n\r\n    const fetchRoutes = async () => {\r\n        \r\n        try{    \r\n          const routeData = await API.graphql(graphqlOperation(listRoutes, {\r\n                limit: '50'\r\n                }))\r\n          const routeList = routeData.data.listRoutes.items;\r\n          sortAtoZDataByIndex(routeList,\"routeStart\")\r\n          let noDelete = routeList.filter(route => route[\"_deleted\"]!==true)\r\n          \r\n          setRoutes(noDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Route List', error)\r\n        }\r\n        \r\n      }\r\n\r\n\r\n    const handleSelection = e => {\r\n        setSelectedRoute(e.value)\r\n    }\r\n  \r\n  return (\r\n    \r\n        <ListWrapper>\r\n         \r\n          \r\n         <ScrollPanel style={{ width: '100%', height: '100vh' }}>\r\n          {routes && <DataTable value={routes} className=\"p-datatable-striped\" \r\n            selection={selectedRoute} onSelectionChange={handleSelection} selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"routeName\" header=\"Routes\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n           \r\n          </DataTable>}\r\n          </ScrollPanel>\r\n          \r\n          \r\n      </ListWrapper> \r\n               \r\n  );\r\n}\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["399","400"],"import React, { useEffect, useState, useContext, useRef } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from 'primereact/picklist';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport {Checkbox} from 'primereact/checkbox';\r\n\r\nimport { setValue, fixValue, setPickValue, setDropDownValue } from '../../../helpers/formHelpers'\r\n\r\nimport { listZones } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n  `\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n  `\r\n  \r\n\r\nconst hubDepart = [\r\n  {RouteDepart: \"Prado\",},\r\n  {RouteDepart: \"Carlton\"},\r\n]\r\n\r\nconst hubArrive = [\r\n  {RouteArrive: \"Prado\",},\r\n  {RouteArrive: \"Carlton\"},\r\n]\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n    \r\n    const [source, setSource] = useState([]);\r\n    const [target, setTarget] = useState([]);\r\n\r\n    const fullZones = useRef()\r\n\r\n    const [days, setDays] = useState([]);\r\n\r\n    const onDayChange = (e) => {\r\n        let selectedDays = [...days];\r\n        if(e.checked)\r\n            selectedDays.push(e.value);\r\n        else\r\n            selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n        \r\n        let itemToUpdate = clonedeep(selectedRoute)\r\n        itemToUpdate[\"RouteSched\"] = selectedDays\r\n        setSelectedRoute(itemToUpdate)\r\n        setDays(selectedDays);\r\n}\r\n\r\n    useEffect(() => {\r\n      setIsLoading(true)\r\n      fetchZones()\r\n      setIsLoading(false)\r\n    },[])\r\n\r\n\r\n    \r\n  \r\n    useEffect(() => {\r\n      setTarget(selectedRoute[\"RouteServe\"])\r\n    },[selectedRoute])\r\n\r\n    useEffect(() => {\r\n      setDays(selectedRoute[\"RouteSched\"])\r\n    },[selectedRoute])\r\n\r\n\r\n    useEffect(() => {\r\n      let parsedZones = []\r\n      if (fullZones.current){\r\n        parsedZones = fullZones.current.filter(full => !selectedRoute[\"RouteServe\"].includes(full))\r\n      }     \r\n      setSource(parsedZones)\r\n    },[selectedRoute])\r\n\r\n\r\n\r\n\r\n    const fetchZones = async () => {\r\n        \r\n        try{    \r\n          const zoneData = await API.graphql(graphqlOperation(listZones, {\r\n                limit: '50'\r\n                }))\r\n          const zoneList = zoneData.data.listZones.items;\r\n          sortAtoZDataByIndex(zoneList,\"zoneNum\")\r\n          let noDelete = zoneList.filter(zone => zone[\"_deleted\"]!==true)\r\n          let mappedNoDelete = noDelete.map(item => item[\"zoneName\"])\r\n          fullZones.current = mappedNoDelete\r\n          setSource(mappedNoDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n        \r\n      }\r\n\r\n    const itemTemplate = (item) => {\r\n        return (\r\n            <div>{item}</div>\r\n        )\r\n    }\r\n\r\n    const onChange = (event) => {\r\n    \r\n        setSource(event.source);\r\n        setSelectedRoute(setPickValue(event, selectedRoute))\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n    \r\n        <React.Fragment>\r\n         \r\n            <h2><i className=\"pi pi-map\"></i> Route Info</h2>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Name</label><br />\r\n                </span> \r\n\r\n            <InputText id=\"routeName\" placeholder={selectedRoute.routeName} disabled\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n\r\n            </div>< br/>\r\n            <DuoWrapper>\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n                </span> \r\n\r\n            <InputText id=\"routeStart\" placeholder={selectedRoute.routeStart}\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n\r\n            </div>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n                </span> \r\n\r\n            <InputText id=\"routeTime\" placeholder={selectedRoute.routeTime}\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedRoute(setValue(e, selectedRoute))} \r\n              onBlur={e => setSelectedRoute(fixValue(e, selectedRoute))}/>\r\n            \r\n            </div>\r\n            </DuoWrapper>\r\n            <DuoWrapper>\r\n            <div className=\"p-inputgroup\">\r\n            <span className=\"p-inputgroup-addon\">\r\n                <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n            </span>\r\n            <Dropdown id=\"RouteDepart\" optionLabel=\"RouteDepart\" options={hubDepart} \r\n                onChange={e => setSelectedRoute(setDropDownValue(e,selectedRoute))}\r\n                placeholder={selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"}/>\r\n            </div>\r\n           \r\n            <div className=\"p-inputgroup\">\r\n            <span className=\"p-inputgroup-addon\">\r\n                <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n            </span>\r\n            <Dropdown id=\"RouteArrive\" optionLabel=\"RouteArrive\" options={hubArrive} \r\n                onChange={e => setSelectedRoute(setDropDownValue(e,selectedRoute))}\r\n                placeholder={selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"}/>\r\n            </div>\r\n            </DuoWrapper>\r\n            <WeekWrapper>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb1\" value=\"1\" onChange={onDayChange} checked={days.includes('1')}></Checkbox>\r\n              <label htmlFor=\"cb1\" className=\"p-checkbox-label\">Sun</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb2\" value=\"2\" onChange={onDayChange} checked={days.includes('2')}></Checkbox>\r\n              <label htmlFor=\"cb2\" className=\"p-checkbox-label\">Mon</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"3\" onChange={onDayChange} checked={days.includes('3')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Tues</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"4\" onChange={onDayChange} checked={days.includes('4')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Wed</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"5\" onChange={onDayChange} checked={days.includes('5')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Thurs</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"6\" onChange={onDayChange} checked={days.includes('6')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Fri</label>\r\n            </div>\r\n            <div className=\"p-col-12\">\r\n              <Checkbox inputId=\"cb3\" value=\"7\" onChange={onDayChange} checked={days.includes('7')}></Checkbox>\r\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Sat</label>\r\n            </div>\r\n            </WeekWrapper>\r\n            <PickList  \r\n                sourceHeader=\"All Zones\" targetHeader=\"Served By This Route\" \r\n                source={source} target={selectedRoute[\"RouteServe\"]}\r\n                itemTemplate={itemTemplate} onChange={onChange}\r\n                sourceStyle={{ height: '250px' }} targetStyle={{ height: '250px' }}\r\n                >\r\n            </PickList>\r\n            \r\n\r\n            \r\n        </React.Fragment>   \r\n           \r\n  );\r\n}\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["401","402"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../../dataContexts/CustomerContext'\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\n\r\nimport ZoneList from './ZoneList'\r\nimport Info from './Info'\r\nimport Buttons from './Buttons'\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr .5fr;\r\n  height: 100vh;\r\n  `\r\n\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n  `\r\n\r\n\r\n\r\nfunction EditZones() {\r\n\r\n  const [ selectedZone, setSelectedZone ] = useState(1)\r\n  const [ zones, setZones ] = useState(null)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext)\r\n  const { setProdLoaded } = useContext(ProductsContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true)\r\n    setProdLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n  \r\n  \r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n        {selectedZone && \r\n        <React.Fragment>\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Info\">\r\n              <Info selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n\r\n          </React.Fragment>\r\n      }\r\n          <DescripWrapper>\r\n            <Buttons selectedZone={selectedZone} setSelectedZone={setSelectedZone} zones={zones} setZones={setZones}/>\r\n          </DescripWrapper>\r\n        \r\n      </MainWrapper>\r\n    </React.Fragment>         \r\n  );\r\n}\r\nexport default EditZones;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["403"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\n\r\n\r\nimport { listZones } from '../../../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../../../helpers/sortDataHelpers'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ScrollPanel } from 'primereact/scrollpanel';\r\n\r\n\r\n\r\n\r\nconst ListWrapper = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: #ffffff;\r\n    `\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n\r\n    let { setIsLoading } = useContext(ToggleContext)\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        fetchZones()\r\n        setIsLoading(false)\r\n    },[zones])\r\n\r\n\r\n\r\n    const fetchZones = async () => {\r\n        \r\n        try{    \r\n          const zoneData = await API.graphql(graphqlOperation(listZones, {\r\n                limit: '50'\r\n                }))\r\n          const zoneList = zoneData.data.listZones.items;\r\n          sortAtoZDataByIndex(zoneList,\"zoneNum\")\r\n          let noDelete = zoneList.filter(zone => zone[\"_deleted\"]!==true)\r\n          \r\n          setZones(noDelete)\r\n          \r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n        \r\n      }\r\n\r\n\r\n    const handleSelection = e => {\r\n        setSelectedZone(e.value)\r\n    }\r\n  \r\n  return (\r\n    \r\n        <ListWrapper>\r\n         \r\n          \r\n         <ScrollPanel style={{ width: '100%', height: '100vh' }}>\r\n          {zones && <DataTable value={zones} className=\"p-datatable-striped\" \r\n            selection={selectedZone} onSelectionChange={handleSelection} selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"zoneName\" header=\"Zones\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n           \r\n          </DataTable>}\r\n          </ScrollPanel>\r\n          \r\n          \r\n      </ListWrapper> \r\n               \r\n  );\r\n}\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",["404"],"import React, { useEffect } from 'react';\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from '../../../helpers/formHelpers'\r\n\r\n\r\nconst Info = ({ selectedZone, setSelectedZone }) => {\r\n    \r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <h2><i className=\"pi pi-map\"></i> Zone Info</h2>\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneName\"> Zone Name</label><br />\r\n                </span> \r\n\r\n            <InputText id=\"zoneName\" placeholder={selectedZone.zoneName} disabled\r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n\r\n            </div><br />\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneNum\"> Zone Number</label><br />\r\n                </span>\r\n\r\n            <InputText id=\"zoneNum\" placeholder={selectedZone.zoneNum}  \r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n              \r\n            </div><br />\r\n\r\n            <div className=\"p-inputgroup\">\r\n                <span className=\"p-inputgroup-addon\">\r\n                    <label htmlFor=\"zoneFee\"> Zone Fee</label><br />\r\n                </span>\r\n\r\n            <InputText id=\"zoneFee\" placeholder={selectedZone.zoneFee} \r\n              onKeyUp={e => e.code===\"Enter\" && setSelectedZone(setValue(e, selectedZone))} \r\n              onBlur={e => setSelectedZone(fixValue(e, selectedZone))}/>\r\n              \r\n            </div><br />\r\n        </React.Fragment>         \r\n  );\r\n}\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",["405","406","407"],"import React from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from \"../../../helpers/formHelpers\";\r\n\r\nconst Description = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        Description\r\n      </h2>\r\n\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["408","409","410"],"import React from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from \"../../../helpers/formHelpers\";\r\n\r\nconst Baking = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        Baking\r\n      </h2>\r\n\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",["411","412","413"],"import React from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from \"../../../helpers/formHelpers\";\r\n\r\nconst Billing = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        Billing\r\n      </h2>\r\n\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Billing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",["414","415","416"],"import React from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { setValue, fixValue } from \"../../../helpers/formHelpers\";\r\n\r\nconst Packing = ({ selectedCustomer, setSelectedCustomer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        Packing\r\n      </h2>\r\n\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Packing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",["417"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  deleteProduct,\r\n  createProduct,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst Buttons = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n\r\n  const handleAddProd = () => {\r\n    let prodName;\r\n    let nickName;\r\n\r\n    swal(\"Enter Product Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      prodName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        nickName = value;\r\n        const addDetails = {\r\n          prodName: prodName,\r\n          nickName: nickName,\r\n          packGroup: \"\",\r\n          packSize: 0,\r\n          doughType: \"\",\r\n          freezerThaw: false,\r\n          packGroupOrder: 0,\r\n          readyTime: 15,\r\n          bakedWhere: [\"\"],\r\n          wholePrice: 0,\r\n          retailPrice: 0,\r\n          isWhole: false,\r\n          depends: [\"\"],\r\n          weight: 0,\r\n          descrip: \"description\",\r\n          picURL: \"\",\r\n          squareID: \"\"\r\n        };\r\n        createProd(addDetails, nickName, prodName);\r\n      });\r\n    });\r\n  };\r\n\r\n  const createProd = async (addDetails, nickName, prodName) => {\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(createProduct, { input: { ...addDetails } })\r\n      );\r\n      let id = prodData.data.createProduct.id;\r\n      let version = prodData.data.createProduct.version;\r\n\r\n      const fullDetails = {\r\n        id: id,\r\n        _version: version,\r\n        prodName: prodName,\r\n        nickName: nickName,\r\n        packGroup: \"\",\r\n        packSize: 0,\r\n        doughType: \"\",\r\n        freezerThaw: false,\r\n        packGroupOrder: 0,\r\n        readyTime: 15,\r\n        bakedWhere: [\"\"],\r\n        wholePrice: 0,\r\n        retailPrice: 0,\r\n        isWhole: false,\r\n        depends: [\"\"],\r\n        weight: 0,\r\n        descrip: \"description\",\r\n        picURL: \"\",\r\n        squareID: \"\"\r\n      };\r\n\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateProd = async () => {\r\n    const updateDetails = {\r\n        id: selectedProduct[\"id\"],\r\n        _version: selectedProduct[\"_version\"],\r\n        prodName: selectedProduct[\"prodName\"],\r\n        nickName: selectedProduct[\"nickName\"],\r\n        packGroup: selectedProduct[\"packGroup\"],\r\n        packSize: selectedProduct[\"packSize\"],\r\n        doughType: selectedProduct[\"doughType\"],\r\n        freezerThaw: selectedProduct[\"freezerThaw\"],\r\n        packGroupOrder: selectedProduct[\"packGroupOrder\"],\r\n        readyTime: selectedProduct[\"readyTime\"],\r\n        bakedWhere: selectedProduct[\"bakedWhere\"],\r\n        wholePrice: selectedProduct[\"wholePrice\"],\r\n        retailPrice: selectedProduct[\"retailPrice\"],\r\n        isWhole: selectedProduct[\"isWhole\"],\r\n        depends: selectedProduct[\"depends\"],\r\n        weight: selectedProduct[\"weight\"],\r\n        descrip: selectedProduct[\"descrip\"],\r\n        picURL: selectedProduct[\"picURL\"],\r\n        squareID: selectedProduct[\"squareID\"]\r\n    };\r\n\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${prodData.data.updateProduct.prodName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteProdWarn = async () => {\r\n    swal({\r\n      text:\r\n        \" Are you sure that you would like to permanently delete this product?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteProd();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteProd = async () => {\r\n    const deleteDetails = {\r\n      id: selectedProduct[\"id\"],\r\n      _version: selectedProduct[\"_version\"]\r\n    };\r\n    console.log(deleteDetails)\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(deleteProduct, { input: { ...deleteDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setSelectedProduct();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Product\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddProd}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Product\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateProd}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Product\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteProdWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js",["418"],"import React from 'react';\r\n\r\nimport RecentOrderList from './g_recentOrderList/RecentOrderList';\r\nimport RecentOrderListButtons from './g_recentOrderList/RecentOrderListButtons';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst RecentList = styled.div`\r\n  text-align: left;\r\n  box-sizing: border-box;\r\n  height: 12px;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n  font-size: 1em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: white;\r\n  background-color: transparent;  \r\n  `\r\n\r\nconst RecentOrders = () => {\r\n\r\n  return (\r\n      <React.Fragment>  \r\n        <h2>Recent Orders</h2>\r\n        \r\n        <RecentOrderList />\r\n        \r\n        <RecentOrderListButtons />\r\n        \r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrders;",{"ruleId":"419","replacedBy":"420"},{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","severity":1,"message":"424","line":38,"column":7,"nodeType":"425","endLine":38,"endColumn":9,"suggestions":"426"},{"ruleId":"427","severity":1,"message":"428","line":5,"column":31,"nodeType":"429","messageId":"430","endLine":5,"endColumn":50},{"ruleId":"423","severity":1,"message":"431","line":47,"column":7,"nodeType":"425","endLine":47,"endColumn":9,"suggestions":"432"},{"ruleId":"423","severity":1,"message":"433","line":38,"column":9,"nodeType":"425","endLine":38,"endColumn":11,"suggestions":"434"},{"ruleId":"423","severity":1,"message":"435","line":38,"column":7,"nodeType":"425","endLine":38,"endColumn":9,"suggestions":"436"},{"ruleId":"423","severity":1,"message":"437","line":40,"column":7,"nodeType":"425","endLine":40,"endColumn":9,"suggestions":"438"},{"ruleId":"419","replacedBy":"439"},{"ruleId":"421","replacedBy":"440"},{"ruleId":"427","severity":1,"message":"441","line":60,"column":17,"nodeType":"429","messageId":"430","endLine":60,"endColumn":24},{"ruleId":"427","severity":1,"message":"442","line":88,"column":17,"nodeType":"429","messageId":"430","endLine":88,"endColumn":25},{"ruleId":"427","severity":1,"message":"443","line":116,"column":17,"nodeType":"429","messageId":"430","endLine":116,"endColumn":26},{"ruleId":"427","severity":1,"message":"444","line":3,"column":16,"nodeType":"429","messageId":"430","endLine":3,"endColumn":22},{"ruleId":"427","severity":1,"message":"445","line":38,"column":29,"nodeType":"429","messageId":"430","endLine":38,"endColumn":45},{"ruleId":"423","severity":1,"message":"446","line":47,"column":11,"nodeType":"425","endLine":47,"endColumn":49,"suggestions":"447"},{"ruleId":"423","severity":1,"message":"448","line":61,"column":8,"nodeType":"425","endLine":61,"endColumn":60,"suggestions":"449"},{"ruleId":"423","severity":1,"message":"450","line":70,"column":7,"nodeType":"425","endLine":70,"endColumn":48,"suggestions":"451"},{"ruleId":"419","replacedBy":"452"},{"ruleId":"421","replacedBy":"453"},{"ruleId":"423","severity":1,"message":"454","line":52,"column":7,"nodeType":"425","endLine":52,"endColumn":70,"suggestions":"455"},{"ruleId":"419","replacedBy":"456"},{"ruleId":"421","replacedBy":"457"},{"ruleId":"427","severity":1,"message":"458","line":8,"column":10,"nodeType":"429","messageId":"430","endLine":8,"endColumn":25},{"ruleId":"427","severity":1,"message":"459","line":12,"column":10,"nodeType":"429","messageId":"430","endLine":12,"endColumn":29},{"ruleId":"423","severity":1,"message":"460","line":83,"column":7,"nodeType":"425","endLine":83,"endColumn":25,"suggestions":"461"},{"ruleId":"423","severity":1,"message":"462","line":87,"column":7,"nodeType":"425","endLine":87,"endColumn":9,"suggestions":"463"},{"ruleId":"427","severity":1,"message":"458","line":8,"column":10,"nodeType":"429","messageId":"430","endLine":8,"endColumn":25},{"ruleId":"427","severity":1,"message":"459","line":12,"column":10,"nodeType":"429","messageId":"430","endLine":12,"endColumn":29},{"ruleId":"427","severity":1,"message":"464","line":61,"column":35,"nodeType":"429","messageId":"430","endLine":61,"endColumn":50},{"ruleId":"423","severity":1,"message":"460","line":84,"column":7,"nodeType":"425","endLine":84,"endColumn":25,"suggestions":"465"},{"ruleId":"423","severity":1,"message":"462","line":89,"column":7,"nodeType":"425","endLine":89,"endColumn":9,"suggestions":"466"},{"ruleId":"427","severity":1,"message":"467","line":8,"column":10,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"423","severity":1,"message":"468","line":36,"column":7,"nodeType":"425","endLine":36,"endColumn":9,"suggestions":"469"},{"ruleId":"423","severity":1,"message":"470","line":42,"column":7,"nodeType":"425","endLine":42,"endColumn":9,"suggestions":"471"},{"ruleId":"423","severity":1,"message":"472","line":48,"column":7,"nodeType":"425","endLine":48,"endColumn":9,"suggestions":"473"},{"ruleId":"423","severity":1,"message":"474","line":54,"column":7,"nodeType":"425","endLine":54,"endColumn":9,"suggestions":"475"},{"ruleId":"427","severity":1,"message":"476","line":11,"column":8,"nodeType":"429","messageId":"430","endLine":11,"endColumn":26},{"ruleId":"423","severity":1,"message":"477","line":109,"column":7,"nodeType":"425","endLine":109,"endColumn":25,"suggestions":"478"},{"ruleId":"423","severity":1,"message":"479","line":78,"column":6,"nodeType":"425","endLine":78,"endColumn":8,"suggestions":"480"},{"ruleId":"423","severity":1,"message":"481","line":115,"column":6,"nodeType":"425","endLine":115,"endColumn":31,"suggestions":"482"},{"ruleId":"423","severity":1,"message":"483","line":128,"column":6,"nodeType":"425","endLine":128,"endColumn":23,"suggestions":"484"},{"ruleId":"423","severity":1,"message":"485","line":142,"column":6,"nodeType":"425","endLine":142,"endColumn":13,"suggestions":"486"},{"ruleId":"423","severity":1,"message":"485","line":156,"column":6,"nodeType":"425","endLine":156,"endColumn":14,"suggestions":"487"},{"ruleId":"423","severity":1,"message":"488","line":55,"column":6,"nodeType":"425","endLine":55,"endColumn":25,"suggestions":"489"},{"ruleId":"423","severity":1,"message":"490","line":64,"column":6,"nodeType":"425","endLine":64,"endColumn":8,"suggestions":"491"},{"ruleId":"423","severity":1,"message":"492","line":65,"column":6,"nodeType":"425","endLine":65,"endColumn":8,"suggestions":"493"},{"ruleId":"427","severity":1,"message":"494","line":87,"column":13,"nodeType":"429","messageId":"430","endLine":87,"endColumn":24},{"ruleId":"427","severity":1,"message":"495","line":174,"column":13,"nodeType":"429","messageId":"430","endLine":174,"endColumn":21},{"ruleId":"423","severity":1,"message":"496","line":63,"column":5,"nodeType":"425","endLine":63,"endColumn":7,"suggestions":"497"},{"ruleId":"423","severity":1,"message":"498","line":38,"column":7,"nodeType":"425","endLine":38,"endColumn":15,"suggestions":"499"},{"ruleId":"427","severity":1,"message":"500","line":51,"column":12,"nodeType":"429","messageId":"430","endLine":51,"endColumn":18},{"ruleId":"423","severity":1,"message":"454","line":74,"column":7,"nodeType":"425","endLine":74,"endColumn":9,"suggestions":"501"},{"ruleId":"427","severity":1,"message":"502","line":6,"column":27,"nodeType":"429","messageId":"430","endLine":6,"endColumn":39},{"ruleId":"423","severity":1,"message":"496","line":63,"column":5,"nodeType":"425","endLine":63,"endColumn":7,"suggestions":"503"},{"ruleId":"423","severity":1,"message":"504","line":38,"column":7,"nodeType":"425","endLine":38,"endColumn":14,"suggestions":"505"},{"ruleId":"427","severity":1,"message":"506","line":1,"column":17,"nodeType":"429","messageId":"430","endLine":1,"endColumn":26},{"ruleId":"427","severity":1,"message":"507","line":3,"column":10,"nodeType":"429","messageId":"430","endLine":3,"endColumn":19},{"ruleId":"427","severity":1,"message":"508","line":5,"column":10,"nodeType":"429","messageId":"430","endLine":5,"endColumn":18},{"ruleId":"427","severity":1,"message":"509","line":5,"column":20,"nodeType":"429","messageId":"430","endLine":5,"endColumn":28},{"ruleId":"427","severity":1,"message":"507","line":3,"column":10,"nodeType":"429","messageId":"430","endLine":3,"endColumn":19},{"ruleId":"427","severity":1,"message":"508","line":5,"column":10,"nodeType":"429","messageId":"430","endLine":5,"endColumn":18},{"ruleId":"427","severity":1,"message":"509","line":5,"column":20,"nodeType":"429","messageId":"430","endLine":5,"endColumn":28},{"ruleId":"427","severity":1,"message":"507","line":3,"column":10,"nodeType":"429","messageId":"430","endLine":3,"endColumn":19},{"ruleId":"427","severity":1,"message":"508","line":5,"column":10,"nodeType":"429","messageId":"430","endLine":5,"endColumn":18},{"ruleId":"427","severity":1,"message":"509","line":5,"column":20,"nodeType":"429","messageId":"430","endLine":5,"endColumn":28},{"ruleId":"427","severity":1,"message":"507","line":3,"column":10,"nodeType":"429","messageId":"430","endLine":3,"endColumn":19},{"ruleId":"427","severity":1,"message":"508","line":5,"column":10,"nodeType":"429","messageId":"430","endLine":5,"endColumn":18},{"ruleId":"427","severity":1,"message":"509","line":5,"column":20,"nodeType":"429","messageId":"430","endLine":5,"endColumn":28},{"ruleId":"427","severity":1,"message":"494","line":75,"column":13,"nodeType":"429","messageId":"430","endLine":75,"endColumn":24},{"ruleId":"427","severity":1,"message":"510","line":8,"column":7,"nodeType":"429","messageId":"430","endLine":8,"endColumn":17},"no-native-reassign",["511"],"no-negated-in-lhs",["512"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["513"],"no-unused-vars","'sortZtoADataByIndex' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["514"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["516"],"React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["517"],["511"],["512"],"'ordData' is assigned a value but never used.","'holdData' is assigned a value but never used.","'standData' is assigned a value but never used.","'uuidv4' is defined but never used.","'setModifications' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentCartList'. Either include it or remove the dependency array.",["518"],"React Hook useEffect has missing dependencies: 'setCurrentCartList' and 'setModifications'. Either include them or remove the dependency array.",["519"],"React Hook useEffect has a missing dependency: 'setModifications'. Either include it or remove the dependency array.",["520"],["511"],["512"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["521"],["511"],["512"],"'ProductsContext' is defined but never used.","'sortAtoZDataByIndex' is defined but never used.","React Hook useEffect has a missing dependency: 'constructData'. Either include it or remove the dependency array.",["522"],"React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["523"],"'listOfCustomers' is assigned a value but never used.",["524"],["525"],"'HoldingContext' is defined but never used.","React Hook useEffect has missing dependencies: 'orders.length' and 'setOrdersLoaded'. Either include them or remove the dependency array.",["526"],"React Hook useEffect has missing dependencies: 'customers.length' and 'setCustLoaded'. Either include them or remove the dependency array.",["527"],"React Hook useEffect has missing dependencies: 'products.length' and 'setProdLoaded'. Either include them or remove the dependency array.",["528"],"React Hook useEffect has missing dependencies: 'setStandLoaded' and 'standing.length'. Either include them or remove the dependency array.",["529"],"'LogisticsFunctions' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["530"],"React Hook useEffect has missing dependencies: 'props.location.search', 'setCartList', and 'setChosen'. Either include them or remove the dependency array.",["531"],"React Hook useEffect has missing dependencies: 'customers' and 'setRoute'. Either include them or remove the dependency array.",["532"],"React Hook useEffect has a missing dependency: 'setPonote'. Either include it or remove the dependency array.",["533"],"React Hook useEffect has missing dependencies: 'chosen', 'currentCartList.length', 'delivDate', 'orders', 'setModifications', and 'standing'. Either include them or remove the dependency array.",["534"],["535"],"React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["536"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["537"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["538"],"'fullDetails' is assigned a value but never used.","'custData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["539"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["540"],"'target' is assigned a value but never used.",["541"],"'CustomerLoad' is defined but never used.",["542"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["543"],"'useEffect' is defined but never used.","'InputText' is defined but never used.","'setValue' is defined but never used.","'fixValue' is defined but never used.","'RecentList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"544","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},{"desc":"562","fix":"566"},{"desc":"564","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"594","fix":"600"},{"desc":"601","fix":"602"},"Update the dependencies array to be: [fetchCustomers]",{"range":"603","text":"604"},"Update the dependencies array to be: [fetchOrders]",{"range":"605","text":"606"},"Update the dependencies array to be: [fetchProducts]",{"range":"607","text":"608"},"Update the dependencies array to be: [fetchStanding]",{"range":"609","text":"610"},"Update the dependencies array to be: [fetchHolding]",{"range":"611","text":"612"},"Update the dependencies array to be: [products, orders, chosen, delivDate, currentCartList]",{"range":"613","text":"614"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, route, ponote, setModifications, setCurrentCartList]",{"range":"615","text":"616"},"Update the dependencies array to be: [chosen, holding, standing, setStandList, setModifications]",{"range":"617","text":"618"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"619","text":"620"},"Update the dependencies array to be: [constructData, delivDate, route]",{"range":"621","text":"622"},"Update the dependencies array to be: [setRoute]",{"range":"623","text":"624"},{"range":"625","text":"622"},{"range":"626","text":"624"},"Update the dependencies array to be: [orders.length, setOrdersLoaded]",{"range":"627","text":"628"},"Update the dependencies array to be: [customers.length, setCustLoaded]",{"range":"629","text":"630"},"Update the dependencies array to be: [products.length, setProdLoaded]",{"range":"631","text":"632"},"Update the dependencies array to be: [setStandLoaded, standing.length]",{"range":"633","text":"634"},"Update the dependencies array to be: [constructColumns, constructData, delivDate, route]",{"range":"635","text":"636"},"Update the dependencies array to be: [props.location.search, setCartList, setChosen]",{"range":"637","text":"638"},"Update the dependencies array to be: [currentCartList, chosen, customers, setRoute]",{"range":"639","text":"640"},"Update the dependencies array to be: [currentCartList, setPonote]",{"range":"641","text":"642"},"Update the dependencies array to be: [chosen, currentCartList.length, delivDate, orders, route, setModifications, standing]",{"range":"643","text":"644"},"Update the dependencies array to be: [chosen, currentCartList.length, delivDate, orders, ponote, setModifications, standing]",{"range":"645","text":"646"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"647","text":"648"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"649","text":"650"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"651","text":"652"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"653","text":"654"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"655","text":"656"},"Update the dependencies array to be: [setIsLoading]",{"range":"657","text":"658"},{"range":"659","text":"654"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"660","text":"661"},[901,903],"[fetchCustomers]",[1226,1228],"[fetchOrders]",[899,901],"[fetchProducts]",[1069,1071],"[fetchStanding]",[1051,1053],"[fetchHolding]",[1653,1691],"[products, orders, chosen, delivDate, currentCartList]",[1791,1843],"[chosen, delivDate, orders, standing, route, ponote, setModifications, setCurrentCartList]",[2085,2126],"[chosen, holding, standing, setStandList, setModifications]",[1556,1619],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[2444,2462],"[constructData, delivDate, route]",[2518,2520],"[setRoute]",[2548,2566],[2632,2634],[1408,1410],"[orders.length, setOrdersLoaded]",[1523,1525],"[customers.length, setCustLoaded]",[1637,1639],"[products.length, setProdLoaded]",[1752,1754],"[setStandLoaded, standing.length]",[3600,3618],"[constructColumns, constructData, delivDate, route]",[2339,2341],"[props.location.search, setCartList, setChosen]",[3030,3055],"[currentCartList, chosen, customers, setRoute]",[3355,3372],"[currentCartList, setPonote]",[3664,3671],"[chosen, currentCartList.length, delivDate, orders, route, setModifications, standing]",[3965,3973],"[chosen, currentCartList.length, delivDate, orders, ponote, setModifications, standing]",[1731,1750],"[chosen, delivDate, orders, setCalendarEvents, standing]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1695,1697],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[938,946],"[fetchRoutes, routes, setIsLoading]",[1971,1973],"[setIsLoading]",[1707,1709],[931,938],"[fetchZones, setIsLoading, zones]"]