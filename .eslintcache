[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeAllOrders.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js":"77","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js":"78","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js":"79","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js":"80","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js":"81","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeDough.js":"82","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js":"83","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js":"84","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"85","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js":"86","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js":"87","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js":"88","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\filters.js":"89","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\utils.js":"90","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js":"91","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js":"92","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js":"93","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js":"94","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js":"95","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js":"96","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js":"97","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js":"98","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js":"99","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js":"100","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js":"101","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js":"102","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js":"103","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js":"104","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js":"105","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js":"106","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js":"107","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js":"108","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js":"109","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js":"110","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js":"111","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBake.js":"112","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToMake.js":"113","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"114","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"115","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"116","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"117","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"118","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\ExportPastryPrepPdf.js":"119","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"120","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"121","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"122","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"123","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composePastryPrep.js":"124","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToPrep.js":"125","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BucketAmount.js":"126","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BinInfo.js":"127","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\PanAmount.js":"128","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\GetMixInfo.js":"129","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BagMixesScreen.js":"130","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js":"131","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\MixFormula.js":"132","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"133","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js":"134","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js":"135","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js":"136","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js":"137","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js":"138","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"139","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"140","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"141","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"142","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"143","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"144","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js":"145","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js":"146","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js":"147","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js":"148","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js":"149","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js":"150","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js":"151","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js":"152","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js":"153","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Rate.js":"154","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Total.js":"155","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\delivOrder\\delivOrder.js":"156","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\custProd\\custProd.js":"157","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\CustomApp.js":"158","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\manageUsers.js":"159","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Buttons.js":"160","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Info.js":"161","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\UserList.js":"162","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\NavCustomers.js":"163"},{"size":500,"mtime":1609089131749,"results":"164","hashOfConfig":"165"},{"size":362,"mtime":1609089131749,"results":"166","hashOfConfig":"165"},{"size":3939,"mtime":1633054469604,"results":"167","hashOfConfig":"165"},{"size":734,"mtime":1633111524775,"results":"168","hashOfConfig":"165"},{"size":4493,"mtime":1633054444534,"results":"169","hashOfConfig":"165"},{"size":7120,"mtime":1632937012511,"results":"170","hashOfConfig":"165"},{"size":1821,"mtime":1615751621965,"results":"171","hashOfConfig":"165"},{"size":4289,"mtime":1631671690470,"results":"172","hashOfConfig":"165"},{"size":1437,"mtime":1615383938668,"results":"173","hashOfConfig":"165"},{"size":1724,"mtime":1616793575974,"results":"174","hashOfConfig":"165"},{"size":1563,"mtime":1631997055494,"results":"175","hashOfConfig":"165"},{"size":1421,"mtime":1620171317021,"results":"176","hashOfConfig":"165"},{"size":1598,"mtime":1623114177650,"results":"177","hashOfConfig":"165"},{"size":1147,"mtime":1615769660331,"results":"178","hashOfConfig":"165"},{"size":1877,"mtime":1621942072383,"results":"179","hashOfConfig":"165"},{"size":1963,"mtime":1615553936489,"results":"180","hashOfConfig":"165"},{"size":5713,"mtime":1631671690474,"results":"181","hashOfConfig":"165"},{"size":6412,"mtime":1633114751979,"results":"182","hashOfConfig":"165"},{"size":11563,"mtime":1633111518782,"results":"183","hashOfConfig":"165"},{"size":2509,"mtime":1631671690476,"results":"184","hashOfConfig":"165"},{"size":3768,"mtime":1618240925162,"results":"185","hashOfConfig":"165"},{"size":3526,"mtime":1615553539269,"results":"186","hashOfConfig":"165"},{"size":12037,"mtime":1624366161924,"results":"187","hashOfConfig":"165"},{"size":18085,"mtime":1633111519460,"results":"188","hashOfConfig":"165"},{"size":5425,"mtime":1623759416600,"results":"189","hashOfConfig":"165"},{"size":4787,"mtime":1623759416627,"results":"190","hashOfConfig":"165"},{"size":4100,"mtime":1623759416593,"results":"191","hashOfConfig":"165"},{"size":10514,"mtime":1633283274194,"results":"192","hashOfConfig":"165"},{"size":4151,"mtime":1624299764849,"results":"193","hashOfConfig":"165"},{"size":188,"mtime":1620391449788,"results":"194","hashOfConfig":"165"},{"size":3444,"mtime":1618794737066,"results":"195","hashOfConfig":"165"},{"size":7386,"mtime":1624315261257,"results":"196","hashOfConfig":"165"},{"size":5827,"mtime":1630772415822,"results":"197","hashOfConfig":"165"},{"size":12946,"mtime":1624384075611,"results":"198","hashOfConfig":"165"},{"size":14169,"mtime":1631046637260,"results":"199","hashOfConfig":"165"},{"size":3937,"mtime":1621942072434,"results":"200","hashOfConfig":"165"},{"size":2495,"mtime":1622242546504,"results":"201","hashOfConfig":"165"},{"size":5726,"mtime":1631046585059,"results":"202","hashOfConfig":"165"},{"size":1903,"mtime":1620419316591,"results":"203","hashOfConfig":"165"},{"size":1920,"mtime":1631046580258,"results":"204","hashOfConfig":"165"},{"size":12388,"mtime":1631046598948,"results":"205","hashOfConfig":"165"},{"size":2706,"mtime":1615903181106,"results":"206","hashOfConfig":"165"},{"size":2065,"mtime":1621942072456,"results":"207","hashOfConfig":"165"},{"size":2679,"mtime":1615903258284,"results":"208","hashOfConfig":"165"},{"size":4886,"mtime":1623759416631,"results":"209","hashOfConfig":"165"},{"size":3461,"mtime":1618762822178,"results":"210","hashOfConfig":"165"},{"size":7178,"mtime":1632783046906,"results":"211","hashOfConfig":"165"},{"size":4843,"mtime":1631045956712,"results":"212","hashOfConfig":"165"},{"size":8141,"mtime":1631046462529,"results":"213","hashOfConfig":"165"},{"size":1667,"mtime":1618668363266,"results":"214","hashOfConfig":"165"},{"size":1902,"mtime":1618765403958,"results":"215","hashOfConfig":"165"},{"size":3530,"mtime":1615903238512,"results":"216","hashOfConfig":"165"},{"size":1888,"mtime":1615903277736,"results":"217","hashOfConfig":"165"},{"size":2185,"mtime":1615903223171,"results":"218","hashOfConfig":"165"},{"size":2155,"mtime":1615903290204,"results":"219","hashOfConfig":"165"},{"size":8714,"mtime":1632955598458,"results":"220","hashOfConfig":"165"},{"size":3933,"mtime":1615903165052,"results":"221","hashOfConfig":"165"},{"size":308,"mtime":1620419249556,"results":"222","hashOfConfig":"165"},{"size":9786,"mtime":1631732541679,"results":"223","hashOfConfig":"165"},{"size":3826,"mtime":1631671690478,"results":"224","hashOfConfig":"165"},{"size":1512,"mtime":1621942072448,"results":"225","hashOfConfig":"165"},{"size":2909,"mtime":1623325332201,"results":"226","hashOfConfig":"165"},{"size":1890,"mtime":1617307853955,"results":"227","hashOfConfig":"165"},{"size":1488,"mtime":1615570828178,"results":"228","hashOfConfig":"165"},{"size":2558,"mtime":1632437638257,"results":"229","hashOfConfig":"165"},{"size":6951,"mtime":1633111764778,"results":"230","hashOfConfig":"165"},{"size":5791,"mtime":1633111822697,"results":"231","hashOfConfig":"165"},{"size":3054,"mtime":1617713108483,"results":"232","hashOfConfig":"165"},{"size":6476,"mtime":1617713740979,"results":"233","hashOfConfig":"165"},{"size":2162,"mtime":1623759416604,"results":"234","hashOfConfig":"165"},{"size":3519,"mtime":1621942072458,"results":"235","hashOfConfig":"165"},{"size":1203,"mtime":1621942072461,"results":"236","hashOfConfig":"165"},{"size":1463,"mtime":1621942072460,"results":"237","hashOfConfig":"165"},{"size":801,"mtime":1620952815188,"results":"238","hashOfConfig":"165"},{"size":1910,"mtime":1620952815187,"results":"239","hashOfConfig":"165"},{"size":3937,"mtime":1631046550945,"results":"240","hashOfConfig":"165"},{"size":3272,"mtime":1632784224828,"results":"241","hashOfConfig":"165"},{"size":801,"mtime":1620952815194,"results":"242","hashOfConfig":"165"},{"size":1356,"mtime":1620952815193,"results":"243","hashOfConfig":"165"},{"size":13701,"mtime":1632784234086,"results":"244","hashOfConfig":"165"},{"size":1487,"mtime":1620783288186,"results":"245","hashOfConfig":"165"},{"size":7207,"mtime":1623759416607,"results":"246","hashOfConfig":"165"},{"size":15547,"mtime":1631046556003,"results":"247","hashOfConfig":"165"},{"size":6915,"mtime":1631046628091,"results":"248","hashOfConfig":"165"},{"size":2111,"mtime":1633009304033,"results":"249","hashOfConfig":"165"},{"size":671,"mtime":1620399298712,"results":"250","hashOfConfig":"165"},{"size":5102,"mtime":1631046450659,"results":"251","hashOfConfig":"165"},{"size":3388,"mtime":1618668410879,"results":"252","hashOfConfig":"165"},{"size":3894,"mtime":1629850838833,"results":"253","hashOfConfig":"165"},{"size":7166,"mtime":1623759416624,"results":"254","hashOfConfig":"165"},{"size":7633,"mtime":1632088786427,"results":"255","hashOfConfig":"165"},{"size":5270,"mtime":1620952815196,"results":"256","hashOfConfig":"165"},{"size":3360,"mtime":1620783288188,"results":"257","hashOfConfig":"165"},{"size":3917,"mtime":1631671690473,"results":"258","hashOfConfig":"165"},{"size":3356,"mtime":1618668379506,"results":"259","hashOfConfig":"165"},{"size":3386,"mtime":1618668400552,"results":"260","hashOfConfig":"165"},{"size":3272,"mtime":1631671690480,"results":"261","hashOfConfig":"165"},{"size":3501,"mtime":1618668437732,"results":"262","hashOfConfig":"165"},{"size":5501,"mtime":1632507164052,"results":"263","hashOfConfig":"165"},{"size":3320,"mtime":1620952815203,"results":"264","hashOfConfig":"165"},{"size":2814,"mtime":1622383589953,"results":"265","hashOfConfig":"165"},{"size":892,"mtime":1620783288177,"results":"266","hashOfConfig":"165"},{"size":6033,"mtime":1631046610810,"results":"267","hashOfConfig":"165"},{"size":6876,"mtime":1631046566274,"results":"268","hashOfConfig":"165"},{"size":6787,"mtime":1618794829362,"results":"269","hashOfConfig":"165"},{"size":296,"mtime":1618795089593,"results":"270","hashOfConfig":"165"},{"size":6353,"mtime":1631671690483,"results":"271","hashOfConfig":"165"},{"size":5843,"mtime":1621975859523,"results":"272","hashOfConfig":"165"},{"size":1598,"mtime":1623759416588,"results":"273","hashOfConfig":"165"},{"size":1899,"mtime":1618794786478,"results":"274","hashOfConfig":"165"},{"size":6059,"mtime":1623759416578,"results":"275","hashOfConfig":"165"},{"size":2831,"mtime":1631046650468,"results":"276","hashOfConfig":"165"},{"size":1637,"mtime":1629986097612,"results":"277","hashOfConfig":"165"},{"size":2575,"mtime":1615553481891,"results":"278","hashOfConfig":"165"},{"size":1517,"mtime":1615553494489,"results":"279","hashOfConfig":"165"},{"size":1490,"mtime":1615553525148,"results":"280","hashOfConfig":"165"},{"size":4566,"mtime":1616250120792,"results":"281","hashOfConfig":"165"},{"size":4748,"mtime":1633360277440,"results":"282","hashOfConfig":"165"},{"size":3043,"mtime":1623759416582,"results":"283","hashOfConfig":"165"},{"size":2518,"mtime":1633084406496,"results":"284","hashOfConfig":"165"},{"size":6490,"mtime":1628466903575,"results":"285","hashOfConfig":"165"},{"size":7832,"mtime":1633385890735,"results":"286","hashOfConfig":"165"},{"size":1306,"mtime":1633085023056,"results":"287","hashOfConfig":"165"},{"size":6398,"mtime":1631046671066,"results":"288","hashOfConfig":"165"},{"size":1667,"mtime":1631046641447,"results":"289","hashOfConfig":"165"},{"size":260,"mtime":1622996837101,"results":"290","hashOfConfig":"165"},{"size":911,"mtime":1623325757470,"results":"291","hashOfConfig":"165"},{"size":382,"mtime":1622996637032,"results":"292","hashOfConfig":"165"},{"size":1736,"mtime":1623327974078,"results":"293","hashOfConfig":"165"},{"size":1397,"mtime":1622993901390,"results":"294","hashOfConfig":"165"},{"size":1216,"mtime":1620952815183,"results":"295","hashOfConfig":"165"},{"size":2101,"mtime":1623759416585,"results":"296","hashOfConfig":"165"},{"size":2687,"mtime":1628808212491,"results":"297","hashOfConfig":"165"},{"size":2191,"mtime":1633055065320,"results":"298","hashOfConfig":"165"},{"size":1978,"mtime":1633199352643,"results":"299","hashOfConfig":"165"},{"size":3902,"mtime":1633262620619,"results":"300","hashOfConfig":"165"},{"size":2877,"mtime":1633283747067,"results":"301","hashOfConfig":"165"},{"size":4912,"mtime":1633084418140,"results":"302","hashOfConfig":"165"},{"size":1328,"mtime":1633085293552,"results":"303","hashOfConfig":"165"},{"size":474,"mtime":1622036129632,"results":"304","hashOfConfig":"165"},{"size":325,"mtime":1622036129623,"results":"305","hashOfConfig":"165"},{"size":937,"mtime":1633262671154,"results":"306","hashOfConfig":"165"},{"size":8498,"mtime":1622036324403,"results":"307","hashOfConfig":"165"},{"size":6728,"mtime":1633298871572,"results":"308","hashOfConfig":"165"},{"size":1256,"mtime":1632663786855,"results":"309","hashOfConfig":"165"},{"size":1258,"mtime":1622036129626,"results":"310","hashOfConfig":"165"},{"size":882,"mtime":1622036129629,"results":"311","hashOfConfig":"165"},{"size":675,"mtime":1633289711587,"results":"312","hashOfConfig":"165"},{"size":1911,"mtime":1631039445145,"results":"313","hashOfConfig":"165"},{"size":1888,"mtime":1633290342151,"results":"314","hashOfConfig":"165"},{"size":444,"mtime":1622036129620,"results":"315","hashOfConfig":"165"},{"size":3214,"mtime":1633299745269,"results":"316","hashOfConfig":"165"},{"size":1498,"mtime":1633301211065,"results":"317","hashOfConfig":"165"},{"size":595,"mtime":1633300524844,"results":"318","hashOfConfig":"165"},{"size":622,"mtime":1633300521177,"results":"319","hashOfConfig":"165"},{"size":3789,"mtime":1632784164859,"results":"320","hashOfConfig":"165"},{"size":11602,"mtime":1632937045508,"results":"321","hashOfConfig":"165"},{"size":232,"mtime":1632692487717,"results":"322","hashOfConfig":"165"},{"size":3065,"mtime":1633016592631,"results":"323","hashOfConfig":"165"},{"size":6053,"mtime":1633044900096,"results":"324","hashOfConfig":"165"},{"size":6903,"mtime":1633044733994,"results":"325","hashOfConfig":"165"},{"size":2428,"mtime":1632939554689,"results":"326","hashOfConfig":"165"},{"size":1068,"mtime":1633045922202,"results":"327","hashOfConfig":"165"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},"1cny99d",{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"330"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"330"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"330"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"330"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"330"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"330"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"330"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"330"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"330"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"330"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"330"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"330"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"330"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"330"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"330"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"330"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"330"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"330"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"330"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"330"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"330"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"330"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"330"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"330"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"330"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"330"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"330"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"330"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"330"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"330"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"330"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"330"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"330"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"330"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"330"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"330"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"330"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"330"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"330"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"330"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"330"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"330"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"330"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"330"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"330"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"330"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"330"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"330"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"330"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"594"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"330"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"330"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"330"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"330"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"330"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"330"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"330"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"330"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"330"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"330"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"330"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"330"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"330"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"330"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"330"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"330"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"330"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"330"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"704"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"330"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"330"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"330"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"330"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"720"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"330"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"330"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"330"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"330"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"330"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],["736","737"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",["738","739","740","741"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Amplify, { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport awsconfig from \"./aws-exports\";\r\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\r\n\r\nimport { listAuthSettingss } from \"./graphql/queries\";\r\nimport { updateAuthSettings } from \"./graphql/mutations\";\r\n\r\nimport { CustomerProvider } from \"./dataContexts/CustomerContext\";\r\nimport { OrdersProvider } from \"./dataContexts/OrdersContext\";\r\nimport { ProductsProvider } from \"./dataContexts/ProductsContext\";\r\nimport { StandingProvider } from \"./dataContexts/StandingContext\";\r\nimport { HoldingProvider } from \"./dataContexts/HoldingContext\";\r\nimport { CurrentDataProvider } from \"./dataContexts/CurrentDataContext\";\r\nimport { ToggleContext, ToggleProvider } from \"./dataContexts/ToggleContext\";\r\nimport { RoutesProvider } from \"./dataContexts/RoutesContext\";\r\n\r\nimport AppRoutes from \"./AppRoutes\";\r\nimport NavCustomers from \"./NavCustomers\";\r\nimport Nav from \"./Nav\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { sortAtoZDataByIndex } from \"./helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst NavLock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 100;\r\n`;\r\n\r\nconst BodyLock = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  top: 100px;\r\n`;\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nfunction App() {\r\n  const [users, setUsers] = useState([]);\r\n  const [user, setUser] = useState();\r\n  const [authType, setAuthType] = useState();\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let currentUser = Auth.currentAuthenticatedUser().then((use) =>\r\n      setUser(use.attributes.sub)\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let copyOfUsers = clonedeep(users);\r\n    let id;\r\n    let authT\r\n    console.log(copyOfUsers);\r\n    if (user) {\r\n      for (let cop of copyOfUsers) {\r\n        if (cop.sub === user) {\r\n          id = cop.id;\r\n          authT = cop.authType\r\n        }\r\n      }\r\n    }\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      tempPassword: null,\r\n      tempUsername: null,\r\n    };\r\n    setAuthType(authT)\r\n    console.log(authT)\r\n    updateTemps(updateDetails);\r\n  }, [users, user]);\r\n\r\n  const updateTemps = async (details) => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(updateAuthSettings, { input: { ...details } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching User List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(listAuthSettingss, {\r\n          limit: \"1000\",\r\n        })\r\n      );\r\n      const userList = userData.data.listAuthSettingss.items;\r\n      sortAtoZDataByIndex(userList, \"businessName\");\r\n      let noDelete = userList.filter((user) => user[\"_deleted\"] !== true);\r\n\r\n      setUsers(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <NavLock>\r\n      {authType === \"bpbadmin\" ? <Nav /> : <NavCustomers />}\r\n      </NavLock>\r\n\r\n      <RoutesProvider>\r\n        <ToggleProvider>\r\n          <CustomerProvider>\r\n            <ProductsProvider>\r\n              <OrdersProvider>\r\n                <StandingProvider>\r\n                  <HoldingProvider>\r\n                    <CurrentDataProvider>\r\n                      <BodyLock>\r\n                       \r\n                       <AppRoutes authType={authType} userNum={user}/>\r\n                      </BodyLock>\r\n                    </CurrentDataProvider>\r\n                  </HoldingProvider>\r\n                </StandingProvider>\r\n              </OrdersProvider>\r\n            </ProductsProvider>\r\n          </CustomerProvider>\r\n        </ToggleProvider>\r\n      </RoutesProvider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",["742","743","744","745"],"import React, { useState } from \"react\";\r\n\r\nimport { Menubar } from \"primereact/menubar\";\r\nimport { TabMenu } from \"primereact/tabmenu\";\r\nimport { AmplifySignOut } from \"@aws-amplify/ui-react\";\r\n\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.min.css\";\r\nimport \"primeicons/primeicons.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst BackGround = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  background-color: white;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 10fr 1fr;\r\n  background-color: white;\r\n`;\r\n\r\nfunction Nav() {\r\n  const [selectedMenu, setSelectedMenu] = useState(\"\");\r\n\r\n  const items = [\r\n    {\r\n      label: \"Production\",\r\n      icon: \"pi pi-fw pi-chart-bar\",\r\n      items: [\r\n        {\r\n          label: \"BPBN\",\r\n          items: [\r\n            {\r\n              label: \"BPBN Baker 1\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/BPBNBaker1\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBN Baker 2\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/BPBNBaker2\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBN Set Out\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/BPBNSetOut\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBN Buckets\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/Buckets\";\r\n              },\r\n            },\r\n            {\r\n              label: \"Who Bake\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/WhoBake\";\r\n              },\r\n            },\r\n            {\r\n              label: \"WhoShape\",\r\n              command: () => {\r\n                window.location = \"/BPBNProd/WhoShape\";\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          label: \"BPBS\",\r\n          items: [\r\n            {\r\n              label: \"BPBS What To Make\",\r\n              command: () => {\r\n                window.location = \"/BPBSProd/BPBSWhatToMake\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBS Mix/Pocket\",\r\n              command: () => {\r\n                window.location = \"/BPBSProd/BPBSMixPocket\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBS Set Out\",\r\n              command: () => {\r\n                window.location = \"/BPBSProd/BPBSSetOut\";\r\n              },\r\n            },\r\n            {\r\n              label: \"Croix To Make\",\r\n              command: () => {\r\n                window.location = \"/BPBSProd/CroixToMake\";\r\n              },\r\n            },\r\n            {\r\n              label: \"BPBS EOD Count\",\r\n              command: () => {\r\n                window.location = \"/EODCounts/BPBSCounts\";\r\n              },\r\n            },\r\n            {\r\n              label: \"Dough Calculator\",\r\n              command: () => {\r\n                window.location = \"/doughCalc/doughCalc\";\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          label: \"Croix\",\r\n          items: [\r\n            {\r\n              label: \"What Croix to shape\",\r\n              command: () => {\r\n                window.location = \"/BPBSProd/CroixToMake\";\r\n              },\r\n            },\r\n            {\r\n              label: \"Croix EOD Count\",\r\n              command: () => {\r\n                window.location = \"/EODCounts/BPBSCounts\";\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: \"Logistics\",\r\n      icon: \"pi pi-fw pi-map\",\r\n      items: [\r\n        {\r\n          label: \"By Route\",\r\n          command: () => {\r\n            window.location = \"/logistics/byRoute\";\r\n          },\r\n        },\r\n        {\r\n          label: \"By Filter\",\r\n          command: () => {\r\n            window.location = \"/logistics/byProduct\";\r\n          },\r\n        },\r\n        {\r\n          label: \"North Driver Lists\",\r\n          command: () => {\r\n            window.location = \"/logistics/NorthLists\";\r\n          },\r\n        },\r\n        {\r\n          label: \"AM Pastry Pack\",\r\n          command: () => {\r\n            window.location = \"/logistics/AMPastry\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Retail Bags\",\r\n          command: () => {\r\n            window.location = \"/logistics/RetailBags\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Special Orders\",\r\n          command: () => {\r\n            window.location = \"/logistics/SpecialOrders\";\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: \"EOD Counts\",\r\n      icon: \"pi pi-fw pi-map\",\r\n      items: [\r\n        {\r\n          label: \"BPBN\",\r\n          command: () => {\r\n            window.location = \"/EODCounts/BPBNCounts\";\r\n          },\r\n        },\r\n        {\r\n          label: \"BPBS\",\r\n          command: () => {\r\n            window.location = \"/EODCounts/BPBSCounts\";\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: \"Dough Calc\",\r\n      icon: \"pi pi-fw pi-map\",\r\n      command: () => {\r\n        window.location = \"/doughCalc/doughCalc\";\r\n      },\r\n    },\r\n    {\r\n      label: \"Ordering\",\r\n      icon: \"pi pi-fw pi-shopping-cart\",\r\n      command: () => {\r\n        window.location = \"/Ordering\";\r\n      },\r\n    },\r\n    {\r\n      label: \"Customers\",\r\n      icon: \"pi pi-fw pi-users\",\r\n      command: () => {\r\n        window.location = \"/Customers\";\r\n      },\r\n    },\r\n    {\r\n      label: \"Products\",\r\n      icon: \"pi pi-fw pi-tags\",\r\n      command: () => {\r\n        window.location = \"/Products\";\r\n      },\r\n    },\r\n    {\r\n      label: \"Billing\",\r\n      icon: \"pi pi-fw pi-money-bill\",\r\n      command: () => {\r\n        window.location = \"/Billing\";\r\n      },\r\n    },\r\n    {\r\n      label: \"Settings\",\r\n      icon: \"pi pi-fw pi-cog\",\r\n      items: [\r\n        {\r\n          label: \"Edit Zones\",\r\n          command: () => {\r\n            window.location = \"/settings/editZones\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Edit Routes\",\r\n          command: () => {\r\n            window.location = \"/settings/editRoutes\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Edit Doughs\",\r\n          command: () => {\r\n            window.location = \"/settings/editDough\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Notes\",\r\n          command: () => {\r\n            window.location = \"/settings/Notes\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Delivery Order\",\r\n          command: () => {\r\n            window.location = \"/settings/DelivOrder\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Customer Product Setup\",\r\n          command: () => {\r\n            window.location = \"/settings/CustProd\";\r\n          },\r\n        },\r\n        {\r\n          label: \"Manage Users\",\r\n          command: () => {\r\n            window.location = \"/settings/manageUsers\";\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <TopBar>\r\n        <Menubar model={items} />\r\n        <AmplifySignOut />\r\n      </TopBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["746","747","748"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["749","750","751","752","753","754"],"import React, { useState, createContext, useContext, useEffect } from \"react\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { listOrders } from \"../graphql/queries\";\r\nimport { createOrder } from \"../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { ProductsContext } from \"./ProductsContext\";\r\nimport { ToggleContext } from \"./ToggleContext\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\n\r\nexport const OrdersContext = createContext();\r\n\r\nexport const OrdersProvider = (props) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [recentOrders, setRecentOrders] = useState([]);\r\n  const [originalOrders, setOriginalOrders] = useState([]);\r\n  const [ordersLoaded, setOrdersLoaded] = useState(false);\r\n\r\n  return (\r\n    <OrdersContext.Provider\r\n      value={{\r\n        orders,\r\n        setOrders,\r\n        recentOrders,\r\n        setRecentOrders,\r\n        originalOrders,\r\n        setOriginalOrders,\r\n        ordersLoaded,\r\n        setOrdersLoaded,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </OrdersContext.Provider>\r\n  );\r\n};\r\n\r\nexport const OrdersLoad = () => {\r\n  const { orders, setOrders, setOrdersLoaded } = useContext(OrdersContext);\r\n  const { readyForSq, setReadyForSq, setReadyForWeekly } =\r\n    useContext(ToggleContext);\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  useEffect(() => {\r\n    buildOrders();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (orders.length > 0 && products.length > 0) {\r\n      setReadyForSq(true);\r\n    }\r\n  }, [orders, products]);\r\n\r\n  const buildOrders = async () => {\r\n    let ord = await fetchOrders();\r\n    setOrders(ord);\r\n    setOrdersLoaded(true);\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n\r\n   \r\n    try {\r\n      const ordData = await API.graphql(\r\n        graphqlOperation(listOrders, {\r\n          limit: \"5000\"\r\n         \r\n        })\r\n      );\r\n      const ordList = ordData.data.listOrders.items;\r\n\r\n      let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n      let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n      sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n\r\n      return sortedData;\r\n    } catch (error) {\r\n      console.log(\"error on fetching Orders List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSq = async (ords) => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n\r\n      for (let newOrd of newOrders) {\r\n        let qty = Number(newOrd[\"qty\"]);\r\n        let dt = new Date().toISOString();\r\n        let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n        delivDate = delivDate.split(\"-\");\r\n        delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n        let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n        let rt;\r\n        let custName = newOrd[\"custName\"];\r\n\r\n        let prodName =\r\n          products[\r\n            products.findIndex((prod) => newOrd[\"item\"].includes(prod.squareID))\r\n          ][\"prodName\"];\r\n\r\n        if (newOrd[\"route\"] === locIDBPBN) {\r\n          rt = \"atownpick\";\r\n        } else {\r\n          rt = \"slopick\";\r\n        }\r\n\r\n        let itemToAdd = {\r\n          SO: qty,\r\n          qty: qty,\r\n          timeStamp: dt,\r\n          isWhole: false,\r\n          PONote: \"paid\",\r\n          delivDate: delivDate,\r\n          custName: custName,\r\n          prodName: prodName,\r\n          route: rt,\r\n        };\r\n\r\n        // Search orders for object, if doesn't exist, add:\r\n        let ind = ords.findIndex(\r\n          (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n        );\r\n\r\n        if (ind === -1) {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n            );\r\n            ords.push(itemToAdd);\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n      setOrders(ords);\r\n    } catch {\r\n      console.log(\"Request Failed\");\r\n    }\r\n  };\r\n\r\n  return <React.Fragment></React.Fragment>;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["755"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["756","757"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n           \r\n         \r\n            setHolding(sortedData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["758"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n         \r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",["759"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listRoutes } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const RoutesContext = createContext();\r\n\r\nexport const RoutesProvider = (props) => {\r\n\r\n    const [routes, setRoutes] = useState([]);\r\n    const [ routesLoaded, setRoutesLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <RoutesContext.Provider value={{ \r\n            routes, setRoutes, \r\n            routesLoaded, setRoutesLoaded\r\n            }}>\r\n            {props.children}\r\n        </RoutesContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const RoutesLoad = () => {\r\n\r\n    const { setRoutes, setRoutesLoaded } = useContext(RoutesContext)\r\n\r\n    useEffect(() => {\r\n        fetchRoutes()\r\n      },[])\r\n\r\n\r\n    const fetchRoutes = async () => {\r\n        try{\r\n          const routeData = await API.graphql(graphqlOperation(listRoutes, {limit: '50'}))\r\n          const routeList = routeData.data.listRoutes.items;\r\n          sortAtoZDataByIndex(routeList,\"routeStart\")\r\n          setRoutes(routeList)\r\n          setRoutesLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Route List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["760"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n    \r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js",["761"],"import React, { useEffect, useContext, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport BillingGrid from \"./Parts/BillingGrid\";\r\nimport SelectDate from \"./Parts/SelectDate\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport { listZones } from \"../../graphql/queries\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 70%;\r\n  border: 1px solid lightgray;\r\n  padding: 5px 10px;\r\n  margin: 0px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst fetchInfo = async (operation, opString, limit) => {\r\n  try {\r\n    let info = await API.graphql(\r\n      graphqlOperation(operation, {\r\n        limit: limit,\r\n      })\r\n    );\r\n    let list = info.data[opString].items;\r\n\r\n    let noDelete = list.filter((li) => li[\"_deleted\"] !== true);\r\n    return noDelete;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nfunction Billing() {\r\n  let { reload, setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [nextInv, setNextInv] = useState(0);\r\n  const [dailyInvoices, setDailyInvoices] = useState([]);\r\n  const [zones, setZones] = useState([]);\r\n  const [database, setDatabase] = useState([]);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => setDatabase(database));\r\n  }, [reload]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    \r\n  }, []);\r\n\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      let zones = await fetchInfo(listZones, \"listZones\", \"50\");\r\n      setZones(zones);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Zone List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <h1>Billing</h1>\r\n      </BasicContainer>\r\n\r\n      <BasicContainer>\r\n        <SelectDate\r\n          database={database}\r\n          nextInv={nextInv}\r\n          setNextInv={setNextInv}\r\n          dailyInvoices={dailyInvoices}\r\n          setDailyInvoices={setDailyInvoices}\r\n        />\r\n      </BasicContainer>\r\n\r\n      <BasicContainer>\r\n        <h2>Daily Invoicing</h2>\r\n        <BillingGrid\r\n          database={database}\r\n          nextInv={nextInv}\r\n          dailyInvoices={dailyInvoices}\r\n          setDailyInvoices={setDailyInvoices}\r\n          zones={zones}\r\n        />\r\n      </BasicContainer>\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Billing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["762"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["763"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js",["764"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { ColumnGroup } from \"primereact/columngroup\";\r\nimport { Row } from \"primereact/row\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeAllOrders from \"./Utils/composeAllOrders\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { sortAtoZDataByIndex } from \"../../helpers/sortDataHelpers\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeAllOrders();\r\n\r\nfunction WhoBake() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [allOrders, setAllOrders] = useState([]);\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherAllOrdersInfo(database)\r\n    );\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherAllOrdersInfo = (database) => {\r\n    let allOrdersData = compose.returnAllOrdersBreakDown(\r\n      delivDate,\r\n      database,\r\n      \"Carlton\"\r\n    );\r\n\r\n    setAllOrders(allOrdersData.whoBake);\r\n  };\r\n\r\n  const exportWhoBakePdf = () => {\r\n    let finalY;\r\n    let pageMargin = 20;\r\n    let tableToNextTitle = 5;\r\n    let titleToNextTable = tableToNextTitle + 3;\r\n    let tableFont = 11;\r\n    let titleFont = 14;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `Who Bake ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Set Out`);\r\n    for (let ord of allOrdersList) {\r\n\r\n      let total = 0\r\n      for ( let num of allOrders.filter((fil) => fil.forBake === ord)){\r\n        total = total + num.qty\r\n      }\r\n\r\n      doc.autoTable({\r\n        theme: \"grid\",\r\n        body: allOrders.filter((fil) => fil.forBake === ord),\r\n        margin: pageMargin,\r\n        columns: [\r\n          { header: ord, dataKey: \"custName\" },\r\n          { header: \"Qty\", dataKey: \"qty\" },\r\n        ],\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n\r\n      finalY = doc.previousAutoTable.finalY;\r\n      doc.text(pageMargin+100, finalY+8, `Total: ${total}`)\r\n      finalY=finalY+10\r\n    }\r\n    doc.save(`WhoBake${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportWhoBakePdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Who Bake\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  let allOrdersList = Array.from(\r\n    new Set(allOrders.map((all) => all.forBake).filter((all) => all !== null))\r\n  );\r\n\r\n  const footerGroup = (e) => {\r\n    let total = 0;\r\n    for (let prod of e) {\r\n      total += prod.qty;\r\n    }\r\n\r\n    return (\r\n      <ColumnGroup>\r\n        <Row>\r\n          <Column\r\n            footer=\"Total:\"\r\n            colSpan={1}\r\n            footerStyle={{ textAlign: \"right\" }}\r\n          />\r\n          <Column footer={total} />\r\n        </Row>\r\n      </ColumnGroup>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>Who Bake {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n        {allOrdersList &&\r\n          allOrdersList.map((all) => (\r\n            <React.Fragment>\r\n              <h3>{all}</h3>\r\n              <DataTable\r\n                value={allOrders.filter((fil) => fil.forBake === all)}\r\n                className=\"p-datatable-sm\"\r\n                footerColumnGroup={footerGroup(\r\n                  allOrders.filter((fil) => fil.forBake === all)\r\n                )}\r\n              >\r\n                <Column field=\"custName\" header=\"Customer\"></Column>\r\n                <Column field=\"qty\" header=\"Qty\"></Column>\r\n              </DataTable>\r\n            </React.Fragment>\r\n          ))}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default WhoBake;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["765","766","767","768","769","770","771","772","773"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\nimport CustomerGroup from \"./Parts/CurrentOrderInfoParts/CustomerGroup\";\r\nimport {\r\n  createOrder,\r\n  updateDough,\r\n  updateProduct,\r\n  deleteOrder,\r\n} from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\nlet yesterday = todayPlus()[4];\r\nlet weekAgo = todayPlus()[5];\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n`;\r\n\r\nconst MainWindowPhone = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 5px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst inlineContainer = styled.div`\r\ndisplay: inline;\r\n\r\n`\r\n\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 5px 10px;\r\n  color: rgb(66, 97, 201);\r\n`;\r\n\r\nconst DateStyle = styled.div`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 5px 10px;\r\n`;\r\n\r\nfunction Ordering({ authType }) {\r\n  const [database, setDatabase] = useState([]);\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const [customerGroup, setCustomerGroup] = useState(customers);\r\n  const {\r\n    reload,\r\n    setIsLoading,\r\n    setModifications,\r\n    ordersHasBeenChanged,\r\n    setOrdersHasBeenChanged,\r\n  } = useContext(ToggleContext);\r\n\r\n  const { chosen } = useContext(CurrentDataContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  const loadDatabase = async (database) => {\r\n    setIsLoading(true);\r\n    const [products, customers, routes, standing, orders, doughs, altPricing] =\r\n      database;\r\n    console.log(\"Checking if Orders Have been changed\");\r\n    if (ordersHasBeenChanged) {\r\n      let prodsToUpdate = clonedeep(products);\r\n      let doughsToUpdate = clonedeep(doughs);\r\n      let ordersToUpdate = clonedeep(orders);\r\n\r\n      console.log(\"Yes they have! deleting old orders\");\r\n      let newYest = convertDatetoBPBDate(yesterday);\r\n      let newWeekAgo = convertDatetoBPBDate(weekAgo);\r\n\r\n      for (let ord of ordersToUpdate) {\r\n        let ind = customers.findIndex((cust) => cust.custName === ord.custName);\r\n        let weeklyCheck = \"daily\";\r\n\r\n        if (ind > -1) {\r\n          weeklyCheck = customers[ind].invoicing;\r\n        }\r\n        if (\r\n          (ord.delivDate === newYest && weeklyCheck === \"daily\") ||\r\n          (ord.delivDate === newWeekAgo && weeklyCheck === \"weekly\")\r\n        ) {\r\n          let ordToUpdate = {\r\n            id: ord.id,\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(deleteOrder, { input: { ...ordToUpdate } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on deleting Order\", error);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(\"Yes they have!  Updating preshaped numbers\");\r\n      for (let prod of prodsToUpdate) {\r\n        if (prod.updatePreDate !== tomorrow) {\r\n          prod.updatePreDate = today;\r\n        }\r\n        if (prod.updatePreDate === today) {\r\n          prod.preshaped = prod.prepreshaped;\r\n          prod.updatePreDate = tomorrow;\r\n          let prodToUpdate = {\r\n            id: prod.id,\r\n            preshaped: prod.preshaped,\r\n            prepreshaped: prod.prepreshaped,\r\n            updatePreDate: prod.updatePreDate,\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateProduct, { input: { ...prodToUpdate } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      }\r\n      console.log(\"Yes they have!  Updating prepped bucket numbers\");\r\n\r\n      for (let dgh of doughsToUpdate) {\r\n        if (dgh.updatePreBucket !== tomorrow) {\r\n          dgh.updatePreBucket = today;\r\n        }\r\n        if (dgh.updatePreBucket === today) {\r\n          dgh.bucketSets = dgh.preBucketSets;\r\n          dgh.updatePreBucket = tomorrow;\r\n          let doughToUpdate = {\r\n            id: dgh.id,\r\n            bucketSets: dgh.bucketSets,\r\n            preBucketSets: dgh.preBucketSets,\r\n            updatePreBucket: dgh.updatePreBucket,\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateDough, { input: { ...doughToUpdate } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(\"Yes they have!  Loading new Square Orders in DB\");\r\n      let ordsToUpdate = clonedeep(orders);\r\n      setDatabase(database);\r\n      let ord = await fetchSq(database);\r\n      if (ord) {\r\n        for (let newOrd of ord) {\r\n          let qty = Number(newOrd[\"qty\"]);\r\n          let dt = new Date().toISOString();\r\n          let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n          delivDate = delivDate.split(\"-\");\r\n          delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n          let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n          let rt = \"slopick\";\r\n          let custName = newOrd[\"custName\"];\r\n\r\n          let prodName =\r\n            products[\r\n              products.findIndex((prod) =>\r\n                newOrd[\"item\"].includes(prod.squareID)\r\n              )\r\n            ][\"prodName\"];\r\n\r\n          if (newOrd.location === locIDBPBN) {\r\n            rt = \"atownpick\";\r\n          }\r\n\r\n          let itemToAdd = {\r\n            SO: qty,\r\n            qty: qty,\r\n            timeStamp: dt,\r\n            isWhole: false,\r\n            PONote: \"paid\",\r\n            delivDate: delivDate,\r\n            custName: custName,\r\n            prodName: prodName,\r\n            route: rt,\r\n          };\r\n\r\n          // If this update is happening after 12:01 AM -\r\n          //      If order is for tomorrow -\r\n          //        If Pastry -\r\n          //           Deduct qty from back porch bakery item of same prodNick for tomorrow\r\n          //        If Bread -\r\n          //            ?\r\n\r\n          // Search orders for object, if doesn't exist, add:\r\n          let ind = orders.findIndex(\r\n            (ord) =>\r\n              ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n          );\r\n\r\n          if (ind === -1) {\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n              );\r\n              ordsToUpdate.push(itemToAdd);\r\n            } catch (error) {\r\n              console.log(\"error on creating Orders\", error);\r\n              setIsLoading(false);\r\n            }\r\n          }\r\n        }\r\n        let DBToMod = clonedeep(database);\r\n        DBToMod[4] = ordsToUpdate;\r\n        setDatabase(DBToMod);\r\n      } else {\r\n        console.log(\"Square orders did not load\");\r\n      }\r\n    }\r\n    setDatabase(database);\r\n    setIsLoading(false);\r\n    setOrdersHasBeenChanged(false);\r\n  };\r\n\r\n  const fetchSq = async () => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n      return newOrders;\r\n    } catch {\r\n      console.log(\"Error on Square load\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => loadDatabase(database));\r\n  }, [reload]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const innards1 = (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <Calendar database={database} />\r\n      </BasicContainer>\r\n\r\n      <BasicContainer>\r\n        {authType === \"bpbadmin\" ? (\r\n          <OrderCommandLine database={database} setDatabase={setDatabase} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <CurrentOrderInfo\r\n          database={database}\r\n          setDatabase={setDatabase}\r\n          customerGroup={customerGroup}\r\n          setCustomerGroup={setCustomerGroup}\r\n          authType={authType}\r\n        />\r\n        <CurrentOrderList\r\n          database={database}\r\n          setDatabase={setDatabase}\r\n          authType={authType}\r\n        />\r\n        <OrderEntryButtons\r\n          database={database}\r\n          setDatabase={setDatabase}\r\n          authType={authType}\r\n        />\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const innards2 = (\r\n    <React.Fragment>\r\n      <Title>Back Porch Bakery</Title>\r\n      <inlineContainer>\r\n      <DateStyle>\r\n        <CustomerGroup\r\n          database={database}\r\n          customerGroup={customerGroup}\r\n          setCustomerGroup={setCustomerGroup}\r\n        />{\" \"}\r\n        order for:\r\n      </DateStyle>\r\n      <Calendar database={database} />\r\n      </inlineContainer>\r\n      <BasicContainer>\r\n      <CurrentOrderInfo\r\n          database={database}\r\n          setDatabase={setDatabase}\r\n          customerGroup={customerGroup}\r\n          setCustomerGroup={setCustomerGroup}\r\n          authType={authType}\r\n        />\r\n        <CurrentOrderList\r\n          database={database}\r\n          setDatabase={setDatabase}\r\n          authType={authType}\r\n        />\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {width > breakpoint ? (\r\n        <MainWindow>{innards1}</MainWindow>\r\n      ) : (\r\n        <MainWindowPhone>{innards2}</MainWindowPhone>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js",["774"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction DoughCalc() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default DoughCalc;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js",["775"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeWhatToMake from \"./BPBSWhatToMakeUtils/composeWhatToMake\";\r\n\r\nimport styled from \"styled-components\";\r\nimport react from \"react\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeWhatToMake();\r\n\r\nfunction BPBSWhatToMake() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [youllBeShort, setYoullBeShort] = useState();\r\n  const [freshProds, setFreshProds] = useState();\r\n  const [shelfProds, setShelfProds] = useState();\r\n  const [freezerProds, setFreezerProds] = useState();\r\n  const [pocketsNorth, setPocketsNorth] = useState();\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherMakeInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherMakeInfo = (database) => {\r\n    let makeData = compose.returnMakeBreakDown(database);\r\n    setYoullBeShort(makeData.youllBeShort);\r\n    setPocketsNorth(makeData.pocketsNorth);\r\n    setFreshProds(makeData.freshProds);\r\n    setShelfProds(makeData.shelfProds);\r\n    setFreezerProds(makeData.freezerProds);\r\n  };\r\n\r\n  const exportListPdf = () => {\r\n    let finalY;\r\n    let pageMargin = 10;\r\n    let tableToNextTitle = 12;\r\n    let titleToNextTable = tableToNextTitle + 4;\r\n    let tableFont = 11;\r\n    let titleFont = 14;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `What to Make ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n\r\n    if (youllBeShort.length>0) {\r\n      doc.setFontSize(titleFont);\r\n      doc.text(pageMargin, finalY + tableToNextTitle, `You'll Be Short`);\r\n\r\n      doc.autoTable({\r\n        body: youllBeShort,\r\n        columns: [\r\n          { header: \"Pocket Weight\", dataKey: \"pocketWeight\" },\r\n          { header: \"Short\", dataKey: \"makeTotal\" },\r\n        ],\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n\r\n      finalY = doc.previousAutoTable.finalY;\r\n    }\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Pockets North`);\r\n\r\n    doc.autoTable({\r\n      body: pocketsNorth,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Quantity\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Fresh Product`);\r\n\r\n    doc.autoTable({\r\n      body: freshProds,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Total Deliv\", dataKey: \"qty\" },\r\n        { header: \"Make Total\", dataKey: \"makeTotal\" },\r\n        { header: \"Bag For Tomorrow\", dataKey: \"bagEOD\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Shelf Product`);\r\n\r\n    doc.autoTable({\r\n      body: shelfProds,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Total Deliv\", dataKey: \"qty\" },\r\n        { header: \"Need Early\", dataKey: \"needEarly\" },\r\n        { header: \"Make Total\", dataKey: \"makeTotal\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Freezer Product`);\r\n\r\n    doc.autoTable({\r\n      body: freezerProds,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Total Deliv\", dataKey: \"qty\" },\r\n        { header: \"Need Early\", dataKey: \"needEarly\" },\r\n        { header: \"Make Total\", dataKey: \"makeTotal\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    doc.save(`WhatToMake${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportListPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print What To Make List\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBS What To Make {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n        {(youllBeShort && youllBeShort.length>0) && (\r\n          <React.Fragment>\r\n            <h2>You'll Be Short</h2>\r\n            <DataTable value={youllBeShort} className=\"p-datatable-sm\">\r\n              <Column field=\"pocketWeight\" header=\"Pocket Size\"></Column>\r\n              <Column field=\"makeTotal\" header=\"Short\"></Column>\r\n            </DataTable>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <h2>Send Pockets North</h2>\r\n        <DataTable value={pocketsNorth} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Total Deliv\"></Column>\r\n        </DataTable>\r\n\r\n        <h2>Make Fresh</h2>\r\n        <DataTable value={freshProds} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Total Deliv\"></Column>\r\n          <Column field=\"makeTotal\" header=\"MakeTotal\"></Column>\r\n          <Column field=\"bagEOD\" header=\"Bag for Tomorrow\"></Column>\r\n        </DataTable>\r\n        <h2>Make For Shelf</h2>\r\n        <DataTable value={shelfProds} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Total Deliv\"></Column>\r\n          <Column field=\"needEarly\" header=\"Need Early\"></Column>\r\n          <Column field=\"makeTotal\" header=\"MakeTotal\"></Column>\r\n        </DataTable>\r\n        <h2>Make For Freezer</h2>\r\n        <DataTable value={freezerProds} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Total Deliv\"></Column>\r\n          <Column field=\"needEarly\" header=\"Need Early\"></Column>\r\n          <Column field=\"makeTotal\" header=\"MakeTotal\"></Column>\r\n        </DataTable>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBSWhatToMake;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js",["776","777"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeAMPastry from \"./utils/composeAMPastry\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeAMPastry();\r\n\r\nfunction AMPastry() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [AMPastry, setAMPastry] = useState([]);\r\n  const [AMOthers, setAMOthers] = useState([]);\r\n\r\n  const [columnsAMPastry, setColumnsAMPastry] = useState([]);\r\n  const [columnsAMOthers, setColumnsAMOthers] = useState([]);\r\n\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  const createDynamic = (cols) => {\r\n    const dynamicColumns = cols.map((col, i) => {\r\n      return (\r\n        <Column\r\n          npmkey={col.field}\r\n          field={col.field}\r\n          header={col.header}\r\n          key={col.field}\r\n          style={col.width}\r\n        />\r\n      );\r\n    });\r\n    return dynamicColumns;\r\n  };\r\n\r\n  const dynamicColumnsAMPastry = createDynamic(columnsAMPastry);\r\n  const dynamicColumnsAMOthers = createDynamic(columnsAMOthers)\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherMakeInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherMakeInfo = (database) => {\r\n    let AMPastryData = compose.returnAMPastryBreakDown(delivDate, database);\r\n    setAMPastry(AMPastryData.AMPastry);\r\n    setColumnsAMPastry(AMPastryData.columnsAMPastry);\r\n    setAMOthers(AMPastryData.AMOthers);\r\n    setColumnsAMOthers(AMPastryData.columnsAMOthers)\r\n  };\r\n\r\n  const exportAMPastryStickers = () => {\r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ind = 0;\r\n    for (let past of AMPastry) {\r\n      ind += 1;\r\n      doc.setFontSize(14);\r\n      doc.text(`${past.customer} ${convertDatetoBPBDate(delivDate)}`, 0.1, 0.36);\r\n\r\n      doc.setFontSize(12);\r\n      past.pl && doc.text(`Pl: ${past.pl}`, 0.2, 0.72);\r\n      past.ch && doc.text(`Ch: ${past.ch}`, 0.2, 0.98);\r\n      past.pg && doc.text(`Pg: ${past.pg}`, 0.2, 1.24);\r\n      past.sf && doc.text(`Sf: ${past.sf}`, 0.2, 1.5);\r\n\r\n      past.al && doc.text(`Al: ${past.al}`, 1.46, 0.72);\r\n      past.mb && doc.text(`Mb: ${past.mb}`, 1.46, 0.98);\r\n      past.unmb && doc.text(`UnMb: ${past.unmb}`, 1.46, 1.24);\r\n      past.mini && doc.text(`mini: ${past.mini}`, 1.46, 1.5);\r\n      past.sand && doc.text(`sand: ${past.sand}`, 1.46, 1.76);\r\n\r\n      past.bb && doc.text(`BB: ${past.bb}`, 2.72, 0.72);\r\n      past.sco && doc.text(`Sco: ${past.sco}`, 2.72, 0.98);\r\n      past.bd && doc.text(`Bd: ${past.bd}`, 2.72, 1.24);\r\n      past.brn && doc.text(`Brn: ${past.brn}`, 2.72, 1.5);\r\n      if (ind<AMPastry.length){\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n    }\r\n    }\r\n\r\n    doc.save(`TestSticker.pdf`);\r\n  };\r\n\r\n  const exportAMPastryPDF = () => {\r\n    let finalY;\r\n    let pageMargin = 10;\r\n    let tableToNextTitle = 12;\r\n    let titleToNextTable = tableToNextTitle + 4;\r\n    let tableFont = 11;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `AM Pastry ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n    if (columnsAMPastry.length > 0) {\r\n      doc.autoTable({\r\n        body: AMPastry,\r\n        columns: columnsAMPastry,\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n    }\r\n\r\n    doc.save(`AMPastry${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryStickers}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry Stickers\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryPDF}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry List\r\n        </Button>\r\n\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>AM Pastry Pack {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n\r\n        {AMPastry.length > 0 && (\r\n          <React.Fragment>\r\n            <h3>AM Pastry</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMPastry}\r\n            >\r\n              {dynamicColumnsAMPastry}\r\n            </DataTable>{\" \"}\r\n            {/*\r\n            <h3>AM Others</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMOthers}\r\n            >\r\n              {dynamicColumnsAMOthers}\r\n            </DataTable>{\" \"} */}\r\n          </React.Fragment>\r\n        )}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AMPastry;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js",["778","779"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"../BPBNProd/Utils/composeDough\";\r\nimport ComposeWhatToMake from \"./BPBSWhatToMakeUtils/composeWhatToMake\"\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ButtonStyle = styled.button`\r\n  border: 0;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  font-size: 20px;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n  &:hover {\r\n    background-color: #3E8E41;\r\n  }\r\n  &:active {\r\n    background-color: #3E8E41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n  `\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\nconst shortage = new ComposeWhatToMake()\r\n\r\nfunction BPBSMixPocket() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [ pockets, setPockets ] = useState([])\r\n  const [ doughs, setDoughs ] = useState([]);\r\n  const [ doughComponents, setDoughComponents ] = useState([]);\r\n  const [ shortWeight, setShortWeight ] = useState(0);\r\n\r\n  let twoDay = todayPlus()[2];\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  \r\n  const gatherDoughInfo = (database) => {\r\n    let doughData = compose.returnDoughBreakDown(database, \"Prado\");\r\n    let shortageData = shortage.getYoullBeShort(database)\r\n    setDoughs(doughData.doughs);\r\n    setDoughComponents(doughData.doughComponents);\r\n    setPockets(doughData.pockets)\r\n    let short = 0\r\n    for (let data of shortageData){\r\n      short = (short + (Number(data.pocketWeight)*Number(data.makeTotal))).toFixed(2);\r\n    }\r\n    setShortWeight(short)\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const handleClick = (e, amt) => {\r\n   \r\n    let mixNumber = Math.ceil(amt/230)\r\n    amt = amt/mixNumber\r\n    let doughName = e.target.id.split(\"_\")[0];\r\n    let components = doughComponents.filter((dgh) => dgh.dough === doughName);\r\n    let wetWeight = Number(\r\n      doughs[doughs.findIndex((dgh) => dgh.doughName === doughName)].hydration\r\n    );\r\n    let wetList = components\r\n      .filter((dgh) => dgh.componentType === \"wet\")\r\n      .map((it) => it.amount);\r\n    let wetTotals;\r\n    wetList.length > 0 ? (wetTotals = wetList.reduce(addUp)) : (wetTotals = 0);\r\n    let dryList = components\r\n      .filter((dgh) => dgh.componentType === \"dry\")\r\n      .map((it) => it.amount);\r\n    let dryTotals;\r\n    dryList.length > 0 ? (dryTotals = dryList.reduce(addUp)) : (dryTotals = 0);\r\n    let levList = components\r\n      .filter((dgh) => dgh.componentType === \"lev\")\r\n      .map((it) => it.amount);\r\n    let levTotals;\r\n    levList.length > 0 ? (levTotals = levList.reduce(addUp)) : (levTotals = 0);\r\n    let dryplusList = components\r\n      .filter((dgh) => dgh.componentType === \"dryplus\")\r\n      .map((it) => it.amount);\r\n    let dryplusTotals;\r\n    dryplusList.length > 0\r\n      ? (dryplusTotals = dryplusList.reduce(addUp))\r\n      : (dryplusTotals = 0);\r\n    let postList = components\r\n      .filter((dgh) => dgh.componentType === \"post\")\r\n      .map((it) => it.amount);\r\n    let postTotals;\r\n    postList.length > 0\r\n      ? (postTotals = postList.reduce(addUp))\r\n      : (postTotals = 0);\r\n    let dryWeight =\r\n      (100 / (100 + wetWeight + levTotals + dryplusTotals + postTotals)) * amt;\r\n\r\n    \r\n    \r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ct = 0.7;\r\n    let dryFilt = components.filter((dgh) => dgh.componentType === \"dry\");\r\n    if (dryFilt.length > 0) {\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Dry`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      for (let item of dryFilt) {\r\n\r\n        if (((item.amount / dryTotals) * dryWeight)>50){\r\n          let itemAmount = ((item.amount / dryTotals) * dryWeight)\r\n          let bags = Math.floor(itemAmount/50)\r\n          item.amount = dryTotals * ((dryWeight-(50 * bags))/dryWeight)\r\n          doc.text(`50 lb. bag ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / dryTotals) * dryWeight).toFixed(2)}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let dryplusFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        dgh.componentName !== \"Salt\" &&\r\n        dgh.componentName !== \"Yeast\"\r\n    );\r\n    if (dryplusFilt.length > 0) {\r\n      for (let item of dryplusFilt) {\r\n        \r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let wetFilt = components.filter((dgh) => dgh.componentType === \"wet\");\r\n    if (wetFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Wet`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of wetFilt) {\r\n        \r\n        if (((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))>30){\r\n          let itemAmount = ((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))\r\n          let bags = Math.floor(itemAmount/30)\r\n          item.amount = wetTotals * (((wetWeight* dryWeight * 0.01)-(30 * bags))/(wetWeight* dryWeight * 0.01))\r\n          doc.text(`30 lb. buckets ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / wetTotals) * wetWeight * dryWeight * 0.01).toFixed(\r\n            2\r\n          )}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let levNameList = Array.from(\r\n      new Set(\r\n        components\r\n          .filter((com) => com.componentType === \"lev\")\r\n          .map((it) => it.componentName)\r\n      )\r\n    );\r\n    for (let lev of levNameList) {\r\n      let levFilt = doughComponents.filter((dgh) => dgh.dough === lev);\r\n\r\n      let levList = doughComponents\r\n        .filter((dgh) => dgh.dough === lev)\r\n        .map((it) => it.amount);\r\n      let levTotals;\r\n      levList.length > 0\r\n        ? (levTotals = levList.reduce(addUp))\r\n        : (levTotals = 0);\r\n\r\n      let levPercent =\r\n        components[components.findIndex((comp) => comp.componentName === lev)]\r\n          .amount * 0.01;\r\n    \r\n      if (levFilt.length > 0) {\r\n        doc.addPage({\r\n          format: [2, 4],\r\n          orientation: \"l\",\r\n        });\r\n        doc.setFontSize(14);\r\n        doc.text(`${doughName} - ${lev}`, 0.2, 0.36);\r\n        doc.setFontSize(10)\r\n        doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n        doc.setFontSize(12);\r\n        let ct = 0.7;\r\n        for (let item of levFilt) {\r\n          doc.text(`${item.componentName}`, 1.2, ct);\r\n          doc.text(\r\n            `${((item.amount / levTotals) * levPercent * dryWeight).toFixed(\r\n              2\r\n            )}`,\r\n            0.3,\r\n            ct\r\n          );\r\n          doc.text(`lb.`, 0.8, ct);\r\n          ct += 0.24;\r\n        }\r\n      }\r\n    }\r\n    let postFilt = components.filter((dgh) => dgh.componentType === \"post\");\r\n    if (postFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Add ins`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of postFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let saltyeastFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        (dgh.componentName === \"Salt\" ||\r\n        dgh.componentName === \"Yeast\")\r\n    );\r\n    if (saltyeastFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Salt & Yeast`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of saltyeastFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n    if (doughName === \"French\"){\r\n    doc.addPage({\r\n      format: [2, 4],\r\n      orientation: \"l\",\r\n    });\r\n    ct = 0.7;\r\n    for (let item of pockets){\r\n      doc.text(`${item.pocketSize}`, 1.2, ct);\r\n        doc.text(`${item.qty}`, 0.3, ct);\r\n        doc.text(`x.`, 0.8, ct);\r\n        ct += 0.24;\r\n    }\r\n  }\r\n\r\n    doc.save(`${doughName}Stickers.pdf`);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBS French Mix/Pocket</h1>\r\n        {doughs.filter(dgh => dgh.doughName===\"French\").map((dough) => (\r\n          <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n            <h3>\r\n              {dough.doughName}: (for tomorrow {dough.needed} lb.) + (short Today {shortWeight} lb.) + (buffer {dough.buffer} lb.) = TOTAL: \r\n              {Number(Number(shortWeight) + Number(dough.needed) + Number(dough.buffer))}\r\n            </h3>\r\n            <ThreeColumnGrid key={dough.id + \"_first2Col\"}>\r\n              <div>\r\n                <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n                  <span>Old Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_oldDough\"}\r\n                      id={dough.id + \"_oldDough\"}\r\n                      placeholder={dough.oldDough}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n                <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n                  <span>Buffer Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_buffer\"}\r\n                      id={dough.id + \"_buffer\"}\r\n                      placeholder={dough.buffer}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n              </div>\r\n              <ButtonStyle\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) + Number(shortWeight) -\r\n                      Number(dough.oldDough)\r\n                  )\r\n                }\r\n                label=\"Print Sticker Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                Print Sticker Set\r\n              </ButtonStyle>\r\n              \r\n            </ThreeColumnGrid>\r\n          </React.Fragment>\r\n        ))}\r\n        <WholeBox>\r\n            <h3>French Pockets</h3>\r\n            <DataTable value={pockets} className=\"p-datatable-sm\">\r\n              <Column field=\"pocketSize\" header=\"Pocket Size\"></Column>\r\n              <Column field=\"qty\" header=\"Qty\"></Column>\r\n            </DataTable>\r\n          </WholeBox>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBSMixPocket;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js",["780"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport RouteGrid from \"../ByRoute/Parts/RouteGrid\";\r\nimport RouteList from \"../ByRoute/Parts/RouteList\";\r\nimport ToolBar from \"../ByRoute/Parts/ToolBar\";\r\nimport { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport {\r\n  promisedData,\r\n  fetchAltPricing,\r\n} from \"../../../helpers/databaseFetchers\";\r\nimport ComposeProductGrid from \"./Parts/utils/composeProductGrid\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 95%;\r\n  margin: 10px auto;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeProductGrid();\r\n\r\nfunction ByRoute() {\r\n  const [route, setRoute] = useState(\"AM Pastry\");\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [routeList, setRouteList] = useState();\r\n  const [orderList, setOrderList] = useState();\r\n  const [altPricing, setAltPricing] = useState();\r\n  const [database, setDatabase] = useState([]);\r\n\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherProdGridInfo(database));\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherProdGridInfo = (data) => {\r\n    let prodGridData = compose.returnProdGrid(data, delivDate);\r\n    setDatabase(data);\r\n    setOrderList(prodGridData.prodGrid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing().then(data => setAltPricing(data))\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          orderList={orderList}\r\n          setRouteList={setRouteList}\r\n          setRoute={setRoute}\r\n          routeList={routeList}\r\n          database={database}\r\n        />\r\n        <DescripWrapper>\r\n          <ToolBar delivDate={delivDate} setDelivDate={setDelivDate} />\r\n          <RouteGrid\r\n            route={route}\r\n            orderList={orderList}\r\n            altPricing={altPricing}\r\n            database={database}\r\n            delivDate={delivDate}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByRoute;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js",["781"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { RoutesContext } from \"../../dataContexts/RoutesContext\";\r\n\r\nimport DatabaseServices from './databaseServices';\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\n\r\n\r\nfunction TestComponent() {\r\n    const [products, setProducts] = useState([]);\r\n    const databaseServices = new DatabaseServices();\r\n\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n  let { setRoutesLoaded } = useContext(RoutesContext);\r\n\r\n  useEffect(() => {\r\n    databaseServices.getProducts().then(data => setProducts(data));\r\n}, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setRoutesLoaded(true);\r\n    setProdLoaded(true);\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable value={products}>\r\n          <Column field=\"prodName\" header=\"Name\"></Column>\r\n          <Column field=\"nickName\" header=\"Nick Name\"></Column>\r\n          <Column field=\"packSize\" header=\"Pack Size\"></Column>\r\n          <Column field=\"doughType\" header=\"Dough Type\"></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestComponent;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js",["782","783","784","785","786"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport TimeAgo from \"timeago-react\"; // var TimeAgo = require('timeago-react');\r\nimport us from \"timeago.js/lib/lang/en_US\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  \r\n} from \"../../graphql/mutations\";\r\n\r\n\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  \r\n  padding: 5px 10px;\r\n  margin: 4px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 60%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst IngDetails = styled.div`\r\n  font-size: 0.8em;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nfunction EODCounts({ loc }) {\r\n  const { products, setProducts, prodLoaded, setProdLoaded } = useContext(\r\n    ProductsContext\r\n  );\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n  \r\n\r\n\r\n  const [signedIn, setSignedIn] = useState(\"null\");\r\n  const [eodProds, setEODProds] = useState();\r\n  const [pocketsToMap, setPocketsToMap ] = useState();\r\n  const [shelfBag, setShelfBag] = useState(false);\r\n  const [shelfEa, setShelfEa] = useState(false);\r\n  const [freezerBag, setFreezerBag] = useState(false);\r\n  const [freezerEa, setFreezerEa] = useState(false);\r\n  const [pocketCount, setPocketCount] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let prodsToMap = products.filter(\r\n      (prod) => prod.bakedWhere[0] === loc && prod.eodCount === true\r\n    );\r\n    setEODProds(prodsToMap);\r\n  }, [products]);\r\n\r\n  useEffect(() => {\r\n    let pocketsToMap = products.filter(\r\n      (prod) => prod.bakedWhere[0] === loc && prod.doughType === \"French\"\r\n    );\r\n    setPocketsToMap(pocketsToMap);\r\n  }, [products]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (eodProds){\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n          prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setShelfBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setShelfEa(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setFreezerBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setFreezerEa(true)\r\n      }\r\n    }\r\n  },[eodProds])\r\n\r\n  const updateDBattr = async (id, attr, val) => {\r\n    \r\n   \r\n    let addDetails = {\r\n      id: id,\r\n      [attr]: val,\r\n      whoCountedLast: signedIn\r\n    };\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n      );\r\n     \r\n    } catch (error) {\r\n      console.log(\"error on updating product\", error);\r\n     \r\n    }\r\n  };\r\n\r\n  const updateItem = (value, itemToUpdate) => {\r\n\r\n    let ind = itemToUpdate.findIndex((item) => item.id === value.target.id);\r\n\r\n    itemToUpdate[ind].currentStock = value.target.value;\r\n    itemToUpdate[ind].updatedAt = DateTime.now().setZone(\"America/Los_Angeles\");\r\n    itemToUpdate[ind].whoCountedLast = signedIn;\r\n\r\n    try {\r\n      let id = value.target.id;\r\n      let val = Number(value.target.value);\r\n      updateDBattr(id, \"currentStock\", val);\r\n    } catch {\r\n      console.log(\"error updating attribute.\");\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const handleChange = (value) => {\r\n    if (value.code === \"Enter\") {\r\n      let itemToUpdate = clonedeep(products);\r\n      updateItem(value, itemToUpdate);\r\n      document.getElementById(value.target.id).value = \"\";\r\n\r\n      return itemToUpdate;\r\n    }\r\n  };\r\n\r\n  const handleBlur = (value) => {\r\n    let itemToUpdate = clonedeep(products);\r\n    if (value.target.value !== \"\") {\r\n      updateItem(value, itemToUpdate);\r\n    }\r\n    document.getElementById(value.target.id).value = \"\";\r\n\r\n    return itemToUpdate;\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    return (\r\n      <InputText\r\n        id={e.id}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder={e.currentStock}\r\n        onKeyUp={(e) => e.code === \"Enter\" && setProducts(handleChange(e))}\r\n        onBlur={(e) => setProducts(handleBlur(e))}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handlePockChange = async (e) => {\r\n \r\n\r\n    let prodsToMod = clonedeep(products)\r\n    for (let prod of prodsToMod){\r\n      let weight = e.target.id.split(\" \")[0]\r\n      // Account for doughtype\r\n      \r\n      if (Number(prod.weight) === Number(weight) && prod.doughType===\"French\"){\r\n        prod.prepreshaped = e.target.value\r\n        prod.whoCountedLast = signedIn\r\n        prod.updatedAt = DateTime.now().setZone(\"America/Los_Angeles\");\r\n       let itemUpdate = {\r\n         id: prod.id,\r\n         prepreshaped: Number(e.target.value),\r\n         whoCountedLast: signedIn\r\n         \r\n       }\r\n       try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n        );\r\n       \r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n       \r\n      }  \r\n      }\r\n    }\r\n    setProducts(prodsToMod)\r\n    \r\n  }\r\n\r\n\r\n\r\n  const handlePocketInput = (e) => {\r\n    \r\n    return (\r\n      <InputText\r\n        id={e.weight}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder={e.currentStock}\r\n        onKeyUp={(e) => e.code === \"Enter\" ? handlePockChange(e) : ''}\r\n        onBlur={(e) => handlePockChange(e)}\r\n      />\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  const handleSignIn = () => {\r\n    let signIn;\r\n\r\n    swal(\"Please Sign In:\", {\r\n      content: \"input\",\r\n    }).then(async (value) => {\r\n      signIn = value;\r\n      setSignedIn(signIn);\r\n    });\r\n  };\r\n\r\n  const eaCount = (e) => {\r\n    return <React.Fragment>{e.currentStock * e.packSize}</React.Fragment>;\r\n  };\r\n\r\n  const lastCount = (e) => {\r\n   \r\n    let updated = e.updatedAt\r\n    return (<IngDetails>\r\n    <div>\r\n      Counted &nbsp;\r\n      <TimeAgo\r\n        key={e.id + \"time\"}\r\n        datetime={updated}\r\n        locale={us}\r\n      />\r\n      &nbsp;by {e.whoCountedLast}\r\n    </div>\r\n  </IngDetails>)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n        {loc === \"Prado\" ? <h1>BPBS EOD Counts</h1> : <h1>BPBN EOD Counts</h1>}\r\n        {signedIn === \"null\" ? (\r\n        <BasicContainer>\r\n          <Button\r\n            label=\"Please Sign in to make EOD Changes\"\r\n            icon=\"pi pi-plus\"\r\n            onClick={handleSignIn}\r\n            className={\"p-button-raised p-button-rounded\"}\r\n          />\r\n        </BasicContainer>\r\n      ) : (\r\n        <div></div> )}\r\n        {signedIn !== \"null\" ? (\r\n          <React.Fragment>\r\n        <h2>On Shelf</h2>\r\n        {shelfBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"By Bag\"></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n            \r\n          </DataTable>\r\n        )}\r\n        {shelfEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        <h2>In Freezer</h2>\r\n\r\n        {freezerBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"In Freezer\"></Column>\r\n\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        {freezerEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n<h2>Pocket Count</h2>\r\n\r\n{pocketCount && (\r\n          <DataTable\r\n            value={Array.from(new Set(pocketsToMap.map(pock => pock.weight))).map(arr => ({weight:arr+\" lb.\",\r\n          currentStock: products[products.findIndex(prod => prod.weight === arr && prod.doughType===\"French\" )].prepreshaped,\r\n          updatedAt: products[products.findIndex(prod => prod.weight === arr && prod.doughType===\"French\" )].updatedAt,\r\n          whoCountedLast: products[products.findIndex(prod => prod.weight === arr && prod.doughType===\"French\" )].whoCountedLast}))}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"weight\" header=\"Pocket Weight\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handlePocketInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n     \r\n      </React.Fragment>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      \r\n       </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default EODCounts;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["787"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport RouteList from \"./RouteList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditRoutes() {\r\n  const [selectedRoute, setSelectedRoute] = useState();\r\n  const [routes, setRoutes] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          selectedRoute={selectedRoute}\r\n          setSelectedRoute={setSelectedRoute}\r\n          routes={routes}\r\n          setRoutes={setRoutes}\r\n        />\r\n        {selectedRoute && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedRoute={selectedRoute}\r\n                  setSelectedRoute={setSelectedRoute}\r\n                  routes={routes}\r\n                  setRoutes={setRoutes}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedRoute={selectedRoute}\r\n            setSelectedRoute={setSelectedRoute}\r\n            routes={routes}\r\n            setRoutes={setRoutes}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["788"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ZoneList from \"./ZoneList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedZone, setSelectedZone] = useState(1);\r\n  const [zones, setZones] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList\r\n          selectedZone={selectedZone}\r\n          setSelectedZone={setSelectedZone}\r\n          zones={zones}\r\n          setZones={setZones}\r\n        />\r\n        {selectedZone && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedZone={selectedZone}\r\n                  setSelectedZone={setSelectedZone}\r\n                  zones={zones}\r\n                  setZones={setZones}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedZone={selectedZone}\r\n            setSelectedZone={setSelectedZone}\r\n            zones={zones}\r\n            setZones={setZones}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js",["789"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditDoughs() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditDoughs;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",["790","791","792","793","794","795","796"],"import { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\n\r\nimport { wildcardRegExp } from \"wildcard-regex\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst today = todayPlus()[0]\r\n\r\nexport const getFullOrders = (delivDate, database) => {\r\n  const [ products, customers, routes, standing, orders ] = database\r\n   let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n   let buildStand = buildStandList(\"*\", delivDate, standing);\r\n   let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n   return fullOrder;\r\n };\r\n\r\n export const getFullProdOrders = (delivDate, database) => {\r\n  const [ products, customers, routes, standing, orders ] = database\r\n   let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n   let buildStand = buildProdStandList(\"*\", delivDate, standing);\r\n   let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n   return fullOrder;\r\n };\r\n\r\nexport const buildCartList = (chosen, delivDate, orders) => {\r\n  let BPBDate = convertDatetoBPBDate(delivDate);\r\n  let filteredOrders = clonedeep(orders);\r\n  let builtCartList = [];\r\n  if (filteredOrders) {\r\n    builtCartList = filteredOrders.filter(\r\n      (order) =>\r\n        order[\"delivDate\"] === BPBDate &&\r\n        order[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n    );\r\n  }\r\n  console.log(\"builtCartList\",builtCartList)\r\n  return builtCartList;\r\n};\r\n\r\nexport const buildStandList = (chosen, delivDate, standing, route, ponote) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter(\r\n    (standing) =>\r\n      standing[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n \r\n  builtStandList = builtStandList.filter(stand => stand.isStand===true)\r\n  \r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nexport const buildProdStandList = (chosen, delivDate, standing, route, ponote) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter(\r\n    (standing) =>\r\n      standing[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n \r\n  \r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nconst convertStandListtoStandArray = (\r\n  builtStandList,\r\n  delivDate,\r\n  route,\r\n  ponote\r\n) => {\r\n  let dateSplit = delivDate.split(\"-\");\r\n  let dayOfWeek = DateTime.local(\r\n    Number(dateSplit[0]),\r\n    Number(dateSplit[1]),\r\n    Number(dateSplit[2])\r\n  ).weekdayShort;\r\n  let convertedStandList = builtStandList.map((order) => ({\r\n    id: null,\r\n    version: order[\"_version\"],\r\n    qty: order[dayOfWeek],\r\n    prodName: order[\"prodName\"],\r\n    custName: order[\"custName\"],\r\n    \r\n    isWhole: true,\r\n    delivDate: convertDatetoBPBDate(delivDate),\r\n    timeStamp: order[\"timeStamp\"],\r\n    SO: order[dayOfWeek],\r\n  }));\r\n  return convertedStandList;\r\n};\r\n\r\nexport const compileOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n  console.log(\"orderListConcat\",orderList)\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] && \r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"] &&\r\n        orderList[i][\"delivDate\"] === orderList[j][\"delivDate\"] \r\n        ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\n\r\nexport const compileFullOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\nexport const buildCurrentOrder = (\r\n  chosen,\r\n  delivDate,\r\n  orders,\r\n  standing,\r\n  route,\r\n  ponote\r\n) => {\r\n  let cartList = buildCartList(chosen, delivDate, orders);\r\n  let standList = buildStandList(chosen, delivDate, standing, route, ponote);\r\n  let currentOrderList = compileOrderList(cartList, standList);\r\n  console.log(\"currentOrderList\",currentOrderList)\r\n  return currentOrderList;\r\n};\r\n\r\nexport const testEntryForProduct = (entry) => {\r\n  return /\\d+\\s\\w+/g.test(entry);\r\n};\r\n\r\nexport const createArrayofEnteredProducts = (entry) => {\r\n  const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n  let enteredProducts = array.map((item) => item[0].split(\" \"));\r\n  return enteredProducts;\r\n};\r\n\r\nexport const createOrdersToUpdate = (\r\n  products,\r\n  enteredProducts,\r\n  chosen,\r\n  ponote,\r\n  route,\r\n  orderTypeWhole,\r\n  delivDate\r\n) => {\r\n  let ordersToUpdate = [];\r\n  for (let product of products) {\r\n    for (let enteredItem of enteredProducts) {\r\n      if (product[\"nickName\"] === enteredItem[1]) {\r\n        let newOrder = {\r\n          qty: Number(enteredItem[0]),\r\n          prodName: product[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: route,\r\n          SO: 0,\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n        };\r\n        ordersToUpdate.push(newOrder);\r\n      }\r\n    }\r\n  }\r\n  return ordersToUpdate;\r\n};\r\n\r\nexport const buildOrdersToModify = (\r\n  orders,\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  custOrderList,\r\n  ponote,\r\n  route\r\n\r\n) => {\r\n  let ordersToModify = [...orders];\r\n  for (let orderToUpdate of ordersToUpdate) {\r\n    for (let custOrder of custOrderList) {\r\n      if (orderToUpdate[\"prodName\"] === custOrder[\"prodName\"]) {\r\n        let index = ordersToModify.findIndex(\r\n          (order) =>\r\n            order[\"prodName\"] === custOrder[\"prodName\"] &&\r\n            order[\"custName\"] === chosen &&\r\n            order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n        );\r\n        if (index >= 0) {\r\n          ordersToModify[index][\"qty\"] = orderToUpdate[\"qty\"];\r\n        } else {\r\n          orderToUpdate[\"SO\"] = custOrder[\"SO\"];\r\n          orderToUpdate.ponote = ponote;\r\n          orderToUpdate.route = route;\r\n          ordersToModify.push(orderToUpdate);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n\r\nexport const addUpdatesToOrders = (\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  ordersToModify\r\n) => {\r\n  for (let ord of ordersToUpdate) {\r\n    let index = ordersToModify.findIndex(\r\n      (order) =>\r\n        order[\"prodName\"] === ord[\"prodName\"] &&\r\n        order[\"custName\"] === chosen &&\r\n        order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n    if (index < 0) {\r\n      ordersToModify.push(ord);\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js",["797"],"import {\r\n  listProducts,\r\n  listCustomers,\r\n  listRoutes,\r\n  listStandings,\r\n  listOrders,\r\n  listAltPricings,\r\n  listDoughs,\r\n  listDoughComponents,\r\n  listNotess,\r\n} from \"../graphql/queries\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\nconsole.log(yesterday);\r\n\r\nconst buildDateTime = (string) => {\r\n  return DateTime.fromFormat(string, \"yyyy/dd/MM\").toISO();\r\n};\r\n\r\nconst fetchFromDataBase = async (baseFunc, base, limit) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, { limit: limit })\r\n    );\r\n    \r\n    const list = data.data[base].items;\r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nconst fetchFromDataBaseWithFilter = async (baseFunc, base, limit, filt) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, {\r\n        limit: limit,\r\n        filter: filt,\r\n      })\r\n    );\r\n   \r\n    const list = data.data[base].items;\r\n    \r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nexport const fetchProducts = async () => {\r\n  let prodList = await fetchFromDataBase(listProducts, \"listProducts\", \"500\");\r\n  sortAtoZDataByIndex(prodList, \"prodName\");\r\n  return prodList;\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  let custList = await fetchFromDataBase(listCustomers, \"listCustomers\", \"500\");\r\n  sortAtoZDataByIndex(custList, \"custName\");\r\n  custList = custList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  return custList;\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  let routeList = await fetchFromDataBase(listRoutes, \"listRoutes\", \"500\");\r\n  sortAtoZDataByIndex(routeList, \"routeStart\");\r\n  return routeList;\r\n};\r\n\r\nexport const fetchStanding = async () => {\r\n  let standList = await fetchFromDataBase(\r\n    listStandings,\r\n    \"listStandings\",\r\n    \"5000\"\r\n  );\r\n  let noDelete = standList.filter((stand) => stand[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  return sortedData;\r\n};\r\n\r\nexport const fetchDoughs = async () => {\r\n  let dough = await fetchFromDataBase(listDoughs, \"listDoughs\", \"1000\");\r\n  return dough;\r\n};\r\n\r\nexport const fetchDoughComponents = async () => {\r\n  let doughComponents = await fetchFromDataBase(\r\n    listDoughComponents,\r\n    \"listDoughComponents\",\r\n    \"1000\"\r\n  );\r\n  return doughComponents;\r\n};\r\n\r\nexport const fetchAltPricing = async () => {\r\n  let altPricing = await fetchFromDataBase(\r\n    listAltPricings,\r\n    \"listAltPricings\",\r\n    \"1000\"\r\n  );\r\n  return altPricing;\r\n};\r\n\r\nexport const fetchNotes = async () => {\r\n  let notes = await fetchFromDataBase(listNotess, \"listNotess\", \"1000\");\r\n  return notes;\r\n};\r\n\r\nexport const fetchOrders = async () => {\r\n  \r\n\r\n  let ordList = await fetchFromDataBaseWithFilter(\r\n    listOrders,\r\n    \"listOrders\",\r\n    \"5000\"\r\n    \r\n  );\r\n  let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n  \r\n  return sortedData;\r\n};\r\n\r\nexport const promisedData = (setIsLoading) => {\r\n  \r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchData(setIsLoading));\r\n  });\r\n \r\n  return all;\r\n};\r\n\r\nconst fetchData = async (setIsLoading) => {\r\n  setIsLoading(true);\r\n \r\n  console.log(\"Fetching Product Info\")\r\n  let products = await fetchProducts();\r\n  console.log(\"Fetching Customer Info\")\r\n  let customers = await fetchCustomers();\r\n  console.log(\"Fetching Route Info\")\r\n  let routes = await fetchRoutes();\r\n  console.log(\"Fetching Standing Info\")\r\n  let standing = await fetchStanding();\r\n  console.log(\"Fetching Order Info\")\r\n  let orders = await fetchOrders();\r\n  console.log(\"Fetching Dough Info\")\r\n  let doughs = await fetchDoughs();\r\n  console.log(\"Fetching Dough Components Info\")\r\n  let doughComponents = await fetchDoughComponents();\r\n  console.log(\"Fetching AltPricing Info\")\r\n  let altPricing = await fetchAltPricing();\r\n  let data = [\r\n    products,\r\n    customers,\r\n    routes,\r\n    standing,\r\n    orders,\r\n    doughs,\r\n    doughComponents,\r\n    altPricing\r\n  ];\r\n  setIsLoading(false);\r\n  \r\n  return data;\r\n};\r\n\r\nexport const notesData = (setIsLoading) => {\r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchNotesData(setIsLoading));\r\n  });\r\n  return all;\r\n};\r\n\r\nconst fetchNotesData = async (setIsLoading) => {\r\n  setIsLoading(true);\r\n  let notes = await fetchNotes();\r\n  setIsLoading(false);\r\n  if (!notes) {\r\n    return [];\r\n  } else {\r\n    return notes;\r\n  }\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js",["798","799"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["800"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listRoutes } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Route List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedRoute(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {routes && (\r\n          <DataTable\r\n            value={routes}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedRoute}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"routeName\"\r\n              header=\"Routes\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["801"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, [zones]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n\r\n      setZones(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedZone(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {zones && (\r\n          <DataTable\r\n            value={zones}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedZone}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"zoneName\"\r\n              header=\"Zones\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["802","803"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n`;\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nconst hubDepart = [{ RouteDepart: \"Prado\" }, { RouteDepart: \"Carlton\" }];\r\n\r\nconst hubArrive = [{ RouteArrive: \"Prado\" }, { RouteArrive: \"Carlton\" }];\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const fullZones = useRef();\r\n\r\n  const [days, setDays] = useState([]);\r\n\r\n  const onDayChange = (e) => {\r\n    let selectedDays = [...days];\r\n    if (e.checked) selectedDays.push(e.value);\r\n    else selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n\r\n    let itemToUpdate = clonedeep(selectedRoute);\r\n    itemToUpdate[\"RouteSched\"] = selectedDays;\r\n    setSelectedRoute(itemToUpdate);\r\n    setDays(selectedDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTarget(selectedRoute[\"RouteServe\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    setDays(selectedRoute[\"RouteSched\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    let parsedZones = [];\r\n    if (fullZones.current) {\r\n      parsedZones = fullZones.current.filter(\r\n        (full) => !selectedRoute[\"RouteServe\"].includes(full)\r\n      );\r\n    }\r\n    setSource(parsedZones);\r\n  }, [selectedRoute]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n      let mappedNoDelete = noDelete.map((item) => item[\"zoneName\"]);\r\n      fullZones.current = mappedNoDelete;\r\n      setSource(mappedNoDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setSelectedRoute(setPickValue(event, selectedRoute));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> Route Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"zoneName\"> Route Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"routeName\"\r\n          placeholder={selectedRoute.routeName}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n          }\r\n          onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeStart\"\r\n            placeholder={selectedRoute.routeStart}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeTime\"\r\n            placeholder={selectedRoute.routeTime}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteDepart\"\r\n            optionLabel=\"RouteDepart\"\r\n            options={hubDepart}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteArrive\"\r\n            optionLabel=\"RouteArrive\"\r\n            options={hubArrive}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"\r\n            }\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <WeekWrapper>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb1\"\r\n            value=\"1\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"1\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb1\" className=\"p-checkbox-label\">\r\n            Sun\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb2\"\r\n            value=\"2\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"2\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb2\" className=\"p-checkbox-label\">\r\n            Mon\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"3\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"3\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Tues\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"4\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"4\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Wed\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"5\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"5\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Thurs\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"6\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"6\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Fri\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"7\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"7\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Sat\r\n          </label>\r\n        </div>\r\n      </WeekWrapper>\r\n      <PickList\r\n        sourceHeader=\"All Zones\"\r\n        targetHeader=\"Served By This Route\"\r\n        source={source}\r\n        target={selectedRoute[\"RouteServe\"]}\r\n        itemTemplate={itemTemplate}\r\n        onChange={onChange}\r\n        sourceStyle={{ height: \"250px\" }}\r\n        targetStyle={{ height: \"250px\" }}\r\n      ></PickList>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js",["804","805","806","807","808","809","810"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport { compileOrderList } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  sortAtoZDataByIndex,\r\n  sortZtoADataByIndex,\r\n} from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n\r\n  box-sizing: border-box;\r\n`;\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\nlet yesterday = todayPlus()[4];\r\nlet weekAgo = todayPlus()[5];\r\n\r\nconst SelectDate = ({ database, dailyInvoices, setDailyInvoices }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n\r\n  const [pickedCustomer, setPickedCustomer] = useState();\r\n\r\n  useEffect(() => {\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-dd-MM\"));\r\n  };\r\n\r\n  const exportCSV = async () => {\r\n    let data = [];\r\n\r\n    let dailyInvoices = orders.filter(\r\n      (ord) => ord.delivDate === convertDatetoBPBDate(delivDate)\r\n    );\r\n\r\n    for (let daily of dailyInvoices) {\r\n      try {\r\n        if (\r\n          customers[\r\n            customers.findIndex((custo) => custo.custName === daily.custName)\r\n          ].invoicing !== \"daily\"\r\n        ) {\r\n          daily[\"invoicing\"] = \"none\";\r\n        } else {\r\n          daily[\"invoicing\"] = \"daily\";\r\n        }\r\n      } catch {\r\n        daily[\"invoicing\"] = \"daily\";\r\n      }\r\n    }\r\n\r\n    dailyInvoices = dailyInvoices.filter(\r\n      (daily) => daily.invoicing === \"daily\"\r\n    );\r\n\r\n    let todayDay = DateTime.now().setZone(\"America/Los_Angeles\").weekdayLong;\r\n\r\n    if (todayDay) {\r\n      for (let ord of orders) {\r\n        try {\r\n          if (\r\n            customers[\r\n              customers.findIndex((custo) => custo.custName === ord.custName)\r\n            ].invoicing === \"weekly\"\r\n          ) {\r\n            ord[\"invoicing\"] = \"weekly\";\r\n          } else {\r\n            ord[\"invoicing\"] = \"none\";\r\n          }\r\n        } catch {\r\n          ord[\"invoicing\"] = \"none\";\r\n        }\r\n      }\r\n\r\n      let weeklyOrders = orders.filter(\r\n        (ord) =>\r\n          ord.invoicing === \"weekly\" &&\r\n          (ord.delivDate === convertDatetoBPBDate(todayPlus()[0]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[4]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[6]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[7]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[8]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[9]) ||\r\n            ord.delivDate === convertDatetoBPBDate(todayPlus()[10]))\r\n      );\r\n\r\n      for (let stand of standing) {\r\n        try {\r\n          if (\r\n            customers[\r\n              customers.findIndex((custo) => custo.custName === stand.custName)\r\n            ].invoicing === \"weekly\"\r\n          ) {\r\n            stand[\"invoicing\"] = \"weekly\";\r\n          } else {\r\n            stand[\"invoicing\"] = \"none\";\r\n          }\r\n        } catch {\r\n          stand[\"invoicing\"] = \"none\";\r\n        }\r\n      }\r\n\r\n      let convertedDailyStandList = [];\r\n\r\n      let builtDailyStandList = standing.filter(\r\n        (stand) => stand.isStand === true && stand.invoicing === \"daily\"\r\n      );\r\n\r\n      let dateSplit = todayPlus()[0].split(\"-\");\r\n      let dayOfWeek = DateTime.local(\r\n        Number(dateSplit[0]),\r\n        Number(dateSplit[1]),\r\n        Number(dateSplit[2])\r\n      ).weekdayShort;\r\n      let toAddToConvertedStandList = builtDailyStandList.map((order) => ({\r\n        id: null,\r\n        version: order[\"_version\"],\r\n        qty: order[dayOfWeek],\r\n        prodName: order[\"prodName\"],\r\n        custName: order[\"custName\"],\r\n\r\n        isWhole: true,\r\n        delivDate: convertDatetoBPBDate(todayPlus()[0]),\r\n        timeStamp: order[\"timeStamp\"],\r\n        SO: order[dayOfWeek],\r\n      }));\r\n      for (let item of toAddToConvertedStandList) {\r\n        convertedDailyStandList.push(item);\r\n      }\r\n\r\n      let convertedStandList = [];\r\n      let dateArray = [\r\n        todayPlus()[0],\r\n        todayPlus()[4],\r\n        todayPlus()[6],\r\n        todayPlus()[7],\r\n        todayPlus()[8],\r\n        todayPlus()[9],\r\n        todayPlus()[10],\r\n      ];\r\n      let builtStandList = standing.filter(\r\n        (stand) => stand.isStand === true && stand.invoicing === \"weekly\"\r\n      );\r\n\r\n      for (let d of dateArray) {\r\n        let dateSplit = d.split(\"-\");\r\n        let dayOfWeek = DateTime.local(\r\n          Number(dateSplit[0]),\r\n          Number(dateSplit[1]),\r\n          Number(dateSplit[2])\r\n        ).weekdayShort;\r\n        let toAddToConvertedStandList = builtStandList.map((order) => ({\r\n          id: null,\r\n          version: order[\"_version\"],\r\n          qty: order[dayOfWeek],\r\n          prodName: order[\"prodName\"],\r\n          custName: order[\"custName\"],\r\n\r\n          isWhole: true,\r\n          delivDate: convertDatetoBPBDate(d),\r\n          timeStamp: order[\"timeStamp\"],\r\n          SO: order[dayOfWeek],\r\n        }));\r\n        console.log(\"toAdd\", toAddToConvertedStandList);\r\n        for (let item of toAddToConvertedStandList) {\r\n          convertedStandList.push(item);\r\n        }\r\n      }\r\n      let fullOrders = compileOrderList(dailyInvoices, convertedDailyStandList);\r\n      if (todayDay === \"Sunday\") {\r\n        fullOrders = compileOrderList(fullOrders, weeklyOrders);\r\n        fullOrders = compileOrderList(fullOrders, convertedStandList);\r\n      }\r\n\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      console.log(\"fullOrders\",fullOrders)\r\n\r\n      fullOrders = fullOrders.filter((ord) => ord.qty > 0);\r\n\r\n      sortZtoADataByIndex(fullOrders, \"delivDate\");\r\n      sortAtoZDataByIndex(fullOrders, \"custName\");\r\n      console.log(\"fullOrders\", fullOrders);\r\n\r\n      for (let ord of fullOrders) {\r\n        \r\n        \r\n        let ddate = convertDatetoBPBDate(delivDate);\r\n        let dueDate = convertDatetoBPBDate(\r\n          DateTime.now()\r\n            .setZone(\"America/Los_Angeles\")\r\n            .plus({ days: 15 })\r\n            .toString()\r\n            .split(\"T\")[0]\r\n        );\r\n        let custIndex = customers.findIndex(\r\n          (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n        );\r\n\r\n        let prodIndex = products.findIndex(\r\n          (prod) => prod[\"prodName\"] === ord[\"prodName\"]\r\n        );\r\n\r\n        if (!ord.rate) {\r\n          ord.rate = products[prodIndex].wholePrice;\r\n        }\r\n        let nick\r\n        nick = custIndex > -1 ? customers[custIndex].nickName : \"\";\r\n        ord.invNum = newDate+nick\r\n        let qty = custIndex > -1 ? ord.qty : 0;\r\n        let BillAddrLine1 = custIndex > -1 ? customers[custIndex].addr1 : \"\";\r\n        let BillAddrLine2 = custIndex > -1 ? customers[custIndex].addr2 : \"\";\r\n        let BillAddrCity = custIndex > -1 ? customers[custIndex].city : \"\";\r\n        let PostalCode = custIndex > -1 ? customers[custIndex].zip : \"\";\r\n        let ponote;\r\n        try {\r\n          ponote =\r\n            orders[\r\n              orders.findIndex(\r\n                (order) =>\r\n                  order.delivDate === delivDate &&\r\n                  order.custName === ord.custName\r\n              )\r\n            ].PONote;\r\n        } catch {\r\n          ponote = \"na\";\r\n        }\r\n\r\n        let newEntry = [\r\n          ord.invNum,\r\n          ord.custName,\r\n          ddate,\r\n          dueDate,\r\n          ord.delivDate,\r\n          \"net15\",\r\n          \"Wholesale\",\r\n          BillAddrLine1,\r\n          BillAddrLine2,\r\n          \"\",\r\n          BillAddrCity,\r\n          \"CA\",\r\n          PostalCode,\r\n          ponote,\r\n          true,\r\n          ord.prodName,\r\n          ord.prodName,\r\n          qty,\r\n          ord.rate,\r\n          \"Y\",\r\n        ];\r\n        console.log(\"newEntry\", newEntry);\r\n        data.push(newEntry);\r\n      }\r\n\r\n      data = data.filter((dat) => dat[17] > 0);\r\n\r\n      /*\r\n      \r\n      //  Create weeklyInvoices\r\n      //  Append orders to data similar to weekly but with attention to delivDate and fulfill date\r\n\r\n\r\n      */\r\n    }\r\n\r\n    //  Sort data by deliveryDate and then customer\r\n\r\n    var csv =\r\n      \"RefNumber,Customer,TxnDate,DueDate,ShpDate,SalesTerm,Class,BillAddrLine1,BillAddrLine2,BillAddrLine3,BillAddrCity,BillAddrState,BillAddrPostalCode,Msg,AllowOnlineACHPayment,LineItem,LineDescrip,LineQty,LineUnitPrice,LineTaxable\\n\";\r\n    data.forEach(function (row) {\r\n      csv += row.join(\",\");\r\n      csv += \"\\n\";\r\n    });\r\n\r\n    var hiddenElement = document.createElement(\"a\");\r\n    hiddenElement.href = \"data:text/csv;charset=utf-8,\" + encodeURI(csv);\r\n    hiddenElement.target = \"_blank\";\r\n    hiddenElement.download = `${delivDate}invoiceExport.csv`;\r\n    hiddenElement.click();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <div className=\"p-field p-col-12 p-md-4\">\r\n          <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n          <Calendar\r\n            id=\"delivDate\"\r\n            placeholder={convertDatetoBPBDate(delivDate)}\r\n            dateFormat=\"mm/dd/yy\"\r\n            onChange={(e) => setDate(e.value)}\r\n          />\r\n        </div>\r\n\r\n        <Button className=\"p-button-success\" onClick={exportCSV}>\r\n          EXPORT CSV\r\n        </Button>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectDate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js",["811","812","813","814"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  buildCustList,\r\n  buildInvList,\r\n  attachInvoiceOrders,\r\n  formatter,\r\n} from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { ExpandedBillingRows } from \"./Parts/ExpandedBillingRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nconst BillingGrid = ({\r\n  database,\r\n  nextInv,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  zones,\r\n}) => {\r\n  const [products, customers, routes, standing, orders,d,dd,altPricing] = database;\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { setIsLoading, reload, setReload } = useContext(ToggleContext);\r\n \r\n  useEffect(() => {\r\n    try {\r\n      let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n      let buildStand = buildStandList(\"*\", delivDate, standing);\r\n      let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n      let custListArray = buildCustList(fullOrder);\r\n      let invList = buildInvList(custListArray, customers, delivDate);\r\n      \r\n      let invOrders = attachInvoiceOrders(\r\n        invList,\r\n        fullOrder,\r\n        products,\r\n        altPricing,\r\n        customers,\r\n        zones,\r\n        \"daily\"\r\n      );\r\n\r\n      // construct setWeeklyInvoices\r\n\r\n      setDailyInvoices(invOrders);\r\n      console.log(\"invOrders\",invOrders)\r\n    } catch {\r\n      console.log(\"Whoops\");\r\n    }\r\n  }, [delivDate, database, nextInv, zones]);\r\n\r\n  \r\n\r\n  const calcSumTotal = (data) => {\r\n    let sum = 0;\r\n    try {\r\n      for (let i of data) {\r\n        sum = sum + Number(i.qty) * Number(i.rate);\r\n      }\r\n    } catch {\r\n      console.log(\"No data to calc.\");\r\n    }\r\n    sum = formatter.format(sum);\r\n\r\n    return <div>{sum}</div>;\r\n  };\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedBillingRows\r\n        data={data}\r\n        dailyInvoices={dailyInvoices}\r\n        setDailyInvoices={setDailyInvoices}\r\n        products={products}\r\n        altPricing={altPricing}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n        delivDate={delivDate}\r\n        orders={orders}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={dailyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"invNum\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n          <Column field=\"invNum\" header=\"Invoice#\" />\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n          <Column header=\"total\" body={(e) => calcSumTotal(e.orders)} />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(e.invNum, dailyInvoices, setDailyInvoices,orders, delivDate, setIsLoading, reload, setReload)\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["815","816"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { listDoughs } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setDropDownValue,\r\n  \r\n} from \"../../../helpers/formHelpers\";\r\n\r\n\r\n\r\n\r\n\r\nconst bakedWheres = [\r\n  { bakedWhere: \"Prado\" },\r\n  { bakedWhere: \"Carlton\" },\r\n  { bakedWhere: \"Mixed\" },\r\n];\r\n\r\nconst Baking = ({ selectedProduct, setSelectedProduct }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n  const [doughTypes, setDoughTypes ] = useState()\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  const [ fullProducts, setFullProducts ] = useState([])\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs();\r\n    setIsLoading(false);\r\n  }, []);\r\n  \r\n  const fetchDoughs = async () => {\r\n    try {\r\n      const doughData = await API.graphql(\r\n        graphqlOperation(listDoughs, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const doughList = doughData.data.listDoughs.items;\r\n      sortAtoZDataByIndex(doughList, \"doughName\");\r\n      let noDelete = doughList.filter((dough) => dough[\"_deleted\"] !== true);\r\n      let doughsToAdd = noDelete.map(no => ({doughType: no.doughName}))\r\n      doughsToAdd.push({doughType: \"NA\"})\r\n      setDoughTypes(doughsToAdd);\r\n  \r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    let stageProducts = products.map(prod => ({depends: prod[\"prodName\"]}))\r\n    stageProducts.push({depends: \"NONE\"})\r\n    \r\n    setFullProducts(stageProducts)\r\n  },[])\r\n  \r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-user\"></i> Baking Info\r\n      </h2>\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"doughType\">Dough Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"doughType\"\r\n          optionLabel=\"doughType\"\r\n          options={doughTypes}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.doughType : \"Select Dough Type\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakedWhere\">Baked Where</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"bakedWhere\"\r\n          optionLabel=\"bakedWhere\"\r\n          options={bakedWheres}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.bakedWhere : \"Baked Where\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"leadTime\">Lead Days</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"leadTime\"\r\n          placeholder={selectedProduct.leadTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"readyTime\">Guaranteed Ready (0-24)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"readyTime\"\r\n          placeholder={selectedProduct.readyTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"forBake\">Name for Bakers</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"forBake\"\r\n          placeholder={selectedProduct.forBake}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"batchSize\">Batch Size</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"batchSize\"\r\n          placeholder={selectedProduct.batchSize}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakeExtra\">Bake Extra</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"bakeExtra\"\r\n          placeholder={selectedProduct.bakeExtra}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"weight\">Dough Weight (lbs.)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"weight\"\r\n          placeholder={selectedProduct.weight}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"depends\">Dependant Product</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"depends\"\r\n          optionLabel=\"depends\"\r\n          options={fullProducts}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.depends : \"Depends On\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeAllOrders.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js",["817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840"],"import {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport { createColumns } from \"../../../helpers/delivGridHelpers\";\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst getProdNickNames = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  \r\n  let fullNames = Array.from(\r\n    new Set(\r\n      orders\r\n        .filter(\r\n          (ord) =>\r\n            !customers.map((cust) => cust.custName).includes(ord.custName) &&\r\n            ord.delivDate === convertDatetoBPBDate(today) &&\r\n            ord.route === loc\r\n        )\r\n        .map((fil) => fil.prodName)\r\n    )\r\n  );\r\n  let nickNames = fullNames.map(\r\n    (fil) =>\r\n      products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n  );\r\n  return nickNames;\r\n};\r\n\r\nconst getCustNames = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  return Array.from(\r\n    new Set(\r\n      orders\r\n        .filter(\r\n          (ord) =>\r\n            !customers.map((cust) => cust.custName).includes(ord.custName) &&\r\n            ord.delivDate === convertDatetoBPBDate(today) &&\r\n            ord.route === loc\r\n        )\r\n        .map((fil) => fil.custName)\r\n    )\r\n  );\r\n};\r\n\r\nconst makeSpecialColumns = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let filteredOrders = getProdNickNames(database, loc);\r\n  filteredOrders = createColumns(filteredOrders);\r\n  return filteredOrders;\r\n};\r\n\r\nconst makeSpecialOrders = (database, loc) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let prodNames = getProdNickNames(database, loc);\r\n  let custNames = getCustNames(database, loc);\r\n  let orderArray = [];\r\n  for (let cust of custNames) {\r\n    let custItem = {};\r\n    custItem = {\r\n      customer: cust,\r\n    };\r\n    for (let prod of prodNames) {\r\n      let prodFullName =\r\n        products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n     \r\n      try {\r\n        custItem[prod] =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) =>\r\n                ord.custName === cust &&\r\n                ord.prodName === prodFullName &&\r\n                ord.delivDate === convertDatetoBPBDate(today) &&\r\n                ord.route === loc\r\n            )\r\n          ].qty;\r\n      } catch {\r\n        custItem[prod] = 0;\r\n      }\r\n    }\r\n    orderArray.push(custItem);\r\n  }\r\n  return orderArray;\r\n};\r\n\r\nexport default class ComposeSpecialOrders {\r\n  returnSpecialNorthColumns = (database) => {\r\n    let columns = this.getSpecialNorthColumns(database);\r\n    return {\r\n      columns: columns,\r\n    };\r\n  };\r\n\r\n  getSpecialNorthColumns(database) {\r\n    let specialNorthColumns = makeSpecialColumns(database, \"atownpick\");\r\n    return specialNorthColumns;\r\n  }\r\n\r\n  returnSpecialSouthColumns = (database) => {\r\n    let columns = this.getSpecialSouthColumns(database);\r\n    return {\r\n      columns: columns,\r\n    };\r\n  };\r\n\r\n  getSpecialSouthColumns(database) {\r\n    let specialSouthColumns = makeSpecialColumns(database, \"slopick\");\r\n    return specialSouthColumns;\r\n  }\r\n\r\n  returnBPBNSpecialOrders = (database) => {\r\n    let specialOrders = this.getBPBNSpecialOrders(database);\r\n    return {\r\n      specialOrders: specialOrders,\r\n    };\r\n  };\r\n\r\n  getBPBNSpecialOrders(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let BPBNSpecialOrders = makeSpecialOrders(database, \"atownpick\");\r\n    return BPBNSpecialOrders;\r\n  }\r\n\r\n  returnBPBSSpecialOrders = (database) => {\r\n    let specialOrders = this.getBPBSSpecialOrders(database);\r\n    return {\r\n      specialOrders: specialOrders,\r\n    };\r\n  };\r\n\r\n  getBPBSSpecialOrders(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let BPBSSpecialOrders = makeSpecialOrders(database, \"slopick\");\r\n    return BPBSSpecialOrders;\r\n  }\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js",["841","842","843","844","845","846"],"\r\n\r\nimport { getFullOrders } from \"../../../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../../../helpers/delivGridHelpers\";\r\nimport { sortAtoZDataByIndex, sortZtoADataByIndex } from \"../../../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"./utils\";\r\n\r\n\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n        for (let rte of routes) {\r\n          for (let grd of prodGrid) {\r\n          \r\n            let dayNum = calcDayNum(delivDate);\r\n            \r\n            if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n              continue;\r\n            } else {\r\n              if (\r\n                routeRunsThatDay(rte, dayNum) &&\r\n                productCanBeInPlace(grd, routes, customers, rte) &&\r\n                productReadyBeforeRouteStarts(\r\n                  products,\r\n                  customers,\r\n                  routes,\r\n                  grd,\r\n                  rte\r\n                ) &&\r\n                customerIsOpen(customers, grd, routes, rte)\r\n              ) {\r\n                grd.route = rte.routeName;\r\n                grd.routeDepart = rte.RouteDepart;\r\n                grd.routeStart = rte.routeStart;\r\n                grd.routeServe = rte.RouteServe;\r\n              }\r\n\r\n\r\n            }\r\n          }\r\n        }\r\n        for (let grd of prodGrid) {\r\n          if (grd.zone===\"slopick\" || grd.zone===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.zone===\"atownpick\" || grd.zone===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"slopick\" || grd.route===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.route===\"atownpick\" || grd.route===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"deliv\"){\r\n            grd.route=\"NOT ASSIGNED\"\r\n          }\r\n        }\r\n\r\n   \r\n    return prodGrid\r\n}\r\n\r\n\r\n\r\nexport default class ComposeProductGrid {\r\n  returnProdGrid = (database, delivDate) => {\r\n    let prodGrid = this.getProdGrid(database, delivDate);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      prodGrid: prodGrid,     \r\n    };\r\n  };\r\n\r\n  getProdGrid(database, delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodGrid = getFullOrders(delivDate, database);\r\n    \r\n    prodGrid = zerosDelivFilter(prodGrid, delivDate, database);\r\n    \r\n    prodGrid = buildGridOrderArray(prodGrid, database);\r\n   \r\n    prodGrid = addRoutes(delivDate, prodGrid, database);\r\n    \r\n    //prodGrid = addAttr(database, prodGrid);\r\n    for (let grd of prodGrid) {\r\n      \r\n      try{grd[\"delivOrder\"] = customers[customers.findIndex(cust => cust.custName === grd.custName)].delivOrder\r\n      \r\n      \r\n    } catch {\r\n      console.log(\"must be retail\")\r\n    }\r\n    sortAtoZDataByIndex(prodGrid,\"delivOrder\")\r\n    \r\n      \r\n    }\r\n   \r\n    return prodGrid;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js",["847"],"import React, { useEffect } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ orderList, setRouteList, setRoute, routeList, database }) => {\r\n  \r\n  useEffect(() => {\r\n    if (orderList) {\r\n      let rtList = orderList.map((ord) => ord[\"route\"]);\r\n      let setRtList = new Set(rtList);\r\n      let rtListArray = Array.from(setRtList);\r\n      rtListArray = rtListArray.map((rt) => ({ route: rt }));\r\n    \r\n      setRouteList(rtListArray);\r\n    }\r\n  }, [orderList, database]);\r\n\r\n  const handleSelection = (e) => {\r\n    setRoute(e.value.route);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        <DataTable\r\n          value={routeList}\r\n          className=\"p-datatable-striped\"\r\n          selectionMode=\"single\"\r\n          onSelectionChange={handleSelection}\r\n          dataKey=\"id\"\r\n        >\r\n          <Column field=\"route\" header=\"Routes\"></Column>\r\n        </DataTable>\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js",["848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { formatter } from \"../../../../helpers/billingGridHelpers\";\r\n\r\n\r\nimport {\r\n  buildProductArray,\r\n  createRouteGridColumns,\r\n  createColumns,\r\n  createListOfCustomers,\r\n  createQtyGrid,\r\n} from \"../../../../helpers/delivGridHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { sortAtoZDataByIndex } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-content: flex-end;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteGrid = ({ route,\r\n  orderList,\r\n  altPricing,\r\n  database,\r\n  delivDate }) => {\r\n\r\n  const dt = useRef(null);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const constructColumns = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let columns;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n      let listOfProducts = buildProductArray(buildGridSetUp, products);\r\n\r\n      columns = createRouteGridColumns(listOfProducts);\r\n    }\r\n  \r\n    return columns;\r\n  };\r\n\r\n  const constructData = () => {\r\n    let qtyGrid;\r\n    if (orderList) {\r\n     \r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter(\r\n        (order) => order[\"route\"] === route\r\n      );\r\n      let listOfCustomers = createListOfCustomers(gridToEdit, route);\r\n      \r\n      qtyGrid = createQtyGrid(listOfCustomers, gridToEdit);\r\n     \r\n    }\r\n    \r\n    return qtyGrid;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let col = constructColumns();\r\n    let dat = constructData();\r\n   \r\n    //sortAtoZDataByIndex(dat,\"delivOrder\")\r\n    \r\n    setColumns(col ? col : []);\r\n    setData(dat ? dat : []);\r\n  }, [route, orderList ]);\r\n\r\n  const dynamicColumns = columns.map((col, i) => {\r\n    return (\r\n      <Column\r\n        npmkey={col.field}\r\n        field={col.field}\r\n        header={col.header}\r\n        style={col.width}\r\n      />\r\n    );\r\n  });\r\n\r\n  const exportColumns = columns.map((col) => ({\r\n    title: col.header,\r\n    dataKey: col.field,\r\n  }));\r\n  \r\n  const exportListPdf = () => {\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(10, 20, \"Delivery Sheet\");\r\n    doc.autoTable({\r\n      columns: exportColumns,\r\n      body: data,\r\n      margin: { top: 26 },\r\n      styles: { fontSize: 12 },\r\n    });\r\n    doc.save(\"products.pdf\");\r\n  };\r\n\r\n  const ratePull = (ord) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n        ].wholePrice;\r\n      for (let alt of altPricing) {\r\n        if (\r\n          alt[\"custName\"] === ord[\"custName\"] &&\r\n          alt[\"prodName\"] === ord[\"prodName\"]\r\n        ) {\r\n          ratePull = alt[\"wholePrice\"];\r\n        }\r\n      }\r\n      return ratePull\r\n  }\r\n  \r\n\r\n  const exportInvPdf = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let invListFilt = orderList.filter((ord) => ord.route === route);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    const doc = new jsPDF(\"0\", \"mm\", \"a4\");\r\n\r\n    let init = true;\r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      !init && doc.addPage(\"0\", \"mm\", \"a4\");\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      init = false;\r\n    }\r\n  }\r\n    doc.save(\"invoices.pdf\");\r\n  };\r\n\r\n  const exportFullPdf = () => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let init = true;\r\n    let routeList = Array.from(new Set(orderList.map((ord) => ord.route)));\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    for (let rt of routeList) {\r\n      let columns;\r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n\r\n        let gridToEdit = buildGridSetUp.filter((grd) => grd[\"route\"] === rt);\r\n        let listOfProducts = buildProductArray(gridToEdit, products);\r\n\r\n        columns = createRouteGridColumns(listOfProducts);\r\n      }\r\n      columns = columns.map((col) => ({\r\n        title: col.header,\r\n        dataKey: col.field,\r\n      }));\r\n      let qtyGrid;\r\n     \r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n        \r\n        \r\n        let listOfCustomers = createListOfCustomers(buildGridSetUp, rt);\r\n        qtyGrid = createQtyGrid(listOfCustomers, buildGridSetUp);\r\n        \r\n      }\r\n\r\n      !init && doc.addPage(\"a4\",'l');\r\n      doc.setFontSize(20);\r\n      doc.text(10, 20, rt);\r\n      doc.autoTable({\r\n        columns: columns,\r\n        body: qtyGrid,\r\n        margin: { top: 26 },\r\n        styles: { fontSize: 12 },\r\n      });\r\n  \r\n      let invListFilt = orderList.filter((ord) => ord.route === rt);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    \r\n\r\n    \r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      doc.addPage('a4','portrait');\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n    }}\r\n      \r\n    init = false\r\n    }\r\n    doc.save(\"invoices.pdf\");\r\n    \r\n  };\r\n  \r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportListPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Delivery List\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportInvPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Invoices\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportFullPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Full Delivery Lists\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n    \r\n  const onRowReorder = (e) => {\r\n    setData(e.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable\r\n          header={header}\r\n          ref={dt}\r\n          className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n          value={data}\r\n          resizableColumns\r\n          columnResizeMode=\"fit\"\r\n          onRowReorder={onRowReorder}\r\n        >\r\n          <Column rowReorder style={{ width: \"3em\" }} />\r\n          {dynamicColumns}\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js",["864","865","866","867","868"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addRetailBagQty\r\n} from \"./utils\";\r\n\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeRetailBags = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.prodName))\r\n  ).map((make) => ({\r\n    prodName: make,\r\n    qty: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getRetailBags = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\n\r\n\r\nexport default class ComposeRetailBags {\r\n  returnRetailBags = (database) => {\r\n    let retailBags = this.getRetailBags(database);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      retailBags: retailBags,     \r\n    };\r\n  };\r\n\r\n  getRetailBags(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let retailBags = makeRetailBags(products, this.retailBagsFilter);\r\n    let fullOrdersToday = getRetailBags(today, database);\r\n    for (let ret of retailBags) {\r\n      addRetailBagQty(ret, fullOrdersToday);\r\n    }\r\n    return retailBags;\r\n  }\r\n\r\n  retailBagsFilter = (prod) => {\r\n    let fil =\r\n      prod.packGroup === \"retail\"\r\n    return fil;\r\n  };\r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeDough.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js",["869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889"],"import {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  createColumns,\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../ByRoute/Parts/utils/utils\";\r\nimport { first } from \"lodash\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\nlet convertedToday = convertDatetoBPBDate(today);\r\nlet convertedTomorrow = convertDatetoBPBDate(tomorrow);\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nconst getProdNickNames = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  let fullNames = Array.from(\r\n    new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.prodName))\r\n  );\r\n  let nickNames = fullNames.map(\r\n    (fil) =>\r\n      products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n  );\r\n  return nickNames;\r\n};\r\n\r\nconst getCustNames = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  return Array.from(\r\n    new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.custName))\r\n  );\r\n};\r\n\r\n\r\n\r\nconst getOrdersList = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder\r\n};\r\n\r\nconst makeOrders = (delivDate, database, filter) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let prodNames = getProdNickNames(delivDate, database, filter);\r\n  let custNames = getCustNames(delivDate, database, filter);\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n\r\n  let orderArray = [];\r\n  for (let cust of custNames) {\r\n    let custItem = {};\r\n    custItem = {\r\n      customer: cust,\r\n    };\r\n    for (let prod of prodNames) {\r\n      let prodFullName =\r\n        products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n      try {\r\n        custItem[prod] =\r\n          fullOrder[\r\n            fullOrder.findIndex(\r\n              (ord) => ord.prodName === prodFullName && ord.custName === cust\r\n            )\r\n          ].qty;\r\n      } catch {\r\n        custItem[prod] = null;\r\n      }\r\n    }\r\n    orderArray.push(custItem);\r\n  }\r\n  return orderArray;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport default class ComposeNorthList {\r\n  returnNorthBreakDown = (delivDate, database) => {\r\n    let croixNorth = this.returnCroixNorth(delivDate, database);\r\n    let shelfProdsNorth = this.returnShelfProdsNorth(database);\r\n    let pocketsNorth = this.returnPocketsNorth(database);\r\n    let CarltonToPrado = this.returnCarltonToPrado(database);\r\n    let Baguettes = this.returnBaguettes(database);\r\n    let otherRustics = this.returnOtherRustics(database);\r\n    let retailStuff = this.returnRetailStuff(database);\r\n    let earlyDeliveries = this.returnEarlyDeliveries(database);\r\n    let columnsShelfProdsNorth = this.returnColumnsShelfProdsNorth(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsPocketsNorth = this.returnColumnsPocketsNorth(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsCarltonToPrado = this.returnColumnsCarltonToPrado(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsBaguettes = this.returnColumnsBaguettes(delivDate, database);\r\n    let columnsOtherRustics = this.returnColumnsOtherRustics(\r\n      delivDate,\r\n      database\r\n    );\r\n    let columnsRetailStuff = this.returnColumnsRetailStuff(delivDate, database);\r\n    let columnsEarlyDeliveries = this.returnColumnsEarlyDeliveries(\r\n      delivDate,\r\n      database\r\n    );\r\n\r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      croixNorth: croixNorth,\r\n      shelfProdsNorth: shelfProdsNorth,\r\n      pocketsNorth: pocketsNorth,\r\n      CarltonToPrado: CarltonToPrado,\r\n      Baguettes: Baguettes,\r\n      otherRustics: otherRustics,\r\n      retailStuff: retailStuff,\r\n      earlyDeliveries: earlyDeliveries,\r\n      columnsShelfProdsNorth: columnsShelfProdsNorth,\r\n      columnsPocketsNorth: columnsPocketsNorth,\r\n      columnsCarltonToPrado: columnsCarltonToPrado,\r\n      columnsBaguettes: columnsBaguettes,\r\n      columnsOtherRustics: columnsOtherRustics,\r\n      columnsRetailStuff: columnsRetailStuff,\r\n      columnsEarlyDeliveries: columnsEarlyDeliveries,\r\n    };\r\n  };\r\n\r\n  returnCroixNorth = (delivDate, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let frozensOrdersList = getOrdersList(today, database);\r\n    let frozenToday = frozensOrdersList.filter((frz) =>\r\n      this.frzNorthFilter(frz)\r\n    );\r\n    frozenToday = this.makeAddFrozenQty(frozenToday);\r\n    \r\n    let bakedOrdersList = getOrdersList(tomorrow, database);\r\n    let bakedTomorrow = bakedOrdersList.filter((frz) =>\r\n      this.tomBakeFilter(frz)\r\n    );\r\n    bakedTomorrow = this.makeAddQty(bakedTomorrow);\r\n    \r\n\r\n    let combogrid = this.combineGrids(frozenToday, bakedTomorrow);\r\n    combogrid = this.subtractCurrentStock(products, combogrid)\r\n    combogrid = this.adjustForPackSize(combogrid);\r\n\r\n    for (let combo of combogrid){\r\n      combo.prodNick = combo.prodNick.substring(2)\r\n      combo.bakedNorth = 5\r\n\r\n      let ind = products.findIndex(prod => prod.nickName === combo.prodNick)\r\n      let backporchbakery = products[ind].backporchbakery\r\n      let bpbssetout = products[ind].bpbssetout\r\n      let bpbextra = products[ind].bpbextra\r\n      let diff = bpbssetout\r\n      // diff = BPBS deliv of prod for today\r\n      combo.bakedNorth = (Number(backporchbakery)/2) - (Number(diff) - Number(bpbssetout)) - Number(bpbextra)\r\n      if (combo.bakedNorth < 0){\r\n        combo.bakedNorth = 0\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    \r\n    return combogrid;\r\n  };\r\n\r\n  frzNorthFilter = (ord) => {\r\n    return (\r\n      ord.packGroup === \"frozen pastries\" &&\r\n      ord.doughType === \"Croissant\" &&\r\n      (ord.route === \"Pick up Carlton\" || ord.routeDepart === \"Carlton\")\r\n    );\r\n  };\r\n\r\n  tomBakeFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Mixed\") &&\r\n      ord.packGroup === \"baked pastries\" &&\r\n      ord.doughType === \"Croissant\" &&\r\n      (ord.route === \"Pick up Carlton\" || ord.routeDepart === \"Carlton\")\r\n    );\r\n  };\r\n\r\n  makeAddFrozenQty = (frozenToday) => {\r\n    let makeList = frozenToday.map(frz => frz.prodNick)\r\n    makeList = new Set(makeList)\r\n    makeList = Array.from(makeList)\r\n    makeList = makeList.map((mk) => ({\r\n      prodNick: mk.substring(2),\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList) {\r\n\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n      \r\n\r\n      let qtyToday = frozenToday\r\n        .filter((frz) => make.prodNick === frz.prodNick.substring(2))\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList;\r\n  \r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.prodNick))\r\n    ).map((mk) => ({\r\n      prodNick: mk,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n      \r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.prodNick === frz.prodNick)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  \r\n  };\r\n\r\n  combineGrids = (obj1, obj2) => {\r\n   \r\n    let firstObject = clonedeep(obj1);\r\n    let secondObject = clonedeep(obj2);\r\n    for (let first of firstObject) {\r\n      for (let sec of secondObject) {\r\n        if (first.prodNick === sec.prodNick) {\r\n          first.qty += sec.qty;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let sec of secondObject){\r\n      for (let first of firstObject){\r\n        if (sec.prodNick === first.prodNick){\r\n          sec.qty = first.qty\r\n          continue\r\n        }\r\n      }\r\n      sec.prodNick = \"fr\"+sec.prodNick\r\n    }\r\n\r\n    return secondObject;\r\n  };\r\n\r\n  subtractCurrentStock = (products, grid) => {\r\n    for ( let gr of grid){\r\n      let subQty = products[products.findIndex(prod => prod.nickName === gr.prodNick)].currentStock\r\n      gr.qty -=subQty\r\n    }\r\n    return grid\r\n  }\r\n    \r\n    \r\n    \r\n  \r\n\r\n  adjustForPackSize = (grid) => {\r\n    for ( let gr of grid){\r\n      gr.qty = Math.ceil(gr.qty/12)*12\r\n    }\r\n    return grid\r\n  };\r\n\r\n  returnPocketsNorth = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.pocketsNorthFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  pocketsNorthFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Mixed\") &&\r\n      ord.packGroup !== \"baked pastries\" &&\r\n      ord.route === \"Pick up Carlton\"\r\n    );\r\n  };\r\n\r\n  returnShelfProdsNorth = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.shelfProdsFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  shelfProdsFilter = (ord) => {\r\n    return (\r\n      ord.where.includes(\"Prado\") &&\r\n      ord.packGroup !== \"frozen pastries\" &&\r\n      (ord.routeDepart === \"Carlton\" || ord.route === \"Pick up Carlton\")\r\n    );\r\n  };\r\n\r\n  returnCarltonToPrado = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.CarltonToPradoFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  CarltonToPradoFilter = (ord) => {\r\n    let fil =\r\n      ord.delivDate === convertedToday && ord.route === \"Carlton to Prado\";\r\n\r\n    return fil;\r\n  };\r\n\r\n  returnBaguettes = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.BaguettesFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  BaguettesFilter = (ord) => {\r\n    return (\r\n      ord.prodName === \"Baguette\" &&\r\n      ord.routeDepart !== \"Carlton\" &&\r\n      ord.routeArrive !== \"Carlton\"\r\n    );\r\n  };\r\n\r\n  returnOtherRustics = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.otherRusticsFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  otherRusticsFilter = (ord) => {\r\n    return (\r\n      ord.prodName !== \"Baguette\" &&\r\n      ord.packGroup !== \"retail\" &&\r\n      ord.where.includes(\"Carlton\") &&\r\n      ord.routeDepart === \"Prado\" &&\r\n      (ord.routeStart > 8 || ord.route === \"Pick up SLO\")\r\n    );\r\n  };\r\n\r\n  returnRetailStuff = (database) => {\r\n    let shelfProds = makeOrders(today, database, this.retailStuffFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  retailStuffFilter = (ord) => {\r\n    return ord.packGroup === \"retail\" && ord.routeDepart === \"Prado\";\r\n  };\r\n\r\n  returnEarlyDeliveries = (database) => {\r\n    let shelfProds = makeOrders(tomorrow, database, this.earlyDeliveriesFilter);\r\n    return shelfProds;\r\n  };\r\n\r\n  earlyDeliveriesFilter = (ord) => {\r\n    return (\r\n      ord.routeDepart === \"Prado\" &&\r\n      ord.where.includes(\"Carlton\") &&\r\n      ord.routeStart < 8\r\n    );\r\n  };\r\n\r\n  returnColumnsShelfProdsNorth = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.shelfProdsFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsPocketsNorth = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.pocketsNorthFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsCarltonToPrado = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.CarltonToPradoFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsBaguettes = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.BaguettesFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsOtherRustics = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.otherRusticsFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsRetailStuff = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      delivDate,\r\n      database,\r\n      this.retailStuffFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  returnColumnsEarlyDeliveries = (delivDate, database) => {\r\n    let filteredOrders = getProdNickNames(\r\n      tomorrow,\r\n      database,\r\n      this.earlyDeliveriesFilter\r\n    );\r\n    if (filteredOrders.length > 0) {\r\n      return createColumns(filteredOrders);\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js",["890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport { getFullProdOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addFresh,\r\n  addNeedEarly,\r\n  addShelf,\r\n  addPocketsQty,\r\n} from \"./utils\";\r\nimport { handleFrenchConundrum } from \"./conundrums\";\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeProds = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(\r\n      products\r\n        .filter((prod) => filt(prod))\r\n        .map(\r\n          (prod) =>\r\n            prod.forBake + \"_\" + prod.weight.toString() + \"_\" + prod.doughType\r\n        )\r\n    )\r\n  ).map((make) => ({\r\n    forBake: make.split(\"_\")[0],\r\n    weight: Number(make.split(\"_\")[1]),\r\n    doughType: make.split(\"_\")[2],\r\n    qty: 0,\r\n    makeTotal: 0,\r\n    bagEOD: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getFullMakeOrders = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nconst getFullProdMakeOrders = (delivDate, database) => {\r\n  let fullOrder = getFullProdOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnMakeBreakDown = (database) => {\r\n    let pocketsNorth = this.getPocketsNorth(database);\r\n    let freshProds = this.getFreshProds(database);\r\n    let shelfProds = this.getShelfProds(database);\r\n    let freezerProds = this.getFreezerProds(database);\r\n    let youllBeShort = this.getYoullBeShort(database);\r\n\r\n    [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      pocketsNorth: pocketsNorth,\r\n      freshProds: freshProds,\r\n      shelfProds: shelfProds,\r\n      freezerProds: freezerProds,\r\n      youllBeShort: youllBeShort,\r\n    };\r\n  };\r\n\r\n  getPocketsNorth(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makePocketsNorth = makeProds(products, this.pocketsNorthFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    for (let make of makePocketsNorth) {\r\n      addPocketsQty(make, fullOrdersToday);\r\n    }\r\n    return makePocketsNorth;\r\n  }\r\n\r\n  pocketsNorthFilter = (prod) => {\r\n    let fil =\r\n      prod.bakedWhere.includes(\"Mixed\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreshProds = (database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeFreshProds = makeProds(products, this.freshProdFilter);\r\n\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullMakeOrders(tomorrow, database);\r\n    for (let make of makeFreshProds) {\r\n      addFresh(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n    }\r\n    return makeFreshProds;\r\n  };\r\n\r\n  freshProdFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\";\r\n    return fil;\r\n  };\r\n\r\n  getShelfProds(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeShelfProds = makeProds(products, this.shelfProdsFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tomorrow, database);\r\n  \r\n    for (let make of makeShelfProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n\r\n    return makeShelfProds;\r\n  }\r\n\r\n  shelfProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreezerProds(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeFreezerProds = makeProds(products, this.freezerProdsFilter);\r\n    let fullOrdersToday = getFullMakeOrders(today, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tomorrow, database);\r\n    for (let make of makeFreezerProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n    return makeFreezerProds;\r\n  }\r\n\r\n  freezerProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw === true;\r\n    return fil;\r\n  };\r\n\r\n  getYoullBeShort = (database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let pocketsNorth = this.getPocketsNorth(database)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let shelfProds = this.getShelfProds(database)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let freshProds = this.getFreshProds(database)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let freezerProds = this.getFreezerProds(database)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n\r\n    let weightStr = pocketsNorth.concat(shelfProds, freshProds, freezerProds);\r\n   \r\n    let weightList = Array.from(\r\n      new Set(weightStr.map((weight) => weight.pocketWeight))\r\n    ).map((pock) => ({ pocketWeight: pock, makeTotal: 0 }));\r\n   \r\n    for (let weight of weightList) {\r\n      for (let pocket of weightStr) {\r\n        if (pocket.pocketWeight === weight.pocketWeight) {\r\n          weight.makeTotal = weight.makeTotal + pocket.makeTotal;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let weight of weightList) {\r\n      let availablePockets = products[products.findIndex(\r\n        (prod) =>\r\n          prod.weight === weight.pocketWeight && prod.doughType === \"French\"\r\n      )].preshaped;\r\n      weight.makeTotal = Number(weight.makeTotal)-Number(availablePockets)\r\n      if (weight.makeTotal <= 0){\r\n        weight.makeTotal = ''\r\n      }\r\n    }\r\n\r\n    weightList = weightList.filter(weight => weight.makeTotal !== '')\r\n    return weightList;\r\n  }\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\filters.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\utils.js",["907","908","909","910","911","912","913","914","915","916","917","918"],"import {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"../../logistics/ByRoute/Parts/utils/utils\";\r\n\r\nimport { pocketFilter, whatToMakeFilter, baker1PocketFilter } from \"./filters\";\r\n\r\nimport { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../helpers/delivGridHelpers\";\r\n\r\nimport {\r\n  getFullOrders,\r\n  getFullProdOrders,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const DayOneFilter = (ord, loc) => {\r\n  return (\r\n    ord.where.includes(\"Carlton\") &&\r\n    (ord.packGroup === \"rustic breads\" || ord.packGroup === \"retail\") &&\r\n    ((ord.routeStart >= 8 && ord.routeDepart === \"Prado\") ||\r\n      ord.routeDepart === \"Carlton\" ||\r\n      ord.route === \"Pick up Carlton\" ||\r\n      ord.route === \"Pick up SLO\")\r\n  );\r\n};\r\n\r\nexport const DayTwoFilter = (ord, loc) => {\r\n  return (\r\n    ord.where.includes(\"Carlton\") &&\r\n    (ord.packGroup === \"rustic breads\" || ord.packGroup === \"retail\") &&\r\n    ord.routeStart < 8 &&\r\n    ord.routeDepart === \"Prado\"\r\n  );\r\n};\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, products, customers))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addSetOut = (\r\n  make,\r\n  fullTwoDay,\r\n  fullOrdersTomorrow,\r\n  routes,\r\n  loc\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccTomorrow = 0;\r\n\r\n  let availableRoutes = routes.filter((rt) => rt.RouteDepart === loc);\r\n\r\n  let qtyTomorrow = fullOrdersTomorrow\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        checkZone(full, availableRoutes) === true\r\n    )\r\n    .map((ord) => ord.qty);\r\n  if (qtyTomorrow.length > 0) {\r\n    qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n\r\n    make.qty = qtyAccTomorrow;\r\n  }\r\n};\r\n\r\nexport const addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst checkZone = (full, availableRoutes) => {\r\n  for (let av of availableRoutes) {\r\n    if (av.RouteServe.includes(full.zone)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst update = (order, products, customers) => {\r\n  let atownPick = \"atownpick\";\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\nexport const addRoutes = (delivDate, prodGrid, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of prodGrid) {\r\n      let dayNum = calcDayNum(delivDate);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (\r\n          routeRunsThatDay(rte, dayNum) &&\r\n          productCanBeInPlace(grd, routes, customers, rte) &&\r\n          productReadyBeforeRouteStarts(\r\n            products,\r\n            customers,\r\n            routes,\r\n            grd,\r\n            rte\r\n          ) &&\r\n          customerIsOpen(customers, grd, routes, rte)\r\n        ) {\r\n          grd.route = rte.routeName;\r\n          grd.routeDepart = rte.RouteDepart;\r\n          grd.routeStart = rte.routeStart;\r\n          grd.routeServe = rte.RouteServe;\r\n          grd.routeArrive = rte.RouteArrive;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let grd of prodGrid) {\r\n    if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n      grd.route = \"Pick up SLO\";\r\n    }\r\n    if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n      grd.route = \"Pick up Carlton\";\r\n    }\r\n    if (grd.route === \"deliv\") {\r\n      grd.route = \"NOT ASSIGNED\";\r\n    }\r\n  }\r\n\r\n  return prodGrid;\r\n};\r\n\r\nexport const getOrdersList = (delivDate, database, prod) => {\r\n  let fullOrder;\r\n  if (prod === true) {\r\n    fullOrder = getFullProdOrders(delivDate, database);\r\n  } else {\r\n    fullOrder = getFullOrders(delivDate, database);\r\n  }\r\n\r\n  fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n  fullOrder = buildGridOrderArray(fullOrder, database);\r\n  fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  return fullOrder;\r\n};\r\n\r\nexport const makePocketQty = (bakedTomorrow) => {\r\n  let makeList2 = Array.from(\r\n    new Set(bakedTomorrow.map((prod) => prod.weight))\r\n  ).map((mk) => ({\r\n    pocketSize: mk,\r\n    qty: 0,\r\n  }));\r\n  for (let make of makeList2) {\r\n    make.qty = 1;\r\n\r\n    let qtyAccToday = 0;\r\n\r\n    let qtyToday = bakedTomorrow\r\n      .filter((frz) => make.pocketSize === frz.weight)\r\n      .map((ord) => ord.qty * ord.packSize);\r\n\r\n    if (qtyToday.length > 0) {\r\n      qtyAccToday = qtyToday.reduce(addUp);\r\n    }\r\n    make.qty = qtyAccToday;\r\n  }\r\n  return makeList2;\r\n};\r\n\r\nexport const whatToMakeList = (database, delivDate) => {\r\n  let [products, customers, routes, standing, orders] = database;\r\n  let whatToMakeList = getOrdersList(delivDate, database, true);\r\n  return whatToMakeList.filter((set) => whatToMakeFilter(set));\r\n};\r\n\r\nexport const qtyCalc = (whatToMake) => {\r\n  let qty = 0;\r\n  for (let make of whatToMake) {\r\n    qty += Number(make.qty);\r\n  }\r\n  return qty;\r\n};\r\n\r\nexport const doughListComp = (doughs, filt,loc)=> { \r\n  \r\n  return Array.from(\r\n    new Set(\r\n      doughs\r\n      .filter((set) =>\r\n      filt(set,loc)\r\n    )\r\n        .map((dgh) => dgh.doughName)\r\n    )\r\n  ).map((dgh) => ({\r\n    doughName: dgh,\r\n      isBakeReady:\r\n        doughs[doughs.findIndex((dg) => dg.doughName === dgh)].isBakeReady,\r\n      oldDough: 0,\r\n      buffer: 0,\r\n      needed: 0,\r\n      batchSize: 0,\r\n      short: 0,\r\n      bucketSets: 0,\r\n  }));\r\n}\r\n\r\n\r\nlet pageMargin = 20;\r\nlet tableToNextTitle = 12;\r\nlet titleToNextTable = tableToNextTitle + 4;\r\nlet tableFont = 11;\r\nlet titleFont = 14;\r\n\r\n\r\nexport const buildTable = (title, doc, body, col, finalY) => {\r\n  doc.setFontSize(titleFont);\r\n  doc.text(pageMargin, finalY + tableToNextTitle, title);\r\n  doc.autoTable({\r\n    theme: \"grid\",\r\n    body: body,\r\n    margin: pageMargin,\r\n    columns: col,\r\n    startY: finalY + titleToNextTable,\r\n    styles: { fontSize: tableFont },\r\n  });\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js",["919","920","921","922","923","924","925"],"import { convertDatetoBPBDate } from \"./dateTimeHelpers\";\r\nimport { sortZtoADataByIndex, sortAtoZDataByIndex } from \"./sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport const removeDoubles = (orderList) => {\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n  return orderList;\r\n};\r\n\r\nexport const zerosDelivFilter = (orderList, delivDate, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let noZeroDelivDateOrderList = orderList.filter(\r\n    (ord) =>\r\n      Number(ord[\"qty\"]) > 0 &&\r\n      ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n  );\r\n  for (let ord of noZeroDelivDateOrderList) {\r\n    if (ord[\"route\"] === undefined || ord[\"route\"] === \"deliv\") {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        let custZone = customers[ind][\"zoneName\"];\r\n        ord[\"zoneName\"] = custZone;\r\n      }\r\n    } else {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        ord[\"zoneName\"] = ord[\"route\"];\r\n      }\r\n    }\r\n  }\r\n  return noZeroDelivDateOrderList;\r\n};\r\n\r\nexport const filterForZoneService = (\r\n  noZeroDelivDateOrderList,\r\n  route,\r\n  routes\r\n) => {\r\n  let filterServe;\r\n  if (routes) {\r\n    let rtInd = routes.findIndex((rt) => rt[\"routeName\"] === route);\r\n    filterServe = noZeroDelivDateOrderList.filter((ord) =>\r\n      routes[rtInd][\"RouteServe\"].includes(ord[\"route\"])\r\n    );\r\n  }\r\n  return filterServe;\r\n};\r\n\r\nconst buildCustName = (ord, customers) => {\r\n  try {\r\n    return customers[\r\n      customers.findIndex((cust) => cust[\"custName\"] === ord[\"custName\"])\r\n    ].nickName;\r\n  } catch {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const buildGridOrderArray = (filterServe, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let gridOrderArray;\r\n  gridOrderArray = filterServe.map((ord) => ({\r\n    prodName: ord[\"prodName\"],\r\n    delivOrder:\r\n      customers.findIndex((cust) => cust.custName === ord.custName) > -1\r\n        ? customers[\r\n            customers.findIndex((cust) => cust.custName === ord.custName)\r\n          ].delivOrder\r\n        : 0,\r\n    prodNick:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].nickName,\r\n    custName: ord[\"custName\"],\r\n    custNick: buildCustName(ord, customers),\r\n    zone: ord[\"zoneName\"],\r\n    route: ord[\"route\"],\r\n    qty: ord[\"qty\"],\r\n    doughType:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"doughType\"],\r\n    where:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"bakedWhere\"],\r\n    when: products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n    ][\"readyTime\"],\r\n    forBake:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].forBake,\r\n    preshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].preshaped,\r\n    prepreshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].prepreshaped,\r\n    updatePreDate:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].updatePreDate,\r\n    prodID:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].id,\r\n    packSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packSize,\r\n    weight:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].weight,\r\n    currentStock:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].currentStock,\r\n    batchSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].batchSize,\r\n    bakeExtra:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].bakeExtra,\r\n    packGroup:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packGroup,\r\n  }));\r\n\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const isZoneIncludedInRoute = (\r\n  gridOrderArray,\r\n  routes,\r\n  delivDate,\r\n  customers\r\n) => {\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of gridOrderArray) {\r\n      let day = DateTime.fromSQL(delivDate);\r\n      let dayNum = day.weekday;\r\n      if (dayNum === 7) {\r\n        dayNum = 0;\r\n      }\r\n      dayNum = dayNum + 1;\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n          grd[\"route\"] = rte[\"routeName\"];\r\n        } else {\r\n          grd[\"route\"] = \"Pick up Carlton\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const buildProductArray = (gridToEdit, products) => {\r\n  let listOfProducts;\r\n\r\n  listOfProducts = gridToEdit.map((order) => order[\"prodName\"]);\r\n  listOfProducts = new Set(listOfProducts);\r\n  listOfProducts = Array.from(listOfProducts);\r\n  let prodArray = [];\r\n  for (let prod of listOfProducts) {\r\n    for (let item of products) {\r\n      if (prod === item[\"prodName\"]) {\r\n        let newItem = [\r\n          prod,\r\n          item[\"nickName\"],\r\n          item[\"packGroup\"],\r\n          item[\"packSize\"],\r\n        ];\r\n        prodArray.push(newItem);\r\n      }\r\n    }\r\n  }\r\n  return prodArray;\r\n};\r\n\r\nexport const createColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"70px\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod,\r\n      header: prod,\r\n      dataKey: prod,\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createRouteGridColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"10%\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod[0],\r\n      header: prod[1],\r\n      dataKey: prod[1],\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createListOfCustomers = (orderList) => {\r\n  let listOfCustomers = orderList.map((order) => order[\"custName\"]);\r\n  listOfCustomers = Array.from(new Set(listOfCustomers));\r\n  return listOfCustomers;\r\n};\r\n\r\nexport const createQtyGrid = (listOfCustomers, orderList) => {\r\n  console.log(\"orderList in create\", orderList);\r\n  let data = [];\r\n  for (let cust of listOfCustomers) {\r\n    let newData = {\r\n      customer: cust,\r\n    };\r\n    for (let order of orderList) {\r\n      if (order[\"custName\"] === cust) {\r\n        newData[\"delivOrder\"] = order.delivOrder;\r\n        newData[order[\"prodName\"]] = order[\"qty\"];\r\n      }\r\n    }\r\n    data.push(newData);\r\n  }\r\n  console.log(\"qtyGrid\", data);\r\n  sortAtoZDataByIndex(data, \"delivOrder\");\r\n  return data;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js",["926","927","928","929","930","931","932"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix = fullToFix.filter(full => full.qty !== 0)\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, database))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addQty = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n \r\n  \r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.prodName === full.prodName \r\n    )\r\n    .map((ord) => ord.qty);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n  make.qty = qtyAccToday;\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst update = (order, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let atownPick\r\n  let routeDepart = \"\";\r\n  let route = \"\";\r\n  let rtcheckNorthRun = routes[routes.findIndex(rt => rt.routeName === \"AM North\")].RouteServe\r\n  let rtcheckCarltonToPrado = routes[routes.findIndex(rt => rt.routeName === \"Carlton to Prado\")].RouteServe\r\n  if (rtcheckNorthRun.includes(order.zone) || rtcheckCarltonToPrado.includes(order.zone)){\r\n    routeDepart = \"Carlton\"\r\n  }\r\n  if (rtcheckCarltonToPrado.includes(order.zone)){\r\n    route = \"Carlton to Prado\"\r\n  }\r\n  \r\n \r\n\r\n  let routeStart = 5.5\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n    bakedWhere: ind.bakedWhere,\r\n    packGroup: ind.packGroup,\r\n    routeDepart: routeDepart,\r\n    route: route,\r\n    routeStart: routeStart\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport const calcDayNum = (delivDate) => {\r\n  let day = DateTime.fromSQL(delivDate);\r\n  let dayNum = day.weekday;\r\n  if (dayNum === 7) {\r\n    dayNum = 0;\r\n  }\r\n  dayNum = dayNum + 1;\r\n  return dayNum;\r\n};\r\n\r\nexport const routeRunsThatDay = (rte, dayNum) => {\r\n    if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  export const productCanBeInPlace = (grd, routes, customers, rte) => {\r\n    if (\r\n      grd[\"where\"].includes(\"Mixed\") ||\r\n      grd[\"where\"].includes(\r\n        routes[\r\n          routes.findIndex((route) => route[\"routeName\"] === rte[\"routeName\"])\r\n        ][\"RouteDepart\"]\r\n      )\r\n    ) {\r\n      return true;\r\n    } else {\r\n      if (productCanMakeIt(grd, routes, customers, rte)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const productCanMakeIt = (grd, routes, customers, rte) => {\r\n    for (let testRte of routes) {\r\n      if (\r\n        grd[\"where\"].includes(testRte[\"RouteDepart\"]) &&\r\n        testRte[\"RouteArrive\"] === rte[\"RouteDepart\"] &&\r\n        (Number(testRte[\"routeStart\"] + testRte[\"routeTime\"]) <\r\n          Number(rte[\"routeStart\"]) ||\r\n          Number(testRte[\"routeStart\"] + testRte[\"routeTime\"]) >\r\n          customers[\r\n            customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n          ][\"latestFinalDeliv\"])\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n  \r\n    return false;\r\n  };\r\n\r\n  export const productReadyBeforeRouteStarts = (\r\n    products,\r\n    customers,\r\n    routes,\r\n    grd,\r\n    rte\r\n  ) => {\r\n    if (\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n      ][\"readyTime\"] <\r\n        routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n          \"routeStart\"\r\n        ] ||\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n      ][\"readyTime\"] >\r\n        customers[\r\n          customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n        ][\"latestFinalDeliv\"]\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  export const customerIsOpen = (customers, grd, routes, rte) => {\r\n    if (\r\n      customers[\r\n        customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n      ][\"latestFirstDeliv\"] <\r\n      Number(\r\n        routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n          \"routeStart\"\r\n        ]\r\n      ) +\r\n        Number(\r\n          routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n            \"routeTime\"\r\n          ]\r\n        )\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js",["933","934","935","936","937","938","939"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix = fullToFix.filter(full => full.qty !== 0)\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, database))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addRetailBagQty = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n \r\n  \r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.prodName === full.prodName \r\n    )\r\n    .map((ord) => ord.qty);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n  make.qty = qtyAccToday;\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst update = (order, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let atownPick\r\n  let routeDepart = \"\";\r\n  let route = \"\";\r\n  let rtcheckNorthRun = routes[routes.findIndex(rt => rt.routeName === \"AM North\")].RouteServe\r\n  let rtcheckCarltonToPrado = routes[routes.findIndex(rt => rt.routeName === \"Carlton to Prado\")].RouteServe\r\n  if (rtcheckNorthRun.includes(order.zone) || rtcheckCarltonToPrado.includes(order.zone)){\r\n    routeDepart = \"Carlton\"\r\n  }\r\n  if (rtcheckCarltonToPrado.includes(order.zone)){\r\n    route = \"Carlton to Prado\"\r\n  }\r\n  \r\n \r\n\r\n  let routeStart = 5.5\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n    bakedWhere: ind.bakedWhere,\r\n    packGroup: ind.packGroup,\r\n    routeDepart: routeDepart,\r\n    route: route,\r\n    routeStart: routeStart\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport const addDelivQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n\r\n\r\nexport const addPocketsQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake && full.atownPick === true)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const addCroixBakedAndFrozen = (croix, fullOrdersTomorrow) => {\r\n  return\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js",["940","941"],"import React, { useContext } from \"react\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { updateOrder, createOrder } from \"../../../../graphql/mutations\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const DeleteInvoice = (\r\n  invNum,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  orders,\r\n  delivDate,\r\n  setIsLoading,\r\n  reload,\r\n  setReload\r\n) => {\r\n\r\n  \r\n\r\n  const deleteCheck = (invNum) => {\r\n    swal({\r\n      text: \" Are you sure that you would like to permanently delete this invoice?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteInvoiceFinal(invNum);\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteInvoiceFinal = async (invNum) => {\r\n    setIsLoading(true)\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    invToModify = invToModify.filter((inv) => inv[\"invNum\"] !== invNum);\r\n    setDailyInvoices(invToModify);\r\n\r\n    let dailyParsedInvoices = dailyInvoices.filter(\r\n      (daily) => daily.invNum === invNum\r\n    );\r\n    let parsedCust = dailyParsedInvoices[0].custName;\r\n    dailyParsedInvoices = dailyParsedInvoices[0].orders.filter(daily => daily.prodName !== \"DELIVERY\")\r\n    for (let parse of dailyParsedInvoices) {\r\n      parse.custName = parsedCust;\r\n    }\r\n\r\n    let parsedOrders = orders.filter(\r\n      (ord) =>\r\n        ord.custName === parsedCust &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate) \r\n    );\r\n    console.log(\"dailyParsedInvoices\", dailyParsedInvoices);\r\n    console.log(\"parsedOrders\", parsedOrders);\r\n\r\n    for (let ord of dailyParsedInvoices) {\r\n      let updateDetails = {\r\n        qty: ord.qty,\r\n        prodName: ord.prodName,\r\n        custName: ord.custName,\r\n        rate: 0,\r\n        SO: ord.qty,\r\n        delivDate: convertDatetoBPBDate(delivDate)\r\n        \r\n      };\r\n      \r\n\r\n      let ind = parsedOrders.findIndex(\r\n        (parse) => parse.prodName === ord.prodName\r\n      );\r\n      if (ind > -1) {\r\n        updateDetails[\"id\"] = parsedOrders[ind].id;\r\n        console.log(\"updateDetails\",updateDetails)\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful update\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed Update\");\r\n        }\r\n      } else {\r\n        \r\n        \r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful create\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed create\");\r\n        }\r\n      }\r\n    }\r\n    setReload(!reload)\r\n    setIsLoading(false)\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      icon=\"pi pi-trash\"\r\n      className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n      onClick={(e) => deleteCheck(invNum)}\r\n    />\r\n  );\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js",["942","943"],"import React, { useContext, useEffect } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\n\r\nimport { formatter, getRate } from \"../../../../helpers/billingGridHelpers\";\r\n\r\nimport { GrandTotal } from \"../Parts/Parts/GrandTotal\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const ExpandedBillingRows = ({\r\n  data,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  products,\r\n  altPricing,\r\n  pickedProduct,\r\n  setPickedProduct,\r\n  pickedRate,\r\n  setPickedRate,\r\n  pickedQty,\r\n  setPickedQty,\r\n  delivDate,\r\n  orders\r\n}) => {\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setModifications(false)\r\n  },[])\r\n\r\n\r\n  const deleteItem = (data, invNum) => {\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n    let prodInd = invToModify[ind].orders.findIndex(\r\n      (ord) => ord[\"prodName\"] === data[\"prodName\"]\r\n    );\r\n    invToModify[ind].orders[prodInd][\"qty\"] = 0;\r\n    setDailyInvoices(invToModify);\r\n  };\r\n\r\n  const deleteTemplate = (data, invNum) => {\r\n    return (\r\n      <Button\r\n        icon=\"pi pi-times-circle\"\r\n        onClick={(e) => deleteItem(data, invNum)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleChange = (e, data, invNum) => {\r\n    if (e.code === \"Enter\") {\r\n      setModifications(true)\r\n      let invToModify = clonedeep(dailyInvoices);\r\n      let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n      let prodInd = invToModify[ind].orders.findIndex(\r\n        (ord) => ord[\"prodName\"] === data[\"prodName\"]\r\n      );\r\n      invToModify[ind].orders[prodInd][\"qty\"] = Number(e.target.value);\r\n      setDailyInvoices(invToModify);\r\n    }\r\n  };\r\n\r\n  const handleBlurChange = (e, data, invNum) => {\r\n    setModifications(true)\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n    let prodInd = invToModify[ind].orders.findIndex(\r\n      (ord) => ord[\"prodName\"] === data[\"prodName\"]\r\n    );\r\n    let val;\r\n    data.qty !== e.target.value ? (val = e.target.value) : (val = data.qty);\r\n    invToModify[ind].orders[prodInd][\"qty\"] = Number(val);\r\n    setDailyInvoices(invToModify);\r\n  };\r\n\r\n  const changeQty = (data, invNum) => {\r\n    \r\n    return (\r\n      <InputNumber\r\n        placeholder={data.qty}\r\n        value={data.qty}\r\n        size=\"4\"\r\n        onKeyDown={(e) => handleChange(e, data, invNum)}\r\n        onBlur={(e) => handleBlurChange(e, data, invNum)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleRateChange = (e, data, invNum) => {\r\n\r\n    if (e.code === \"Enter\") {\r\n      setModifications(true);\r\n      let invToModify = clonedeep(dailyInvoices);\r\n      let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n      let prodInd = invToModify[ind].orders.findIndex(\r\n        (ord) => ord[\"prodName\"] === data[\"prodName\"]\r\n      );\r\n      invToModify[ind].orders[prodInd][\"rate\"] = e.target.value;\r\n      setDailyInvoices(invToModify);\r\n    }\r\n  };\r\n\r\n  const handleRateBlurChange = (e, data, invNum) => {\r\n    setModifications(true);\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n    let prodInd = invToModify[ind].orders.findIndex(\r\n      (ord) => ord[\"prodName\"] === data[\"prodName\"]\r\n    );\r\n    let val;\r\n    data.rate !== e.target.value ? (val = e.target.value) : (val = data.rate);\r\n    invToModify[ind].orders[prodInd][\"rate\"] = Number(val);\r\n    setDailyInvoices(invToModify);\r\n  };\r\n\r\n  const changeRate = (data, invNum) => {\r\n    \r\n\r\n    return (\r\n      <InputNumber\r\n        placeholder={data.rate}\r\n        value={data.rate}\r\n        size=\"4\"\r\n        mode=\"decimal\"\r\n        locale=\"en-US\"\r\n        minFractionDigits={2}\r\n        onKeyDown={(e) => handleRateChange(e, data, invNum)}\r\n        onBlur={(e) => handleRateBlurChange(e, data, invNum)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const calcTotal = (rowData) => {\r\n    let sum = Number(rowData.qty) * Number(rowData.rate);\r\n\r\n    sum = formatter.format(sum);\r\n\r\n    return sum;\r\n  };\r\n\r\n  return (\r\n    <div className=\"orders-subtable\">\r\n      <h2>\r\n        Invoice #{data.invNum} for {data.custName}\r\n      </h2>\r\n      <DataTable value={data.orders} className=\"p-datatable-sm\">\r\n        <Column\r\n          headerStyle={{ width: \"4rem\" }}\r\n          body={(e) => deleteTemplate(e, data.invNum)}\r\n        ></Column>\r\n        <Column field=\"prodName\" header=\"Product\"></Column>\r\n        <Column\r\n          header=\"Quantity\"\r\n          body={(e) => changeQty(e, data.invNum)}\r\n        ></Column>\r\n        <Column header=\"Rate\" body={(e) => changeRate(e, data.invNum)}>\r\n          {\" \"}\r\n        </Column>\r\n        <Column header=\"Total\" body={calcTotal}></Column>\r\n      </DataTable>\r\n      <GrandTotal\r\n        rowData={data}\r\n        dailyInvoices={dailyInvoices}\r\n        setDailyInvoices={setDailyInvoices}\r\n        products={products}\r\n        altPricing={altPricing}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n        delivDate={delivDate}\r\n        orders={orders}\r\n        \r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js",["944","945","946"],"const clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const addProdAttr = (fullOrder, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let fullToFix = clonedeep(fullOrder);\r\n\r\n  fullToFix = fullToFix.map((full) => ({\r\n    custName: full.custName,\r\n    delivDate: full.delivDate,\r\n    prodName: full.prodName,\r\n    qty: full.qty,\r\n  }));\r\n  fullToFix.forEach((full) =>\r\n    Object.assign(full, update(full, products, customers))\r\n  );\r\n\r\n  return fullToFix;\r\n};\r\n\r\nexport const addFresh = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n  make.qty = 0;\r\n\r\n  let qtyAccToday = 0;\r\n  let qtyAccTomorrow = 0;\r\n  let guaranteeTimeToday = Number(\r\n    products[products.findIndex((prod) => prod.forBake === make.forBake)]\r\n      .readyTime\r\n  );\r\n  let availableRoutesToday = routes.filter(\r\n    (rt) =>\r\n      (rt.RouteDepart === \"Prado\") &\r\n        (Number(rt.routeStart) > guaranteeTimeToday) ||\r\n      rt.routeName === \"Pick up SLO\"\r\n  );\r\n  let availableRoutesTomorrow = routes.filter(\r\n    (rt) => rt.RouteDepart === \"Carlton\"\r\n  );\r\n\r\n  let qtyToday = fullOrders\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        full.atownPick !== true &&\r\n        checkZone(full, availableRoutesToday) === true\r\n    )\r\n    .map((ord) => ord.qty * ord.packSize);\r\n\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n\r\n  let qtyTomorrow = fullOrdersTomorrow\r\n    .filter(\r\n      (full) =>\r\n        make.forBake === full.forBake &&\r\n        full.atownPick !== true &&\r\n        checkZone(full, availableRoutesTomorrow) === true\r\n    )\r\n    .map((ord) => ord.qty * ord.packSize);\r\n\r\n  if (qtyTomorrow.length > 0) {\r\n    qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n  }\r\n\r\n  make.qty = qtyAccToday;\r\n  make.makeTotal = qtyAccToday + qtyAccTomorrow;\r\n  make.bagEOD = qtyAccTomorrow;\r\n};\r\n\r\nexport const addNeedEarly = (make, products) => {\r\n  let curr = products\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.currentStock * ord.packSize);\r\n\r\n  if (curr.length > 0) {\r\n    let currAcc = curr.reduce(addUp);\r\n    make.needEarly -= currAcc;\r\n    make.makeTotal -= currAcc;\r\n  }\r\n  if (make.needEarly < 0) {\r\n    make.needEarly = 0;\r\n  }\r\n  if (make.makeTotal < 0) {\r\n    make.makeTotal = 0;\r\n  }\r\n  let batchSize =\r\n    products[products.findIndex((prod) => prod.forBake === make.forBake)]\r\n      .batchSize;\r\n\r\n  if (batchSize > 0) {\r\n    let num = Math.ceil(Number(make.makeTotal) / Number(batchSize));\r\n    make.makeTotal = num * Number(batchSize);\r\n  }\r\n};\r\n\r\nexport const addShelf = (\r\n  make,\r\n  fullOrders,\r\n  fullOrdersTomorrow,\r\n  products,\r\n  routes\r\n) => {\r\n \r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n\r\n  let qtyAccToday = 0;\r\n  let qtyAccTomorrow = 0;\r\n  \r\n  let filt = products.filter(prod => prod.forBake === make.forBake)\r\n  let qtyMakeExtra = 0\r\n  for (let fi of filt) {\r\n    qtyMakeExtra = qtyMakeExtra + fi.bakeExtra\r\n  }\r\n  \r\n\r\n  let qtyToday = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qtyToday.length > 0) {\r\n    qtyAccToday = qtyToday.reduce(addUp);\r\n  }\r\n  let qtyTomorrow = fullOrdersTomorrow\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n\r\n  if (qtyTomorrow.length > 0) {\r\n    qtyAccTomorrow = qtyTomorrow.reduce(addUp);\r\n  }\r\n\r\n  make.qty = qtyAccToday;\r\n  make.needEarly = qtyAccToday;\r\n  make.makeTotal = qtyAccTomorrow + qtyAccToday + qtyMakeExtra;\r\n};\r\n\r\nconst update = (order, products, customers) => {\r\n  let atownPick = \"atownpick\";\r\n  let ind =\r\n    products[products.findIndex((prod) => prod.prodName === order.prodName)];\r\n  try {\r\n    let custInd =\r\n      customers[\r\n        customers.findIndex((cust) => cust.custName === order.custName)\r\n      ];\r\n    atownPick = custInd.zoneName;\r\n  } catch {\r\n    atownPick = \"atownpick\";\r\n  }\r\n\r\n  let pick = false;\r\n  if (atownPick === \"atownpick\" || atownPick === \"Carlton Retail\") {\r\n    pick = true;\r\n  }\r\n\r\n  let toAdd = {\r\n    forBake: ind.forBake,\r\n    packSize: ind.packSize,\r\n    currentStock: ind.currentStock,\r\n    batchSize: ind.batchSize,\r\n    bakeExtra: ind.bakeExtra,\r\n    readyTime: ind.readyTime,\r\n    zone: atownPick,\r\n    atownPick: pick,\r\n  };\r\n\r\n  return toAdd;\r\n};\r\n\r\nconst freshProdFilter = (prod) => {\r\n  let fil =\r\n    !prod.bakedWhere.includes(\"Carlton\") &&\r\n    Number(prod.readyTime) < 15 &&\r\n    prod.packGroup !== \"frozen pastries\" &&\r\n    prod.packGroup !== \"baked pastries\";\r\n  return fil;\r\n};\r\n\r\nconst makeProds = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.forBake))\r\n  ).map((make) => ({\r\n    forBake: make,\r\n    qty: 0,\r\n    makeTotal: 0,\r\n    bagEOD: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nexport const buildMakeFreshProdTemplate = (products) => {\r\n  let makeFreshProds;\r\n  makeFreshProds = makeProds(products, freshProdFilter);\r\n\r\n  return makeFreshProds;\r\n};\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nexport const addDelivQty = (make, fullOrders) => {\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n\r\nconst checkZone = (full, availableRoutes) => {\r\n  for (let av of availableRoutes) {\r\n    if (av.RouteServe.includes(full.zone)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const addPocketsQty = (make, fullOrders) => {\r\n \r\n\r\n  make.qty = 0;\r\n  make.needEarly = 0;\r\n  let qty = fullOrders\r\n    .filter((full) => make.forBake === full.forBake && full.atownPick === true)\r\n    .map((ord) => ord.qty * ord.packSize);\r\n  if (qty.length > 0) {\r\n    let qtyAcc = qty.reduce(addUp);\r\n    make.qty = qtyAcc;\r\n    make.needEarly = qtyAcc;\r\n    make.makeTotal = qtyAcc;\r\n  }\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js",["947","948","949","950","951","952","953","954","955","956","957","958","959","960","961"],"import {\r\n    todayPlus,\r\n  } from \"../../../helpers/dateTimeHelpers\";\r\n  import {\r\n    createColumns,\r\n    zerosDelivFilter,\r\n    buildGridOrderArray,\r\n  } from \"../../../helpers/delivGridHelpers\";\r\n  \r\n  import { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n  \r\n  import { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n  import {\r\n    calcDayNum,\r\n    routeRunsThatDay,\r\n    productCanBeInPlace,\r\n    productReadyBeforeRouteStarts,\r\n    customerIsOpen,\r\n  } from \"../ByRoute/Parts/utils/utils\";\r\n \r\n  let today = todayPlus()[0];\r\n  \r\n  const addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n    for (let rte of routes) {\r\n      for (let grd of prodGrid) {\r\n        let dayNum = calcDayNum(delivDate);\r\n  \r\n        if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n          continue;\r\n        } else {\r\n          if (\r\n            routeRunsThatDay(rte, dayNum) &&\r\n            productCanBeInPlace(grd, routes, customers, rte) &&\r\n            productReadyBeforeRouteStarts(\r\n              products,\r\n              customers,\r\n              routes,\r\n              grd,\r\n              rte\r\n            ) &&\r\n            customerIsOpen(customers, grd, routes, rte)\r\n          ) {\r\n            grd.route = rte.routeName;\r\n            grd.routeDepart = rte.RouteDepart;\r\n            grd.routeStart = rte.routeStart;\r\n            grd.routeServe = rte.RouteServe;\r\n            grd.routeArrive = rte.RouteArrive;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let grd of prodGrid) {\r\n      if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"deliv\") {\r\n        grd.route = \"NOT ASSIGNED\";\r\n      }\r\n    }\r\n  \r\n    return prodGrid;\r\n  };\r\n  \r\n  const getProdNickNames = (delivDate, database, filt) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let fullNames = Array.from(\r\n      new Set(fullOrder.filter((fu) => filt(fu)).map((fil) => fil.prodName))\r\n    );\r\n    let nickNames = fullNames.map(\r\n      (fil) =>\r\n        products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n    );\r\n    return nickNames;\r\n  };\r\n  \r\n  const getCustNames = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    return Array.from(\r\n      new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.custName))\r\n    );\r\n  };\r\n  \r\n  \r\n  const makeOrders = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodNames = getProdNickNames(delivDate, database, filter);\r\n    let custNames = getCustNames(delivDate, database, filter);\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let orderArray = [];\r\n    for (let cust of custNames) {\r\n      let custItem = {};\r\n      custItem = {\r\n        customer: cust,\r\n      };\r\n      for (let prod of prodNames) {\r\n        let prodFullName =\r\n          products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n        try {\r\n          custItem[prod] =\r\n            fullOrder[\r\n              fullOrder.findIndex(\r\n                (ord) => ord.prodName === prodFullName && ord.custName === cust\r\n              )\r\n            ].qty;\r\n        } catch {\r\n          custItem[prod] = null;\r\n        }\r\n      }\r\n      orderArray.push(custItem);\r\n    }\r\n    return orderArray;\r\n  };\r\n  \r\n \r\n  export default class ComposeAMPastry {\r\n    returnAMPastryBreakDown = (delivDate, database) => {\r\n      let AMPastry = this.returnAMPastry(database);\r\n      \r\n      let columnsAMPastry = this.returnColumnsAMPastry(\r\n        delivDate,\r\n        database\r\n      );\r\n\r\n      let AMOthers = this.returnAMOthers(database);\r\n      \r\n      let columnsAMOthers = this.returnColumnsAMOthers(\r\n        delivDate,\r\n        database\r\n      );\r\n  \r\n      // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n  \r\n      return {\r\n        AMPastry: AMPastry,\r\n        columnsAMPastry: columnsAMPastry,\r\n        AMOthers: AMOthers,\r\n        columnsAMOthers: columnsAMOthers\r\n      };\r\n    };\r\n  \r\n    \r\n  \r\n    \r\n    returnAMPastry = (database) => {\r\n      let shelfProds = makeOrders(today, database, this.AMPastryFilter);\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMPastryFilter = (ord) => {\r\n      return (\r\n        (ord.where.includes(\"Mixed\") || ord.where.includes(\"Prado\")) &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMPastry = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMPastryFilter\r\n      );\r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n    returnAMOthers = (database) => {\r\n      let custos = makeOrders(today, database, this.AMPastryFilter);\r\n      custos = Array.from(new Set(custos.map(cust => cust.customer)))\r\n      let shelfProds = makeOrders(today, database, this.AMOthersFilter);\r\n     \r\n      shelfProds = shelfProds.filter(shelf => custos.includes(shelf.customer))\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMOthersFilter = (ord) => {\r\n      return (\r\n        \r\n        ord.packGroup !== \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMOthers = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMOthersFilter\r\n      );\r\n      \r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n\r\n  }\r\n  ","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js",["962"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button } from \"primereact/button\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { formatter, getRate } from \"../../../../../helpers/billingGridHelpers\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { updateOrder, createOrder } from \"../../../../../graphql/mutations\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst FooterGrid = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 10px 10px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const GrandTotal = ({\r\n  rowData,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  products,\r\n  altPricing,\r\n  pickedProduct,\r\n  setPickedProduct,\r\n  pickedQty,\r\n  setPickedQty,\r\n  pickedRate,\r\n  setPickedRate,\r\n  delivDate,\r\n  orders\r\n}) => {\r\n  const [custo, setCusto] = useState(\"Big Sky Cafe\");\r\n  const { setReload, reload, setIsLoading, modifications, setModifications } =\r\n    useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    let order = {};\r\n    order[\"rate\"] = -1;\r\n    // getOrder info from invNum\r\n    order[\"custName\"] = custo;\r\n    order[\"prodName\"] = pickedProduct;\r\n    let rate;\r\n    try {\r\n      rate = getRate(products, order, altPricing);\r\n      console.log(\"rate\", rate);\r\n    } catch {\r\n      rate = 0;\r\n    }\r\n\r\n    console.log(\"rate\", rate);\r\n    setPickedRate(rate);\r\n  }, [pickedProduct]);\r\n\r\n  const handleAddProduct = (e, invNum) => {\r\n    setModifications(true);\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let ind = invToModify.findIndex((inv) => inv[\"invNum\"] === invNum);\r\n\r\n    let prodToAdd = {\r\n      prodName: pickedProduct,\r\n      qty: parseInt(pickedQty),\r\n      rate: parseFloat(pickedRate),\r\n    };\r\n    invToModify[ind].orders.push(prodToAdd);\r\n    setDailyInvoices(invToModify);\r\n    setPickedProduct(\"\");\r\n    setPickedQty(0);\r\n    setPickedRate(0);\r\n  };\r\n  let data = rowData.orders;\r\n  let invNum = rowData.invNum;\r\n  let sum = 0;\r\n\r\n  try {\r\n    for (let i of data) {\r\n      sum = sum + Number(i.qty) * Number(i.rate);\r\n    }\r\n\r\n    sum = formatter.format(sum);\r\n  } catch {\r\n    console.log(\"nothing to calc\");\r\n  }\r\n\r\n  const handlePickedProd = (e, invNum) => {\r\n    let cust =\r\n      dailyInvoices[dailyInvoices.findIndex((daily) => daily.invNum === invNum)]\r\n        .custName;\r\n    setCusto(cust);\r\n    setPickedProduct(e.target.value.prodName);\r\n  };\r\n\r\n  const handleSaveChanges = async (e, invNum) => {\r\n   \r\n    // loop through orders\r\n    let custInd = dailyInvoices.findIndex(daily => daily.invNum === invNum)\r\n    let parsedOrders = dailyInvoices[custInd].orders.filter(daily => daily.prodName !== \"DELIVERY\");\r\n   \r\n    let custName=dailyInvoices[custInd].custName;\r\n    let filteredOrders = orders.filter(ord => ord.custName===custName && ord.delivDate===convertDatetoBPBDate(delivDate))\r\n    console.log(\"filteredOrders\",filteredOrders)\r\n\r\n    for (let ord of parsedOrders) {\r\n      let id\r\n      let ind = filteredOrders.findIndex(filt => filt.prodName === ord.prodName)\r\n      ind<0 ? id = null : id = filteredOrders[ind].id\r\n     \r\n      let updateDetails = {\r\n       \r\n        qty: ord.qty,\r\n        prodName: ord.prodName,\r\n        custName: custName,\r\n        rate: ord.rate,\r\n        SO: ord.qty,\r\n        delivDate: convertDatetoBPBDate(delivDate)\r\n        \r\n      };\r\n      console.log(updateDetails)\r\n     \r\n      if (id !== null) {\r\n        updateDetails[\"id\"] = id\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful update\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed Update\");\r\n        }\r\n      } else {\r\n        \r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful create\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed create\");\r\n        }\r\n      }\r\n    \r\n    }\r\n\r\n    setReload(!reload);\r\n    setIsLoading(false);\r\n    \r\n    setModifications(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FooterGrid>\r\n        <Button onClick={(e) => handleAddProduct(e, invNum)}>ADD +</Button>\r\n        <label>Product</label>\r\n        <Dropdown\r\n          optionLabel=\"prodName\"\r\n          options={products}\r\n          placeholder={pickedProduct}\r\n          name=\"products\"\r\n          value={pickedProduct}\r\n          onChange={(e) => handlePickedProd(e, invNum)}\r\n        />\r\n        <label>Quantity</label>\r\n        <InputNumber\r\n          id=\"addQty\"\r\n          placeholder={pickedQty}\r\n          value={pickedQty}\r\n          size=\"4\"\r\n          onKeyDown={(e) => e.code === \"Enter\" && setPickedQty(e.target.value)}\r\n          onBlur={(e) => setPickedQty(e.target.value)}\r\n        />\r\n        <label>Rate</label>\r\n        <InputNumber\r\n          id=\"addRate\"\r\n          placeholder={pickedRate}\r\n          value={pickedRate}\r\n          size=\"4\"\r\n          mode=\"decimal\"\r\n          locale=\"en-US\"\r\n          minFractionDigits={2}\r\n          onKeyDown={(e) => e.code === \"Enter\" && setPickedRate(e.target.value)}\r\n          onBlur={(e) => setPickedRate(e.target.value)}\r\n        />\r\n      </FooterGrid>\r\n      <FooterGrid>\r\n        {modifications ? (\r\n          <React.Fragment>\r\n            <Button\r\n              className={\r\n                modifications\r\n                  ? \"p-button-raised p-button-rounded p-button-danger\"\r\n                  : \"p-button-raised p-button-rounded p-button-success\"\r\n              }\r\n              onClick={(e) => handleSaveChanges(e, invNum)}\r\n            >\r\n              SAVE CHANGES\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <div></div>\r\n          </React.Fragment>\r\n        )}\r\n        <div></div>\r\n        <div>Grand Total</div>\r\n        <div>{sum}</div>\r\n        <div></div>\r\n      </FooterGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js",[],["963","964"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js",["965","966"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js",["967"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"./Utils/composeDough\";\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { getMixInfo } from \"./BPBNBaker1Parts/GetMixInfo\";\r\nimport { binInfo } from \"./BPBNBaker1Parts/BinInfo\";\r\nimport { panAmount } from \"./BPBNBaker1Parts/PanAmount\";\r\nimport { bucketAmount } from \"./BPBNBaker1Parts/BucketAmount\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { BagMixesScreen } from \"./BPBNBaker1Parts/BagMixesScreen\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\n\r\nfunction BPBNBaker1Dough({\r\n  doughs,\r\n  setDoughs,\r\n  setDoughComponents,\r\n  infoWrap,\r\n  setBagAndEpiCount,\r\n  setOliveCount,\r\n  setBcCount,\r\n  setBagDoughTwoDays,\r\n\r\n\r\n\r\n}) {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [mixes, setMixes] = useState([]);\r\n  const [bin, setBin] = useState([]);\r\n  const [pans, setPans] = useState([]);\r\n  const [buckets, setBuckets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherDoughInfo = (database) => {\r\n    let doughData = compose.returnDoughBreakDown(database, \"Carlton\");\r\n    setDoughs(doughData.Baker1Dough);\r\n    setDoughComponents(doughData.Baker1DoughComponents);\r\n    setBagAndEpiCount(doughData.bagAndEpiCount)\r\n    setOliveCount(doughData.oliveCount)\r\n    setBcCount(doughData.bcCount)\r\n    setBagDoughTwoDays(doughData.bagDoughTwoDays)\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (doughs[0] && infoWrap) {\r\n      setMixes(getMixInfo(doughs, infoWrap)[4]);\r\n      setBin(binInfo(doughs, infoWrap))\r\n      setPans(panAmount(doughs,infoWrap))\r\n      setBuckets(bucketAmount(doughs,infoWrap))\r\n    }\r\n  }, [doughs,infoWrap]);\r\n\r\n  let tomorrow = todayPlus()[1];\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const doughMixList = (dough) => {\r\n    let doughTotal = (\r\n      Number(dough.needed) +\r\n      Number(dough.buffer) +\r\n      Number(dough.short)\r\n    ).toFixed(2);\r\n\r\n    let doughName = dough.doughName;\r\n    let doughNeeded = dough.needed;\r\n    let doughShort = Number(dough.short);\r\n\r\n    return (\r\n      <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n        <h3>\r\n          {doughName}: (need {doughNeeded} lb.) TOTAL:\r\n          {doughTotal} SHORT: {doughShort}\r\n        </h3>\r\n        <TwoColumnGrid key={dough.id + \"_first2Col\"}>\r\n          <div>\r\n            <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n              <span>Old Dough:</span>\r\n              <div className=\"p-inputgroup\">\r\n                <InputText\r\n                  key={dough.id + \"_oldDough\"}\r\n                  id={dough.id + \"_oldDough\"}\r\n                  placeholder={dough.oldDough}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <span className=\"p-inputgroup-addon\">lb.</span>\r\n              </div>\r\n            </TwoColumnGrid>\r\n            <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n              <span>Buffer Dough:</span>\r\n              <div className=\"p-inputgroup\">\r\n                <InputText\r\n                  key={dough.id + \"_buffer\"}\r\n                  id={dough.id + \"_buffer\"}\r\n                  placeholder={dough.buffer}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <span className=\"p-inputgroup-addon\">lb.</span>\r\n              </div>\r\n            </TwoColumnGrid>\r\n          </div>\r\n        </TwoColumnGrid>\r\n\r\n        <BagMixesScreen mixes={mixes} doughs={doughs} infoWrap={infoWrap} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBN Baguette Mix</h1>\r\n        {doughs[0] && doughMixList(doughs[0])}\r\n\r\n        <h2>Bins</h2>\r\n        <DataTable value={bin} className=\"p-datatable-sm\">\r\n          <Column field=\"title\" header=\"Product\"></Column>\r\n          <Column field=\"amount\" header=\"Amount\"></Column>\r\n        </DataTable>\r\n\r\n        <h2>Pocket Pans</h2>\r\n        <DataTable value={pans} className=\"p-datatable-sm\">\r\n          <Column field=\"title\" header=\"Pan\"></Column>\r\n          <Column field=\"amount\" header=\"Amount\"></Column>\r\n        </DataTable>\r\n       \r\n\r\n        <h2>Bucket Sets</h2>\r\n        <DataTable value={buckets} className=\"p-datatable-sm\">\r\n          <Column field=\"title\" header=\"Bucket Sets\"></Column>\r\n          <Column field=\"amount\" header=\"Amount\"></Column>\r\n        </DataTable>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNBaker1Dough;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToMake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["968","969","970","971"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport TitleBox from \"./CurrentOrderInfoParts/TitleBox\";\r\nimport CustomerGroup from \"./CurrentOrderInfoParts/CustomerGroup\";\r\nimport RouteSelect from \"./CurrentOrderInfoParts/RouteSelect\";\r\nimport PONote from \"./CurrentOrderInfoParts/PONote\";\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { convertDatetoBPBDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst FulfillOptionsPhone = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst CurrentOrderInfo = ({\r\n  database,\r\n  setDatabase,\r\n  authType,\r\n  customerGroup,\r\n  setCustomerGroup,\r\n}) => {\r\n  \r\n  const { chosen, delivDate, route, currentCartList } =\r\n    useContext(CurrentDataContext);\r\n\r\n  const { setModifications, cartList } = useContext(ToggleContext);\r\n\r\n  const [alignment, setAlignment] = useState();\r\n\r\n\r\n  const handleChange = (e, newAlignment) => {\r\n   \r\n    if (\r\n      newAlignment !== \"deliv\" &&\r\n      newAlignment !== \"slopick\" &&\r\n      newAlignment !== \"atownpick\"\r\n    ) {\r\n      newAlignment = \"deliv\";\r\n    }\r\n    setAlignment(newAlignment);\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.route = newAlignment;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.route = route;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    try{\r\n      console.log(\"current\",currentCartList)\r\n      currentCartList[0].route ? setAlignment(currentCartList[0].route) : setAlignment(\"deliv\");\r\n    } catch(error) {\r\n      setAlignment(\"deliv\")\r\n      console.log(error)\r\n    }\r\n    \r\n  },[currentCartList])\r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      {width > breakpoint ? <TitleBox /> : \"\"}\r\n\r\n      <CurrentInfo>\r\n        {width > breakpoint ? (\r\n          <FulfillOptions>\r\n            <CustomerGroup\r\n              database={database}\r\n              customerGroup={customerGroup}\r\n              setCustomerGroup={setCustomerGroup}\r\n            />\r\n            {cartList ? (\r\n              <RouteSelect\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n                customerGroup={customerGroup}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </FulfillOptions>\r\n        ) : (\r\n          <FulfillOptionsPhone>\r\n            {cartList ? (\r\n              <ToggleButtonGroup\r\n                color=\"primary\"\r\n                value={alignment}\r\n                exclusive\r\n                onChange={handleChange}\r\n              >\r\n                <ToggleButton value=\"deliv\">Delivery</ToggleButton>\r\n                <ToggleButton value=\"slopick\">SLO Pickup</ToggleButton>\r\n                <ToggleButton value=\"atownpick\">Atown Pickup</ToggleButton>\r\n              </ToggleButtonGroup>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </FulfillOptionsPhone>\r\n        )}\r\n\r\n        <SpecialInfo>\r\n          {cartList ? (\r\n            <PONote database={database} setDatabase={setDatabase} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\ExportPastryPrepPdf.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["972"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport AddUpdate from './OrderEntryButtonsParts/AddUpdate';\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction OrderEntryButtons({ database, setDatabase, authType }) {\r\n\r\n  const {\r\n    setChosen,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n  \r\n  const {\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    setModifications,\r\n    cartList,\r\n    setCartList,\r\n    setRouteIsOn,\r\n  } = useContext(ToggleContext);\r\n\r\n  let type = orderTypeWhole ? \"Retail\" : \"Wholesale\";\r\n  let cartStand = cartList ? \"Standing\" : \"Cart\";\r\n\r\n  const handleChangeorderTypeWhole = () => {\r\n    try{\r\n      document.getElementById(\"orderCommand\").focus();\r\n    } catch {\r\n      console.log()\r\n    }\r\n    setOrderTypeWhole(!orderTypeWhole);\r\n    setChosen(\"\");\r\n  };\r\n\r\n  const handleCartStandToggle = () => {\r\n    try{\r\n      document.getElementById(\"orderCommand\").focus();\r\n    } catch {\r\n      console.log()\r\n    }\r\n    let realCartList = clonedeep(cartList);\r\n    realCartList ? setRouteIsOn(false) : setRouteIsOn(true);\r\n    setCartList(!cartList);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    for (let ord of cartToMod) {\r\n      ord[\"qty\"] = 0;\r\n    }\r\n    setCurrentCartList(cartToMod);\r\n \r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <OrderButtons>\r\n      <AddUpdate database={database} setDatabase={setDatabase}\r\n      />\r\n      <Button\r\n        label=\"Clear\"\r\n        icon=\"pi pi-trash\"\r\n        disabled={!cartList}\r\n        onClick={handleClear}\r\n        className=\"p-button-raised p-button-rounded p-button-info\"\r\n      />\r\n      <Button\r\n        label={cartStand}\r\n        icon=\"pi pi-shopping-cart\"\r\n        onClick={handleCartStandToggle}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n      {authType === \"bpbadmin\" ?\r\n      <Button\r\n        label={type}\r\n        icon=\"pi pi-dollar\"\r\n        onClick={handleChangeorderTypeWhole}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      /> : ''}\r\n    </OrderButtons>\r\n  );\r\n}\r\n\r\nexport default OrderEntryButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",["973","974","975","976"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  todayPlus,\r\n  daysOfTheWeek,\r\n  convertDatetoBPBDate,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  buildCurrentOrder,\r\n  testEntryForProduct,\r\n  createArrayofEnteredProducts,\r\n  createOrdersToUpdate,\r\n  buildOrdersToModify,\r\n  addUpdatesToOrders,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CommandLine = styled.span`\r\n  display: flex;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst OrderCommandLine = ({ database, setDatabase }) => {\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const {\r\n    chosen,\r\n    setChosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    route,\r\n    ponote,\r\n    currentCartList,\r\n    setCurrentCartList\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const {\r\n    cartList,\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    setRouteIsOn,\r\n    setModifications,\r\n  } = useContext(ToggleContext);\r\n\r\n  let tomorrow = todayPlus()[1];\r\n\r\n  const checkForCustomer = (entry, customers) => {\r\n    let nextCustomer = chosen;\r\n\r\n    if (entry.includes(\"retail \")) {\r\n      setOrderTypeWhole(false);\r\n      let newRetailCustName = entry.replace(\"retail \", \"\");\r\n      let newRetailCustList = [...orders];\r\n      let newRetailCustEntry = {\r\n        custName: newRetailCustName,\r\n        isWhole: false,\r\n        route: \"atownpick\",\r\n        delivDate: convertDatetoBPBDate(delivDate),\r\n      };\r\n      newRetailCustList.push(newRetailCustEntry);\r\n      let DBtoUpdate = clonedeep(database)\r\n      DBtoUpdate.orders = newRetailCustList\r\n      setDatabase(DBtoUpdate);\r\n      setDelivDate(tomorrow);\r\n      setChosen(newRetailCustName);\r\n    \r\n      return;\r\n    }\r\n\r\n    for (let cust of customers) {\r\n      if (\r\n        entry.includes(cust[\"custName\"]) ||\r\n        entry.includes(cust[\"nickName\"])\r\n      ) {\r\n        nextCustomer = cust[\"custName\"];\r\n        if (nextCustomer !== \"  \") {\r\n          setChosen(nextCustomer);\r\n          setRouteIsOn(true);\r\n          setDelivDate(tomorrow);\r\n          setOrderTypeWhole(true);\r\n        \r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nextCustomer === \"\" && chosen === \"\") {\r\n      swal({\r\n        text: \"Please choose a customer\",\r\n        icon: \"error\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const checkForDelivDate = (entry) => {\r\n    let [today, tomorrow, twoDay] = todayPlus();\r\n    let [Sun, Mon, Tues, Wed, Thurs, Fri, Sat] = daysOfTheWeek();\r\n    let dateWords = [\r\n      [\"today\", today],\r\n      [\"tomorrow\", tomorrow],\r\n      [\"2day\", twoDay],\r\n      [\"twoday\", twoDay],\r\n      [\"twoDay\", twoDay],\r\n      [\"sun\", Sun],\r\n      [\"mon\", Mon],\r\n      [\"tue\", Tues],\r\n      [\"tues\", Tues],\r\n      [\"wed\", Wed],\r\n      [\"thu\", Thurs],\r\n      [\"thur\", Thurs],\r\n      [\"thurs\", Thurs],\r\n      [\"fri\", Fri],\r\n      [\"sat\", Sat],\r\n    ];\r\n    for (let wordSet of dateWords) {\r\n      if (entry.includes(wordSet[0])) {\r\n        setDelivDate(wordSet[1]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForProducts = (entry) => {\r\n    if (testEntryForProduct(entry)) {\r\n      let enteredProducts = createArrayofEnteredProducts(entry);\r\n      let ordersToUpdate = createOrdersToUpdate(\r\n        products,\r\n        enteredProducts,\r\n        chosen,\r\n        ponote,\r\n        route,\r\n        orderTypeWhole,\r\n        delivDate\r\n      );\r\n      \r\n      let custOrderList = buildCurrentOrder(\r\n        chosen,\r\n        delivDate,\r\n        orders,\r\n        standing\r\n      );\r\n      \r\n      let ordersToModify = [...orders];\r\n      if (custOrderList.length > 0) {\r\n        ordersToModify = buildOrdersToModify(\r\n          orders,\r\n          chosen,\r\n          delivDate,\r\n          ordersToUpdate,\r\n          custOrderList,\r\n          ponote,\r\n          route\r\n        );\r\n      }\r\n      let addedOrdersToUpdate = addUpdatesToOrders(\r\n        chosen,\r\n        delivDate,\r\n        ordersToUpdate,\r\n        ordersToModify\r\n      );\r\n     \r\n      let DBToUpdate = clonedeep(database)\r\n      DBToUpdate[4] = addedOrdersToUpdate\r\n      setDatabase(DBToUpdate)\r\n     \r\n     \r\n    }\r\n  };\r\n\r\n  const interpretEntry = async (entry) => {\r\n    checkForCustomer(entry, customers);\r\n    if (cartList){\r\n      checkForDelivDate(entry);\r\n    checkForProducts(entry);\r\n    }\r\n  };\r\n\r\n  const handleInput = (entry) => {\r\n    if (entry.key === \"Enter\") {\r\n      interpretEntry(entry.target.value);\r\n      document.getElementById(\"orderCommand\").value = \"\";\r\n    }\r\n    return;\r\n  };\r\n\r\n  const lookingForHelp = () => {\r\n    const el = document.createElement(\"div\");\r\n    el.innerHTML =\r\n      \"<div style='text-align: left'><h3>How to use the Command Line</h3><p>This command line lets you use common bakery nicknames to enter orders.</p><p>To find a customer, enter a nickname.  Try 'high' or 'kberg'.  For a full list of customers and nicknames, <a href='/Customers' target='blank'>CLICK HERE</a></p><p>To enter a new product order, try '5 bag' or '10 bz' or '12 pl'.  You can even put them all in one line like '5 bag 10 bz 12 pl'. For a list of product nicknames, <a href='/Products' target='blank'>CLICK HERE</a></p><p>To jump to a future date, try 'tomorrow','2day','sun','mon','tues', etc.</p><p>To enter a retail order, type 'retail', then a space, then the customer's name.  For example, 'retail Milos'</p></div>\";\r\n\r\n    swal({\r\n      showConfirmButton: true,\r\n      confirmButtonText: '<a href=\"/Customers\">Customers</a>',\r\n      cancelBUttonText: '<a href=\"/Products\">Products</a>',\r\n\r\n      content: el,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CommandLine>\r\n        <span className=\"p-float-label\">\r\n          <InputText id=\"orderCommand\" size=\"50\" onKeyUp={handleInput}/>\r\n          <label htmlFor=\"orderCommand\">\r\n            Enter Customers, Orders, Dates ...\r\n          </label>\r\n        </span>\r\n        <Button\r\n          icon=\"pi pi-question\"\r\n          className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n          onClick={(e) => lookingForHelp(e)}\r\n        />\r\n      </CommandLine>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OrderCommandLine;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["977","978","979","980","981","982","983","984","985"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composePastryPrep.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToPrep.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BucketAmount.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BinInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\PanAmount.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\GetMixInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BagMixesScreen.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\MixFormula.js",["986"],"import { getMixInfo } from './GetMixInfo'\r\n\r\nexport const mixFormula = (doughs, infoWrap, multi) => {\r\n    //  Set up Mix 1\r\n  \r\n    let [dough, multiple, stickerAmount, bucketSets, mixes, info] = getMixInfo(\r\n      doughs,\r\n      infoWrap\r\n    );\r\n     stickerAmount = (\r\n      Number(dough.needed) +\r\n      Number(dough.buffer) +\r\n      Number(dough.short)\r\n    ).toFixed(2);\r\n    \r\n    console.log(info.bucketSets)\r\n    console.log(bucketSets)\r\n    console.log(\"stickerAmount\",stickerAmount)\r\n    console.log(multiple[multi])\r\n    console.log(dough.oldDough)\r\n    let Mix1BucketSets = Math.round(dough.bucketSets * multiple[multi]);\r\n    \r\n    let Mix1OldDough = (dough.oldDough * multiple[multi]).toFixed(2);\r\n    let Mix150lbFlour = Math.floor(\r\n      (0.5731 * ((stickerAmount-dough.oldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) / 50\r\n    );\r\n    let Mix125lbWater = Math.floor(\r\n      (0.3721 * ((stickerAmount-dough.oldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) / 25\r\n    );\r\n    let Mix1BreadFlour = (\r\n      (0.5731 * ((stickerAmount-dough.oldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) % 50\r\n    ).toFixed(2);\r\n    let Mix1WholeWheat = (0.038 * (stickerAmount-dough.oldDough) * multiple[multi]).toFixed(2);\r\n    let Mix1Water = (\r\n      ((0.3721 * (stickerAmount-dough.oldDough) - bucketSets * 19.22) * multiple[multi]) %\r\n      25\r\n    ).toFixed(2);\r\n    let Mix1Salt = (0.013 * (stickerAmount-dough.oldDough) * multiple[multi]).toFixed(2);\r\n    let Mix1Yeast = (0.002 * (stickerAmount-dough.oldDough) * multiple[multi]).toFixed(2);\r\n  \r\n    return [\r\n      { title: \"Bucket Sets\", amount: Mix1BucketSets },\r\n      { title: \"Old Dough\", amount: Mix1OldDough },\r\n      { title: \"50 lb. Bread Flour\", amount: Mix150lbFlour },\r\n      { title: \"25 lb. Bucket Water\", amount: Mix125lbWater },\r\n      { title: \"Bread Flour\", amount: Mix1BreadFlour },\r\n      { title: \"Whole Wheat Flour\", amount: Mix1WholeWheat },\r\n      { title: \"Water\", amount: Mix1Water },\r\n      { title: \"Salt\", amount: Mix1Salt },\r\n      { title: \"Yeast\", amount: Mix1Yeast },\r\n    ];\r\n  };","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js",["987","988","989","990","991","992","993","994","995"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport Amplify, { Auth, API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { tomorrow } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { createRetailOrderCustomers } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst CustomerGroup = ({ database, customerGroup, setCustomerGroup }) => {\r\n  const { orderTypeWhole, setModifications } = useContext(ToggleContext);\r\n  const [userNum, setUserNum] = useState()\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n\r\n    setChosen,\r\n    setDelivDate,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let currentUser = Auth.currentAuthenticatedUser().then((use) =>\r\n      setUserNum(use.attributes.sub)\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let newCustList = clonedeep(customers)\r\n    if (database.length > 0) {\r\n      for (let cust of newCustList){\r\n        if (cust.userSubs === null){\r\n          cust.userSubs = []\r\n        }\r\n      }\r\n      console.log(\"userNum\",userNum)\r\n      console.log(\"customerSelect\",newCustList)\r\n      let customerSelect = newCustList.filter(cust => cust.userSubs.includes(userNum) || userNum===\"64205737-fcdc-44a2-bd87-e951873d2366\")\r\n      orderTypeWhole\r\n        ? setCustomerGroup(customerSelect)\r\n        : setCustomerGroup(createRetailOrderCustomers(orders));\r\n    }\r\n  }, [customers, orderTypeWhole, orders, database, userNum]);\r\n\r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen);\r\n    setDelivDate(tomorrow());\r\n   \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dropdown\r\n        id=\"customers\"\r\n        value={chosen}\r\n        options={customerGroup}\r\n        optionLabel=\"custName\"\r\n        placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n        onChange={(e) => handleChosen(e.value.custName)}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CustomerGroup;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js",["996"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst TitleFrame = styled.div`\r\n  display: flex;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst TitleFramePhone = styled.div`\r\n  display: block;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 10px 0;\r\n`;\r\nconst DateStyle = styled.h4`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst ho = {\r\n  color: \"red\",\r\n};\r\n\r\nconst so = {\r\n  color: \"rgb(66, 97, 201)\",\r\n};\r\n\r\nconst TitleBox = () => {\r\n  const {\r\n    cartList,\r\n    standList,\r\n    orderTypeWhole,\r\n  } = useContext(ToggleContext);\r\n\r\n  const [orderType, setOrderType] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    if (cartList) {\r\n      setOrderType(\"Cart\");\r\n    } else {\r\n      if (standList) {\r\n        setOrderType(\"Stand\");\r\n      } else {\r\n        setOrderType(\"Hold\");\r\n      }\r\n    }\r\n  }, [cartList, standList]);\r\n\r\n  const changeDate = (date) => {\r\n    let fd = new Date(date);\r\n    fd.setMinutes(fd.getMinutes() + fd.getTimezoneOffset());\r\n    let returnDate = fd.toDateString();\r\n\r\n    return returnDate;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {orderTypeWhole ? (\r\n        <React.Fragment>\r\n          <TitleFramePhone>\r\n            <Title style={cartList ? so : standList ? so : ho}>\r\n              Wholesale {orderType} Order\r\n            </Title>\r\n            <DateStyle>{delivDate ? changeDate(delivDate) : \"\"}</DateStyle>\r\n          </TitleFramePhone>\r\n        </React.Fragment>\r\n      ) : (\r\n        <h2 style={standList ? so : ho}>Retail {orderType} Order</h2>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TitleBox;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js",["997","998","999","1000","1001","1002","1003","1004"],"import React, { useContext, useEffect,useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst RouteSelect = ({ database, setDatabase, customerGroup }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const { setModifications, cartList } = useContext(ToggleContext);\r\n\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (customerGroup) {\r\n      for (let cust of customerGroup) {\r\n        if (cust[\"custName\"] === chosen) {\r\n          switch (cust[\"zoneName\"]) {\r\n            case \"slopick\":\r\n              setRoute(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setRoute(\"atownpick\");\r\n              break;\r\n            default:\r\n              setRoute(\"deliv\");\r\n          }\r\n        }\r\n      }\r\n      if (currentCartList) {\r\n        let orderCheck = currentCartList.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate) &&\r\n            Number(ord.qty > 0)\r\n        );\r\n\r\n        if (orderCheck.length > 0) {\r\n          switch (orderCheck[0].route) {\r\n            case \"slopick\":\r\n              setRoute(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setRoute(\"atownpick\");\r\n              break;\r\n            default:\r\n              setRoute(\"deliv\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [chosen, delivDate, customerGroup, currentCartList]);\r\n\r\n  const handleSetRoute = (e) => {\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.route = e;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.route = route;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true)\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RadioButton\r\n        value=\"deliv\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"deliv\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"delivery\">Delivery</label>\r\n      <RadioButton\r\n        value=\"slopick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"slopick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n      <RadioButton\r\n        value=\"atownpick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"atownpick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RouteSelect;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js",["1005","1006","1007","1008","1009","1010","1011"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst PONote = ({ database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const { cartList, setModifications } = useContext(ToggleContext);\r\n\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    ponote,\r\n    setPonote,\r\n    delivDate,\r\n    currentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const orderCheck = () => {\r\n    let orderCheck = orders.filter(\r\n      (ord) =>\r\n        ord[\"custName\"] === chosen &&\r\n        ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n\r\n    if (orderCheck.length > 0) {\r\n      return orderCheck[0];\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      setPonote(\"\");\r\n      let checkOrder = orderCheck();\r\n      if (checkOrder) {\r\n        setPonote(checkOrder.PONote);\r\n      }\r\n    }\r\n  }, [chosen, delivDate, database]);\r\n\r\n  const updateOrders = (e) => {\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.PONote = e.target.value;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.PONote = ponote;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true)\r\n    \r\n    setPonote(e.target.value);\r\n    document.getElementById(\"inPo\").value = \"\";\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateOrders(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    if (e.target.value) {\r\n      updateOrders(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <span className=\"p-float-label\">\r\n        <InputText\r\n          id=\"inPo\"\r\n          size=\"25\"\r\n          placeholder={ponote}\r\n          onChange={(e) => handleChange(e)}\r\n          onBlur={(e) => handleBlur(e)}\r\n          disabled={\r\n            currentCartList.length !== 0 || cartList === true ? false : true\r\n          }\r\n        />\r\n        <label htmlFor=\"in\">\r\n          {ponote === \"\" ? \"PO#/Special Instructions...\" : \"\"}\r\n        </label>\r\n      </span>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PONote;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js",["1012","1013","1014","1015","1016","1017","1018","1019"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { getRate }from \"../../../../helpers/billingGridHelpers\"\r\n\r\n\r\n\r\nimport {\r\n  updateOrder,\r\n  createOrder,\r\n  createStanding,\r\n  updateStanding,\r\n} from \"../../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction AddUpdate({ database, setDatabase }) {\r\n  const [products, customers, routes, standing, orders,d,dd, altPricing] = database;\r\n  const { route, ponote } = useContext(CurrentDataContext);\r\n  const {\r\n    delivDate,\r\n    chosen,\r\n    currentCartList,\r\n    standArray,\r\n  } = useContext(CurrentDataContext);\r\n  const {\r\n      reload,\r\n      setReload \r\n  } = useContext(ToggleContext)\r\n\r\n  const {\r\n    orderTypeWhole,\r\n    modifications,\r\n    setModifications,\r\n    cartList,\r\n    standList,\r\n    setIsLoading,\r\n  } = useContext(ToggleContext);\r\n\r\n  const handleUpdateCart = async () => {\r\n    \r\n    for (let ord of currentCartList) {\r\n      console.log(\"ord\",ord)\r\n      let rte = route;\r\n      let price = getRate(products,ord, altPricing)\r\n\r\n      const updateDetails = {\r\n        qty: ord[\"qty\"],\r\n        prodName: ord[\"prodName\"],\r\n        custName: chosen,\r\n        PONote: ponote,\r\n        rate: price,\r\n        route: rte,\r\n        SO: ord[\"qty\"],\r\n        isWhole: orderTypeWhole,\r\n        delivDate: convertDatetoBPBDate(delivDate),\r\n        timeStamp: new Date(),\r\n      };\r\n\r\n    \r\n      if (ord[\"id\"]) {\r\n        console.log(\"trying update\")\r\n        updateDetails.id = ord[\"id\"];\r\n        updateDetails._version = ord[\"_version\"];\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful update\");\r\n        } catch (error) {\r\n          console.log(updateDetails.prodName, \"Failed Update\");\r\n        }\r\n      } else {\r\n        console.log(\"trying create\")\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful create\");\r\n        } catch (error) {\r\n          console.log(updateDetails.prodName, \"Failed create\", error);\r\n        }\r\n      }\r\n    }\r\n    setReload(!reload);\r\n  };\r\n\r\n\r\n  const handleUpdateStanding = async () => {\r\n    for (let stand of standArray) {\r\n        if (stand[\"id\"]) {\r\n          const updateDetails = {\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n            id: stand[\"id\"],\r\n            _version: stand[\"_version\"],\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        } else {\r\n          const updateDetails = {\r\n            custName: chosen,\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n     setReload(!reload) \r\n  }\r\n  \r\n  const handleAddUpdate = async () => {\r\n    setIsLoading(true)\r\n    if (cartList) {\r\n      handleUpdateCart()\r\n    } else {\r\n      handleUpdateStanding()\r\n    }\r\n    //setReload(!reload)\r\n    \r\n   \r\n    try{\r\n      document.getElementById(\"orderCommand\").focus();\r\n    } catch {\r\n      console.log()\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      label=\"Add/Update\"\r\n      icon=\"pi pi-plus\"\r\n      disabled={chosen === \"  \"}\r\n      onClick={handleAddUpdate}\r\n      className={\r\n        modifications\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default AddUpdate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["1020","1021","1022","1023","1024"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  font-size: 1em;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-self: center;\r\n  row-gap: 10px;\r\n`;\r\nconst StandInput = styled.input`\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  width: 80%;\r\n`;\r\n\r\nconst entryNotZero = {\r\n  fontSize: \"1.1em\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst entryZero = {\r\n  fontSize: \"1em\",\r\n  fontWeight: \"normal\",\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst BuildCurrentStandingList = ({ database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { setStandList, setModifications } = useContext(ToggleContext);\r\n  const { chosen, standArray, setStandArray } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let Stand = standing.filter((stand) => stand[\"custName\"] === chosen);\r\n    if (Stand.length > 0) {\r\n      Stand = Stand[0][\"isStand\"];\r\n    } else {\r\n      Stand = true;\r\n    }\r\n\r\n    setStandList(Stand);\r\n    let buildStandArray = standing.filter(\r\n      (stand) => stand[\"isStand\"] === Stand && stand[\"custName\"] === chosen\r\n    );\r\n\r\n    setStandArray(buildStandArray);\r\n    \r\n  }, [chosen, standing]);\r\n\r\n  const handleRemove = (index) => {\r\n    let ind = standArray.findIndex((stand) => stand[\"prodName\"] === index);\r\n    let adjustedStanding = clonedeep(standArray);\r\n    adjustedStanding[ind][\"Sun\"] = 0;\r\n    adjustedStanding[ind][\"Mon\"] = 0;\r\n    adjustedStanding[ind][\"Tue\"] = 0;\r\n    adjustedStanding[ind][\"Wed\"] = 0;\r\n    adjustedStanding[ind][\"Thu\"] = 0;\r\n    adjustedStanding[ind][\"Fri\"] = 0;\r\n    adjustedStanding[ind][\"Sat\"] = 0;\r\n    setStandArray(adjustedStanding);\r\n    setModifications(true)\r\n    \r\n  };\r\n\r\n  const handleQtyModify = (e, qty) => {\r\n    if (isNaN(e.target.value)) {\r\n      e.target.value = null;\r\n      swal({\r\n        text: \"Only Numbers Please\",\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    }\r\n    let day = e.target.dataset.day;\r\n    let prod = e.target.name;\r\n    let arrayToModify = clonedeep(standArray);\r\n    let ind = arrayToModify.findIndex((array) => array[\"prodName\"] === prod);\r\n    arrayToModify[ind][day] = qty;\r\n\r\n    setStandArray(arrayToModify);\r\n\r\n   \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label>PRODUCT</label>\r\n        <label>S</label>\r\n        <label>M</label>\r\n        <label>T</label>\r\n        <label>W</label>\r\n        <label>T</label>\r\n        <label>F</label>\r\n        <label>S</label>\r\n        <label></label>\r\n        {standArray\r\n          ? standArray.map((order) => (\r\n              <React.Fragment key={order[\"prodName\"] + \"frag\"}>\r\n                <label key={order[\"prodName\"] + \"prod\"}>\r\n                  {order[\"prodName\"]}\r\n                </label>\r\n\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sun\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sun\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_1\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sun\"]}\r\n                  data-day=\"Sun\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = null;\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Mon\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Mon\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_2\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Mon\"]}\r\n                  data-day=\"Mon\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Tue\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Tue\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_3\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Tue\"]}\r\n                  data-day=\"Tue\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Wed\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Wed\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_4\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Wed\"]}\r\n                  data-day=\"Wed\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Thu\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Thu\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_5\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Thu\"]}\r\n                  data-day=\"Thu\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Fri\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Fri\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_6\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Fri\"]}\r\n                  data-day=\"Fri\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sat\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sat\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_7\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sat\"]}\r\n                  data-day=\"Sat\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n\r\n                <Button\r\n                  icon=\"pi pi-trash\"\r\n                  className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                  key={order[\"prodName\"] + \"rem\"}\r\n                  name={order[\"prodName\"]}\r\n                  onClick={(e) => handleRemove(order[\"prodName\"])}\r\n                ></Button>\r\n              </React.Fragment>\r\n            ))\r\n          : \"\"}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentStandingList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["1025","1026","1027","1028","1029"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport TrashCan from \"./BuildCurrentCartListParts/TrashCan\";\r\nimport Product from \"./BuildCurrentCartListParts/Product\";\r\nimport Previous from \"./BuildCurrentCartListParts/Previous\";\r\nimport Rate from \"./BuildCurrentCartListParts/Rate\";\r\nimport Total from \"./BuildCurrentCartListParts/Total\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { buildCurrentOrder } from \"../../../../helpers/CartBuildingHelpers\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { getRate } from \"../../../../helpers/billingGridHelpers\";\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 0.5fr 2fr 0.5fr 0.5fr 0.75fr 0.5fr;\r\n  row-gap: 4px;\r\n  flex-shrink: 1;\r\n`;\r\n\r\nconst OrderGridPhone = styled.div`\r\n  width: 100%;\r\n  \r\n  padding: 10px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 2.5fr 1fr 1fr;\r\n  row-gap: 2px;\r\n  flex-shrink: 1;\r\n`;\r\n\r\nconst PhoneWrap = styled.div`\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: lightblue;\r\n  margin: 10px;\r\n  `\r\nconst TrashCanContainer = styled.div`\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst BuildCurrentCartList = ({ database, setDatabase }) => {\r\n  const [grandTotal, setGrandTotal] = useState();\r\n  const [products, customers, routes, standing, orders, d, dd, altPricing] =\r\n    database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    ponote,\r\n    route,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const { reload, setModifications } = useContext(ToggleContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      if (chosen !== \"  \") {\r\n        let currentOrderList = buildCurrentOrder(\r\n          chosen,\r\n          delivDate,\r\n          orders,\r\n          standing,\r\n          route,\r\n          ponote\r\n        );\r\n\r\n        for (let curr of currentOrderList) {\r\n          curr[\"temp\"] = false;\r\n          if (curr.SO !== curr.qty) {\r\n            setModifications(true);\r\n          }\r\n        }\r\n        let template\r\n        try{\r\n          template =\r\n          customers[customers.findIndex((cust) => cust.custName === chosen)]\r\n            .templateProd;\r\n        } catch {\r\n          template =[]\r\n        }\r\n        \r\n        let currentProds =[]\r\n        try{\r\n          currentProds = currentOrderList.map((curr) => curr.prodName);\r\n        } catch {\r\n          currentProds =[]\r\n        }\r\n        try{\r\n          template = template.filter((temp) => !currentProds.includes(temp));\r\n        } catch {\r\n          template = []\r\n        }\r\n       \r\n        for (let temp of template) {\r\n          let tempOrder = {\r\n            custName: chosen,\r\n            delivDate: convertDatetoBPBDate(delivDate),\r\n            isWhole: true,\r\n            prodName: temp,\r\n            SO: 0,\r\n            qty: 0,\r\n            temp: true,\r\n          };\r\n          currentOrderList.push(tempOrder);\r\n          console.log(\"currentOrderList\",currentOrderList)\r\n        }\r\n        sortAtoZDataByIndex(currentOrderList, \"prodName\");\r\n        setCurrentCartList(currentOrderList);\r\n      }\r\n    }\r\n  }, [chosen, delivDate, orders, standing, reload]);\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length > 0) {\r\n      let grandTotal = 0;\r\n\r\n      for (let ord in currentCartList) {\r\n        grandTotal =\r\n          grandTotal +\r\n          getRate(products, currentCartList[ord], altPricing) *\r\n            currentCartList[ord].qty;\r\n      }\r\n\r\n      setGrandTotal(grandTotal.toFixed(2));\r\n    }\r\n  }, [currentCartList]);\r\n\r\n  const innards1 =(\r\n    <OrderGrid>\r\n        <label></label>\r\n        <label>PRODUCT</label>\r\n        <label>QTY</label>\r\n        <label>PREV</label>\r\n        <label>RATE</label>\r\n        <label>TOTAL</label>\r\n        {currentCartList\r\n          .filter((curr) => curr.qty !== 0 || curr.temp === true)\r\n          .map((order) => (\r\n            <React.Fragment key={uuidv4() + \"b\"}>\r\n              <TrashCanContainer>\r\n                <TrashCan\r\n                  order={order}\r\n                  database={database}\r\n                  setDatabase={setDatabase}\r\n                />\r\n              </TrashCanContainer>\r\n\r\n              <Product\r\n                order={order}\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n              />\r\n              <Previous order={order} />\r\n              <Rate order={order} database={database} />\r\n              <Total order={order} database={database} />\r\n            </React.Fragment>\r\n          ))}\r\n        <label></label>\r\n        <label></label>\r\n        <label></label>\r\n        <label></label>\r\n        <label>GRAND TOTAL</label>\r\n        <label>$ {grandTotal}</label>\r\n      </OrderGrid>\r\n  )\r\n\r\n  const innards2 =(\r\n    <React.Fragment>\r\n        \r\n        {currentCartList\r\n          .filter((curr) => curr.qty !== 0 || curr.temp === true)\r\n          .map((order) => (\r\n            <React.Fragment key={uuidv4() + \"b\"}>\r\n              <PhoneWrap>\r\n              <OrderGridPhone>\r\n              \r\n              <Product\r\n                order={order}\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n              />\r\n              <Previous order={order} />\r\n              </OrderGridPhone>\r\n              <OrderGridPhone>\r\n              <TrashCanContainer>\r\n                <TrashCan\r\n                  order={order}\r\n                  database={database}\r\n                  setDatabase={setDatabase}\r\n                />\r\n              </TrashCanContainer>\r\n               \r\n              <Rate order={order} database={database} />\r\n              \r\n              \r\n              <Total order={order} database={database} />\r\n              </OrderGridPhone>\r\n              </PhoneWrap>\r\n            </React.Fragment>\r\n          ))}\r\n       \r\n        <label></label>\r\n        <label>GRAND TOTAL</label>\r\n        <label>$ {grandTotal}</label>\r\n      </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {width > breakpoint ? innards1 : innards2 }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentCartList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js",["1030","1031","1032","1033"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct, productList, setProductList }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate } =\r\n    useContext(CurrentDataContext);\r\n  \r\n  \r\n  useEffect(() => {\r\n    if (database.length>0){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      orders,\r\n      chosen,\r\n      delivDate,\r\n      customers\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value.prodName);\r\n  };\r\n\r\n  \r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      placeholder={\r\n        pickedProduct === \"\" ? \"Select a Product ...\" : pickedProduct\r\n      }\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen !== \"  \" ? false : true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js",["1034"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\n\r\nconst StandOrHold = ({ standHold, setStandHold }) => {\r\n  const { standList, setStandList, setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    standList ? setStandHold(\"MAKE H.O.\") : setStandHold(\"MAKE S.O.\");\r\n  }, [standList]);\r\n\r\n  const handleStandHold = () => {\r\n    let newStand = !standList;\r\n    setModifications(true)\r\n    setStandList(newStand);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className={\r\n        !standList\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n      onClick={handleStandHold}\r\n      label={standHold}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StandOrHold;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js",["1035","1036","1037","1038","1039"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\nimport { decideWhetherToAddOrModify } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst AddProduct = ({ database, setDatabase, pickedProduct, setPickedProduct }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n  const { orderTypeWhole, setModifications } = useContext(ToggleContext);\r\n\r\n  const handleAdd = () => {\r\n    let qty = Number(document.getElementById(\"addedProdQty\").value);\r\n    let ind = products.findIndex(prod => prod.prodName === pickedProduct.prodName)\r\n    let rate = products[ind].wholePrice\r\n  \r\n    let newOrder = {\r\n      qty: qty,\r\n      prodName: pickedProduct.prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      rate: rate,\r\n      SO: 0,\r\n      isWhole: orderTypeWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    let newOrderList = decideWhetherToAddOrModify(\r\n      orders,\r\n      newOrder,\r\n      delivDate\r\n    );\r\n    \r\n    let DBToUpdate = clonedeep(database)\r\n    DBToUpdate[4] = newOrderList\r\n    setDatabase(DBToUpdate)\r\n    setModifications(true)\r\n    document.getElementById(\"addedProdQty\").value = null;\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      label=\"ADD\"\r\n      disabled={chosen === \"  \" || pickedProduct === \"\"}\r\n      icon=\"pi pi-plus\"\r\n      onClick={() => handleAdd()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js",["1040","1041","1042","1043","1044","1045"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate, currentCartList } = useContext(CurrentDataContext);\r\n\r\n  const [productList, setProductList] = useState();\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (database.length>0 && currentCartList){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      currentCartList,\r\n      chosen,\r\n      delivDate,\r\n      customers\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate, currentCartList]);\r\n\r\n  const handleChange = (e) => {\r\n    let targ = e.target.value;\r\n\r\n    if (targ.prodName.includes(\"IN PRODUCTION\")) {\r\n      targ.prodName = targ.prodName.slice(0, -15);\r\n      swal({\r\n        text: `This product is already in Production.  We will do our best but we cannot guarantee delivery.  Rush fee may apply.`,\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 6000,\r\n      });\r\n    }\r\n    setPickedProduct(targ);\r\n    \r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      placeholder=\"Select a product\"\r\n      name=\"products\"\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen !== \"  \" ? false : true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js",["1046","1047","1048","1049","1050"],"import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst InputBox = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  padding: 0;\r\n  margin: 5px 10px;\r\n  color: rgb(66, 97, 201);\r\n`;\r\n\r\nconst Product = ({ order, database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote,\r\n  } = useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  const updateProduct = (prodName, e) => {\r\n    let qty = Number(e);\r\n    let ordToMod = clonedeep(orders);\r\n    let ind = ordToMod.findIndex(\r\n      (ord) =>\r\n        ord.prodName === prodName &&\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n    );\r\n\r\n    if (ind > -1) {\r\n      ordToMod[ind].qty = qty;\r\n    } else {\r\n      // find item in currentCartOrder\r\n      let cartInd = currentCartList.findIndex(\r\n        (curr) => curr.prodName === prodName\r\n      );\r\n\r\n      currentCartList[cartInd].route = route;\r\n      currentCartList[cartInd].PONote = ponote;\r\n      currentCartList[cartInd].qty = qty;\r\n\r\n      ordToMod.push(currentCartList[cartInd]);\r\n    }\r\n    let DBToUpdate = clonedeep(database);\r\n    DBToUpdate[4] = ordToMod;\r\n    setDatabase(DBToUpdate);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleQtyModify = (prodName, e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateProduct(prodName, e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (prodName, e) => {\r\n    if (e.value) {\r\n      updateProduct(prodName, e.value);\r\n    }\r\n  };\r\n\r\n  const innards1 = (\r\n    <InputBox>\r\n      <input\r\n        type=\"text\"\r\n        size=\"3\"\r\n        maxLength=\"4\"\r\n        key={uuidv4() + \"c\"}\r\n        id={order[\"prodName\"] + \"item\"}\r\n        name={order[\"prodName\"]}\r\n        data-qty={order[\"qty\"]}\r\n        placeholder={order[\"qty\"]}\r\n        onKeyUp={(e) => {\r\n          handleQtyModify(order[\"prodName\"], e);\r\n        }}\r\n        onBlur={(e) => {\r\n          handleBlur(order[\"prodName\"], e.target);\r\n        }}\r\n      ></input>\r\n    </InputBox>\r\n  );\r\n\r\n  const innards2 = (\r\n    <InputNumber \r\n    value={order[\"qty\"]}\r\n    size = \"2\"\r\n    style={{height: '5em'}}\r\n    onValueChange={(e) => {\r\n      handleBlur(order[\"prodName\"], e);\r\n    }}\r\n    \r\n    />\r\n  \r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title key={uuidv4()}>{order[\"prodName\"]}</Title>\r\n      {width > breakpoint ? innards1 : innards2}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js",["1051","1052","1053","1054","1055"],"import React, { useContext } from \"react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst TrashCan = ({ order, database, setDatabase }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate,currentCartList,\r\n    setCurrentCartList, } = useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  const handleTrash = (prodName) => {\r\n    let ordToMod = clonedeep(currentCartList);\r\n    let ind = ordToMod.findIndex(\r\n      (ord) =>\r\n        ord.prodName === prodName &&\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n    );\r\n    ordToMod[ind].qty = 0;\r\n    \r\n    setCurrentCartList(ordToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      icon=\"pi pi-trash\"\r\n      className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n      value={0}\r\n      onClick={(e) => {\r\n        handleTrash(order[\"prodName\"]);\r\n      }}\r\n      key={uuidv4() + \"e\"}\r\n      name={order[\"prodName\"]}\r\n      data-qty={order[\"qty\"]}\r\n      id={order[\"prodName\"]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TrashCan;\r\n",["1056","1057"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Rate.js",["1058","1059","1060","1061","1062","1063"],"import React from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { getRate } from \"../../../../../helpers/billingGridHelpers\"\r\n\r\nconst RateContainer = styled.div`\r\n  color: black;\r\n`;\r\n\r\nconst Rate = ({ order,database }) => {\r\n \r\n  const [products, customers, routes, standing, orders, d,dd, altPricing] = database;\r\n  let price = getRate(products,order, altPricing)\r\n \r\n  return (\r\n    <RateContainer>\r\n      <label key={uuidv4() + \"d\"}>\r\n        {price.toFixed(2)}/ea.\r\n      </label>\r\n    </RateContainer>\r\n  );\r\n};\r\n\r\nexport default Rate;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Total.js",["1064","1065","1066","1067","1068","1069"],"import React from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { getRate } from \"../../../../../helpers/billingGridHelpers\"\r\n\r\nconst TotalContainer = styled.h3`\r\n \r\n color: rgb(88, 96, 115);\r\n`;\r\n\r\n\r\nconst Total = ({ order, database }) => {\r\n \r\n  const [products, customers, routes, standing, orders,d,dd, altPricing] = database;\r\n  let price = getRate(products,order, altPricing)\r\n  price = price*order.qty\r\n  \r\n  return (\r\n   \r\n      <TotalContainer key={uuidv4() + \"d\"}>\r\n        {price.toFixed(2)}\r\n      </TotalContainer>\r\n    \r\n  );\r\n};\r\n\r\nexport default Total;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\delivOrder\\delivOrder.js",["1070","1071"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { updateCustomer } from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst DelivOrder = () => {\r\n  let { setIsLoading, modifications, setModifications } =\r\n    useContext(ToggleContext);\r\n\r\n  const [customerList, setCustomerList] = useState();\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let custFilt;\r\n    custFilt = customers.filter(\r\n      (cust) =>\r\n        cust.zoneName !== \"slopick\" &&\r\n        cust.zoneName !== \"atownpick\" &&\r\n        cust.zoneName !== \"Prado Retail\" &&\r\n        cust.zoneName !== \"Carlton Retail\"\r\n    );\r\n    sortAtoZDataByIndex(custFilt,\"delivOrder\")\r\n    setCustomerList(custFilt);\r\n  }, [customers]);\r\n\r\n  \r\n\r\n  const columns = [\r\n    { field: \"custName\", header: \"Customer\" },\r\n    { field: \"zoneName\", header: \"Zone\" },\r\n    { field: \"addr1\", header: \"Address\" },\r\n    { field: \"city\", header: \"City\" },\r\n  ];\r\n\r\n  \r\n\r\n  const onRowReorder = (e) => {\r\n    setCustomerList(e.value);\r\n    setModifications(true);\r\n  };\r\n\r\n  const updateDeliveryOrder = async () => {\r\n    setIsLoading(true)\r\n    let ind = 0;\r\n    for (let cust of customerList) {\r\n      ind=ind+1\r\n      const updateDetails = {\r\n        id: cust.id,\r\n        delivOrder: ind,\r\n      };\r\n\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateCustomer, { input: { ...updateDetails } })\r\n        );\r\n        console.log(\"Updated\", updateDetails.id)\r\n      } catch (error) {\r\n        console.log(\"error on creating Orders\", error);\r\n        setIsLoading(false);\r\n      }\r\n    \r\n    }\r\n    setIsLoading(false)\r\n    setModifications(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <Button\r\n        label=\"Update Delivery Order\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={updateDeliveryOrder}\r\n        className={\r\n          modifications\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n      />\r\n      <div>\r\n        <div className=\"card\">\r\n          <DataTable value={customerList} onRowReorder={onRowReorder}>\r\n            <Column rowReorder style={{ width: \"3em\" }} />\r\n\r\n            <Column field=\"custName\" header=\"customer\"></Column>\r\n            <Column field=\"zoneName\" header=\"Zone\"></Column>\r\n            <Column field=\"addr1\" header=\"Address\"></Column>\r\n            <Column field=\"city\" header=\"City\"></Column>\r\n          </DataTable>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DelivOrder;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\custProd\\custProd.js",["1072","1073","1074","1075","1076"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport {\r\n  updateCustomer,\r\n  updateAltPricing,\r\n  createAltPricing,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport { fetchAltPricing } from \"../../../helpers/databaseFetchers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst CustProds = () => {\r\n  let { setIsLoading, modifications, setModifications } =\r\n    useContext(ToggleContext);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n\r\n  const [productList, setProductList] = useState(products);\r\n  const [customerGroup, setCustomerGroup] = useState(customers);\r\n  const [altPricing, setAltPricing] = useState();\r\n\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  const {\r\n    chosen,\r\n\r\n    setChosen,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    if (customers.length > 0) {\r\n      setCustomerGroup(customers);\r\n    }\r\n  }, [customers]);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n    setChosen(\"\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let newProdList = clonedeep(products);\r\n      for (let prod of newProdList) {\r\n        prod.updatedRate =\r\n          products[\r\n            products.findIndex((up) => up.prodName === prod.prodName)\r\n          ].wholePrice;\r\n        for (let alt of altPricing) {\r\n          if (alt.custName === chosen && alt.prodName === prod.prodName) {\r\n            prod.updatedRate = alt.wholePrice;\r\n          }\r\n        }\r\n        let customChecks =\r\n          customers[customers.findIndex((custo) => chosen === custo.custName)]\r\n            .customProd;\r\n\r\n            let templateChecks =\r\n            customers[customers.findIndex((custo) => chosen === custo.custName)]\r\n              .templateProd;\r\n\r\n        prod.prePop = false\r\n\r\n        for (let check of customChecks) {\r\n          if (prod.prodName === check) {\r\n            prod.defaultInclude = !prod.defaultInclude;\r\n          }\r\n        }\r\n\r\n        for (let check of templateChecks) {\r\n          if (prod.prodName === check) {\r\n            prod.prePop = true;\r\n          }\r\n        }\r\n\r\n        \r\n\r\n        prod.prev = prod.updatedRate;\r\n      }\r\n      setProductList(newProdList);\r\n    } catch {\r\n      console.log(\"not ready yet\");\r\n    }\r\n  }, [products, altPricing, customers, chosen]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing().then((data) => setAltPricing(data));\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const isIncluded = (data) => {\r\n    return (\r\n      <React.Fragment>\r\n        <Checkbox\r\n          inputId=\"binary\"\r\n          checked={data.defaultInclude}\r\n          onChange={(e) => handleCheck(e, data.prodName)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const prePop = (data) => {\r\n    return (\r\n      <React.Fragment>\r\n        <Checkbox\r\n          inputId=\"binary\"\r\n          checked={data.prePop}\r\n          onChange={(e) => handlePrePopCheck(e, data.prodName)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const handleCheck = (e, prodName) => {\r\n    let prodListToUpdate = clonedeep(productList);\r\n    prodListToUpdate[\r\n      productList.findIndex((prod) => prod.prodName === prodName)\r\n    ].defaultInclude = e.target.checked;\r\n    setProductList(prodListToUpdate);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handlePrePopCheck = (e, prodName) => {\r\n    let prodListToUpdate = clonedeep(productList);\r\n    prodListToUpdate[\r\n      productList.findIndex((prod) => prod.prodName === prodName)\r\n    ].prePop = e.target.checked;\r\n    setProductList(prodListToUpdate);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleRateChange = (e, prodName) => {\r\n    if (e.code === \"Enter\") {\r\n      setModifications(true);\r\n     \r\n      let prodListToUpdate = clonedeep(productList);\r\n      prodListToUpdate[\r\n        productList.findIndex((prod) => prod.prodName === prodName)\r\n      ].updatedRate = e.target.value;\r\n      setProductList(prodListToUpdate);\r\n    }\r\n  };\r\n\r\n  const handleRateBlurChange = (e, prodName) => {\r\n    setModifications(true);\r\n    \r\n    let prodListToUpdate = clonedeep(productList);\r\n    prodListToUpdate[\r\n      productList.findIndex((prod) => prod.prodName === prodName)\r\n    ].updatedRate = Number(e.target.value).toFixed(2);\r\n    setProductList(prodListToUpdate);\r\n   \r\n  };\r\n\r\n  const changeRate = (data) => {\r\n    return (\r\n      <InputNumber\r\n        placeholder={data.updatedRate}\r\n        value={data.updatedRate}\r\n        size=\"4\"\r\n        mode=\"decimal\"\r\n        locale=\"en-US\"\r\n        minFractionDigits={2}\r\n        onKeyDown={(e) => handleRateChange(e, data.prodName)}\r\n        onBlur={(e) => handleRateBlurChange(e, data.prodName)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wholeData = (data) => {\r\n    let stockClassName = data.wholePrice !== data.updatedRate ? \"instock\" : \"\";\r\n    return <div className={stockClassName}>{data.wholePrice}</div>;\r\n  };\r\n\r\n  const setPrev = (data) => {\r\n    if (data.prev === data.updatedRate) {\r\n      return \"\";\r\n    } else {\r\n      return <div>{Number(data.prev).toFixed(2)}</div>;\r\n    }\r\n  };\r\n\r\n  const handleChosen = (chose) => {\r\n    let newProdList = clonedeep(products);\r\n    for (let prod of newProdList) {\r\n      prod.updatedRate =\r\n        products[\r\n          products.findIndex((up) => up.prodName === prod.prodName)\r\n        ].wholePrice;\r\n      for (let alt of altPricing) {\r\n        if (alt.custName === chosen && alt.prodName === prod.prodName) {\r\n          prod.updatedRate = alt.wholePrice;\r\n        }\r\n      }\r\n\r\n      // find chosen customer\r\n      // for cust of customProd, invert check\r\n\r\n      prod.prev = prod.updatedRate;\r\n    }\r\n    setProductList(newProdList);\r\n    setChosen(chose);\r\n  };\r\n\r\n  const rowClass = (data) => {\r\n    return {\r\n      \"not-included\": data.defaultInclude === false,\r\n      \"price-differ\": data.wholePrice !== data.updatedRate,\r\n    };\r\n  };\r\n\r\n  const updateCustProd = async () => {\r\n    let customProd = [];\r\n    let templateProd = []\r\n    \r\n    for (let prod of productList) {\r\n      let prodDefaultInclude = clonedeep(\r\n        products[products.findIndex((p) => p.prodName === prod.prodName)]\r\n          .defaultInclude)\r\n\r\n      if (prod.prev !== prod.updatedRate) {\r\n        prod.prev = prod.updatedRate;\r\n        const updateDetails = {\r\n          custName: chosen,\r\n          prodName: prod.prodName,\r\n          wholePrice: prod.updatedRate,\r\n        };\r\n\r\n        let exists = false;\r\n        for (let alt of altPricing) {\r\n          if (\r\n            alt.custName === chosen &&\r\n            alt.prodName === prod.prodName &&\r\n            alt.wholePrice !== prod.updatedRate\r\n          ) {\r\n            console.log(\"update altpricing\");\r\n            exists = true;\r\n            updateDetails[\"id\"] = alt.id;\r\n\r\n            try {\r\n              const prodData = await API.graphql(\r\n                graphqlOperation(updateAltPricing, {\r\n                  input: { ...updateDetails },\r\n                })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on fetching Prod List\", error);\r\n            }\r\n          }\r\n        }\r\n        if (exists === false) {\r\n          console.log(\"create altpricing\");\r\n          try {\r\n            const prodData = await API.graphql(\r\n              graphqlOperation(createAltPricing, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on fetching Prod List\", error);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (prod.defaultInclude !== prodDefaultInclude) {\r\n        customProd.push(prod.prodName);\r\n        \r\n      }\r\n      if (prod.prePop){\r\n        templateProd.push(prod.prodName)\r\n        \r\n        \r\n      }\r\n    }\r\n   \r\n      let id =\r\n        customers[customers.findIndex((custo) => custo.custName === chosen)].id;\r\n      const updateDetails = {\r\n        id: id,\r\n        customProd: customProd,\r\n        templateProd: templateProd\r\n      };\r\n      try {\r\n        const prodData = await API.graphql(\r\n          graphqlOperation(updateCustomer, {\r\n            input: { ...updateDetails },\r\n          })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating Customer\", error);\r\n      }\r\n    \r\n    setModifications(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <Dropdown\r\n        id=\"customers\"\r\n        value={chosen}\r\n        options={customerGroup}\r\n        optionLabel=\"custName\"\r\n        placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n        onChange={(e) => handleChosen(e.value.custName)}\r\n      />\r\n      <Button\r\n        label=\"Update Customer Products\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={updateCustProd}\r\n        className={\r\n          modifications\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n      />\r\n      {chosen !== \"\" ? (\r\n        <div className=\"orders-subtable\">\r\n          <h2>Product Availability for {chosen}</h2>\r\n          <DataTable\r\n            value={productList}\r\n            className=\"p-datatable-sm\"\r\n            rowClassName={rowClass}\r\n          >\r\n            <Column\r\n              field=\"included\"\r\n              header=\"Included\"\r\n              body={(e) => isIncluded(e, productList)}\r\n            ></Column>\r\n            <Column\r\n              field=\"prePop\"\r\n              header=\"Default Items\"\r\n              body={(e) => prePop(e, productList)}\r\n            ></Column>\r\n            <Column field=\"prodName\" header=\"Product\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              field=\"updatedRate\"\r\n              header=\"Customer Rate\"\r\n              body={(e) => changeRate(e)}\r\n            >\r\n              {\" \"}\r\n            </Column>\r\n            <Column\r\n              field=\"prev\"\r\n              header=\"Prev\"\r\n              className=\"instock\"\r\n              body={(e) => setPrev(e)}\r\n            ></Column>\r\n            <Column\r\n              field=\"wholePrice\"\r\n              header=\"Default Rate\"\r\n              body={wholeData}\r\n            ></Column>\r\n          </DataTable>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CustProds;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\CustomApp.js",["1077","1078","1079"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction CustomApp({ chosen }) {\r\n\r\n  return (\r\n    <div>{chosen} was here.</div>\r\n  );\r\n}\r\n\r\nexport default CustomApp;\r\n",["1080","1081"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\manageUsers.js",["1082"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerLoad, CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport UserList from \"./UserList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 3fr 1fr 0.25fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedUser, setSelectedUser] = useState();\r\n  const [users, setUsers] = useState(null);\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const { custLoaded, customers, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <UserList\r\n          selectedUser={selectedUser}\r\n          setSelectedUser={setSelectedUser}\r\n          users={users}\r\n          setUsers={setUsers}\r\n        />\r\n        {selectedUser && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedUser={selectedUser}\r\n                  setSelectedUser={setSelectedUser}\r\n                  users={users}\r\n                  setUsers={setUsers}\r\n                  source={source}\r\n                  setSource={setSource}\r\n                  target={target}\r\n                  setTarget={setTarget}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedUser={selectedUser}\r\n            setSelectedUser={setSelectedUser}\r\n            users={users}\r\n            setUsers={setUsers}\r\n            target={target}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Buttons.js",["1083","1084"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\n\r\nimport {\r\n  updateAuthSettings,\r\n  deleteAuthSettings,\r\n  createAuthSettings,\r\n  updateCustomer,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst Buttons = ({ selectedUser, setSelectedUser, target }) => {\r\n  const { customers, setCustLoaded } = useContext(CustomerContext);\r\n\r\n  const handleAddUser = () => {\r\n    let userName;\r\n    let tempPassword;\r\n    let phone;\r\n    let email;\r\n\r\n    swal(\"Enter User Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      userName = value;\r\n      swal(`Enter Temporary Password for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        tempPassword = value;\r\n        swal(\"Enter Phone Number:\", {\r\n          content: \"input\",\r\n        }).then((value) => {\r\n          phone = value;\r\n          swal(\"Enter Email:\", {\r\n            content: \"input\",\r\n          }).then((value) => {\r\n            email = value;\r\n            const addDetails = {\r\n              businessName: userName,\r\n              tempPassword: tempPassword,\r\n              tempUsername: userName,\r\n              phone: phone,\r\n              email: email,\r\n            };\r\n            const signUp = {\r\n              username: userName,\r\n              password: tempPassword,\r\n              attributes: {\r\n                preferred_username: userName,\r\n                phone_number: phone,\r\n                email: email,\r\n              },\r\n            };\r\n\r\n            createUsr(addDetails, signUp);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  const createUsr = async (addDetails, signUp) => {\r\n    let newbie = await Auth.signUp(signUp);\r\n    console.log(\"newbie\", newbie);\r\n    addDetails.sub = newbie.userSub;\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(createAuthSettings, { input: { ...addDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching User List\", error);\r\n    }\r\n  };\r\n\r\n  const updateUsr = async () => {\r\n    // for targ in target\r\n    //     find customer\r\n    //     if selectedUser.sub is not in userSubs, push\r\n    //     get customer.id\r\n    //     create updateDetails\r\n    //     update customer\r\n\r\n    for (let targ of target) {\r\n      let include = false;\r\n      let ind = customers.findIndex((cust) => cust.custName === targ);\r\n      try {\r\n        if (!customers[ind].userSubs.includes(selectedUser.sub)) {\r\n          include = true;\r\n        }\r\n      } catch {\r\n        include = true;\r\n      }\r\n      console.log(include);\r\n      let newSubs;\r\n      try {\r\n        newSubs = customers[ind].userSubs;\r\n      } catch {\r\n        console.log(\"don't exist\");\r\n      }\r\n      if (!newSubs) {\r\n        newSubs = [];\r\n      }\r\n      if (include === true) {\r\n        newSubs.push(selectedUser.sub);\r\n      }\r\n      let updateDetails = {\r\n        id: customers[ind].id,\r\n        userSubs: newSubs\r\n        \r\n        \r\n      };\r\n\r\n      try {\r\n        const userData = await API.graphql(\r\n          graphqlOperation(updateCustomer, { input: { ...updateDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on fetching User List\", error);\r\n      }\r\n    }\r\n\r\n    let updateDetails = {\r\n      id: selectedUser.id,\r\n      businessName: selectedUser.businessName,\r\n      firstName: selectedUser.firstName,\r\n      lastName: selectedUser.lastName,\r\n      phone: selectedUser.phone,\r\n      email: selectedUser.email,\r\n      authType: selectedUser.authType\r\n    };\r\n\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(updateAuthSettings, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${userData.data.updateAuthSettings.businessName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error on fetching User List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteUserWarn = async () => {\r\n    swal({\r\n      text: \" Are you sure that you would like to permanently delete this user?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteUsr();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteUsr = async () => {\r\n    const deleteDetails = {\r\n      id: selectedUser[\"id\"],\r\n      _version: selectedUser[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(deleteAuthSettings, { input: { ...deleteDetails } })\r\n      );\r\n      setSelectedUser();\r\n    } catch (error) {\r\n      console.log(\"error on fetching User List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a User\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddUser}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedUser && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update User\"\r\n            icon=\"pi pi-map\"\r\n            onClick={updateUsr}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedUser && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete User\"\r\n            icon=\"pi pi-minus\"\r\n            onClick={deleteUserWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Info.js",["1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listCustomers } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickUserValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst Info = ({\r\n  selectedUser,\r\n  setSelectedUser,\r\n  source,\r\n  setSource,\r\n  target,\r\n  setTarget,\r\n}) => {\r\n  const { customers, setCustLoaded } = useContext(CustomerContext);\r\n\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n  const fullCustomers = useRef();\r\n\r\n  const authTypeList = [\r\n    { authType: \"bpbadmin\" },\r\n    { authType: \"owner\" },\r\n    { authType: \"employee\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    console.log(\"selectedUser\",selectedUser)\r\n  },[selectedUser])\r\n\r\n  useEffect(() => {\r\n    let select = [];\r\n\r\n    try {\r\n      let selectSub = selectedUser[\"sub\"];\r\n      \r\n      for (let full of customers) {\r\n        try {\r\n          if (full.userSubs.includes(selectSub)) {\r\n            select.push(full.custName);\r\n          }\r\n        } catch {\r\n          console.log(\"no userSubs\");\r\n        }\r\n      }\r\n     \r\n      console.log(\"Target\", select);\r\n\r\n      setTarget(select);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [selectedUser, customers]);\r\n\r\n  useEffect(() => {\r\n    let parsedCustomers = [];\r\n    if (customers) {\r\n      parsedCustomers = customers.map((cust) => cust.custName);\r\n    }\r\n    setSource(parsedCustomers);\r\n  }, [selectedUser]);\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setTarget(event.target);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> User Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"userName\"> Business Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"businessName\"\r\n          placeholder={selectedUser.businessName}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n          }\r\n          onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n        />\r\n      </div>\r\n      <br />\r\n      {selectedUser.tempUsername ? (\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"firstName\"> Temporary Username</label>\r\n            <br />\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"tempUsername\"\r\n            placeholder={selectedUser.tempUsername}\r\n            disabled\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n            }\r\n            onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <br />\r\n      {selectedUser.tempPassword ? (\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"firstName\"> Temporary Password</label>\r\n            <br />\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"tempPassword\"\r\n            placeholder={selectedUser.tempPassword}\r\n            disabled\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n            }\r\n            onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <br />\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"firstName\"> User First Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"firstName\"\r\n          placeholder={selectedUser.firstName}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n          }\r\n          onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"lastName\"> User Last Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"lastName\"\r\n          placeholder={selectedUser.lastName}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n          }\r\n          onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"phone\"> Phone</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"phone\"\r\n          placeholder={selectedUser.phone}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n          }\r\n          onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"phone\"> Email</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"email\"\r\n          placeholder={selectedUser.email}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedUser(setValue(e, selectedUser))\r\n          }\r\n          onBlur={(e) => setSelectedUser(fixValue(e, selectedUser))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"authType\">Authorization Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"authType\"\r\n          optionLabel=\"authType\"\r\n          options={authTypeList}\r\n          onChange={(e) => setSelectedUser(setDropDownValue(e, selectedUser))}\r\n          placeholder={selectedUser.authType}\r\n        />\r\n      </div>\r\n      <br />\r\n      {selectedUser.authType !== \"bpbadmin\" ? (\r\n        <PickList\r\n          sourceHeader=\"Locations\"\r\n          targetHeader=\"User has Access\"\r\n          source={source}\r\n          target={target}\r\n          itemTemplate={itemTemplate}\r\n          onChange={onChange}\r\n          sourceStyle={{ height: \"250px\" }}\r\n          targetStyle={{ height: \"250px\" }}\r\n        ></PickList>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\UserList.js",["1097"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listAuthSettingss } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst UserList = ({ selectedUser, setSelectedUser, users, setUsers }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchUsers();\r\n    setIsLoading(false);\r\n  }, [users]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(listAuthSettingss, {\r\n          limit: \"1000\",\r\n        })\r\n      );\r\n      const userList = userData.data.listAuthSettingss.items;\r\n      sortAtoZDataByIndex(userList, \"businessName\");\r\n      let noDelete = userList.filter((user) => user[\"_deleted\"] !== true);\r\n\r\n      setUsers(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedUser(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {users && (\r\n          <DataTable\r\n            value={users}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedUser}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"businessName\"\r\n              header=\"Business Name\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n            <Column\r\n              field=\"firstName\"\r\n              header=\"First\"\r\n            ></Column>\r\n            <Column\r\n              field=\"lastName\"\r\n              header=\"Last\"\r\n              \r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\NavCustomers.js",["1098","1099","1100","1101"],"import React, { useState } from \"react\";\r\n\r\nimport { Menubar } from \"primereact/menubar\";\r\nimport { TabMenu } from \"primereact/tabmenu\";\r\nimport { AmplifySignOut } from \"@aws-amplify/ui-react\";\r\n\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.min.css\";\r\nimport \"primeicons/primeicons.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst BackGround = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  background-color: white;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 10fr 1fr;\r\n  background-color: white;\r\n`;\r\n\r\nfunction Nav() {\r\n  const [selectedMenu, setSelectedMenu] = useState(\"\");\r\n\r\n  const items = [\r\n    \r\n  \r\n    {\r\n      label: \"Ordering\",\r\n      icon: \"pi pi-fw pi-shopping-cart\",\r\n      command: () => {\r\n        window.location = \"/Ordering\";\r\n      },\r\n    },\r\n    \r\n    \r\n  ];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <TopBar>\r\n        <Menubar model={items} />\r\n        <AmplifySignOut />\r\n      </TopBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n",{"ruleId":"1102","replacedBy":"1103"},{"ruleId":"1104","replacedBy":"1105"},{"ruleId":"1106","severity":1,"message":"1107","line":1,"column":38,"nodeType":"1108","messageId":"1109","endLine":1,"endColumn":48},{"ruleId":"1106","severity":1,"message":"1110","line":15,"column":10,"nodeType":"1108","messageId":"1109","endLine":15,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1111","line":53,"column":9,"nodeType":"1108","messageId":"1109","endLine":53,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1112","line":84,"column":13,"nodeType":"1108","messageId":"1109","endLine":84,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1113","line":4,"column":10,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1114","line":13,"column":7,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1115","line":26,"column":10,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":22},{"ruleId":"1106","severity":1,"message":"1116","line":26,"column":24,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1117","line":3,"column":10,"nodeType":"1108","messageId":"1109","endLine":3,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1118","line":34,"column":26,"nodeType":"1108","messageId":"1109","endLine":34,"endColumn":45},{"ruleId":"1119","severity":1,"message":"1120","line":38,"column":7,"nodeType":"1121","endLine":38,"endColumn":9,"suggestions":"1122"},{"ruleId":"1106","severity":1,"message":"1123","line":15,"column":5,"nodeType":"1108","messageId":"1109","endLine":15,"endColumn":14},{"ruleId":"1106","severity":1,"message":"1124","line":45,"column":11,"nodeType":"1108","messageId":"1109","endLine":45,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1125","line":45,"column":38,"nodeType":"1108","messageId":"1109","endLine":45,"endColumn":55},{"ruleId":"1119","severity":1,"message":"1126","line":51,"column":6,"nodeType":"1121","endLine":51,"endColumn":8,"suggestions":"1127"},{"ruleId":"1119","severity":1,"message":"1128","line":57,"column":6,"nodeType":"1121","endLine":57,"endColumn":24,"suggestions":"1129"},{"ruleId":"1106","severity":1,"message":"1130","line":87,"column":9,"nodeType":"1108","messageId":"1109","endLine":87,"endColumn":16},{"ruleId":"1119","severity":1,"message":"1131","line":38,"column":9,"nodeType":"1121","endLine":38,"endColumn":11,"suggestions":"1132"},{"ruleId":"1106","severity":1,"message":"1133","line":34,"column":25,"nodeType":"1108","messageId":"1109","endLine":34,"endColumn":43},{"ruleId":"1119","severity":1,"message":"1134","line":38,"column":7,"nodeType":"1121","endLine":38,"endColumn":9,"suggestions":"1135"},{"ruleId":"1119","severity":1,"message":"1136","line":38,"column":7,"nodeType":"1121","endLine":38,"endColumn":9,"suggestions":"1137"},{"ruleId":"1119","severity":1,"message":"1138","line":38,"column":9,"nodeType":"1121","endLine":38,"endColumn":11,"suggestions":"1139"},{"ruleId":"1119","severity":1,"message":"1140","line":52,"column":7,"nodeType":"1121","endLine":52,"endColumn":70,"suggestions":"1141"},{"ruleId":"1119","severity":1,"message":"1140","line":56,"column":6,"nodeType":"1121","endLine":56,"endColumn":8,"suggestions":"1142"},{"ruleId":"1119","severity":1,"message":"1143","line":65,"column":6,"nodeType":"1121","endLine":65,"endColumn":8,"suggestions":"1144"},{"ruleId":"1119","severity":1,"message":"1145","line":64,"column":6,"nodeType":"1121","endLine":64,"endColumn":8,"suggestions":"1146"},{"ruleId":"1106","severity":1,"message":"1147","line":19,"column":10,"nodeType":"1108","messageId":"1109","endLine":19,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1148","line":79,"column":10,"nodeType":"1108","messageId":"1109","endLine":79,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1149","line":79,"column":31,"nodeType":"1108","messageId":"1109","endLine":79,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":79,"column":39,"nodeType":"1108","messageId":"1109","endLine":79,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":79,"column":49,"nodeType":"1108","messageId":"1109","endLine":79,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1152","line":85,"column":5,"nodeType":"1108","messageId":"1109","endLine":85,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1153","line":90,"column":11,"nodeType":"1108","messageId":"1109","endLine":90,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1149","line":101,"column":33,"nodeType":"1108","messageId":"1109","endLine":101,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":101,"column":41,"nodeType":"1108","messageId":"1109","endLine":101,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1154","line":101,"column":67,"nodeType":"1108","messageId":"1109","endLine":101,"endColumn":77},{"ruleId":"1119","severity":1,"message":"1155","line":60,"column":6,"nodeType":"1121","endLine":60,"endColumn":8,"suggestions":"1156"},{"ruleId":"1106","severity":1,"message":"1157","line":17,"column":8,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":13},{"ruleId":"1106","severity":1,"message":"1158","line":50,"column":10,"nodeType":"1108","messageId":"1109","endLine":50,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1159","line":74,"column":9,"nodeType":"1108","messageId":"1109","endLine":74,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1160","line":6,"column":10,"nodeType":"1108","messageId":"1109","endLine":6,"endColumn":16},{"ruleId":"1106","severity":1,"message":"1161","line":82,"column":7,"nodeType":"1108","messageId":"1109","endLine":82,"endColumn":13},{"ruleId":"1119","severity":1,"message":"1140","line":61,"column":6,"nodeType":"1121","endLine":61,"endColumn":8,"suggestions":"1162"},{"ruleId":"1119","severity":1,"message":"1163","line":39,"column":6,"nodeType":"1121","endLine":39,"endColumn":8,"suggestions":"1164"},{"ruleId":"1106","severity":1,"message":"1110","line":21,"column":10,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1165","line":79,"column":23,"nodeType":"1108","messageId":"1109","endLine":79,"endColumn":37},{"ruleId":"1119","severity":1,"message":"1143","line":90,"column":6,"nodeType":"1121","endLine":90,"endColumn":8,"suggestions":"1166"},{"ruleId":"1119","severity":1,"message":"1167","line":97,"column":6,"nodeType":"1121","endLine":97,"endColumn":16,"suggestions":"1168"},{"ruleId":"1119","severity":1,"message":"1167","line":104,"column":6,"nodeType":"1121","endLine":104,"endColumn":16,"suggestions":"1169"},{"ruleId":"1119","severity":1,"message":"1155","line":57,"column":6,"nodeType":"1121","endLine":57,"endColumn":8,"suggestions":"1170"},{"ruleId":"1119","severity":1,"message":"1155","line":57,"column":6,"nodeType":"1121","endLine":57,"endColumn":8,"suggestions":"1171"},{"ruleId":"1119","severity":1,"message":"1155","line":60,"column":6,"nodeType":"1121","endLine":60,"endColumn":8,"suggestions":"1172"},{"ruleId":"1106","severity":1,"message":"1173","line":10,"column":7,"nodeType":"1108","messageId":"1109","endLine":10,"endColumn":12},{"ruleId":"1106","severity":1,"message":"1148","line":13,"column":11,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":19},{"ruleId":"1106","severity":1,"message":"1174","line":13,"column":21,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":30},{"ruleId":"1106","severity":1,"message":"1149","line":13,"column":32,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":38},{"ruleId":"1106","severity":1,"message":"1148","line":21,"column":11,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":19},{"ruleId":"1106","severity":1,"message":"1174","line":21,"column":21,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":30},{"ruleId":"1106","severity":1,"message":"1149","line":21,"column":32,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":38},{"ruleId":"1106","severity":1,"message":"1175","line":23,"column":7,"nodeType":"1108","messageId":"1109","endLine":23,"endColumn":20},{"ruleId":"1119","severity":1,"message":"1176","line":40,"column":6,"nodeType":"1121","endLine":40,"endColumn":16,"suggestions":"1177"},{"ruleId":"1119","severity":1,"message":"1178","line":46,"column":6,"nodeType":"1121","endLine":46,"endColumn":16,"suggestions":"1179"},{"ruleId":"1119","severity":1,"message":"1180","line":32,"column":6,"nodeType":"1121","endLine":32,"endColumn":14,"suggestions":"1181"},{"ruleId":"1119","severity":1,"message":"1182","line":32,"column":6,"nodeType":"1121","endLine":32,"endColumn":13,"suggestions":"1183"},{"ruleId":"1106","severity":1,"message":"1184","line":47,"column":10,"nodeType":"1108","messageId":"1109","endLine":47,"endColumn":16},{"ruleId":"1119","severity":1,"message":"1140","line":68,"column":6,"nodeType":"1121","endLine":68,"endColumn":8,"suggestions":"1185"},{"ruleId":"1106","severity":1,"message":"1186","line":31,"column":5,"nodeType":"1108","messageId":"1109","endLine":31,"endColumn":13},{"ruleId":"1106","severity":1,"message":"1123","line":33,"column":5,"nodeType":"1108","messageId":"1109","endLine":33,"endColumn":14},{"ruleId":"1106","severity":1,"message":"1187","line":34,"column":5,"nodeType":"1108","messageId":"1109","endLine":34,"endColumn":12},{"ruleId":"1106","severity":1,"message":"1149","line":37,"column":31,"nodeType":"1108","messageId":"1109","endLine":37,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1188","line":40,"column":10,"nodeType":"1108","messageId":"1109","endLine":40,"endColumn":24},{"ruleId":"1106","severity":1,"message":"1189","line":40,"column":26,"nodeType":"1108","messageId":"1109","endLine":40,"endColumn":43},{"ruleId":"1119","severity":1,"message":"1190","line":44,"column":6,"nodeType":"1121","endLine":44,"endColumn":8,"suggestions":"1191"},{"ruleId":"1106","severity":1,"message":"1149","line":31,"column":31,"nodeType":"1108","messageId":"1109","endLine":31,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1192","line":31,"column":56,"nodeType":"1108","messageId":"1109","endLine":31,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1193","line":31,"column":58,"nodeType":"1108","messageId":"1109","endLine":31,"endColumn":60},{"ruleId":"1119","severity":1,"message":"1194","line":67,"column":6,"nodeType":"1121","endLine":67,"endColumn":43,"suggestions":"1195"},{"ruleId":"1119","severity":1,"message":"1140","line":44,"column":6,"nodeType":"1121","endLine":44,"endColumn":8,"suggestions":"1196"},{"ruleId":"1119","severity":1,"message":"1197","line":71,"column":5,"nodeType":"1121","endLine":71,"endColumn":7,"suggestions":"1198"},{"ruleId":"1106","severity":1,"message":"1186","line":7,"column":5,"nodeType":"1108","messageId":"1109","endLine":7,"endColumn":13},{"ruleId":"1106","severity":1,"message":"1149","line":11,"column":31,"nodeType":"1108","messageId":"1109","endLine":11,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":11,"column":39,"nodeType":"1108","messageId":"1109","endLine":11,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1148","line":33,"column":10,"nodeType":"1108","messageId":"1109","endLine":33,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1149","line":33,"column":31,"nodeType":"1108","messageId":"1109","endLine":33,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":33,"column":39,"nodeType":"1108","messageId":"1109","endLine":33,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1148","line":49,"column":10,"nodeType":"1108","messageId":"1109","endLine":49,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":49,"column":20,"nodeType":"1108","messageId":"1109","endLine":49,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":49,"column":31,"nodeType":"1108","messageId":"1109","endLine":49,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":49,"column":39,"nodeType":"1108","messageId":"1109","endLine":49,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":49,"column":49,"nodeType":"1108","messageId":"1109","endLine":49,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1174","line":56,"column":20,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":56,"column":31,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":56,"column":39,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1148","line":122,"column":12,"nodeType":"1108","messageId":"1109","endLine":122,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1174","line":122,"column":22,"nodeType":"1108","messageId":"1109","endLine":122,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":122,"column":33,"nodeType":"1108","messageId":"1109","endLine":122,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":122,"column":41,"nodeType":"1108","messageId":"1109","endLine":122,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":122,"column":51,"nodeType":"1108","messageId":"1109","endLine":122,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1148","line":135,"column":12,"nodeType":"1108","messageId":"1109","endLine":135,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1174","line":135,"column":22,"nodeType":"1108","messageId":"1109","endLine":135,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":135,"column":33,"nodeType":"1108","messageId":"1109","endLine":135,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":135,"column":41,"nodeType":"1108","messageId":"1109","endLine":135,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":135,"column":51,"nodeType":"1108","messageId":"1109","endLine":135,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1150","line":20,"column":41,"nodeType":"1108","messageId":"1109","endLine":20,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":20,"column":51,"nodeType":"1108","messageId":"1109","endLine":20,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1148","line":88,"column":12,"nodeType":"1108","messageId":"1109","endLine":88,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1149","line":88,"column":33,"nodeType":"1108","messageId":"1109","endLine":88,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":88,"column":41,"nodeType":"1108","messageId":"1109","endLine":88,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":88,"column":51,"nodeType":"1108","messageId":"1109","endLine":88,"endColumn":57},{"ruleId":"1119","severity":1,"message":"1199","line":28,"column":6,"nodeType":"1121","endLine":28,"endColumn":27,"suggestions":"1200"},{"ruleId":"1106","severity":1,"message":"1201","line":15,"column":3,"nodeType":"1108","messageId":"1109","endLine":15,"endColumn":16},{"ruleId":"1106","severity":1,"message":"1147","line":21,"column":10,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1174","line":56,"column":22,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":56,"column":33,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":56,"column":41,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":56,"column":51,"nodeType":"1108","messageId":"1109","endLine":56,"endColumn":57},{"ruleId":"1119","severity":1,"message":"1202","line":94,"column":6,"nodeType":"1121","endLine":94,"endColumn":25,"suggestions":"1203"},{"ruleId":"1106","severity":1,"message":"1174","line":126,"column":22,"nodeType":"1108","messageId":"1109","endLine":126,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":126,"column":33,"nodeType":"1108","messageId":"1109","endLine":126,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":126,"column":41,"nodeType":"1108","messageId":"1109","endLine":126,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":126,"column":51,"nodeType":"1108","messageId":"1109","endLine":126,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1148","line":144,"column":12,"nodeType":"1108","messageId":"1109","endLine":144,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1149","line":144,"column":33,"nodeType":"1108","messageId":"1109","endLine":144,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":144,"column":41,"nodeType":"1108","messageId":"1109","endLine":144,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1149","line":271,"column":33,"nodeType":"1108","messageId":"1109","endLine":271,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":271,"column":41,"nodeType":"1108","messageId":"1109","endLine":271,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1186","line":9,"column":5,"nodeType":"1108","messageId":"1109","endLine":9,"endColumn":13},{"ruleId":"1106","severity":1,"message":"1174","line":42,"column":22,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":42,"column":33,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":42,"column":41,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":42,"column":51,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1204","line":21,"column":10,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":15},{"ruleId":"1106","severity":1,"message":"1205","line":27,"column":5,"nodeType":"1108","messageId":"1109","endLine":27,"endColumn":22},{"ruleId":"1106","severity":1,"message":"1150","line":30,"column":39,"nodeType":"1108","messageId":"1109","endLine":30,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":30,"column":49,"nodeType":"1108","messageId":"1109","endLine":30,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1174","line":82,"column":20,"nodeType":"1108","messageId":"1109","endLine":82,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":82,"column":31,"nodeType":"1108","messageId":"1109","endLine":82,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":82,"column":39,"nodeType":"1108","messageId":"1109","endLine":82,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":82,"column":49,"nodeType":"1108","messageId":"1109","endLine":82,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1148","line":99,"column":10,"nodeType":"1108","messageId":"1109","endLine":99,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":99,"column":20,"nodeType":"1108","messageId":"1109","endLine":99,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":99,"column":31,"nodeType":"1108","messageId":"1109","endLine":99,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":99,"column":39,"nodeType":"1108","messageId":"1109","endLine":99,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":99,"column":49,"nodeType":"1108","messageId":"1109","endLine":99,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1174","line":121,"column":20,"nodeType":"1108","messageId":"1109","endLine":121,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":121,"column":31,"nodeType":"1108","messageId":"1109","endLine":121,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":121,"column":39,"nodeType":"1108","messageId":"1109","endLine":121,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":121,"column":49,"nodeType":"1108","messageId":"1109","endLine":121,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1174","line":213,"column":22,"nodeType":"1108","messageId":"1109","endLine":213,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":213,"column":33,"nodeType":"1108","messageId":"1109","endLine":213,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":213,"column":41,"nodeType":"1108","messageId":"1109","endLine":213,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":213,"column":51,"nodeType":"1108","messageId":"1109","endLine":213,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":69,"column":22,"nodeType":"1108","messageId":"1109","endLine":69,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":69,"column":33,"nodeType":"1108","messageId":"1109","endLine":69,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":69,"column":41,"nodeType":"1108","messageId":"1109","endLine":69,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":69,"column":51,"nodeType":"1108","messageId":"1109","endLine":69,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":89,"column":22,"nodeType":"1108","messageId":"1109","endLine":89,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1150","line":89,"column":41,"nodeType":"1108","messageId":"1109","endLine":89,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":89,"column":51,"nodeType":"1108","messageId":"1109","endLine":89,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":110,"column":22,"nodeType":"1108","messageId":"1109","endLine":110,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1150","line":110,"column":41,"nodeType":"1108","messageId":"1109","endLine":110,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":110,"column":51,"nodeType":"1108","messageId":"1109","endLine":110,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":134,"column":22,"nodeType":"1108","messageId":"1109","endLine":134,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1150","line":134,"column":41,"nodeType":"1108","messageId":"1109","endLine":134,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":134,"column":51,"nodeType":"1108","messageId":"1109","endLine":134,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":156,"column":22,"nodeType":"1108","messageId":"1109","endLine":156,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":156,"column":33,"nodeType":"1108","messageId":"1109","endLine":156,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":156,"column":41,"nodeType":"1108","messageId":"1109","endLine":156,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":156,"column":51,"nodeType":"1108","messageId":"1109","endLine":156,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1206","line":9,"column":10,"nodeType":"1108","messageId":"1109","endLine":9,"endColumn":22},{"ruleId":"1106","severity":1,"message":"1207","line":9,"column":42,"nodeType":"1108","messageId":"1109","endLine":9,"endColumn":60},{"ruleId":"1106","severity":1,"message":"1149","line":46,"column":31,"nodeType":"1108","messageId":"1109","endLine":46,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":46,"column":39,"nodeType":"1108","messageId":"1109","endLine":46,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":46,"column":49,"nodeType":"1108","messageId":"1109","endLine":46,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1150","line":136,"column":39,"nodeType":"1108","messageId":"1109","endLine":136,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":136,"column":49,"nodeType":"1108","messageId":"1109","endLine":136,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1148","line":226,"column":8,"nodeType":"1108","messageId":"1109","endLine":226,"endColumn":16},{"ruleId":"1106","severity":1,"message":"1174","line":226,"column":18,"nodeType":"1108","messageId":"1109","endLine":226,"endColumn":27},{"ruleId":"1106","severity":1,"message":"1149","line":226,"column":29,"nodeType":"1108","messageId":"1109","endLine":226,"endColumn":35},{"ruleId":"1106","severity":1,"message":"1150","line":226,"column":37,"nodeType":"1108","messageId":"1109","endLine":226,"endColumn":45},{"ruleId":"1106","severity":1,"message":"1151","line":226,"column":47,"nodeType":"1108","messageId":"1109","endLine":226,"endColumn":53},{"ruleId":"1106","severity":1,"message":"1148","line":21,"column":10,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1149","line":21,"column":31,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":21,"column":39,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":21,"column":49,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1149","line":74,"column":31,"nodeType":"1108","messageId":"1109","endLine":74,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":74,"column":39,"nodeType":"1108","messageId":"1109","endLine":74,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":74,"column":49,"nodeType":"1108","messageId":"1109","endLine":74,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1148","line":4,"column":10,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":4,"column":20,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":4,"column":31,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":4,"column":39,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":4,"column":49,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1150","line":52,"column":39,"nodeType":"1108","messageId":"1109","endLine":52,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":52,"column":49,"nodeType":"1108","messageId":"1109","endLine":52,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1148","line":4,"column":10,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":4,"column":20,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":4,"column":31,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":4,"column":39,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":4,"column":49,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1150","line":52,"column":39,"nodeType":"1108","messageId":"1109","endLine":52,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":52,"column":49,"nodeType":"1108","messageId":"1109","endLine":52,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1107","line":1,"column":17,"nodeType":"1108","messageId":"1109","endLine":1,"endColumn":27},{"ruleId":"1106","severity":1,"message":"1110","line":6,"column":10,"nodeType":"1108","messageId":"1109","endLine":6,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1208","line":7,"column":21,"nodeType":"1108","messageId":"1109","endLine":7,"endColumn":28},{"ruleId":"1119","severity":1,"message":"1209","line":33,"column":5,"nodeType":"1121","endLine":33,"endColumn":7,"suggestions":"1210"},{"ruleId":"1106","severity":1,"message":"1149","line":4,"column":31,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":4,"column":39,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":4,"column":49,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1150","line":24,"column":41,"nodeType":"1108","messageId":"1109","endLine":24,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":24,"column":51,"nodeType":"1108","messageId":"1109","endLine":24,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":76,"column":22,"nodeType":"1108","messageId":"1109","endLine":76,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":76,"column":33,"nodeType":"1108","messageId":"1109","endLine":76,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":76,"column":41,"nodeType":"1108","messageId":"1109","endLine":76,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":76,"column":51,"nodeType":"1108","messageId":"1109","endLine":76,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1148","line":93,"column":12,"nodeType":"1108","messageId":"1109","endLine":93,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1174","line":93,"column":22,"nodeType":"1108","messageId":"1109","endLine":93,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":93,"column":33,"nodeType":"1108","messageId":"1109","endLine":93,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":93,"column":41,"nodeType":"1108","messageId":"1109","endLine":93,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":93,"column":51,"nodeType":"1108","messageId":"1109","endLine":93,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1174","line":106,"column":22,"nodeType":"1108","messageId":"1109","endLine":106,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1149","line":106,"column":33,"nodeType":"1108","messageId":"1109","endLine":106,"endColumn":39},{"ruleId":"1106","severity":1,"message":"1150","line":106,"column":41,"nodeType":"1108","messageId":"1109","endLine":106,"endColumn":49},{"ruleId":"1106","severity":1,"message":"1151","line":106,"column":51,"nodeType":"1108","messageId":"1109","endLine":106,"endColumn":57},{"ruleId":"1119","severity":1,"message":"1211","line":62,"column":6,"nodeType":"1121","endLine":62,"endColumn":21,"suggestions":"1212"},{"ruleId":"1102","replacedBy":"1213"},{"ruleId":"1104","replacedBy":"1214"},{"ruleId":"1119","severity":1,"message":"1176","line":40,"column":6,"nodeType":"1121","endLine":40,"endColumn":16,"suggestions":"1215"},{"ruleId":"1119","severity":1,"message":"1178","line":46,"column":6,"nodeType":"1121","endLine":46,"endColumn":16,"suggestions":"1216"},{"ruleId":"1106","severity":1,"message":"1186","line":89,"column":7,"nodeType":"1108","messageId":"1109","endLine":89,"endColumn":15},{"ruleId":"1106","severity":1,"message":"1148","line":107,"column":10,"nodeType":"1108","messageId":"1109","endLine":107,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":107,"column":20,"nodeType":"1108","messageId":"1109","endLine":107,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":107,"column":31,"nodeType":"1108","messageId":"1109","endLine":107,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":107,"column":39,"nodeType":"1108","messageId":"1109","endLine":107,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1152","line":32,"column":5,"nodeType":"1108","messageId":"1109","endLine":32,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1149","line":36,"column":31,"nodeType":"1108","messageId":"1109","endLine":36,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1217","line":45,"column":5,"nodeType":"1108","messageId":"1109","endLine":45,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1218","line":46,"column":5,"nodeType":"1108","messageId":"1109","endLine":46,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1152","line":54,"column":5,"nodeType":"1108","messageId":"1109","endLine":54,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1219","line":17,"column":10,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":30},{"ruleId":"1106","severity":1,"message":"1148","line":24,"column":10,"nodeType":"1108","messageId":"1109","endLine":24,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":24,"column":20,"nodeType":"1108","messageId":"1109","endLine":24,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":24,"column":31,"nodeType":"1108","messageId":"1109","endLine":24,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1152","line":25,"column":11,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":27},{"ruleId":"1119","severity":1,"message":"1220","line":69,"column":6,"nodeType":"1121","endLine":69,"endColumn":35,"suggestions":"1221"},{"ruleId":"1106","severity":1,"message":"1222","line":108,"column":9,"nodeType":"1108","messageId":"1109","endLine":108,"endColumn":19},{"ruleId":"1106","severity":1,"message":"1223","line":110,"column":9,"nodeType":"1108","messageId":"1109","endLine":110,"endColumn":16},{"ruleId":"1106","severity":1,"message":"1224","line":115,"column":9,"nodeType":"1108","messageId":"1109","endLine":115,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1225","line":6,"column":54,"nodeType":"1108","messageId":"1109","endLine":6,"endColumn":59},{"ruleId":"1106","severity":1,"message":"1226","line":5,"column":8,"nodeType":"1108","messageId":"1109","endLine":5,"endColumn":15},{"ruleId":"1106","severity":1,"message":"1227","line":5,"column":25,"nodeType":"1108","messageId":"1109","endLine":5,"endColumn":28},{"ruleId":"1106","severity":1,"message":"1228","line":5,"column":30,"nodeType":"1108","messageId":"1109","endLine":5,"endColumn":46},{"ruleId":"1106","severity":1,"message":"1152","line":15,"column":27,"nodeType":"1108","messageId":"1109","endLine":15,"endColumn":43},{"ruleId":"1106","severity":1,"message":"1148","line":17,"column":10,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1149","line":17,"column":31,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":17,"column":39,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1111","line":26,"column":9,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":20},{"ruleId":"1119","severity":1,"message":"1229","line":46,"column":6,"nodeType":"1121","endLine":46,"endColumn":60,"suggestions":"1230"},{"ruleId":"1106","severity":1,"message":"1231","line":8,"column":7,"nodeType":"1108","messageId":"1109","endLine":8,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1148","line":13,"column":10,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":13,"column":20,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":13,"column":31,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":13,"column":39,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1218","line":23,"column":5,"nodeType":"1108","messageId":"1109","endLine":23,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1232","line":26,"column":10,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":15},{"ruleId":"1106","severity":1,"message":"1233","line":27,"column":9,"nodeType":"1108","messageId":"1109","endLine":27,"endColumn":19},{"ruleId":"1119","severity":1,"message":"1234","line":71,"column":6,"nodeType":"1121","endLine":71,"endColumn":57,"suggestions":"1235"},{"ruleId":"1106","severity":1,"message":"1148","line":13,"column":10,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":13,"column":20,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":13,"column":31,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":13,"column":39,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1236","line":19,"column":5,"nodeType":"1108","messageId":"1109","endLine":19,"endColumn":10},{"ruleId":"1106","severity":1,"message":"1237","line":20,"column":5,"nodeType":"1108","messageId":"1109","endLine":20,"endColumn":13},{"ruleId":"1119","severity":1,"message":"1238","line":49,"column":6,"nodeType":"1121","endLine":49,"endColumn":35,"suggestions":"1239"},{"ruleId":"1106","severity":1,"message":"1240","line":22,"column":7,"nodeType":"1108","messageId":"1109","endLine":22,"endColumn":16},{"ruleId":"1106","severity":1,"message":"1174","line":25,"column":20,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":25,"column":31,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":25,"column":39,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":25,"column":49,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1192","line":25,"column":56,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1193","line":25,"column":58,"nodeType":"1108","messageId":"1109","endLine":25,"endColumn":60},{"ruleId":"1106","severity":1,"message":"1152","line":41,"column":5,"nodeType":"1108","messageId":"1109","endLine":41,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1148","line":42,"column":10,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":42,"column":20,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":42,"column":31,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1151","line":42,"column":49,"nodeType":"1108","messageId":"1109","endLine":42,"endColumn":55},{"ruleId":"1119","severity":1,"message":"1241","line":61,"column":6,"nodeType":"1121","endLine":61,"endColumn":24,"suggestions":"1242"},{"ruleId":"1106","severity":1,"message":"1149","line":58,"column":31,"nodeType":"1108","messageId":"1109","endLine":58,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1192","line":58,"column":57,"nodeType":"1108","messageId":"1109","endLine":58,"endColumn":58},{"ruleId":"1106","severity":1,"message":"1193","line":58,"column":60,"nodeType":"1108","messageId":"1109","endLine":58,"endColumn":62},{"ruleId":"1119","severity":1,"message":"1243","line":134,"column":6,"nodeType":"1121","endLine":134,"endColumn":51,"suggestions":"1244"},{"ruleId":"1119","severity":1,"message":"1245","line":149,"column":6,"nodeType":"1121","endLine":149,"endColumn":23,"suggestions":"1246"},{"ruleId":"1106","severity":1,"message":"1247","line":1,"column":17,"nodeType":"1108","messageId":"1109","endLine":1,"endColumn":25},{"ruleId":"1106","severity":1,"message":"1149","line":11,"column":31,"nodeType":"1108","messageId":"1109","endLine":11,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":11,"column":39,"nodeType":"1108","messageId":"1109","endLine":11,"endColumn":47},{"ruleId":"1119","severity":1,"message":"1248","line":27,"column":6,"nodeType":"1121","endLine":27,"endColumn":35,"suggestions":"1249"},{"ruleId":"1119","severity":1,"message":"1250","line":13,"column":6,"nodeType":"1121","endLine":13,"endColumn":17,"suggestions":"1251"},{"ruleId":"1106","severity":1,"message":"1174","line":14,"column":20,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":14,"column":31,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":14,"column":39,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1217","line":20,"column":5,"nodeType":"1108","messageId":"1109","endLine":20,"endColumn":20},{"ruleId":"1106","severity":1,"message":"1218","line":21,"column":5,"nodeType":"1108","messageId":"1109","endLine":21,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1149","line":12,"column":31,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":12,"column":39,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":12,"column":49,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1232","line":17,"column":10,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":15},{"ruleId":"1106","severity":1,"message":"1233","line":18,"column":9,"nodeType":"1108","messageId":"1109","endLine":18,"endColumn":19},{"ruleId":"1119","severity":1,"message":"1252","line":35,"column":6,"nodeType":"1121","endLine":35,"endColumn":52,"suggestions":"1253"},{"ruleId":"1106","severity":1,"message":"1148","line":26,"column":10,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":26,"column":20,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":26,"column":31,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":26,"column":39,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1218","line":29,"column":5,"nodeType":"1108","messageId":"1109","endLine":29,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1148","line":14,"column":10,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":18},{"ruleId":"1106","severity":1,"message":"1174","line":14,"column":20,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":14,"column":31,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":14,"column":39,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":14,"column":49,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":55},{"ruleId":"1102","replacedBy":"1254"},{"ruleId":"1104","replacedBy":"1255"},{"ruleId":"1106","severity":1,"message":"1174","line":14,"column":20,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":14,"column":31,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":14,"column":39,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":14,"column":49,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1192","line":14,"column":57,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":58},{"ruleId":"1106","severity":1,"message":"1193","line":14,"column":59,"nodeType":"1108","messageId":"1109","endLine":14,"endColumn":61},{"ruleId":"1106","severity":1,"message":"1174","line":16,"column":20,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1149","line":16,"column":31,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1150","line":16,"column":39,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":47},{"ruleId":"1106","severity":1,"message":"1151","line":16,"column":49,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":55},{"ruleId":"1106","severity":1,"message":"1192","line":16,"column":56,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":57},{"ruleId":"1106","severity":1,"message":"1193","line":16,"column":58,"nodeType":"1108","messageId":"1109","endLine":16,"endColumn":60},{"ruleId":"1119","severity":1,"message":"1145","line":41,"column":6,"nodeType":"1121","endLine":41,"endColumn":8,"suggestions":"1256"},{"ruleId":"1106","severity":1,"message":"1257","line":58,"column":9,"nodeType":"1108","messageId":"1109","endLine":58,"endColumn":16},{"ruleId":"1119","severity":1,"message":"1258","line":76,"column":6,"nodeType":"1121","endLine":76,"endColumn":8,"suggestions":"1259"},{"ruleId":"1119","severity":1,"message":"1140","line":127,"column":6,"nodeType":"1121","endLine":127,"endColumn":8,"suggestions":"1260"},{"ruleId":"1106","severity":1,"message":"1261","line":280,"column":21,"nodeType":"1108","messageId":"1109","endLine":280,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1261","line":293,"column":19,"nodeType":"1108","messageId":"1109","endLine":293,"endColumn":27},{"ruleId":"1106","severity":1,"message":"1261","line":323,"column":15,"nodeType":"1108","messageId":"1109","endLine":323,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1262","line":3,"column":27,"nodeType":"1108","messageId":"1109","endLine":3,"endColumn":33},{"ruleId":"1106","severity":1,"message":"1263","line":3,"column":35,"nodeType":"1108","messageId":"1109","endLine":3,"endColumn":41},{"ruleId":"1106","severity":1,"message":"1264","line":3,"column":43,"nodeType":"1108","messageId":"1109","endLine":3,"endColumn":48},{"ruleId":"1102","replacedBy":"1265"},{"ruleId":"1104","replacedBy":"1266"},{"ruleId":"1119","severity":1,"message":"1145","line":61,"column":6,"nodeType":"1121","endLine":61,"endColumn":8,"suggestions":"1267"},{"ruleId":"1106","severity":1,"message":"1268","line":30,"column":22,"nodeType":"1108","messageId":"1109","endLine":30,"endColumn":35},{"ruleId":"1106","severity":1,"message":"1112","line":131,"column":15,"nodeType":"1108","messageId":"1109","endLine":131,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1247","line":1,"column":17,"nodeType":"1108","messageId":"1109","endLine":1,"endColumn":25},{"ruleId":"1106","severity":1,"message":"1269","line":10,"column":10,"nodeType":"1108","messageId":"1109","endLine":10,"endColumn":23},{"ruleId":"1106","severity":1,"message":"1227","line":12,"column":10,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":13},{"ruleId":"1106","severity":1,"message":"1228","line":12,"column":15,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":31},{"ruleId":"1106","severity":1,"message":"1270","line":12,"column":33,"nodeType":"1108","messageId":"1109","endLine":12,"endColumn":37},{"ruleId":"1106","severity":1,"message":"1271","line":17,"column":3,"nodeType":"1108","messageId":"1109","endLine":17,"endColumn":19},{"ruleId":"1106","severity":1,"message":"1147","line":20,"column":10,"nodeType":"1108","messageId":"1109","endLine":20,"endColumn":29},{"ruleId":"1106","severity":1,"message":"1268","line":30,"column":22,"nodeType":"1108","messageId":"1109","endLine":30,"endColumn":35},{"ruleId":"1106","severity":1,"message":"1272","line":32,"column":9,"nodeType":"1108","messageId":"1109","endLine":32,"endColumn":21},{"ruleId":"1106","severity":1,"message":"1273","line":33,"column":9,"nodeType":"1108","messageId":"1109","endLine":33,"endColumn":22},{"ruleId":"1119","severity":1,"message":"1274","line":67,"column":6,"nodeType":"1121","endLine":67,"endColumn":31,"suggestions":"1275"},{"ruleId":"1119","severity":1,"message":"1276","line":75,"column":6,"nodeType":"1121","endLine":75,"endColumn":20,"suggestions":"1277"},{"ruleId":"1119","severity":1,"message":"1278","line":32,"column":6,"nodeType":"1121","endLine":32,"endColumn":13,"suggestions":"1279"},{"ruleId":"1106","severity":1,"message":"1113","line":4,"column":10,"nodeType":"1108","messageId":"1109","endLine":4,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1114","line":13,"column":7,"nodeType":"1108","messageId":"1109","endLine":13,"endColumn":17},{"ruleId":"1106","severity":1,"message":"1115","line":26,"column":10,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":22},{"ruleId":"1106","severity":1,"message":"1116","line":26,"column":24,"nodeType":"1108","messageId":"1109","endLine":26,"endColumn":39},"no-native-reassign",["1280"],"no-negated-in-lhs",["1281"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'ToggleContext' is defined but never used.","'currentUser' is assigned a value but never used.","'userData' is assigned a value but never used.","'TabMenu' is defined but never used.","'BackGround' is assigned a value but never used.","'selectedMenu' is assigned a value but never used.","'setSelectedMenu' is assigned a value but never used.","'FilterStandHoldDups' is defined but never used.","'setOriginalStanding' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.","ArrayExpression",["1282"],"'yesterday' is assigned a value but never used.","'readyForSq' is assigned a value but never used.","'setReadyForWeekly' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'buildOrders'. Either include it or remove the dependency array.",["1283"],"React Hook useEffect has a missing dependency: 'setReadyForSq'. Either include it or remove the dependency array.",["1284"],"'fetchSq' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["1285"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["1286"],"React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.",["1287"],"React Hook useEffect has a missing dependency: 'fetchRoutes'. Either include it or remove the dependency array.",["1288"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["1289"],["1290"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1291"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1292"],"'sortAtoZDataByIndex' is defined but never used.","'products' is assigned a value but never used.","'routes' is assigned a value but never used.","'standing' is assigned a value but never used.","'orders' is assigned a value but never used.","'setModifications' is assigned a value but never used.","'chosen' is assigned a value but never used.","'altPricing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1293"],"'react' is defined but never used.","'AMOthers' is assigned a value but never used.","'dynamicColumnsAMOthers' is assigned a value but never used.","'Button' is defined but never used.","'twoDay' is assigned a value but never used.",["1294"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setRoutesLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1295"],"'setPocketCount' is assigned a value but never used.",["1296"],"React Hook useEffect has a missing dependency: 'loc'. Either include it or remove the dependency array.",["1297"],["1298"],["1299"],["1300"],["1301"],"'today' is assigned a value but never used.","'customers' is assigned a value but never used.","'buildDateTime' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDoughs' and 'setIsLoading'. Either include them or remove the dependency array.",["1302"],"React Hook useEffect has missing dependencies: 'setDoughComponents' and 'setIsLoading'. Either include them or remove the dependency array.",["1303"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["1304"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["1305"],"'target' is assigned a value but never used.",["1306"],"'tomorrow' is assigned a value but never used.","'weekAgo' is assigned a value but never used.","'pickedCustomer' is assigned a value but never used.","'setPickedCustomer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDelivDate'. Either include it or remove the dependency array.",["1307"],"'d' is assigned a value but never used.","'dd' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'orders', 'products', 'setDailyInvoices', and 'standing'. Either include them or remove the dependency array. If 'setDailyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1308"],["1309"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["1310"],"React Hook useEffect has a missing dependency: 'setRouteList'. Either include it or remove the dependency array. If 'setRouteList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1311"],"'createColumns' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["1312"],"'first' is defined but never used.","'convertedTomorrow' is assigned a value but never used.","'pocketFilter' is defined but never used.","'baker1PocketFilter' is defined but never used.","'getRate' is defined but never used.","React Hook useEffect has a missing dependency: 'setModifications'. Either include it or remove the dependency array.",["1313"],"React Hook useEffect has missing dependencies: 'altPricing', 'custo', 'products', and 'setPickedRate'. Either include them or remove the dependency array. If 'setPickedRate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1314"],["1280"],["1281"],["1315"],["1316"],"'currentCartList' is assigned a value but never used.","'setCurrentCartList' is assigned a value but never used.","'convertDatetoBPBDate' is defined but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["1317"],"'dateDaySup' is assigned a value but never used.","'dateDay' is assigned a value but never used.","'dateStyle' is defined but never used.","'mixes' is assigned a value but never used.","'Amplify' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.","React Hook useEffect has a missing dependency: 'setCustomerGroup'. Either include it or remove the dependency array. If 'setCustomerGroup' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1318"],"'TitleFrame' is assigned a value but never used.","'width' is assigned a value but never used.","'breakpoint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["1319"],"'route' is assigned a value but never used.","'setRoute' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCheck' and 'setPonote'. Either include them or remove the dependency array.",["1320"],"'clonedeep' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["1321"],"React Hook useEffect has missing dependencies: 'customers', 'database.length', 'ponote', 'route', 'setCurrentCartList', and 'setModifications'. Either include them or remove the dependency array.",["1322"],"React Hook useEffect has missing dependencies: 'altPricing' and 'products'. Either include them or remove the dependency array.",["1323"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'customers', 'orders', 'products', and 'setProductList'. Either include them or remove the dependency array. If 'setProductList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1324"],"React Hook useEffect has a missing dependency: 'setStandHold'. Either include it or remove the dependency array. If 'setStandHold' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1325"],"React Hook useEffect has missing dependencies: 'customers' and 'products'. Either include them or remove the dependency array.",["1326"],["1280"],["1281"],["1327"],"'columns' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers', 'products', 'setChosen', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1328"],["1329"],"'prodData' is assigned a value but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.",["1280"],["1281"],["1330"],"'setCustLoaded' is assigned a value but never used.","'listCustomers' is defined but never used.","'Auth' is defined but never used.","'setPickUserValue' is defined but never used.","'setIsLoading' is assigned a value but never used.","'fullCustomers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTarget'. Either include it or remove the dependency array. If 'setTarget' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1331"],"React Hook useEffect has missing dependencies: 'customers' and 'setSource'. Either include them or remove the dependency array. If 'setSource' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1332"],"React Hook useEffect has missing dependencies: 'fetchUsers' and 'setIsLoading'. Either include them or remove the dependency array.",["1333"],"no-global-assign","no-unsafe-negation",{"desc":"1334","fix":"1335"},{"desc":"1336","fix":"1337"},{"desc":"1338","fix":"1339"},{"desc":"1340","fix":"1341"},{"desc":"1342","fix":"1343"},{"desc":"1344","fix":"1345"},{"desc":"1346","fix":"1347"},{"desc":"1348","fix":"1349"},{"desc":"1350","fix":"1351"},{"desc":"1352","fix":"1353"},{"desc":"1354","fix":"1355"},{"desc":"1356","fix":"1357"},{"desc":"1350","fix":"1358"},{"desc":"1359","fix":"1360"},{"desc":"1352","fix":"1361"},{"desc":"1362","fix":"1363"},{"desc":"1362","fix":"1364"},{"desc":"1356","fix":"1365"},{"desc":"1356","fix":"1366"},{"desc":"1356","fix":"1367"},{"desc":"1368","fix":"1369"},{"desc":"1370","fix":"1371"},{"desc":"1372","fix":"1373"},{"desc":"1374","fix":"1375"},{"desc":"1350","fix":"1376"},{"desc":"1377","fix":"1378"},{"desc":"1379","fix":"1380"},{"desc":"1350","fix":"1381"},{"desc":"1382","fix":"1383"},{"desc":"1384","fix":"1385"},{"desc":"1386","fix":"1387"},{"desc":"1388","fix":"1389"},{"desc":"1390","fix":"1391"},{"desc":"1368","fix":"1392"},{"desc":"1370","fix":"1393"},{"desc":"1394","fix":"1395"},{"desc":"1396","fix":"1397"},{"desc":"1398","fix":"1399"},{"desc":"1400","fix":"1401"},{"desc":"1402","fix":"1403"},{"desc":"1404","fix":"1405"},{"desc":"1406","fix":"1407"},{"desc":"1408","fix":"1409"},{"desc":"1410","fix":"1411"},{"desc":"1412","fix":"1413"},{"desc":"1354","fix":"1414"},{"desc":"1415","fix":"1416"},{"desc":"1350","fix":"1417"},{"desc":"1354","fix":"1418"},{"desc":"1419","fix":"1420"},{"desc":"1421","fix":"1422"},{"desc":"1423","fix":"1424"},"Update the dependencies array to be: [fetchStanding]",{"range":"1425","text":"1426"},"Update the dependencies array to be: [buildOrders]",{"range":"1427","text":"1428"},"Update the dependencies array to be: [orders, products, setReadyForSq]",{"range":"1429","text":"1430"},"Update the dependencies array to be: [fetchProducts]",{"range":"1431","text":"1432"},"Update the dependencies array to be: [fetchHolding]",{"range":"1433","text":"1434"},"Update the dependencies array to be: [fetchCustomers]",{"range":"1435","text":"1436"},"Update the dependencies array to be: [fetchRoutes]",{"range":"1437","text":"1438"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"1439","text":"1440"},"Update the dependencies array to be: [setIsLoading]",{"range":"1441","text":"1442"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1443","text":"1444"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1445","text":"1446"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1447","text":"1448"},{"range":"1449","text":"1442"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",{"range":"1450","text":"1451"},{"range":"1452","text":"1444"},"Update the dependencies array to be: [loc, products]",{"range":"1453","text":"1454"},{"range":"1455","text":"1454"},{"range":"1456","text":"1448"},{"range":"1457","text":"1448"},{"range":"1458","text":"1448"},"Update the dependencies array to be: [isReload, setDoughs, setIsLoading]",{"range":"1459","text":"1460"},"Update the dependencies array to be: [isReload, setDoughComponents, setIsLoading]",{"range":"1461","text":"1462"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"1463","text":"1464"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"1465","text":"1466"},{"range":"1467","text":"1442"},"Update the dependencies array to be: [setDelivDate]",{"range":"1468","text":"1469"},"Update the dependencies array to be: [delivDate, database, nextInv, zones, orders, standing, customers, products, altPricing, setDailyInvoices]",{"range":"1470","text":"1471"},{"range":"1472","text":"1442"},"Update the dependencies array to be: [products]",{"range":"1473","text":"1474"},"Update the dependencies array to be: [orderList, database, setRouteList]",{"range":"1475","text":"1476"},"Update the dependencies array to be: [route, orderList, constructColumns, constructData]",{"range":"1477","text":"1478"},"Update the dependencies array to be: [setModifications]",{"range":"1479","text":"1480"},"Update the dependencies array to be: [altPricing, custo, pickedProduct, products, setPickedRate]",{"range":"1481","text":"1482"},{"range":"1483","text":"1460"},{"range":"1484","text":"1462"},"Update the dependencies array to be: [chosen, delivDate, database, standing, orders, setCalendarEvents]",{"range":"1485","text":"1486"},"Update the dependencies array to be: [customers, orderTypeWhole, orders, database, userNum, setCustomerGroup]",{"range":"1487","text":"1488"},"Update the dependencies array to be: [chosen, delivDate, customerGroup, currentCartList, setRoute]",{"range":"1489","text":"1490"},"Update the dependencies array to be: [chosen, delivDate, database, setPonote, orderCheck]",{"range":"1491","text":"1492"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"1493","text":"1494"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications, customers]",{"range":"1495","text":"1496"},"Update the dependencies array to be: [altPricing, currentCartList, products]",{"range":"1497","text":"1498"},"Update the dependencies array to be: [database, chosen, delivDate, products, orders, customers, setProductList]",{"range":"1499","text":"1500"},"Update the dependencies array to be: [setStandHold, standList]",{"range":"1501","text":"1502"},"Update the dependencies array to be: [database, chosen, delivDate, currentCartList, products, customers]",{"range":"1503","text":"1504"},{"range":"1505","text":"1446"},"Update the dependencies array to be: [customers, products, setChosen, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1506","text":"1507"},{"range":"1508","text":"1442"},{"range":"1509","text":"1446"},"Update the dependencies array to be: [selectedUser, customers, setTarget]",{"range":"1510","text":"1511"},"Update the dependencies array to be: [customers, selectedUser, setSource]",{"range":"1512","text":"1513"},"Update the dependencies array to be: [fetchUsers, setIsLoading, users]",{"range":"1514","text":"1515"},[1069,1071],"[fetchStanding]",[1535,1537],"[buildOrders]",[1657,1675],"[orders, products, setReadyForSq]",[899,901],"[fetchProducts]",[990,992],"[fetchHolding]",[901,903],"[fetchCustomers]",[883,885],"[fetchRoutes]",[1560,1623],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[1531,1533],"[setIsLoading]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1847,1849],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1823,1825],[1457,1459],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",[2502,2504],[2683,2693],"[loc, products]",[2885,2895],[1693,1695],[1693,1695],[1863,1865],[945,955],"[isReload, setDoughs, setIsLoading]",[1085,1095],"[isReload, setDoughComponents, setIsLoading]",[903,911],"[fetchRoutes, routes, setIsLoading]",[896,903],"[fetchZones, setIsLoading, zones]",[1895,1897],[1219,1221],"[setDelivDate]",[1970,2007],"[delivDate, database, nextInv, zones, orders, standing, customers, products, altPricing, setDailyInvoices]",[1111,1113],[1931,1933],"[products]",[790,811],"[orderList, database, setRouteList]",[2328,2347],"[route, orderList, constructColumns, constructData]",[881,883],"[setModifications]",[1697,1712],"[altPricing, custo, pickedProduct, products, setPickedRate]",[942,952],[1082,1092],[2190,2219],"[chosen, delivDate, database, standing, orders, setCalendarEvents]",[1653,1707],"[customers, orderTypeWhole, orders, database, userNum, setCustomerGroup]",[2018,2069],"[chosen, delivDate, customerGroup, currentCartList, setRoute]",[1252,1281],"[chosen, delivDate, database, setPonote, orderCheck]",[1608,1626],"[chosen, setStandArray, setStandList, standing]",[3756,3801],"[chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications, customers]",[4156,4173],"[altPricing, currentCartList, products]",[783,812],"[database, chosen, delivDate, products, orders, customers, setProductList]",[424,435],"[setStandHold, standList]",[1079,1125],"[database, chosen, delivDate, currentCartList, products, customers]",[1538,1540],[2316,2318],"[customers, products, setChosen, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[3746,3748],[1853,1855],[1655,1680],"[selectedUser, customers, setTarget]",[1870,1884],"[customers, selectedUser, setSource]",[904,911],"[fetchUsers, setIsLoading, users]"]