[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\a_OrderingFunctions.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\ExportToDatabaseButtons.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"64"},{"size":362,"mtime":1609089131749,"results":"65","hashOfConfig":"66"},{"size":1920,"mtime":1614734016687,"results":"67","hashOfConfig":"66"},{"size":500,"mtime":1609089131749,"results":"68","hashOfConfig":"66"},{"size":1552,"mtime":1615234090706,"results":"69","hashOfConfig":"66"},{"size":2532,"mtime":1614642664552,"results":"70","hashOfConfig":"66"},{"size":1840,"mtime":1615297868276,"results":"71","hashOfConfig":"66"},{"size":1434,"mtime":1614977709771,"results":"72","hashOfConfig":"66"},{"size":1731,"mtime":1615314631389,"results":"73","hashOfConfig":"66"},{"size":5596,"mtime":1615316254073,"results":"74","hashOfConfig":"66"},{"size":3040,"mtime":1615313357832,"results":"75","hashOfConfig":"66"},{"size":1039,"mtime":1614642664539,"results":"76","hashOfConfig":"66"},{"size":1701,"mtime":1615314649095,"results":"77","hashOfConfig":"66"},{"size":1655,"mtime":1614642664534,"results":"78","hashOfConfig":"66"},{"size":1692,"mtime":1613912501900,"results":"79","hashOfConfig":"80"},{"size":1290,"mtime":1613420662672,"results":"81","hashOfConfig":"66"},{"size":7330,"mtime":1615317937429,"results":"82","hashOfConfig":"66"},{"size":430,"mtime":1613420662670,"results":"83","hashOfConfig":"66"},{"size":4779,"mtime":1614126195479,"results":"84","hashOfConfig":"80"},{"size":737,"mtime":1614642664582,"results":"85","hashOfConfig":"66"},{"size":3035,"mtime":1615318489118,"results":"86","hashOfConfig":"66"},{"size":5921,"mtime":1614642664584,"results":"87","hashOfConfig":"66"},{"size":3144,"mtime":1614950985920,"results":"88","hashOfConfig":"66"},{"size":5467,"mtime":1614951107786,"results":"89","hashOfConfig":"66"},{"size":325,"mtime":1614642664576,"results":"90","hashOfConfig":"66"},{"size":4163,"mtime":1615317862465,"results":"91","hashOfConfig":"66"},{"size":321,"mtime":1614642664581,"results":"92","hashOfConfig":"66"},{"size":7052,"mtime":1614642664580,"results":"93","hashOfConfig":"66"},{"size":5597,"mtime":1614642664549,"results":"94","hashOfConfig":"66"},{"size":1902,"mtime":1614642664551,"results":"95","hashOfConfig":"66"},{"size":2996,"mtime":1615160072193,"results":"96","hashOfConfig":"66"},{"size":190,"mtime":1613420662655,"results":"97","hashOfConfig":"66"},{"size":190,"mtime":1613420662654,"results":"98","hashOfConfig":"66"},{"size":193,"mtime":1613420662657,"results":"99","hashOfConfig":"66"},{"size":197,"mtime":1613420662656,"results":"100","hashOfConfig":"66"},{"size":191,"mtime":1613420662650,"results":"101","hashOfConfig":"66"},{"size":1873,"mtime":1614706269300,"results":"102","hashOfConfig":"66"},{"size":0,"mtime":1613769374633,"results":"103","hashOfConfig":"80"},{"size":3570,"mtime":1613941048675,"results":"104","hashOfConfig":"66"},{"size":3691,"mtime":1613940913819,"results":"105","hashOfConfig":"66"},{"size":2439,"mtime":1613936701168,"results":"106","hashOfConfig":"66"},{"size":1511,"mtime":1614642664563,"results":"107","hashOfConfig":"66"},{"size":2937,"mtime":1614642664560,"results":"108","hashOfConfig":"66"},{"size":4187,"mtime":1614642664559,"results":"109","hashOfConfig":"66"},{"size":1460,"mtime":1614642664562,"results":"110","hashOfConfig":"66"},{"size":2972,"mtime":1615314599482,"results":"111","hashOfConfig":"66"},{"size":6124,"mtime":1615149962941,"results":"112","hashOfConfig":"66"},{"size":1077,"mtime":1614642664567,"results":"113","hashOfConfig":"66"},{"size":5956,"mtime":1614898076532,"results":"114","hashOfConfig":"66"},{"size":5749,"mtime":1614642664570,"results":"115","hashOfConfig":"66"},{"size":1334,"mtime":1614213824864,"results":"116","hashOfConfig":"80"},{"size":2933,"mtime":1614642664566,"results":"117","hashOfConfig":"66"},{"size":3262,"mtime":1615252734116,"results":"118","hashOfConfig":"66"},{"size":1963,"mtime":1614954275972,"results":"119","hashOfConfig":"66"},{"size":734,"mtime":1615311564444,"results":"120","hashOfConfig":"66"},{"size":6145,"mtime":1615311560441,"results":"121","hashOfConfig":"66"},{"size":5374,"mtime":1615314102676,"results":"122","hashOfConfig":"66"},{"size":9733,"mtime":1615311560703,"results":"123","hashOfConfig":"66"},{"size":1418,"mtime":1615144363322,"results":"124","hashOfConfig":"66"},{"size":1412,"mtime":1615252809768,"results":"125","hashOfConfig":"66"},{"size":3057,"mtime":1615252660734,"results":"126","hashOfConfig":"66"},{"size":2348,"mtime":1615252833085,"results":"127","hashOfConfig":"66"},{"size":2464,"mtime":1615252660735,"results":"128","hashOfConfig":"66"},{"size":7047,"mtime":1615237866832,"results":"129","hashOfConfig":"66"},{"size":1718,"mtime":1615252660735,"results":"130","hashOfConfig":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"1cny99d",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"133"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"133"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"133"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"133"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"133"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"133"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"1dwemmr",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"133"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"133"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"133"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"133"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"133"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"133"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"133"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"133"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"133"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"133"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"133"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"133"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"133"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"133"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"133"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"133"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["286","287"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["288"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["289"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterOrdersDups } from '../helpers/useFetch'\r\n\r\nimport { listOrders } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n    \r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ ordersLoaded, setOrdersLoaded ] = useState(false)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            ordersLoaded, setOrdersLoaded\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { setOrders, setOriginalOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n\r\n    useEffect(() => {\r\n        fetchOrders()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchOrders = async () => {\r\n        try{\r\n          const ordData = await API.graphql(graphqlOperation(listOrders, {\r\n                limit: '5000'\r\n                }))\r\n          const ordList = ordData.data.listOrders.items;\r\n          let noDelete = ordList.filter(cust => cust[\"_deleted\"]!==true)\r\n          let currentData = FilterOrdersDups(noDelete)\r\n          setOrders(currentData)\r\n          setOrdersLoaded(true)\r\n          setOriginalOrders(currentData);\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["290"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["291"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            let currentData = FilterStandHoldDups(noDelete)\r\n            setOriginalStanding(currentData);\r\n            setStanding(currentData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["292"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            let currentData = FilterStandHoldDups(noDelete)\r\n            setOriginalHolding(currentData);\r\n            setHolding(currentData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",["293"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\n\r\nimport Ordering from './pages/ordering/Ordering'\r\nimport DeliveryRouteGrid from './pages/logistics/DeliveryRouteGrid'\r\nimport DeliveryCustomerGrid from './pages/logistics/DeliveryCustomerGrid'\r\nimport DeliveryProductGrid from './pages/logistics/DeliveryProductGrid'\r\nimport BPBS from './BPBS'\r\nimport BPBN from './BPBN'\r\nimport Croix from './Croix'\r\nimport Customers from './pages/customers/Customers'\r\nimport Products from './pages/products/Products'\r\nimport Billing from './Billing'\r\nimport Admin from './Admin'\r\nimport Loader from './Loader'\r\n\r\nimport Nav from './Nav'\r\n\r\n\r\nfunction AppRoutes() {\r\n\r\n  return (\r\n    <Router>\r\n      <Loader />\r\n      <div className=\"bigPicture\">\r\n        <Switch>\r\n          <Route path=\"/ordering\" component={Ordering} /> \r\n          <Route path=\"/logistics/byRoute\" component={DeliveryRouteGrid} />  \r\n          <Route path=\"/logistics/byCustomer\" component={DeliveryCustomerGrid} />  \r\n          <Route path=\"/logistics/byProduct\" component={DeliveryProductGrid} />  \r\n          <Route path=\"/bpbs\" component={BPBS} />\r\n          <Route path=\"/bpbn\" component={BPBN} />\r\n          <Route path=\"/croix\" component={Croix} />\r\n          <Route path=\"/products\" component={Products} />\r\n          <Route path=\"/customers\" component={Customers} />\r\n          <Route path=\"/billing\" component={Billing} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/\" exact component={Ordering} />\r\n        </Switch>\r\n      </div>\r\n    </Router>        \r\n  );\r\n}\r\n\r\nexport default AppRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],["294","295"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\a_OrderingFunctions.js",["296","297","298","299","300"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList, findCurrentPonote, findNewRoute } from '../../helpers/sortDataHelpers'\r\nimport { \r\n    CreateStandingArray,\r\n    CreateCartDateArray,\r\n    CreateBlankCartDateArray\r\n    } from '../../helpers/calendarBuildHelper';\r\n\r\n\r\n\r\nconst OrderingFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { holding, setHoldLoaded } = useContext(HoldingContext)\r\n    const { chosen, setRoute, delivDate, setPonote, currentCartList, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn, setPONoteIsOn, setEditOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (holding.length<1){\r\n            setHoldLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    useEffect(() => {\r\n        setEditOn(true)\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        chosen && setRouteIsOn(true)\r\n        chosen && setPONoteIsOn(true)\r\n    },[chosen, setRouteIsOn, setPONoteIsOn])\r\n    \r\n\r\n    // Turn PO Note Off and ON based on currentEntryList\r\n    useEffect(() => {\r\n        currentCartList.length<1 && setPONoteIsOn(false)\r\n        currentCartList.length>0 && setPONoteIsOn(true)\r\n    },[currentCartList, setPONoteIsOn])\r\n\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n\r\n    // Find new current route based on customer, date, standing, orders, or customers change\r\n    useEffect(() => {\r\n        let newRoute = findNewRoute(chosen, delivDate, standing, orders, customers)\r\n        setRoute(newRoute)      \r\n    },[chosen, delivDate, customers, standing, setRoute, orders])\r\n\r\n\r\n    // find new current PO Note when customer, delivDate, or orders are changed\r\n    useEffect(() => {\r\n        let po = findCurrentPonote(chosen, delivDate, orders)\r\n        document.getElementById('PONotes').value = '';\r\n        setPonote(po)\r\n\r\n    },[chosen, delivDate, setPonote, orders])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let backToStandingArray = CreateStandingArray(standing,chosen);\r\n        let cartDateArray = CreateCartDateArray(orders,chosen);\r\n        let cartBlankDateArray = CreateBlankCartDateArray(orders,chosen);\r\n        \r\n\r\n        let standingEvents = {title: '',\r\n                            daysOfWeek: backToStandingArray,\r\n                            display: 'background'}\r\n\r\n\r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        calendarEvents.push(standingEvents)\r\n\r\n\r\n        for (let order of cartDateArray) {\r\n            let newEvent = {title: '',\r\n                        date: order,\r\n                        display: 'background'}\r\n            calendarEvents.push(newEvent)\r\n        }\r\n\r\n\r\n        for (let order of cartBlankDateArray) {\r\n            let newEvent2 = {title: '',\r\n                        date: order,\r\n                        display: 'inverse-background'}\r\n            calendarEvents.push(newEvent2)\r\n        }\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default OrderingFunctions",["301","302"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList.js",["303"],"import React from 'react';\r\n\r\nimport RecentOrderList from './g_recentOrderList/RecentOrderList';\r\nimport RecentOrderListButtons from './g_recentOrderList/RecentOrderListButtons';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst RecentList = styled.div`\r\n  text-align: left;\r\n  box-sizing: border-box;\r\n  height: 12px;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n  font-size: 1em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: white;\r\n  background-color: transparent;  \r\n  `\r\n\r\nconst RecentOrders = () => {\r\n\r\n  return (\r\n      <React.Fragment>  \r\n        <h2>Recent Orders</h2>\r\n        \r\n        <RecentOrderList />\r\n        \r\n        <RecentOrderListButtons />\r\n        \r\n    </React.Fragment>  \r\n  );\r\n}\r\n\r\nexport default RecentOrders;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderListButtons.js",["304","305","306","307","308","309"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\g_recentOrderList\\RecentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["310","311","312"],"import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../../dataContexts/OrdersContext';\r\nimport { ProductsContext } from '../../../../dataContexts/ProductsContext'\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\n\r\nimport { convertDatetoBPBDate } from '../../../../helpers/dateTimeHelpers';\r\nimport { findAvailableProducts,decideWhetherToAddOrModify } from '../../../../helpers/sortDataHelpers';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst AddProductButtons = styled.div`\r\n        display: flex;\r\n        width: 100%;\r\n        margin: 20px 0;\r\n        justify-content: space-around;\r\n        background-color: lightgrey;\r\n        padding: 10px 0;\r\n        `\r\n\r\n\r\n\r\n\r\n\r\nconst AddCartEntryItem = () => {\r\n\r\n    const { products } = useContext(ProductsContext)\r\n    const { orders, setOrders } = useContext(OrdersContext)\r\n    const { chosen, delivDate, route, ponote, currentCartList } = useContext(CurrentDataContext)\r\n    const { orderTypeWhole, setModifications }= useContext(ToggleContext)\r\n\r\n    const [ pickedProduct, setPickedProduct ] = useState();\r\n    const [ productList, setProductList ] = useState();\r\n    \r\n\r\n    useEffect(() => {\r\n        let availableProducts = findAvailableProducts(products, currentCartList, chosen, delivDate)\r\n        setProductList(availableProducts)\r\n        },[products, orders, chosen, delivDate ]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setPickedProduct(e.target.value)\r\n\r\n    } \r\n\r\n    const handleAdd = () => {\r\n        let qty = document.getElementById(\"addedProdQty\").value\r\n       \r\n        let newOrder ={\r\n            \"qty\": qty, \r\n            \"prodName\": pickedProduct.prodName,\r\n            \"custName\": chosen, \r\n            \"PONote\": ponote, \r\n            \"route\": route, \r\n            \"SO\": \"0\", \r\n            \"isWhole\": orderTypeWhole, \r\n            \"delivDate\": convertDatetoBPBDate(delivDate)\r\n        }\r\n        let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate)\r\n        setOrders(newOrderList)\r\n        document.getElementById(\"addedProdQty\").value = '';\r\n        setPickedProduct('');\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <AddProductButtons>\r\n            <Dropdown options={productList} optionLabel=\"prodName\" placeholder=\"Select a product\"\r\n                name=\"products\" value={pickedProduct} onChange={handleChange} disabled={chosen!=='  ' ? false : true}/>\r\n            <span className=\"p-float-label\">\r\n                <InputText id=\"addedProdQty\" size=\"10\" disabled={chosen!=='  ' ? false : true}/>\r\n                <label htmlFor=\"qty\">Quantity</label>\r\n            </span>\r\n            <Button label=\"ADD\" disabled={chosen==='  ' || pickedProduct===''} icon=\"pi pi-plus\" onClick={() => handleAdd()}/>\r\n        </AddProductButtons>\r\n    );\r\n};\r\n\r\nexport default AddCartEntryItem","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["313"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["314"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport swal from '@sweetalert/with-react';\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { ToggleContext } from '../../../../dataContexts/ToggleContext';\r\nimport { StandingContext } from '../../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../../dataContexts/HoldingContext';\r\nimport { CurrentDataContext } from '../../../../dataContexts/CurrentDataContext';\r\nimport { \r\n    checkStandHoldStatus, \r\n    createStandListArray, \r\n    clearSelectedStandItem, \r\n    createUpdateWeeklyList,\r\n    setCurrentStandLineToQty,\r\n    createUpdateWeeklyStandList,\r\n    checkForStandMods \r\n    } from '../../../../helpers/StandBuildingHelpers';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst OrderGrid = styled.div`\r\n    width: 100%;\r\n    font-size: 1em;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    border: none;\r\n    display: grid;\r\n    grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr .5fr;\r\n    align-self: center;\r\n    row-gap: 10px;\r\n    `\r\nconst StandInput = styled.input`\r\n    border: 1px solid gray;\r\n    border-radius: 5px;\r\n    width: 80%;\r\n    `\r\n\r\nconst entryNotZero = {\r\n    fontSize: \"1.1em\",\r\n    fontWeight: \"bold\"\r\n}\r\n\r\nconst entryZero = {\r\n    fontSize: \"1em\",\r\n    fontWeight: \"normal\"\r\n}\r\n\r\nconst clonedeep = require('lodash.clonedeep')\r\n\r\nconst BuildCurrentStandingList = () => {\r\n\r\n    const [ standArray, setStandArray ] = useState()\r\n\r\n    const { standing, setStanding } = useContext(StandingContext);\r\n    const { holding, setHolding } = useContext(HoldingContext);\r\n    const { standList, setStandList, setModifications } = useContext(ToggleContext)\r\n    const { chosen } = useContext(CurrentDataContext);\r\n\r\n\r\n    useEffect(() => {\r\n        let [Stand, Hold] = checkStandHoldStatus(standing, holding, chosen)\r\n        setStandList(Stand)   \r\n        let buildStandArray = createStandListArray(standing, holding, Stand, Hold, chosen) \r\n        setModifications(checkForStandMods(buildStandArray))\r\n        setStandArray(buildStandArray)\r\n    },[chosen, holding, standing, setStandList])\r\n\r\n\r\n\r\n    const handleRemove = (index) => {\r\n        \r\n        let standListToModify = clearSelectedStandItem(index,standArray)\r\n        console.log(standListToModify)\r\n        setStandArray(standListToModify)\r\n        setModifications(true)\r\n        \r\n\r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)   \r\n        let updatedWeeklyList = createUpdateWeeklyList(index, updatedStandorHold, chosen)\r\n        standList ? setStanding(updatedWeeklyList) : setHolding(updatedWeeklyList)        \r\n    }\r\n\r\n\r\n    const handleQtyModify = (e,qty) => {\r\n        if(isNaN(e.target.value)){\r\n            e.target.value = ''\r\n            swal ({\r\n                text: \"Only Numbers Please\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                timer: 2000\r\n              })\r\n        }\r\n\r\n        let StandListToModify = setCurrentStandLineToQty(e,standArray,qty)\r\n        setStandArray(StandListToModify)\r\n        \r\n        let updatedStandorHold = clonedeep(standList ? standing : holding)   \r\n        let updatedWeeklyStandList = createUpdateWeeklyStandList(e, updatedStandorHold, chosen)\r\n        standList ? setStanding(updatedWeeklyStandList) : setHolding(updatedWeeklyStandList)            \r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <React.Fragment> \r\n        <OrderGrid>\r\n        <label>PRODUCT</label>\r\n            <label>S</label>\r\n            <label>M</label>\r\n            <label>T</label>\r\n            <label>W</label>\r\n            <label>T</label>\r\n            <label>F</label>\r\n            <label>S</label>\r\n            <label></label>\r\n            {standArray ? standArray.map(order =>\r\n                (<React.Fragment key={order[0]+\"frag\"}>\r\n                    <label key={order[0]+\"prod\"}>{order[0]}</label>\r\n\r\n                    <StandInput type=\"text\" key={order[0]+\"sun\"} size=\"3\" style={Number(order[1])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_1\"} name={order[0]} placeholder={order[1]} data-day=\"1\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"mon\"} size=\"3\" style={Number(order[2])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_2\"} name={order[0]} placeholder={order[2]} data-day=\"2\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"tues\"} size=\"3\" style={Number(order[3])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_3\"} name={order[0]} placeholder={order[3]} data-day=\"3\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"wed\"} size=\"3\" style={Number(order[4])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_4\"} name={order[0]} placeholder={order[4]} data-day=\"4\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"thurs\"} size=\"3\" style={Number(order[5])>0 ? entryNotZero : entryZero } \r\n                        maxLength=\"3\" id={order[0]+\"_5\"} name={order[0]} placeholder={order[5]} data-day=\"5\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"fri\"} size=\"3\" style={Number(order[6])>0 ? entryNotZero : entryZero } \r\n                        maxLength=\"3\" id={order[0]+\"_6\"} name={order[0]} placeholder={order[6]} data-day=\"6\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n                    <StandInput type=\"text\" key={order[0]+\"sat\"} size=\"3\" style={Number(order[7])>0 ? entryNotZero : entryZero }\r\n                        maxLength=\"3\" id={order[0]+\"_7\"} name={order[0]} placeholder={order[7]} data-day=\"7\" \r\n                        onKeyUp={e => {handleQtyModify(e,e.target.value)}} onBlur={(e) => {e.target.value = ''}}>\r\n                    </StandInput>\r\n    \r\n                    <Button icon=\"pi pi-trash\" className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\" \r\n                        key={order[0]+\"rem\"} name={order[0]} onClick={e => handleRemove(order[0])}></Button>\r\n                </React.Fragment>)) : ''}\r\n           \r\n        </OrderGrid>    \r\n        </React.Fragment>\r\n        \r\n    )\r\n};\r\n\r\nexport default BuildCurrentStandingList","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["315"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n\r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsTabs.js",[],["316","317"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByCustomer.js",["318","319","320","321"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.customer}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        \r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"customer\"]= order[2]\r\n                    newData[\"product\"] = order[1]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n\r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    \r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"customer\" \r\n                    sortMode=\"single\" sortField=\"customer\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct.js",["322","323","324","325","326"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByProduct = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { delivDate, route, setRoute } = useContext(CurrentDataContext)\r\n\r\n    const [ data, setData ] = useState([])\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n\r\n    const headerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{data.product}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const footerTemplate = (data) => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => Number(order[0])>0)\r\n        if (route!==\"\"){\r\n            orderList = orderList.filter(order => order[4] === route)\r\n        }\r\n\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let order of orderList){\r\n                    let newData={}\r\n                    newData[\"product\"]= order[1]\r\n                    newData[\"customer\"] = order[2]\r\n                    newData[\"qty\"] = order[0]\r\n\r\n                \r\n            \r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let dat = constructData()\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n    useEffect(() => {\r\n        setRoute('')\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable value={data}\r\n                    className=\"p-datatable-gridlines p-datatable-sm\"\r\n                    rowGroupMode=\"subheader\" groupField=\"product\" \r\n                    sortMode=\"single\" sortField=\"product\" sortOrder={1}\r\n                    expandableRowGroups expandedRows={expandedRows} onRowToggle={(e) => setExpandedRows(e.data)}\r\n                    rowGroupHeaderTemplate={headerTemplate} rowGroupFooterTemplate={footerTemplate}>\r\n                        \r\n                        <Column field=\"product\" header=\"Product\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"customer\" header=\"Customer\" style={{width:'35%'}}></Column>\r\n                        <Column field=\"qty\" header=\"Quantity\" style={{width:'15%'}}></Column>\r\n                        <Column field=\"ea\" header=\"Total/ea.\" style={{width:'15%'}}></Column>\r\n                </DataTable>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByProduct","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\LogisticsFunctions.js",["327","328","329","330","331"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\nimport { RoutesContext } from '../../dataContexts/RoutesContext';\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext';\r\n\r\nimport { createRouteList } from '../../helpers/sortDataHelpers'\r\n\r\n\r\n\r\nconst LogisticsFunctions = () => {\r\n\r\n    const { customers, setCustLoaded } = useContext(CustomerContext)\r\n    const { products, setProdLoaded } = useContext(ProductsContext)\r\n    const { setRoutes } = useContext(RoutesContext)\r\n    const { orders, setOrdersLoaded } = useContext(OrdersContext)\r\n    const { standing, setStandLoaded } = useContext(StandingContext)\r\n    const { chosen, delivDate, setCalendarEvents } = useContext(CurrentDataContext)\r\n    const { setRouteIsOn } = useContext(ToggleContext)\r\n   \r\n\r\n\r\n    //  T O G G L E S \r\n\r\n    // when a customer is chosen, route and ponote are turned on\r\n\r\n    useEffect(() => {\r\n        if (orders.length<1){\r\n            setOrdersLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (customers.length<1){\r\n            setCustLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (products.length<1){\r\n            setProdLoaded(false)\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (standing.length<1){\r\n            setStandLoaded(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    setRouteIsOn(true)\r\n\r\n\r\n\r\n    //  F U N C T I O N S\r\n    \r\n    // Create a new route list if customers changes\r\n    useEffect(()=> {\r\n        let routeList = createRouteList(customers)\r\n        setRoutes(routeList)\r\n    },[customers, setRoutes])\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate, orders, standing, setCalendarEvents])\r\n    \r\n\r\n    return (\r\n        <React.Fragment>         \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default LogisticsFunctions","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryRouteGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryCustomerGrid.js",["332"],"import React, { useContext } from 'react';\r\n\r\n\r\nimport Calendar from '../ordering/Parts/Calendar'\r\nimport ByCustomer from './ByCustomer.js'\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { OrdersContext, OrdersLoad } from '../../dataContexts/OrdersContext'\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { StandingContext, StandingLoad } from '../../dataContexts/StandingContext'\r\nimport LogisticsFunctions from './LogisticsFunctions';\r\n\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LogisticsContainer = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: auto;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr; \r\n    `\r\n\r\n  const InfoContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    box-sizing: border-box;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    `\r\n  const BasicContainer = styled.div`\r\n    border: 1px solid lightgray;\r\n    margin: 10px 20px;\r\n    padding: 10px 10px;\r\n    `\r\n\r\n\r\n\r\n\r\n\r\nfunction Logistics() {\r\n\r\n  const delivDate = \"01/02/2021\"\r\n\r\n  const cities = [\r\n    {name: 'New York', code: 'NY'},\r\n    {name: 'Rome', code: 'RM'},\r\n    {name: 'London', code: 'LDN'},\r\n    {name: 'Istanbul', code: 'IST'},\r\n    {name: 'Paris', code: 'PRS'}\r\n  ];\r\n\r\n  \r\n  const { standLoaded } = useContext(StandingContext)\r\n  const { prodLoaded } = useContext(ProductsContext)\r\n  const { custLoaded } = useContext(CustomerContext)\r\n  const { ordersLoaded } = useContext(OrdersContext)\r\n\r\n  return (\r\n      <LogisticsContainer>\r\n       \r\n        {!standLoaded ? <StandingLoad /> : ''}\r\n        {!prodLoaded ? <ProductsLoad /> : ''}\r\n        {!custLoaded ? <CustomerLoad /> : ''}\r\n        {!ordersLoaded ? <OrdersLoad /> : ''}\r\n        <BasicContainer>\r\n          <Calendar />\r\n        </BasicContainer>\r\n        \r\n          <div id=\"orderCommand\">\r\n            <InfoContainer>\r\n              <label htmlFor=\"delivDate\" className=\"p-d-block\">Delivery Date</label>\r\n              <InputText id=\"delivDate\" value={delivDate} />\r\n              <Dropdown options={cities} optionLabel=\"name\" placeholder=\"Select a route\"/>\r\n              <Button label=\"Print\" icon=\"pi pi-print\" className=\"p-button-raised p-button-rounded p-button-success\" />\r\n              <Button label=\"Refresh\" icon=\"pi pi-refresh\" className=\"p-button-raised p-button-rounded p-button-info\" />\r\n            </InfoContainer>\r\n            <BasicContainer><ByCustomer /> </BasicContainer>\r\n          </div> \r\n         \r\n\r\n\r\n          </LogisticsContainer>\r\n        \r\n\r\n      \r\n        \r\n      \r\n            \r\n  );\r\n}\r\n\r\nexport default Logistics;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute.js",["333"],"import React,{ useContext, useEffect, useState } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext'\r\nimport { StandingContext } from '../../dataContexts/StandingContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\n\r\nimport { buildCartList, buildStandList } from '../../helpers/CartBuildingHelpers'\r\n\r\nimport { sortAtoZDataByIndex } from '../../helpers/sortDataHelpers'\r\n\r\nconst ByCustomer = () => {\r\n\r\n    const { orders } = useContext(OrdersContext)\r\n    const { standing } = useContext(StandingContext)\r\n    const { products } = useContext(ProductsContext)\r\n    const { delivDate, route } = useContext(CurrentDataContext)\r\n\r\n    const [ columns, setColumns ] = useState([])\r\n    const [ data, setData ] = useState([])\r\n\r\n\r\n    const constructColumns = () => {\r\n      \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && \r\n                    orderList[i][2] === orderList[j][2] \r\n                    ){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n        orderList = orderList.filter(order => order[4] === route)\r\n\r\n        let listOfProducts = orderList.map(order => order[1])\r\n        listOfProducts = new Set(listOfProducts)\r\n        let prodArray = []\r\n        for (let prod of listOfProducts){\r\n            for (let item of products){\r\n                if (prod === item[1]){\r\n                    let newItem = [prod, item[2],item[4],item[5]]\r\n                    prodArray.push(newItem)\r\n                }\r\n            }\r\n        }\r\n\r\n        sortAtoZDataByIndex(prodArray,2)\r\n\r\n\r\n        let columns = [{field: 'customer', header: 'Customer', width: {width:'10%'} }]\r\n        for (let prod of prodArray){\r\n            let newCol = {field: prod[0], header: prod[1], width: {width:'30px'}}\r\n            columns.push(newCol)\r\n        }\r\n        return columns\r\n        \r\n    }\r\n\r\n    const constructData = () => {\r\n\r\n        \r\n        let cartList = buildCartList(\"*\",delivDate,orders)\r\n        let standList = buildStandList(\"*\", delivDate, standing)\r\n\r\n        let orderList = cartList.concat(standList)\r\n   \r\n        for (let i=0; i<orderList.length; ++i ){\r\n            for (let j=i+1; j<orderList.length; ++j){\r\n                if (orderList[i][1] === orderList[j][1] && orderList[i][2] === orderList[j][2]){\r\n                    orderList.splice(j,1);\r\n                }\r\n            }\r\n        }\r\n\r\n        orderList = orderList.filter(order => order[4] === route)\r\n        let listOfCustomers = orderList.map(order => order[2])\r\n        listOfCustomers = new Set(listOfCustomers)\r\n        \r\n        let data=[]\r\n        for (let cust of listOfCustomers){\r\n            let newData = {\"customer\": cust}\r\n            for (let order of orderList){\r\n                if (order[2] === cust){\r\n                    newData[order[1]] = order[0]\r\n                }\r\n            }\r\n\r\n            data.push(newData)\r\n        }\r\n        \r\n        return data\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        let col = constructColumns()\r\n        let dat = constructData()\r\n        setColumns(col)\r\n        setData(dat)\r\n\r\n    },[delivDate, route])\r\n    \r\n    \r\n\r\n    \r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column npmkey={col.field} field={col.field} header={col.header} style={col.width}/>;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <DataTable className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\" \r\n                    value={data} resizableColumns columnResizeMode=\"fit\">\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ByCustomer","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\DeliveryProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["334","335"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport Calendar from './Parts/Calendar'\r\nimport CurrentOrderInfo from './Parts/CurrentOrderInfo'\r\nimport CurrentOrderList from './Parts/CurrentOrderList'\r\nimport OrderCommandLine from './Parts/OrderCommandLine'\r\nimport OrderEntryButtons from './Parts/OrderEntryButtons'\r\nimport ExportToDatabaseButtons from './Parts/ExportToDatabaseButtons'\r\nimport RecentOrderList from './g_recentOrderList';\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { OrdersContext, OrdersLoad } from '../../dataContexts/OrdersContext'\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { StandingContext, StandingLoad } from '../../dataContexts/StandingContext'\r\nimport { HoldingContext, HoldingLoad } from '../../dataContexts/HoldingContext'\r\nimport { CurrentDataContext } from '../../dataContexts/CurrentDataContext'\r\nimport { ToggleContext } from '../../dataContexts/ToggleContext'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst MainWindow = styled.div`\r\n    font-family: 'Montserrat', sans-serif;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: auto;\r\n    display: grid;\r\n    grid-template-columns: .8fr 1.4fr .6fr;    \r\n  `\r\n\r\n  const BasicContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 95%;\r\n    border: 1px solid lightgray;\r\n    padding: 10px 10px;\r\n    margin: 0px 10px;\r\n    box-sizing: border-box;\r\n    `\r\n\r\n\r\n\r\nfunction Ordering(props) {\r\n\r\n  const { standLoaded } = useContext(StandingContext)\r\n  const { prodLoaded } = useContext(ProductsContext)\r\n  const { custLoaded } = useContext(CustomerContext)\r\n  const { ordersLoaded } = useContext(OrdersContext)\r\n  const { holdLoaded } = useContext(HoldingContext)\r\n  const { setChosen } = useContext(CurrentDataContext)\r\n  const { setCartList } = useContext(ToggleContext)\r\n\r\n  useEffect(() => {\r\n    if(props.location.search){\r\n    setChosen(props.location.search.split('&')[1].split('=')[1].replace(/%20/g,\" \").replace(/%27/g,\"'\"))\r\n    if(props.location.search.split('&')[0].split('=')[1].replace(/%20/g,\" \").replace(/%27/g,\"'\")===\"true\"){\r\n    setCartList(true)\r\n    } else {\r\n      setCartList(false)\r\n    }\r\n  }\r\n  },[])\r\n\r\n  \r\n\r\n  return ( \r\n      <MainWindow>     \r\n        {!ordersLoaded ? <OrdersLoad /> : ''}\r\n        {!custLoaded ? <CustomerLoad /> : ''}\r\n        {!prodLoaded ? <ProductsLoad /> : ''}\r\n        {!standLoaded ? <StandingLoad /> : ''}\r\n        {!holdLoaded ? <HoldingLoad /> : ''}\r\n       \r\n        <BasicContainer>\r\n          <Calendar />\r\n        </BasicContainer>\r\n        <BasicContainer>\r\n         \r\n          <OrderCommandLine />   \r\n          <CurrentOrderInfo />  \r\n          <CurrentOrderList />  \r\n          <OrderEntryButtons />\r\n        </BasicContainer> \r\n        <BasicContainer>\r\n          <RecentOrderList />\r\n        </BasicContainer>   \r\n      </MainWindow>          \r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["336","337","338","339"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext';\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\n\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\n\r\nimport { tomorrow } from \"../../../helpers/dateTimeHelpers\"\r\nimport { createRetailOrderCustomers } from \"../../../helpers/sortDataHelpers\"\r\nimport { buildCurrentOrder } from \"../../../helpers/CartBuildingHelpers\"\r\n\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nconst CurrentInfo = styled.div`\r\n    width: 100%;\r\n    display: grid;\r\n    margin: 10px 0;\r\n    grid-template-columns: 1fr;\r\n    column-gap: 10px;\r\n    row-gap: 10px; \r\n    background-color: lightgrey;\r\n    `\r\n\r\n  const SpecialInfo = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    margin: 0px 10px 10px 10px;\r\n    `\r\n\r\n  const TitleBox = styled.div`\r\n    display: flex;\r\n    width: 90%;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    `\r\n  const Title = styled.h2`\r\n    padding: 0;\r\n    margin: 10px 0;\r\n    `\r\n  const DateStyle = styled.h4`\r\n    padding: 0;\r\n    color: grey;\r\n    margin: 10px 0;\r\n    `\r\n  const FulfillOptions = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n    margin: 10px;\r\n    align-items: center;\r\n    justify-items: left;\r\n    `\r\n\r\n  const ho = {\r\n    color: \"red\"\r\n    }\r\n\r\n  const so = {\r\n    color: \"rgb(66, 97, 201)\"\r\n    }\r\n\r\n\r\nconst CurrentOrderInfo = () => {\r\n\r\n  const {cartList, standList, orderTypeWhole, setModifications } = useContext(ToggleContext)\r\n  const { orders } = useContext(OrdersContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { chosen, route, setRoute, ponote, setPonote, setChosen, delivDate, setDelivDate, currentCartList } = useContext(CurrentDataContext)\r\n\r\n  const [ customerGroup, setCustomerGroup ] = useState(customers)\r\n\r\n\r\n  let orderType\r\n  cartList ? orderType = \"Cart\" : standList ? orderType = \"Standing\" : orderType = \"Holding\"\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    orderTypeWhole ? setCustomerGroup(customers) : setCustomerGroup(createRetailOrderCustomers(orders))\r\n  },[ customers, orderTypeWhole, orders ])\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length>0){\r\n      setRoute(currentCartList[0][\"route\"])\r\n    } \r\n    let ind=customers.findIndex(cust => cust[\"custName\"]===chosen)\r\n    if (ind>=0){\r\n      if (customers[ind][\"zoneName\"]!==\"slopick\" && customers[ind][\"zoneName\"]!==\"atownpick\"){\r\n      setRoute(\"deliv\")\r\n      } else {\r\n        setRoute(customers[ind][\"zoneName\"])\r\n      }\r\n    }\r\n  },[currentCartList, chosen])\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length>0){\r\n      if (currentCartList[0][\"PONote\"]!==\"\" && currentCartList[0][\"PONote\"] !==undefined){\r\n        setPonote(currentCartList[0][\"PONote\"])\r\n      } else {\r\n        setPonote(\"\")\r\n      }\r\n    }\r\n  },[currentCartList])\r\n\r\n\r\n  useEffect(() => {\r\n    let currentOrderList = buildCurrentOrder(chosen,delivDate,orders,standing)\r\n    if (currentCartList.length>0){\r\n      if (currentOrderList[0][\"route\"]!==route){\r\n        setModifications(true)\r\n      } \r\n    } \r\n  },[route])\r\n\r\n  \r\n  useEffect(() => {\r\n    let currentOrderList = buildCurrentOrder(chosen,delivDate,orders,standing)\r\n    if (currentCartList.length>0){\r\n      if (currentOrderList[0][\"PONote\"]!==ponote){\r\n        setModifications(true)\r\n      }\r\n    }\r\n  },[ponote])\r\n    \r\n  \r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen)\r\n    setDelivDate(tomorrow())\r\n  }\r\n\r\n\r\n  const changeDate = (date) => {\r\n    let fd = new Date(date)\r\n    fd.setMinutes(fd.getMinutes()+fd.getTimezoneOffset()) \r\n    let returnDate = fd.toDateString()\r\n    \r\n    return returnDate\r\n      \r\n    }\r\n\r\n  return (   \r\n    <React.Fragment>\r\n      {orderTypeWhole ?\r\n      <React.Fragment> \r\n        <TitleBox>\r\n          <Title style={cartList ? so : standList ? so : ho }>Wholesale {orderType} Order</Title>\r\n          <DateStyle>{delivDate ? changeDate(delivDate) : ''}</DateStyle>\r\n        </TitleBox>\r\n      </React.Fragment> : <h2 style={standList ? so : ho }>Retail {orderType} Order</h2>}\r\n\r\n      \r\n        <CurrentInfo>\r\n         \r\n          <FulfillOptions> \r\n\r\n            <Dropdown id=\"customers\" \r\n              value={chosen} options={customerGroup} \r\n              optionLabel=\"custName\" placeholder={chosen==='  ' ? \"Select a Customer ...\" : chosen }\r\n              onChange={(e) => handleChosen(e.value.custName)}/>     \r\n            \r\n            <RadioButton value=\"deliv\" name=\"delivery\" \r\n              onChange={(e) => setRoute(e.value)} checked={route === 'deliv'}/>\r\n            <label htmlFor=\"delivery\">Delivery</label>\r\n            \r\n            <RadioButton value=\"slopick\" name=\"delivery\"\r\n              onChange={(e) => setRoute(e.value)} checked={route === 'slopick'} />\r\n            <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n            \r\n            <RadioButton value=\"atownpick\" name=\"delivery\" \r\n              onChange={(e) => setRoute(e.value)} checked={route === 'atownpick'}/>\r\n            <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n\r\n          </FulfillOptions>\r\n\r\n          <SpecialInfo>\r\n            <span className=\"p-float-label\">\r\n              <InputText id=\"in\" size=\"50\" value={ponote} onChange={(e) => setPonote(e.target.value)}/>\r\n              <label htmlFor=\"in\">{ponote===\"\" ? \"PO#/Special Instructions...\" : \"\"}</label>\r\n            </span>\r\n          </SpecialInfo>\r\n        </CurrentInfo>\r\n    </React.Fragment>\r\n      \r\n  );\r\n}\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["340"],"import React,{ useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nimport { \r\n    CreateStandingArray,\r\n    CreateCartDateArray,\r\n    CreateBlankCartDateArray\r\n    } from '../../../helpers/calendarBuildHelper';\r\n\r\n\r\n\r\nconst Calendar = () => {\r\n\r\n    const { chosen, delivDate, setDelivDate, calendarEvents, setCalendarEvents } = useContext(CurrentDataContext);\r\n    const { standing } = useContext(StandingContext)\r\n    const { orders } = useContext(OrdersContext)\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let backToStandingArray = CreateStandingArray(standing,chosen);\r\n        let cartDateArray = CreateCartDateArray(orders,chosen);\r\n        let cartBlankDateArray = CreateBlankCartDateArray(orders,chosen);\r\n        \r\n\r\n        let standingEvents = {title: '',\r\n                            daysOfWeek: backToStandingArray,\r\n                            display: 'background'}\r\n\r\n\r\n        let calendarEvents = [{title: '',\r\n                            date: delivDate,\r\n                            display: 'background'}]\r\n\r\n\r\n        calendarEvents.push(standingEvents)\r\n\r\n\r\n        for (let order of cartDateArray) {\r\n            let newEvent = {title: '',\r\n                        date: order,\r\n                        display: 'background'}\r\n            calendarEvents.push(newEvent)\r\n        }\r\n\r\n\r\n        for (let order of cartBlankDateArray) {\r\n            let newEvent2 = {title: '',\r\n                        date: order,\r\n                        display: 'inverse-background'}\r\n            calendarEvents.push(newEvent2)\r\n        }\r\n\r\n        setCalendarEvents(calendarEvents)\r\n    },[chosen, delivDate])\r\n  \r\n\r\n\r\n    const handleDateSelect = (selectInfo) => {\r\n        document.getElementById(\"orderCommand\").focus()\r\n        setDelivDate(selectInfo.dateStr)\r\n    }\r\n\r\n    return(  \r\n        <React.Fragment> \r\n            <div className=\"calendarApp\" id=\"test\">\r\n                <FullCalendar\r\n                    plugins={[ dayGridPlugin, interactionPlugin ]}\r\n                    defaultView=\"dayGridMonth\"\r\n                    aspectRatio={1}\r\n                    contentHeight=\"auto\"\r\n                    eventBackgroundColor = \"blue\"\r\n                    dateClick = {handleDateSelect}\r\n                    headerToolbar ={{\r\n                        start: 'title',\r\n                        center: '',\r\n                        end: 'prev,next'\r\n                    }}\r\n                    events = {calendarEvents}    \r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n\r\n  \r\nexport default Calendar;\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["341"],"import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport { CustomerContext, CustomerLoad } from '../../dataContexts/CustomerContext'\r\nimport { ProductsContext } from '../../dataContexts/ProductsContext'\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\n\r\n\r\nimport CustomerList from './Parts/CustomerList'\r\nimport Name from './Parts/Name'\r\nimport Location from './Parts/Location'\r\nimport Contact from './Parts/Contact'\r\nimport Billing from './Parts/Billing'\r\nimport Buttons from './Parts/Buttons'\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr .5fr;\r\n  height: 100vh;\r\n  `\r\n\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n  `\r\n\r\n\r\n\r\nfunction Customers() {\r\n\r\n  const [ selectedCustomer, setSelectedCustomer ] = useState(null)\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext)\r\n  const { setProdLoaded } = useContext(ProductsContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  \r\n  useEffect(() => {\r\n  \r\n    if (!customers){\r\n        setCustLoaded(false)\r\n    }\r\n    setProdLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n\r\n  \r\n    \r\n  return (\r\n    <React.Fragment>\r\n       {!custLoaded ? <CustomerLoad /> : ''}\r\n      <MainWrapper>\r\n        <CustomerList selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n        {selectedCustomer && \r\n        <React.Fragment>\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Name\">\r\n              <Name selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n            </GroupBox>\r\n      \r\n            <GroupBox id=\"Location\">\r\n              <Location selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n\r\n\r\n          <DescripWrapper>\r\n            <GroupBox id=\"Contact\">\r\n              <Contact selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n            </GroupBox>\r\n            \r\n            <GroupBox id=\"Billing\"> \r\n              <Billing selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n            </GroupBox>\r\n          </DescripWrapper>\r\n        \r\n          </React.Fragment>\r\n      }\r\n\r\n          <DescripWrapper>\r\n            <Buttons selectedCustomer={selectedCustomer} setSelectedCustomer={setSelectedCustomer}/>\r\n          </DescripWrapper>\r\n\r\n        \r\n      </MainWrapper>\r\n    </React.Fragment>         \r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["342"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\nimport { ProductsContext, ProductsLoad } from '../../dataContexts/ProductsContext'\r\nimport { CustomerContext } from '../../dataContexts/CustomerContext';\r\nimport { OrdersContext } from '../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../dataContexts/HoldingContext';\r\n\r\n\r\n\r\n\r\nfunction Products() {\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext)\r\n  let { setCustLoaded } = useContext(CustomerContext)\r\n  let { setHoldLoaded } = useContext(HoldingContext)\r\n  let { setOrdersLoaded } = useContext(OrdersContext)\r\n  let { setStandLoaded } = useContext(StandingContext)\r\n\r\n  useEffect(() => {\r\n  \r\n    if (!products){\r\n        setProdLoaded(false)\r\n    }\r\n    setCustLoaded(true)\r\n    setHoldLoaded(true)\r\n    setOrdersLoaded(true)\r\n    setStandLoaded(true)\r\n  },[])\r\n\r\n  const MainWrapper = styled.div`\r\n  font-family: 'Montserrat', sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: #ffffff;\r\n  `\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : ''}\r\n        <MainWrapper>\r\n          <DataTable value={products} className=\"p-datatable-striped\" selectionMode=\"single\" dataKey=\"id\">\r\n            <Column field=\"prodName\" header=\"Product\"sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n            <Column field=\"nickName\" header=\"Nickname\"sortable filter filterPlaceholder=\"Search by nickname\"></Column>\r\n            <Column field=\"packSize\" header=\"Pack Size\" sortable></Column>\r\n            <Column field=\"doughType\" header=\"Dough Type\" sortable></Column>\r\n          </DataTable>\r\n      </MainWrapper> \r\n    </React.Fragment>         \r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\ExportToDatabaseButtons.js",["343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360"],"import React, { useContext } from 'react';\r\n\r\nimport { CurrentDataContext } from '../../../dataContexts/CurrentDataContext';\r\nimport { OrdersContext } from '../../../dataContexts/OrdersContext';\r\nimport { StandingContext } from '../../../dataContexts/StandingContext';\r\nimport { HoldingContext } from '../../../dataContexts/HoldingContext';\r\nimport { ToggleContext } from '../../../dataContexts/ToggleContext';\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext';\r\nimport { ProductsContext } from '../../../dataContexts/ProductsContext';\r\n\r\nimport { createCustomer, createProduct, createOrder, createStanding, createHolding } from '../../../graphql/mutations'\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst OrderButtons = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    `\r\n\r\n\r\n\r\n\r\nfunction ExportToDatabaseButtons() {\r\n\r\n  \r\n\r\n  const { route, ponote } = useContext(CurrentDataContext)\r\n  const { setChosen, delivDate, chosen, currentCartList } = useContext(CurrentDataContext)\r\n  const { orders, setOrders, recentOrders, setRecentOrders } = useContext(OrdersContext)\r\n  const { standing } = useContext(StandingContext)\r\n  const { holding } = useContext(HoldingContext)\r\n  const { customers } = useContext(CustomerContext)\r\n  const { products } = useContext(ProductsContext)\r\n  const { orderTypeWhole, setOrderTypeWhole,modifications, setModifications, \r\n          cartList, setCartList, standList, setRouteIsOn } = useContext(ToggleContext)\r\n\r\n \r\n\r\nconst handleUpdateCustomers = async () => {\r\n  for (let cust of customers){\r\n\r\n    let custDetails = {\r\n      nickName: cust[\"nickname\"],\r\n      custName: cust[\"name\"],\r\n      zoneName: cust[\"zoneName\"],\r\n      addr1: cust[\"addr1\"],\r\n      addr2: cust[\"addr2\"],\r\n      city: cust[\"addrCity\"],\r\n      zip: cust[\"addrZip\"],\r\n      email: cust[\"email\"],\r\n      firstName: cust[\"firstName\"],\r\n      lastName: cust[\"lastName\"],\r\n      phone: cust[\"phone\"],\r\n      toBePrinted: cust[\"toBePrinted\"],\r\n      toBeEmailed: cust[\"toBeEmailed\"],\r\n      terms: cust[\"terms\"],\r\n      invoicing: cust[\"invoicing\"]\r\n    }\r\n    \r\n    const custData = await API.graphql(graphqlOperation(createCustomer, {input: custDetails}))\r\n    console.log(custData.data)\r\n    \r\n    }\r\n      \r\n  \r\n}\r\n\r\nconst handleUpdateProducts = async () => {\r\n  for (let prod of products){\r\n\r\n    let prodDetails = {\r\n      nickName: prod[\"nickName\"],\r\n      prodName: prod[\"name\"],\r\n      packGroup: prod[\"packGroup\"],\r\n      packSize: prod[\"packSize\"],\r\n      doughType: prod[\"doughType\"],\r\n      freezerThaw: prod[\"freezerThaw\"],\r\n      packGroupOrder: prod[\"packGroupOrder\"]\r\n    }\r\n    \r\n    const prodData = await API.graphql(graphqlOperation(createProduct, {input: prodDetails}))\r\n    console.log(prodData.data)\r\n    \r\n    }\r\n      \r\n  \r\n}\r\n\r\nconst handleUpdateOrders = async () => {\r\n  for (let ord of orders){\r\n\r\n    let ordDetails = {\r\n      qty: ord[\"qty\"],\r\n      custName: ord[\"custName\"],\r\n      prodName: ord[\"prodName\"],\r\n      PONote: ord[\"PONote\"],\r\n      route: ord[\"route\"],\r\n      SO: ord[\"SO\"],\r\n      isWhole: ord[\"isWhole\"],\r\n      delivDate: ord[\"delivDate\"],\r\n      timeStamp: ord[\"timeStamp\"]\r\n    }\r\n    \r\n    const ordData = await API.graphql(graphqlOperation(createOrder, {input: ordDetails}))\r\n    console.log(ordData.data)\r\n    \r\n    }\r\n}\r\n\r\nconst handleUpdateStanding = async () => {\r\n  for (let stand of standing){\r\n\r\n    let standDetails = {\r\n      qty: stand[\"qty\"],\r\n      custName: stand[\"custName\"],\r\n      prodName: stand[\"prodName\"],\r\n      dayNum: stand[\"dayNum\"],\r\n      SO: stand[\"SO\"],\r\n      timeStamp: stand[\"timeStamp\"]\r\n    }\r\n    \r\n    const standData = await API.graphql(graphqlOperation(createStanding, {input: standDetails}))\r\n    console.log(standData.data)\r\n    \r\n    }\r\n}\r\n\r\nconst handleUpdateHolding = async () => {\r\n  for (let hold of holding){\r\n\r\n    let holdDetails = {\r\n      qty: hold[\"qty\"],\r\n      custName: hold[\"custName\"],\r\n      prodName: hold[\"prodName\"],\r\n      dayNum: hold[\"dayNum\"],\r\n      SO: hold[\"SO\"],\r\n      timeStamp: hold[\"timeStamp\"]\r\n    }\r\n    \r\n    const holdData = await API.graphql(graphqlOperation(createHolding, {input: holdDetails}))\r\n    console.log(holdData.data)\r\n    \r\n    }\r\n}\r\n \r\n  \r\n\r\n  return (         \r\n    <OrderButtons>\r\n      <Button disabled label=\"ExportCustomers\" icon=\"pi pi-upload\" onClick={handleUpdateCustomers}\r\n        className={\"p-button-raised p-button-rounded p-button-success\"} />\r\n      <Button disabled label=\"ExportProducts\" icon=\"pi pi-upload\" onClick={handleUpdateProducts}\r\n        className={\"p-button-raised p-button-rounded p-button-success\"} />\r\n      <Button disabled label=\"ExportOrders\" icon=\"pi pi-upload\" onClick={handleUpdateOrders}\r\n        className={\"p-button-raised p-button-rounded p-button-success\"} />\r\n      <Button label=\"ExportHolding\" icon=\"pi pi-upload\" onClick={handleUpdateHolding}\r\n        className={\"p-button-raised p-button-rounded p-button-success\"} />\r\n    <Button label=\"ExportStanding\" icon=\"pi pi-upload\" onClick={handleUpdateStanding}\r\n        className={\"p-button-raised p-button-rounded p-button-success\"} />\r\n      \r\n    </OrderButtons>    \r\n  );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default ExportToDatabaseButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",["361"],"import React, { useContext } from 'react';\r\n\r\nimport styled from 'styled-components'\r\nimport swal from '@sweetalert/with-react';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\n\r\nimport { CustomerContext } from '../../../dataContexts/CustomerContext'\r\n\r\nimport { updateCustomer, deleteCustomer, createCustomer } from '../../../graphql/mutations'\r\n\r\nimport { Button } from 'primereact/button';\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\n\r\nconst ButtonBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: flex-start;\r\n    width: 80%;\r\n    margin: 5px 10px;\r\n    padding: 5px 20px;\r\n    `\r\n\r\n\r\nconst handleOrderClick = (e, selectedCustomer) => {\r\n    e && window.open('./Ordering?cartList=true&selectedCustomer='+selectedCustomer.custName)\r\n}\r\n\r\nconst handleStandClick = (e, selectedCustomer) => {\r\n    e && window.open('./Ordering?cartList=false&selectedCustomer='+selectedCustomer.custName)\r\n}\r\n\r\nconst Buttons = ({ selectedCustomer, setSelectedCustomer }) => {\r\n\r\n    const { setCustLoaded } = useContext(CustomerContext)\r\n\r\n    const handleAddCust = () => {\r\n        let custName\r\n        let nickName\r\n\r\n        swal (\"Enter Customer Name:\", {\r\n            content: \"input\",\r\n        })\r\n        .then((value) => {\r\n            custName = value\r\n            swal (`Enter Nickname for ${value}:`, {\r\n                content: \"input\",\r\n            })\r\n            .then((value) => {\r\n                nickName = value\r\n                const addDetails = {       \r\n                    nickName: nickName,\r\n                    custName: custName,\r\n                    zoneName: \"\",\r\n                    addr1: \"\",\r\n                    addr2: \"\",\r\n                    city: \"\",\r\n                    zip: \"\",\r\n                    email: \"\",\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                    phone: \"\",\r\n                    toBePrinted: \"\",\r\n                    toBeEmailed: \"\",\r\n                    terms: \"\",\r\n                    invoicing: \"\"\r\n                };\r\n                createCust(addDetails, nickName, custName)\r\n            })\r\n        }) \r\n    }\r\n        \r\n    const createCust = async (addDetails, nickName, custName) => {\r\n        try {\r\n            const custData = await API.graphql(graphqlOperation(createCustomer, {input: {...addDetails}}))\r\n            let id = custData.data.createCustomer.id\r\n            let version = custData.data.createCustomer.version\r\n            \r\n            const fullDetails = {    \r\n                id: id,\r\n                _version: version,   \r\n                nickName: nickName,\r\n                custName: custName,\r\n                zoneName: \"\",\r\n                addr1: \"\",\r\n                addr2: \"\",\r\n                city: \"\",\r\n                zip: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                phone: \"\",\r\n                toBePrinted: \"\",\r\n                toBeEmailed: \"\",\r\n                terms: \"\",\r\n                invoicing: \"\"\r\n            };\r\n\r\n        setCustLoaded(false)\r\n        } catch (error){\r\n            console.log('error on fetching Cust List', error)\r\n        }\r\n    }\r\n\r\n       \r\n    const updateCust = async () => {\r\n\r\n        const updateDetails = {\r\n            id: selectedCustomer[\"id\"],\r\n            nickName: selectedCustomer[\"nickName\"],\r\n            custName: selectedCustomer[\"custName\"],\r\n            zoneName: selectedCustomer[\"zoneName\"],\r\n            addr1: selectedCustomer[\"addr1\"],\r\n            addr2: selectedCustomer[\"addr2\"],\r\n            city: selectedCustomer[\"city\"],\r\n            zip: selectedCustomer[\"zip\"],\r\n            email: selectedCustomer[\"email\"],\r\n            firstName: selectedCustomer[\"firstName\"],\r\n            lastName: selectedCustomer[\"lastName\"],\r\n            phone: selectedCustomer[\"phone\"],\r\n            toBePrinted: selectedCustomer[\"toBePrinted\"],\r\n            toBeEmailed: selectedCustomer[\"toBeEmailed\"],\r\n            terms: selectedCustomer[\"terms\"],\r\n            invoicing: selectedCustomer[\"invoicing\"],\r\n            _version: selectedCustomer[\"_version\"]\r\n        };\r\n\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(updateCustomer, {input: {...updateDetails}}))\r\n          console.log(custData.data.updateCustomer.custName)\r\n          swal ({\r\n            text: `${custData.data.updateCustomer.custName} has been updated.`,\r\n            icon: \"success\",\r\n            buttons: false,\r\n            timer: 2000\r\n        })\r\n        setCustLoaded(false)\r\n\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n\r\n\r\n    const deleteCustWarn = async () => {\r\n        swal ({\r\n            text: \" Are you sure that you would like to permanently delete this customer?\",\r\n            icon: \"warning\",\r\n            buttons: [\"Yes\",\"Don't do it!\"],\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(!willDelete){\r\n                deleteCust()\r\n            } else {\r\n                return\r\n            }\r\n        })\r\n    }\r\n      \r\n                \r\n\r\n    const deleteCust = async () => {\r\n        \r\n        const deleteDetails = {\r\n            id: selectedCustomer[\"id\"],\r\n            _version: selectedCustomer[\"_version\"]\r\n        };\r\n      \r\n        try{\r\n            const custData = await API.graphql(graphqlOperation(deleteCustomer, {input: {...deleteDetails}}));\r\n            setCustLoaded(false)\r\n            setSelectedCustomer()\r\n            console.log(custData.data)\r\n        } catch (error) {\r\n            console.log('error on fetching Cust List', error)\r\n        }\r\n    }\r\n\r\n    return (\r\n   \r\n    <ButtonBox>\r\n        <Button label=\"Add a Customer\" icon=\"pi pi-plus\" onClick={handleAddCust}\r\n            className={\"p-button-raised p-button-rounded\"} /><br />\r\n        {selectedCustomer && <React.Fragment><Button label=\"Update Customer\" icon=\"pi pi-user-edit\" onClick={updateCust}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"} /><br /></React.Fragment>}\r\n        {selectedCustomer && <React.Fragment><Button label=\"Delete Customer\" icon=\"pi pi-user-minus\" onClick={deleteCustWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"} /><br /><br /></React.Fragment>}\r\n        {selectedCustomer && <React.Fragment><Button id=\"order\" label=\"Tomorrow's Order\" icon=\"pi pi-shopping-cart\" onClick={e => {handleOrderClick(e, selectedCustomer)}}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"} disabled={selectedCustomer.custName ? false : true}/><br /></React.Fragment>}\r\n        {selectedCustomer && <React.Fragment><Button label=\"Edit Standing Order\" icon=\"pi pi-calendar\" onClick={e => {handleStandClick(e, selectedCustomer)}}\r\n            className={\"p-button-raised p-button-rounded p-button-info\"} disabled={selectedCustomer.custName ? false : true}/><br /></React.Fragment>}\r\n    </ButtonBox>    \r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":38,"column":7,"nodeType":"368","endLine":38,"endColumn":9,"suggestions":"369"},{"ruleId":"366","severity":1,"message":"370","line":45,"column":7,"nodeType":"368","endLine":45,"endColumn":9,"suggestions":"371"},{"ruleId":"366","severity":1,"message":"372","line":38,"column":9,"nodeType":"368","endLine":38,"endColumn":11,"suggestions":"373"},{"ruleId":"366","severity":1,"message":"374","line":36,"column":7,"nodeType":"368","endLine":36,"endColumn":9,"suggestions":"375"},{"ruleId":"366","severity":1,"message":"376","line":38,"column":7,"nodeType":"368","endLine":38,"endColumn":9,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":20,"column":8,"nodeType":"380","messageId":"381","endLine":20,"endColumn":11},{"ruleId":"362","replacedBy":"382"},{"ruleId":"364","replacedBy":"383"},{"ruleId":"366","severity":1,"message":"384","line":42,"column":7,"nodeType":"368","endLine":42,"endColumn":9,"suggestions":"385"},{"ruleId":"366","severity":1,"message":"386","line":48,"column":7,"nodeType":"368","endLine":48,"endColumn":9,"suggestions":"387"},{"ruleId":"366","severity":1,"message":"388","line":54,"column":7,"nodeType":"368","endLine":54,"endColumn":9,"suggestions":"389"},{"ruleId":"366","severity":1,"message":"390","line":60,"column":7,"nodeType":"368","endLine":60,"endColumn":9,"suggestions":"391"},{"ruleId":"366","severity":1,"message":"392","line":66,"column":7,"nodeType":"368","endLine":66,"endColumn":9,"suggestions":"393"},{"ruleId":"362","replacedBy":"394"},{"ruleId":"364","replacedBy":"395"},{"ruleId":"378","severity":1,"message":"396","line":8,"column":7,"nodeType":"380","messageId":"381","endLine":8,"endColumn":17},{"ruleId":"378","severity":1,"message":"397","line":14,"column":8,"nodeType":"380","messageId":"381","endLine":14,"endColumn":23},{"ruleId":"378","severity":1,"message":"398","line":34,"column":39,"nodeType":"380","messageId":"381","endLine":34,"endColumn":53},{"ruleId":"378","severity":1,"message":"399","line":35,"column":37,"nodeType":"380","messageId":"381","endLine":35,"endColumn":50},{"ruleId":"378","severity":1,"message":"400","line":39,"column":9,"nodeType":"380","messageId":"381","endLine":39,"endColumn":21},{"ruleId":"378","severity":1,"message":"401","line":40,"column":9,"nodeType":"380","messageId":"381","endLine":40,"endColumn":20},{"ruleId":"378","severity":1,"message":"402","line":61,"column":17,"nodeType":"380","messageId":"381","endLine":61,"endColumn":24},{"ruleId":"378","severity":1,"message":"403","line":3,"column":16,"nodeType":"380","messageId":"381","endLine":3,"endColumn":22},{"ruleId":"378","severity":1,"message":"404","line":38,"column":29,"nodeType":"380","messageId":"381","endLine":38,"endColumn":45},{"ruleId":"366","severity":1,"message":"405","line":47,"column":11,"nodeType":"368","endLine":47,"endColumn":49,"suggestions":"406"},{"ruleId":"366","severity":1,"message":"407","line":61,"column":8,"nodeType":"368","endLine":61,"endColumn":65,"suggestions":"408"},{"ruleId":"366","severity":1,"message":"407","line":70,"column":7,"nodeType":"368","endLine":70,"endColumn":48,"suggestions":"409"},{"ruleId":"366","severity":1,"message":"410","line":52,"column":7,"nodeType":"368","endLine":52,"endColumn":70,"suggestions":"411"},{"ruleId":"362","replacedBy":"412"},{"ruleId":"364","replacedBy":"413"},{"ruleId":"378","severity":1,"message":"414","line":8,"column":10,"nodeType":"380","messageId":"381","endLine":8,"endColumn":25},{"ruleId":"378","severity":1,"message":"415","line":12,"column":10,"nodeType":"380","messageId":"381","endLine":12,"endColumn":29},{"ruleId":"366","severity":1,"message":"416","line":83,"column":7,"nodeType":"368","endLine":83,"endColumn":25,"suggestions":"417"},{"ruleId":"366","severity":1,"message":"418","line":87,"column":7,"nodeType":"368","endLine":87,"endColumn":9,"suggestions":"419"},{"ruleId":"378","severity":1,"message":"414","line":8,"column":10,"nodeType":"380","messageId":"381","endLine":8,"endColumn":25},{"ruleId":"378","severity":1,"message":"415","line":12,"column":10,"nodeType":"380","messageId":"381","endLine":12,"endColumn":29},{"ruleId":"378","severity":1,"message":"420","line":61,"column":35,"nodeType":"380","messageId":"381","endLine":61,"endColumn":50},{"ruleId":"366","severity":1,"message":"416","line":84,"column":7,"nodeType":"368","endLine":84,"endColumn":25,"suggestions":"421"},{"ruleId":"366","severity":1,"message":"418","line":89,"column":7,"nodeType":"368","endLine":89,"endColumn":9,"suggestions":"422"},{"ruleId":"378","severity":1,"message":"423","line":8,"column":10,"nodeType":"380","messageId":"381","endLine":8,"endColumn":24},{"ruleId":"366","severity":1,"message":"384","line":36,"column":7,"nodeType":"368","endLine":36,"endColumn":9,"suggestions":"424"},{"ruleId":"366","severity":1,"message":"386","line":42,"column":7,"nodeType":"368","endLine":42,"endColumn":9,"suggestions":"425"},{"ruleId":"366","severity":1,"message":"388","line":48,"column":7,"nodeType":"368","endLine":48,"endColumn":9,"suggestions":"426"},{"ruleId":"366","severity":1,"message":"390","line":54,"column":7,"nodeType":"368","endLine":54,"endColumn":9,"suggestions":"427"},{"ruleId":"378","severity":1,"message":"428","line":11,"column":8,"nodeType":"380","messageId":"381","endLine":11,"endColumn":26},{"ruleId":"366","severity":1,"message":"429","line":109,"column":7,"nodeType":"368","endLine":109,"endColumn":25,"suggestions":"430"},{"ruleId":"378","severity":1,"message":"431","line":8,"column":8,"nodeType":"380","messageId":"381","endLine":8,"endColumn":31},{"ruleId":"366","severity":1,"message":"432","line":61,"column":5,"nodeType":"368","endLine":61,"endColumn":7,"suggestions":"433"},{"ruleId":"366","severity":1,"message":"434","line":104,"column":5,"nodeType":"368","endLine":104,"endColumn":30,"suggestions":"435"},{"ruleId":"366","severity":1,"message":"436","line":115,"column":5,"nodeType":"368","endLine":115,"endColumn":22,"suggestions":"437"},{"ruleId":"366","severity":1,"message":"438","line":125,"column":5,"nodeType":"368","endLine":125,"endColumn":12,"suggestions":"439"},{"ruleId":"366","severity":1,"message":"438","line":135,"column":5,"nodeType":"368","endLine":135,"endColumn":13,"suggestions":"440"},{"ruleId":"366","severity":1,"message":"441","line":62,"column":7,"nodeType":"368","endLine":62,"endColumn":26,"suggestions":"442"},{"ruleId":"366","severity":1,"message":"443","line":70,"column":5,"nodeType":"368","endLine":70,"endColumn":7,"suggestions":"444"},{"ruleId":"366","severity":1,"message":"445","line":35,"column":5,"nodeType":"368","endLine":35,"endColumn":7,"suggestions":"446"},{"ruleId":"378","severity":1,"message":"447","line":13,"column":8,"nodeType":"380","messageId":"381","endLine":13,"endColumn":15},{"ruleId":"378","severity":1,"message":"448","line":36,"column":11,"nodeType":"380","messageId":"381","endLine":36,"endColumn":16},{"ruleId":"378","severity":1,"message":"449","line":36,"column":18,"nodeType":"380","messageId":"381","endLine":36,"endColumn":24},{"ruleId":"378","severity":1,"message":"450","line":37,"column":11,"nodeType":"380","messageId":"381","endLine":37,"endColumn":20},{"ruleId":"378","severity":1,"message":"451","line":37,"column":22,"nodeType":"380","messageId":"381","endLine":37,"endColumn":31},{"ruleId":"378","severity":1,"message":"452","line":37,"column":33,"nodeType":"380","messageId":"381","endLine":37,"endColumn":39},{"ruleId":"378","severity":1,"message":"453","line":37,"column":41,"nodeType":"380","messageId":"381","endLine":37,"endColumn":56},{"ruleId":"378","severity":1,"message":"454","line":38,"column":19,"nodeType":"380","messageId":"381","endLine":38,"endColumn":28},{"ruleId":"378","severity":1,"message":"455","line":38,"column":30,"nodeType":"380","messageId":"381","endLine":38,"endColumn":42},{"ruleId":"378","severity":1,"message":"456","line":38,"column":44,"nodeType":"380","messageId":"381","endLine":38,"endColumn":59},{"ruleId":"378","severity":1,"message":"457","line":43,"column":11,"nodeType":"380","messageId":"381","endLine":43,"endColumn":25},{"ruleId":"378","severity":1,"message":"458","line":43,"column":27,"nodeType":"380","messageId":"381","endLine":43,"endColumn":44},{"ruleId":"378","severity":1,"message":"459","line":43,"column":45,"nodeType":"380","messageId":"381","endLine":43,"endColumn":58},{"ruleId":"378","severity":1,"message":"404","line":43,"column":60,"nodeType":"380","messageId":"381","endLine":43,"endColumn":76},{"ruleId":"378","severity":1,"message":"460","line":44,"column":11,"nodeType":"380","messageId":"381","endLine":44,"endColumn":19},{"ruleId":"378","severity":1,"message":"461","line":44,"column":21,"nodeType":"380","messageId":"381","endLine":44,"endColumn":32},{"ruleId":"378","severity":1,"message":"462","line":44,"column":34,"nodeType":"380","messageId":"381","endLine":44,"endColumn":43},{"ruleId":"378","severity":1,"message":"463","line":44,"column":45,"nodeType":"380","messageId":"381","endLine":44,"endColumn":57},{"ruleId":"378","severity":1,"message":"464","line":82,"column":19,"nodeType":"380","messageId":"381","endLine":82,"endColumn":30},"no-native-reassign",["465"],"no-negated-in-lhs",["466"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["467"],"React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["468"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["469"],"React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["470"],"React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["471"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar",["465"],["466"],"React Hook useEffect has missing dependencies: 'orders.length' and 'setOrdersLoaded'. Either include them or remove the dependency array.",["472"],"React Hook useEffect has missing dependencies: 'customers.length' and 'setCustLoaded'. Either include them or remove the dependency array.",["473"],"React Hook useEffect has missing dependencies: 'products.length' and 'setProdLoaded'. Either include them or remove the dependency array.",["474"],"React Hook useEffect has missing dependencies: 'setStandLoaded' and 'standing.length'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has missing dependencies: 'holding.length' and 'setHoldLoaded'. Either include them or remove the dependency array.",["476"],["465"],["466"],"'RecentList' is assigned a value but never used.","'RecentOrderList' is defined but never used.","'setStandLoaded' is assigned a value but never used.","'setHoldLoaded' is assigned a value but never used.","'standingData' is assigned a value but never used.","'holdingData' is assigned a value but never used.","'ordData' is assigned a value but never used.","'uuidv4' is defined but never used.","'setModifications' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentCartList'. Either include it or remove the dependency array.",["477"],"React Hook useEffect has a missing dependency: 'setModifications'. Either include it or remove the dependency array.",["478"],["479"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["480"],["465"],["466"],"'ProductsContext' is defined but never used.","'sortAtoZDataByIndex' is defined but never used.","React Hook useEffect has a missing dependency: 'constructData'. Either include it or remove the dependency array.",["481"],"React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["482"],"'listOfCustomers' is assigned a value but never used.",["483"],["484"],"'HoldingContext' is defined but never used.",["485"],["486"],["487"],["488"],"'LogisticsFunctions' is defined but never used.","React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["489"],"'ExportToDatabaseButtons' is defined but never used.","React Hook useEffect has missing dependencies: 'props.location.search', 'setCartList', and 'setChosen'. Either include them or remove the dependency array.",["490"],"React Hook useEffect has missing dependencies: 'customers' and 'setRoute'. Either include them or remove the dependency array.",["491"],"React Hook useEffect has a missing dependency: 'setPonote'. Either include it or remove the dependency array.",["492"],"React Hook useEffect has missing dependencies: 'chosen', 'currentCartList.length', 'delivDate', 'orders', 'setModifications', and 'standing'. Either include them or remove the dependency array.",["493"],["494"],"React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["495"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["496"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["497"],"'Amplify' is defined but never used.","'route' is assigned a value but never used.","'ponote' is assigned a value but never used.","'setChosen' is assigned a value but never used.","'delivDate' is assigned a value but never used.","'chosen' is assigned a value but never used.","'currentCartList' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'recentOrders' is assigned a value but never used.","'setRecentOrders' is assigned a value but never used.","'orderTypeWhole' is assigned a value but never used.","'setOrderTypeWhole' is assigned a value but never used.","'modifications' is assigned a value but never used.","'cartList' is assigned a value but never used.","'setCartList' is assigned a value but never used.","'standList' is assigned a value but never used.","'setRouteIsOn' is assigned a value but never used.","'fullDetails' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"526","fix":"530"},{"desc":"528","fix":"531"},{"desc":"508","fix":"532"},{"desc":"510","fix":"533"},{"desc":"512","fix":"534"},{"desc":"514","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"desc":"540","fix":"541"},{"desc":"542","fix":"543"},{"desc":"544","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},"Update the dependencies array to be: [fetchCustomers]",{"range":"554","text":"555"},"Update the dependencies array to be: [fetchOrders]",{"range":"556","text":"557"},"Update the dependencies array to be: [fetchProducts]",{"range":"558","text":"559"},"Update the dependencies array to be: [fetchStanding]",{"range":"560","text":"561"},"Update the dependencies array to be: [fetchHolding]",{"range":"562","text":"563"},"Update the dependencies array to be: [orders.length, setOrdersLoaded]",{"range":"564","text":"565"},"Update the dependencies array to be: [customers.length, setCustLoaded]",{"range":"566","text":"567"},"Update the dependencies array to be: [products.length, setProdLoaded]",{"range":"568","text":"569"},"Update the dependencies array to be: [setStandLoaded, standing.length]",{"range":"570","text":"571"},"Update the dependencies array to be: [holding.length, setHoldLoaded]",{"range":"572","text":"573"},"Update the dependencies array to be: [products, orders, chosen, delivDate, currentCartList]",{"range":"574","text":"575"},"Update the dependencies array to be: [chosen, delivDate, orders, setCurrentCartList, setModifications, standing]",{"range":"576","text":"577"},"Update the dependencies array to be: [chosen, holding, standing, setStandList, setModifications]",{"range":"578","text":"579"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"580","text":"581"},"Update the dependencies array to be: [constructData, delivDate, route]",{"range":"582","text":"583"},"Update the dependencies array to be: [setRoute]",{"range":"584","text":"585"},{"range":"586","text":"583"},{"range":"587","text":"585"},{"range":"588","text":"565"},{"range":"589","text":"567"},{"range":"590","text":"569"},{"range":"591","text":"571"},"Update the dependencies array to be: [constructColumns, constructData, delivDate, route]",{"range":"592","text":"593"},"Update the dependencies array to be: [props.location.search, setCartList, setChosen]",{"range":"594","text":"595"},"Update the dependencies array to be: [currentCartList, chosen, customers, setRoute]",{"range":"596","text":"597"},"Update the dependencies array to be: [currentCartList, setPonote]",{"range":"598","text":"599"},"Update the dependencies array to be: [chosen, currentCartList.length, delivDate, orders, route, setModifications, standing]",{"range":"600","text":"601"},"Update the dependencies array to be: [chosen, currentCartList.length, delivDate, orders, ponote, setModifications, standing]",{"range":"602","text":"603"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"604","text":"605"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"606","text":"607"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"608","text":"609"},[901,903],"[fetchCustomers]",[1137,1139],"[fetchOrders]",[899,901],"[fetchProducts]",[1001,1003],"[fetchStanding]",[983,985],"[fetchHolding]",[1713,1715],"[orders.length, setOrdersLoaded]",[1828,1830],"[customers.length, setCustLoaded]",[1942,1944],"[products.length, setProdLoaded]",[2057,2059],"[setStandLoaded, standing.length]",[2170,2172],"[holding.length, setHoldLoaded]",[1653,1691],"[products, orders, chosen, delivDate, currentCartList]",[1776,1833],"[chosen, delivDate, orders, setCurrentCartList, setModifications, standing]",[2085,2126],"[chosen, holding, standing, setStandList, setModifications]",[1556,1619],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[2444,2462],"[constructData, delivDate, route]",[2518,2520],"[setRoute]",[2548,2566],[2632,2634],[1408,1410],[1523,1525],[1637,1639],[1752,1754],[3600,3618],"[constructColumns, constructData, delivDate, route]",[2244,2246],"[props.location.search, setCartList, setChosen]",[2980,3005],"[currentCartList, chosen, customers, setRoute]",[3269,3286],"[currentCartList, setPonote]",[3534,3541],"[chosen, currentCartList.length, delivDate, orders, route, setModifications, standing]",[3791,3799],"[chosen, currentCartList.length, delivDate, orders, ponote, setModifications, standing]",[1975,1994],"[chosen, delivDate, orders, setCalendarEvents, standing]",[1868,1870],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1117,1119],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]"]