[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Buttons.js":"77","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js":"78"},{"size":362,"mtime":1609089131749,"results":"79","hashOfConfig":"80"},{"size":1920,"mtime":1614734016687,"results":"81","hashOfConfig":"80"},{"size":500,"mtime":1609089131749,"results":"82","hashOfConfig":"80"},{"size":1552,"mtime":1615234090706,"results":"83","hashOfConfig":"80"},{"size":2562,"mtime":1615903935224,"results":"84","hashOfConfig":"80"},{"size":2003,"mtime":1616793561462,"results":"85","hashOfConfig":"80"},{"size":1437,"mtime":1615383938668,"results":"86","hashOfConfig":"80"},{"size":1821,"mtime":1615751621965,"results":"87","hashOfConfig":"80"},{"size":5575,"mtime":1616159004282,"results":"88","hashOfConfig":"80"},{"size":1963,"mtime":1615553936489,"results":"89","hashOfConfig":"80"},{"size":1147,"mtime":1615769660331,"results":"90","hashOfConfig":"80"},{"size":1724,"mtime":1616793575974,"results":"91","hashOfConfig":"80"},{"size":1711,"mtime":1617026182598,"results":"92","hashOfConfig":"80"},{"size":1692,"mtime":1613912501900,"results":"93","hashOfConfig":"94"},{"size":1290,"mtime":1613420662672,"results":"95","hashOfConfig":"80"},{"size":5558,"mtime":1616621713104,"results":"96","hashOfConfig":"80"},{"size":430,"mtime":1613420662670,"results":"97","hashOfConfig":"80"},{"size":3035,"mtime":1615903495527,"results":"98","hashOfConfig":"80"},{"size":3205,"mtime":1616159609022,"results":"99","hashOfConfig":"80"},{"size":255,"mtime":1615903509294,"results":"100","hashOfConfig":"80"},{"size":3915,"mtime":1616761533191,"results":"101","hashOfConfig":"80"},{"size":385,"mtime":1615903603650,"results":"102","hashOfConfig":"80"},{"size":8547,"mtime":1615903588925,"results":"103","hashOfConfig":"80"},{"size":5034,"mtime":1615680842855,"results":"104","hashOfConfig":"80"},{"size":1941,"mtime":1615553782688,"results":"105","hashOfConfig":"80"},{"size":3052,"mtime":1617026264692,"results":"106","hashOfConfig":"80"},{"size":190,"mtime":1613420662655,"results":"107","hashOfConfig":"80"},{"size":190,"mtime":1613420662654,"results":"108","hashOfConfig":"80"},{"size":193,"mtime":1613420662657,"results":"109","hashOfConfig":"80"},{"size":197,"mtime":1613420662656,"results":"110","hashOfConfig":"80"},{"size":191,"mtime":1613420662650,"results":"111","hashOfConfig":"80"},{"size":1873,"mtime":1614706269300,"results":"112","hashOfConfig":"80"},{"size":2839,"mtime":1615903326526,"results":"113","hashOfConfig":"80"},{"size":6607,"mtime":1615903393186,"results":"114","hashOfConfig":"80"},{"size":1071,"mtime":1615903378930,"results":"115","hashOfConfig":"80"},{"size":6392,"mtime":1616159600261,"results":"116","hashOfConfig":"80"},{"size":6609,"mtime":1616761636451,"results":"117","hashOfConfig":"80"},{"size":1334,"mtime":1614213824864,"results":"118","hashOfConfig":"94"},{"size":2492,"mtime":1616159605095,"results":"119","hashOfConfig":"80"},{"size":3526,"mtime":1615553539269,"results":"120","hashOfConfig":"80"},{"size":3768,"mtime":1615557169324,"results":"121","hashOfConfig":"80"},{"size":734,"mtime":1617137080831,"results":"122","hashOfConfig":"80"},{"size":6959,"mtime":1617136613866,"results":"123","hashOfConfig":"80"},{"size":10876,"mtime":1617136614134,"results":"124","hashOfConfig":"80"},{"size":1517,"mtime":1615553494489,"results":"125","hashOfConfig":"80"},{"size":1490,"mtime":1615553525148,"results":"126","hashOfConfig":"80"},{"size":4566,"mtime":1616250120792,"results":"127","hashOfConfig":"80"},{"size":2575,"mtime":1615553481891,"results":"128","hashOfConfig":"80"},{"size":2657,"mtime":1615553431625,"results":"129","hashOfConfig":"80"},{"size":6417,"mtime":1617148469077,"results":"130","hashOfConfig":"80"},{"size":1788,"mtime":1616159625208,"results":"131","hashOfConfig":"80"},{"size":2706,"mtime":1615903181106,"results":"132","hashOfConfig":"80"},{"size":2185,"mtime":1615903223171,"results":"133","hashOfConfig":"80"},{"size":8714,"mtime":1615903198181,"results":"134","hashOfConfig":"80"},{"size":3933,"mtime":1615903165052,"results":"135","hashOfConfig":"80"},{"size":2679,"mtime":1615903258284,"results":"136","hashOfConfig":"80"},{"size":2155,"mtime":1615903290204,"results":"137","hashOfConfig":"80"},{"size":3530,"mtime":1615903238512,"results":"138","hashOfConfig":"80"},{"size":1888,"mtime":1615903277736,"results":"139","hashOfConfig":"80"},{"size":1899,"mtime":1617142546862,"results":"140","hashOfConfig":"80"},{"size":1514,"mtime":1615818212264,"results":"141","hashOfConfig":"80"},{"size":4027,"mtime":1615577933420,"results":"142","hashOfConfig":"80"},{"size":2186,"mtime":1615578317981,"results":"143","hashOfConfig":"80"},{"size":2492,"mtime":1615664308665,"results":"144","hashOfConfig":"80"},{"size":5809,"mtime":1615818205241,"results":"145","hashOfConfig":"80"},{"size":1488,"mtime":1615570828178,"results":"146","hashOfConfig":"80"},{"size":2672,"mtime":1616854035185,"results":"147","hashOfConfig":"80"},{"size":2436,"mtime":1616761943301,"results":"148","hashOfConfig":"80"},{"size":1614,"mtime":1616720968751,"results":"149","hashOfConfig":"80"},{"size":6911,"mtime":1616854080565,"results":"150","hashOfConfig":"80"},{"size":4646,"mtime":1616763055309,"results":"151","hashOfConfig":"80"},{"size":2507,"mtime":1616854143338,"results":"152","hashOfConfig":"80"},{"size":1223,"mtime":1616718969576,"results":"153","hashOfConfig":"80"},{"size":3862,"mtime":1616720833228,"results":"154","hashOfConfig":"80"},{"size":2994,"mtime":1617145176646,"results":"155","hashOfConfig":"80"},{"size":10358,"mtime":1617152749400,"results":"156","hashOfConfig":"80"},{"size":212,"mtime":1617053287357,"results":"157","hashOfConfig":"80"},{"size":1949,"mtime":1617139976004,"results":"158","hashOfConfig":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"1cny99d",{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"161"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"161"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"161"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"161"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"161"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},"1dwemmr",{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"161"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"161"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"161"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"161"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"161"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"161"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"161"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"161"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"161"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"161"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"161"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"161"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"161"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"161"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"161"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"161"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"161"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"161"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"161"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"161"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"161"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"161"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"161"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"161"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"161"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"161"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"161"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"161"},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["352","353"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["354"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["355"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listOrders } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const OrdersContext = createContext();\r\n\r\n\r\nexport const OrdersProvider = (props) => {\r\n    \r\n    const [orders, setOrders] = useState([]);\r\n    const [ recentOrders, setRecentOrders ] = useState([]);\r\n    const [ originalOrders, setOriginalOrders ] = useState([]);\r\n    const [ ordersLoaded, setOrdersLoaded ] = useState(false)\r\n \r\n    return (\r\n        <OrdersContext.Provider value={{ \r\n            orders, setOrders, \r\n            recentOrders, setRecentOrders,\r\n            originalOrders, setOriginalOrders,\r\n            ordersLoaded, setOrdersLoaded\r\n            }}>\r\n\r\n            {props.children}\r\n\r\n        </OrdersContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n    const { setOrders, setOriginalOrders, setOrdersLoaded } = useContext(OrdersContext)\r\n\r\n    useEffect(() => {\r\n        fetchOrders()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchOrders = async () => {\r\n        try{\r\n            const ordData = await API.graphql(graphqlOperation(listOrders, {\r\n                  limit: '5000'\r\n                  }))\r\n            const ordList = ordData.data.listOrders.items;\r\n                \r\n            let noDelete = ordList.filter(cust => cust[\"_deleted\"]!==true)\r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            sortedData = sortAtoZDataByIndex(sortedData, \"prodName\")\r\n                \r\n          \r\n            setOrders(sortedData)\r\n            setOrdersLoaded(true)\r\n            setOriginalOrders(sortedData);\r\n        }  catch (error){\r\n            console.log('error on fetching Orders List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["356"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["357","358","359"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["360","361"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n           \r\n         \r\n            setHolding(sortedData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Logistics.js",[],["362","363"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["364"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  findAvailableProducts,\r\n  decideWhetherToAddOrModify,\r\n} from \"../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst AddProductButtons = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  justify-content: space-around;\r\n  background-color: lightgrey;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst AddCartEntryItem = () => {\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders, setOrders } = useContext(OrdersContext);\r\n  const { chosen, delivDate, route, ponote, currentCartList } = useContext(\r\n    CurrentDataContext\r\n  );\r\n  const { orderTypeWhole } = useContext(ToggleContext);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [productList, setProductList] = useState();\r\n\r\n  useEffect(() => {\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      currentCartList,\r\n      chosen,\r\n      delivDate\r\n    );\r\n    setProductList(availableProducts);\r\n  }, [products, orders, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    let qty = Number(document.getElementById(\"addedProdQty\").value);\r\n\r\n    let newOrder = {\r\n      qty: qty,\r\n      prodName: pickedProduct.prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      SO: 0,\r\n      isWhole: orderTypeWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate);\r\n    setOrders(newOrderList);\r\n    document.getElementById(\"addedProdQty\").value = null;\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  return (\r\n    <AddProductButtons>\r\n      <Dropdown\r\n        options={productList}\r\n        optionLabel=\"prodName\"\r\n        placeholder=\"Select a product\"\r\n        name=\"products\"\r\n        value={pickedProduct}\r\n        onChange={handleChange}\r\n        disabled={chosen !== \"  \" ? false : true}\r\n      />\r\n      <span className=\"p-float-label\">\r\n        <InputText\r\n          id=\"addedProdQty\"\r\n          size=\"10\"\r\n          disabled={chosen !== \"  \" ? false : true}\r\n        />\r\n        <label htmlFor=\"qty\">Quantity</label>\r\n      </span>\r\n      <Button\r\n        label=\"ADD\"\r\n        disabled={chosen === \"  \" || pickedProduct === \"\"}\r\n        icon=\"pi pi-plus\"\r\n        onClick={() => handleAdd()}\r\n      />\r\n    </AddProductButtons>\r\n  );\r\n};\r\n\r\nexport default AddCartEntryItem;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["365"],"\r\nimport React, { useContext, useEffect } from \"react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { buildCurrentOrder } from \"../../../../helpers/CartBuildingHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 0.5fr 3fr 0.5fr 0.5fr;\r\n  row-gap: 4px;\r\n  flex-shrink: 1;\r\n`;\r\nconst TrashCan = styled.div`\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst InputBox = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Previous = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;\r\n\r\nconst BuildCurrentCartList = () => {\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    ponote,\r\n    route,\r\n  } = useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (chosen !== \"  \") {\r\n      let currentOrderList = buildCurrentOrder(\r\n        chosen,\r\n        delivDate,\r\n        orders,\r\n        standing,\r\n        route,\r\n        ponote\r\n      );\r\n      currentOrderList = currentOrderList.filter((order) => order[\"qty\"] !== 0);\r\n        \r\n      setCurrentCartList(currentOrderList);\r\n    }\r\n  }, [chosen, delivDate, orders, standing, route, ponote]);\r\n\r\n  const handleQtyModify = (prodName, qty) => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    let ind = cartToMod.findIndex((cur) => cur[\"prodName\"] === prodName);\r\n    cartToMod[ind][\"qty\"] = qty;\r\n\r\n    setCurrentCartList(cartToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label></label>\r\n        <label>PRODUCT</label>\r\n        <label>QTY</label>\r\n        <label>PREV</label>\r\n        {currentCartList.map((order) => (\r\n          <React.Fragment key={order[\"prodName\"] + \"b\"}>\r\n            <TrashCan>\r\n              <Button\r\n                icon=\"pi pi-trash\"\r\n                className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                value={0}\r\n                onClick={(e) => {\r\n                  handleQtyModify(order[\"prodName\"], 0);\r\n                }}\r\n                key={order[\"prodName\"] + \"e\"}\r\n                name={order[\"prodName\"]}\r\n                data-qty={order[\"qty\"]}\r\n                id={order[\"prodName\"]}\r\n              />\r\n            </TrashCan>\r\n            <label key={order[\"prodName\"]}>{order[\"prodName\"]}</label>\r\n            <InputBox>\r\n              <input\r\n                type=\"text\"\r\n                size=\"3\"\r\n                maxLength=\"4\"\r\n                key={order[\"prodName\"] + \"c\"}\r\n                id={order[\"prodName\"] + \"item\"}\r\n                name={order[\"prodName\"]}\r\n                data-qty={order[\"qty\"]}\r\n                placeholder={order[\"qty\"]}\r\n                onKeyUp={(e) => {\r\n                  handleQtyModify(order[\"prodName\"], Number(e.target.value));\r\n                }}\r\n                onBlur={(e) => {\r\n                  e.target.value = null;\r\n                }}\r\n              ></input>\r\n            </InputBox>\r\n            <Previous>\r\n              <label key={order[\"prodName\"] + \"d\"}>\r\n                {order[\"SO\"] === order[\"qty\"] ? \"\" : order[\"SO\"]}\r\n              </label>\r\n            </Previous>\r\n          </React.Fragment>\r\n        ))}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentCartList;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["366"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  font-size: 1em;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-self: center;\r\n  row-gap: 10px;\r\n`;\r\nconst StandInput = styled.input`\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  width: 80%;\r\n`;\r\n\r\nconst entryNotZero = {\r\n  fontSize: \"1.1em\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst entryZero = {\r\n  fontSize: \"1em\",\r\n  fontWeight: \"normal\",\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst BuildCurrentStandingList = () => {\r\n  const { standing } = useContext(StandingContext);\r\n  const { setStandList, setModifications } = useContext(ToggleContext);\r\n  const { chosen, standArray, setStandArray } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let Stand = standing.filter((stand) => stand[\"custName\"] === chosen);\r\n    if (Stand.length > 0) {\r\n      Stand = Stand[0][\"isStand\"];\r\n    } else {\r\n      Stand = true;\r\n    }\r\n\r\n    setStandList(Stand);\r\n    let buildStandArray = standing.filter(\r\n      (stand) => stand[\"isStand\"] === Stand && stand[\"custName\"] === chosen\r\n    );\r\n\r\n    setStandArray(buildStandArray);\r\n  }, [chosen, standing]);\r\n\r\n  const handleRemove = (index) => {\r\n    let ind = standArray.findIndex((stand) => stand[\"prodName\"] === index);\r\n    let adjustedStanding = clonedeep(standArray);\r\n    adjustedStanding[ind][\"Sun\"] = 0;\r\n    adjustedStanding[ind][\"Mon\"] = 0;\r\n    adjustedStanding[ind][\"Tue\"] = 0;\r\n    adjustedStanding[ind][\"Wed\"] = 0;\r\n    adjustedStanding[ind][\"Thu\"] = 0;\r\n    adjustedStanding[ind][\"Fri\"] = 0;\r\n    adjustedStanding[ind][\"Sat\"] = 0;\r\n    setStandArray(adjustedStanding);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleQtyModify = (e, qty) => {\r\n    if (isNaN(e.target.value)) {\r\n      e.target.value = null;\r\n      swal({\r\n        text: \"Only Numbers Please\",\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    }\r\n    let day = e.target.dataset.day;\r\n    let prod = e.target.name;\r\n    let arrayToModify = clonedeep(standArray);\r\n    let ind = arrayToModify.findIndex((array) => array[\"prodName\"] === prod);\r\n    arrayToModify[ind][day] = qty;\r\n\r\n    setStandArray(arrayToModify);\r\n\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label>PRODUCT</label>\r\n        <label>S</label>\r\n        <label>M</label>\r\n        <label>T</label>\r\n        <label>W</label>\r\n        <label>T</label>\r\n        <label>F</label>\r\n        <label>S</label>\r\n        <label></label>\r\n        {standArray\r\n          ? standArray.map((order) => (\r\n              <React.Fragment key={order[\"prodName\"] + \"frag\"}>\r\n                <label key={order[\"prodName\"] + \"prod\"}>\r\n                  {order[\"prodName\"]}\r\n                </label>\r\n\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sun\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sun\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_1\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sun\"]}\r\n                  data-day=\"Sun\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = null;\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Mon\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Mon\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_2\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Mon\"]}\r\n                  data-day=\"Mon\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Tue\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Tue\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_3\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Tue\"]}\r\n                  data-day=\"Tue\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Wed\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Wed\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_4\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Wed\"]}\r\n                  data-day=\"Wed\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Thu\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Thu\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_5\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Thu\"]}\r\n                  data-day=\"Thu\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Fri\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Fri\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_6\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Fri\"]}\r\n                  data-day=\"Fri\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sat\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sat\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_7\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sat\"]}\r\n                  data-day=\"Sat\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n\r\n                <Button\r\n                  icon=\"pi pi-trash\"\r\n                  className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                  key={order[\"prodName\"] + \"rem\"}\r\n                  name={order[\"prodName\"]}\r\n                  onClick={(e) => handleRemove(order[\"prodName\"])}\r\n                ></Button>\r\n              </React.Fragment>\r\n            ))\r\n          : \"\"}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentStandingList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],["367","368"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Billing.js",[],["369","370"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["371"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n\r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["372"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext, HoldingLoad } from \"../../dataContexts/HoldingContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 0px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Ordering(props) {\r\n  const { standLoaded } = useContext(StandingContext);\r\n  const { prodLoaded } = useContext(ProductsContext);\r\n  const { custLoaded } = useContext(CustomerContext);\r\n  const { ordersLoaded } = useContext(OrdersContext);\r\n  const { holdLoaded } = useContext(HoldingContext);\r\n  const { setChosen } = useContext(CurrentDataContext);\r\n  const { setCartList } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (props.location.search) {\r\n      setChosen(\r\n        props.location.search\r\n          .split(\"&\")[1]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\")\r\n      );\r\n      if (\r\n        props.location.search\r\n          .split(\"&\")[0]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\") === \"true\"\r\n      ) {\r\n        setCartList(true);\r\n      } else {\r\n        setCartList(false);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <MainWindow>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      {!holdLoaded ? <HoldingLoad /> : \"\"}\r\n\r\n      <BasicContainer>\r\n        <Calendar />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <OrderCommandLine />\r\n        <CurrentOrderInfo />\r\n        <CurrentOrderList />\r\n        <OrderEntryButtons />\r\n      </BasicContainer>\r\n    </MainWindow>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["373","374","375","376","377","378","379"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  tomorrow,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport { createRetailOrderCustomers } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  display: flex;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 10px 0;\r\n`;\r\nconst DateStyle = styled.h4`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 10px 0;\r\n`;\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst ho = {\r\n  color: \"red\",\r\n};\r\n\r\nconst so = {\r\n  color: \"rgb(66, 97, 201)\",\r\n};\r\n\r\nconst CurrentOrderInfo = () => {\r\n  const {\r\n    cartList,\r\n    standList,\r\n    setStandList,\r\n    orderTypeWhole,\r\n    setModifications,\r\n  } = useContext(ToggleContext);\r\n\r\n  const [orderType, setOrderType] = useState();\r\n\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { holding } = useContext(HoldingContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    ponote,\r\n    setPonote,\r\n    setChosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    currentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [customerGroup, setCustomerGroup] = useState(customers);\r\n\r\n  useEffect(() => {\r\n    if (cartList) {\r\n      setOrderType(\"Cart\");\r\n    } else {\r\n      if (standList) {\r\n        setOrderType(\"Stand\");\r\n      } else {\r\n        setOrderType(\"Hold\");\r\n      }\r\n    }\r\n  }, [cartList, standList]);\r\n\r\n  useEffect(() => {\r\n    orderTypeWhole\r\n      ? setCustomerGroup(customers)\r\n      : setCustomerGroup(createRetailOrderCustomers(orders));\r\n  }, [customers, orderTypeWhole, orders]);\r\n\r\n  useEffect(() => {\r\n    for (let cust of customerGroup) {\r\n      if (cust[\"custName\"] === chosen) {\r\n        switch (cust[\"zoneName\"]) {\r\n          case \"slopick\":\r\n            setRoute(\"slopick\");\r\n            break;\r\n          case \"atownpick\":\r\n            setRoute(\"atownpick\");\r\n            break;\r\n          default:\r\n            setRoute(\"deliv\");\r\n        }\r\n      }\r\n    }\r\n\r\n    let orderCheck = orders.filter(\r\n      (ord) => ord[\"custName\"] === chosen && ord[\"delivDate\"] === delivDate\r\n    );\r\n    if (orderCheck.length > 0) {\r\n      switch (orderCheck[0][\"zoneName\"]) {\r\n        case \"slopick\":\r\n          setRoute(\"slopick\");\r\n          break;\r\n        case \"atownpick\":\r\n          setRoute(\"atownpick\");\r\n          break;\r\n        default:\r\n          setRoute(\"deliv\");\r\n      }\r\n    }\r\n  }, [chosen, delivDate]);\r\n\r\n  useEffect(() => {\r\n    setPonote(\"\");\r\n\r\n    let orderCheck = orders.filter(\r\n      (ord) =>\r\n        ord[\"custName\"] === chosen &&\r\n        ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n   \r\n\r\n    if (orderCheck.length > 0) {\r\n      setPonote(orderCheck[0][\"PONote\"]);\r\n    }\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen);\r\n    setDelivDate(tomorrow());\r\n  };\r\n\r\n  const changeDate = (date) => {\r\n    let fd = new Date(date);\r\n    fd.setMinutes(fd.getMinutes() + fd.getTimezoneOffset());\r\n    let returnDate = fd.toDateString();\r\n\r\n    return returnDate;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {orderTypeWhole ? (\r\n        <React.Fragment>\r\n          <TitleBox>\r\n            <Title style={cartList ? so : standList ? so : ho}>\r\n              Wholesale {orderType} Order\r\n            </Title>\r\n            <DateStyle>{delivDate ? changeDate(delivDate) : \"\"}</DateStyle>\r\n          </TitleBox>\r\n        </React.Fragment>\r\n      ) : (\r\n        <h2 style={standList ? so : ho}>Retail {orderType} Order</h2>\r\n      )}\r\n\r\n      <CurrentInfo>\r\n        <FulfillOptions>\r\n          <Dropdown\r\n            id=\"customers\"\r\n            value={chosen}\r\n            options={customerGroup}\r\n            optionLabel=\"custName\"\r\n            placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n            onChange={(e) => handleChosen(e.value.custName)}\r\n          />\r\n\r\n          <RadioButton\r\n            value=\"deliv\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"deliv\"}\r\n          />\r\n          <label htmlFor=\"delivery\">Delivery</label>\r\n\r\n          <RadioButton\r\n            value=\"slopick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"slopick\"}\r\n          />\r\n          <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n          <RadioButton\r\n            value=\"atownpick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => setRoute(e.value)}\r\n            checked={route === \"atownpick\"}\r\n          />\r\n          <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n        </FulfillOptions>\r\n\r\n        <SpecialInfo>\r\n          <span className=\"p-float-label\">\r\n            <InputText\r\n              id=\"in\"\r\n              size=\"50\"\r\n              value={ponote}\r\n              onChange={(e) => setPonote(e.target.value)}\r\n            />\r\n            <label htmlFor=\"in\">\r\n              {ponote === \"\" ? \"PO#/Special Instructions...\" : \"\"}\r\n            </label>\r\n          </span>\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["380","381","382","383","384","385","386"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport {\r\n  updateOrder,\r\n  createOrder,\r\n  createStanding,\r\n  updateStanding,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction OrderEntryButtons() {\r\n  const { route, ponote } = useContext(CurrentDataContext);\r\n  const {\r\n    setChosen,\r\n    delivDate,\r\n    chosen,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    standArray,\r\n    setStandArray,\r\n  } = useContext(CurrentDataContext);\r\n  const {\r\n    orders,\r\n    setOrders,\r\n    setOrdersLoaded,\r\n    recentOrders,\r\n    setRecentOrders,\r\n  } = useContext(OrdersContext);\r\n  const { standing, setStandLoaded } = useContext(StandingContext);\r\n  const { holding, setHoldLoaded } = useContext(HoldingContext);\r\n  const {\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    modifications,\r\n    setModifications,\r\n    cartList,\r\n    setCartList,\r\n    standList,\r\n    setRouteIsOn,\r\n    setIsLoading,\r\n  } = useContext(ToggleContext);\r\n\r\n  let type = orderTypeWhole ? \"Retail\" : \"Wholesale\";\r\n  let cartStand = cartList ? \"Standing\" : \"Cart\";\r\n\r\n  const handleChangeorderTypeWhole = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setOrderTypeWhole(!orderTypeWhole);\r\n    setChosen(\"\");\r\n  };\r\n\r\n  const handleCartStandToggle = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    let realCartList = clonedeep(cartList);\r\n    realCartList ? setRouteIsOn(false) : setRouteIsOn(true);\r\n    setCartList(!cartList);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    for (let ord of cartToMod) {\r\n      ord[\"qty\"] = 0;\r\n    }\r\n    setCurrentCartList(cartToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleAddUpdate = async () => {\r\n    setIsLoading(true);\r\n    if (cartList) {\r\n      \r\n      for (let ord of currentCartList) {\r\n        let rte;\r\n        switch (ord[\"route\"]) {\r\n          case \"slopick\":\r\n            rte = \"slopick\";\r\n            break;\r\n          case \"atownpick\":\r\n            rte = \"atownpick\";\r\n            break;\r\n          default:\r\n            rte = route;\r\n        }\r\n\r\n        const updateDetails = {\r\n          qty: ord[\"qty\"],\r\n          prodName: ord[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: rte,\r\n          SO: ord[\"qty\"],\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n          timeStamp: new Date(),\r\n        };\r\n\r\n        if (ord[\"id\"]) {\r\n          updateDetails.id = ord[\"id\"];\r\n          updateDetails._version = ord[\"_version\"];\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on updating Orders\", error);\r\n          }\r\n        } else {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let stand of standArray) {\r\n        if (stand[\"id\"]) {\r\n          const updateDetails = {\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n            id: stand[\"id\"],\r\n            _version: stand[\"_version\"],\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        } else {\r\n          const updateDetails = {\r\n            custName: chosen,\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setModifications(false);\r\n    setStandLoaded(false);\r\n    setHoldLoaded(false);\r\n    setOrdersLoaded(false);\r\n    document.getElementById(\"orderCommand\").focus();\r\n  };\r\n\r\n  return (\r\n    <OrderButtons>\r\n      <Button\r\n        label=\"Add/Update\"\r\n        icon=\"pi pi-plus\"\r\n        disabled={chosen === \"  \"}\r\n        onClick={handleAddUpdate}\r\n        className={\r\n          modifications\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n      />\r\n      <Button\r\n        label=\"Clear\"\r\n        icon=\"pi pi-trash\"\r\n        disabled={!cartList}\r\n        onClick={handleClear}\r\n        className=\"p-button-raised p-button-rounded p-button-info\"\r\n      />\r\n      <Button\r\n        label={cartStand}\r\n        icon=\"pi pi-shopping-cart\"\r\n        onClick={handleCartStandToggle}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n      <Button\r\n        label={type}\r\n        icon=\"pi pi-dollar\"\r\n        onClick={handleChangeorderTypeWhole}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n    </OrderButtons>\r\n  );\r\n}\r\n\r\nexport default OrderEntryButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["387"],"import React, { useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\nconst Calendar = () => {\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    calendarEvents,\r\n    setCalendarEvents,\r\n  } = useContext(CurrentDataContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { orders } = useContext(OrdersContext);\r\n\r\n  useEffect(() => {\r\n    let backToStandingArray = CreateStandingArray(standing, chosen);\r\n    let cartDateArray = CreateCartDateArray(orders, chosen);\r\n    let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n    let standingEvents = {\r\n      title: \"\",\r\n      daysOfWeek: backToStandingArray,\r\n      display: \"background\",\r\n    };\r\n\r\n    let calendarEvents = [\r\n      { title: \"\", date: delivDate, display: \"background\" },\r\n    ];\r\n\r\n    calendarEvents.push(standingEvents);\r\n\r\n    for (let order of cartDateArray) {\r\n      let newEvent = { title: \"\", date: order, display: \"background\" };\r\n      calendarEvents.push(newEvent);\r\n    }\r\n\r\n    for (let order of cartBlankDateArray) {\r\n      let newEvent2 = { title: \"\", date: order, display: \"inverse-background\" };\r\n      calendarEvents.push(newEvent2);\r\n    }\r\n\r\n    setCalendarEvents(calendarEvents);\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setDelivDate(selectInfo.dateStr);\r\n  \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"calendarApp\" id=\"test\">\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          defaultView=\"dayGridMonth\"\r\n          aspectRatio={1}\r\n          contentHeight=\"auto\"\r\n          eventBackgroundColor=\"blue\"\r\n          dateClick={handleDateSelect}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"\",\r\n            end: \"prev,next\",\r\n          }}\r\n          events={calendarEvents}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["388"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["389"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["390"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport RouteList from \"./RouteList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditRoutes() {\r\n  const [selectedRoute, setSelectedRoute] = useState();\r\n  const [routes, setRoutes] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          selectedRoute={selectedRoute}\r\n          setSelectedRoute={setSelectedRoute}\r\n          routes={routes}\r\n          setRoutes={setRoutes}\r\n        />\r\n        {selectedRoute && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedRoute={selectedRoute}\r\n                  setSelectedRoute={setSelectedRoute}\r\n                  routes={routes}\r\n                  setRoutes={setRoutes}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedRoute={selectedRoute}\r\n            setSelectedRoute={setSelectedRoute}\r\n            routes={routes}\r\n            setRoutes={setRoutes}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["391"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listRoutes } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Route List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedRoute(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {routes && (\r\n          <DataTable\r\n            value={routes}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedRoute}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"routeName\"\r\n              header=\"Routes\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["392","393"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n`;\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nconst hubDepart = [{ RouteDepart: \"Prado\" }, { RouteDepart: \"Carlton\" }];\r\n\r\nconst hubArrive = [{ RouteArrive: \"Prado\" }, { RouteArrive: \"Carlton\" }];\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const fullZones = useRef();\r\n\r\n  const [days, setDays] = useState([]);\r\n\r\n  const onDayChange = (e) => {\r\n    let selectedDays = [...days];\r\n    if (e.checked) selectedDays.push(e.value);\r\n    else selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n\r\n    let itemToUpdate = clonedeep(selectedRoute);\r\n    itemToUpdate[\"RouteSched\"] = selectedDays;\r\n    setSelectedRoute(itemToUpdate);\r\n    setDays(selectedDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTarget(selectedRoute[\"RouteServe\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    setDays(selectedRoute[\"RouteSched\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    let parsedZones = [];\r\n    if (fullZones.current) {\r\n      parsedZones = fullZones.current.filter(\r\n        (full) => !selectedRoute[\"RouteServe\"].includes(full)\r\n      );\r\n    }\r\n    setSource(parsedZones);\r\n  }, [selectedRoute]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n      let mappedNoDelete = noDelete.map((item) => item[\"zoneName\"]);\r\n      fullZones.current = mappedNoDelete;\r\n      setSource(mappedNoDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setSelectedRoute(setPickValue(event, selectedRoute));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> Route Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"zoneName\"> Route Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"routeName\"\r\n          placeholder={selectedRoute.routeName}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n          }\r\n          onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeStart\"\r\n            placeholder={selectedRoute.routeStart}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeTime\"\r\n            placeholder={selectedRoute.routeTime}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteDepart\"\r\n            optionLabel=\"RouteDepart\"\r\n            options={hubDepart}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteArrive\"\r\n            optionLabel=\"RouteArrive\"\r\n            options={hubArrive}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"\r\n            }\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <WeekWrapper>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb1\"\r\n            value=\"1\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"1\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb1\" className=\"p-checkbox-label\">\r\n            Sun\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb2\"\r\n            value=\"2\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"2\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb2\" className=\"p-checkbox-label\">\r\n            Mon\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"3\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"3\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Tues\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"4\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"4\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Wed\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"5\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"5\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Thurs\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"6\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"6\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Fri\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"7\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"7\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Sat\r\n          </label>\r\n        </div>\r\n      </WeekWrapper>\r\n      <PickList\r\n        sourceHeader=\"All Zones\"\r\n        targetHeader=\"Served By This Route\"\r\n        source={source}\r\n        target={selectedRoute[\"RouteServe\"]}\r\n        itemTemplate={itemTemplate}\r\n        onChange={onChange}\r\n        sourceStyle={{ height: \"250px\" }}\r\n        targetStyle={{ height: \"250px\" }}\r\n      ></PickList>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["394"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ZoneList from \"./ZoneList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedZone, setSelectedZone] = useState(1);\r\n  const [zones, setZones] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList\r\n          selectedZone={selectedZone}\r\n          setSelectedZone={setSelectedZone}\r\n          zones={zones}\r\n          setZones={setZones}\r\n        />\r\n        {selectedZone && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedZone={selectedZone}\r\n                  setSelectedZone={setSelectedZone}\r\n                  zones={zones}\r\n                  setZones={setZones}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedZone={selectedZone}\r\n            setSelectedZone={setSelectedZone}\r\n            zones={zones}\r\n            setZones={setZones}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["395"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, [zones]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n\r\n      setZones(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedZone(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {zones && (\r\n          <DataTable\r\n            value={zones}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedZone}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"zoneName\"\r\n              header=\"Zones\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["396"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setDropDownValue,\r\n  \r\n} from \"../../../helpers/formHelpers\";\r\n\r\nconst doughTypes = [\r\n  { doughType: \"Baguette\" },\r\n  { doughType: \"Brioche\" },\r\n  { doughType: \"French\" },\r\n  { doughType: \"Focaccia\" },\r\n  { doughType: \"Whole Wheat\" },\r\n  { doughType: \"Croissant\" },\r\n  { doughType: \"Rustic Rye\" },\r\n  { doughType: \"Levain\" },\r\n  { doughType: \"Multigrain\" },\r\n];\r\n\r\nconst bakedWheres = [\r\n  { bakedWhere: \"Prado\" },\r\n  { bakedWhere: \"Carlton\" },\r\n  { bakedWhere: \"Mixed\" },\r\n];\r\n\r\nconst Baking = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  const [ fullProducts, setFullProducts ] = useState([])\r\n\r\n  useEffect(() => {\r\n    let stageProducts = products.map(prod => ({depends: prod[\"prodName\"]}))\r\n    stageProducts.push({depends: \"NONE\"})\r\n    \r\n    setFullProducts(stageProducts)\r\n  },[])\r\n  \r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-user\"></i> Packing Info\r\n      </h2>\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"doughType\">Dough Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"doughType\"\r\n          optionLabel=\"doughType\"\r\n          options={doughTypes}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.doughType : \"Select Dough Type\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakedWhere\">Baked Where</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"bakedWhere\"\r\n          optionLabel=\"bakedWhere\"\r\n          options={bakedWheres}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.bakedWhere : \"Baked Where\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"readyTime\">Guaranteed Ready (0-24)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"readyTime\"\r\n          placeholder={selectedProduct.readyTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"weight\">Dough Weight (lbs.)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"weight\"\r\n          placeholder={selectedProduct.weight}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"depends\">Dependant Product</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"depends\"\r\n          optionLabel=\"depends\"\r\n          options={fullProducts}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.depends : \"Depends On\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",["397"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  deleteProduct,\r\n  createProduct,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst Buttons = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n\r\n  const handleAddProd = () => {\r\n    let prodName;\r\n    let nickName;\r\n\r\n    swal(\"Enter Product Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      prodName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then((value) => {\r\n        nickName = value;\r\n        const addDetails = {\r\n          prodName: prodName,\r\n          nickName: nickName,\r\n          packGroup: \"\",\r\n          packSize: 0,\r\n          doughType: \"\",\r\n          freezerThaw: false,\r\n          packGroupOrder: 0,\r\n          readyTime: 15,\r\n          bakedWhere: [\"\"],\r\n          wholePrice: 0,\r\n          retailPrice: 0,\r\n          isWhole: false,\r\n          depends: [\"\"],\r\n          weight: 0,\r\n          descrip: \"description\",\r\n          picURL: \"\",\r\n          squareID: \"\"\r\n        };\r\n        createProd(addDetails, nickName, prodName);\r\n      });\r\n    });\r\n  };\r\n\r\n  const createProd = async (addDetails, nickName, prodName) => {\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(createProduct, { input: { ...addDetails } })\r\n      );\r\n      let id = prodData.data.createProduct.id;\r\n      let version = prodData.data.createProduct.version;\r\n\r\n      const fullDetails = {\r\n        id: id,\r\n        _version: version,\r\n        prodName: prodName,\r\n        nickName: nickName,\r\n        packGroup: \"\",\r\n        packSize: 0,\r\n        doughType: \"\",\r\n        freezerThaw: false,\r\n        packGroupOrder: 0,\r\n        readyTime: 15,\r\n        bakedWhere: [\"\"],\r\n        wholePrice: 0,\r\n        retailPrice: 0,\r\n        isWhole: false,\r\n        depends: [\"\"],\r\n        weight: 0,\r\n        descrip: \"description\",\r\n        picURL: \"\",\r\n        squareID: \"\"\r\n      };\r\n\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateProd = async () => {\r\n    const updateDetails = {\r\n        id: selectedProduct[\"id\"],\r\n        _version: selectedProduct[\"_version\"],\r\n        prodName: selectedProduct[\"prodName\"],\r\n        nickName: selectedProduct[\"nickName\"],\r\n        packGroup: selectedProduct[\"packGroup\"],\r\n        packSize: selectedProduct[\"packSize\"],\r\n        doughType: selectedProduct[\"doughType\"],\r\n        freezerThaw: selectedProduct[\"freezerThaw\"],\r\n        packGroupOrder: selectedProduct[\"packGroupOrder\"],\r\n        readyTime: selectedProduct[\"readyTime\"],\r\n        bakedWhere: selectedProduct[\"bakedWhere\"],\r\n        wholePrice: selectedProduct[\"wholePrice\"],\r\n        retailPrice: selectedProduct[\"retailPrice\"],\r\n        isWhole: selectedProduct[\"isWhole\"],\r\n        depends: selectedProduct[\"depends\"],\r\n        weight: selectedProduct[\"weight\"],\r\n        descrip: selectedProduct[\"descrip\"],\r\n        picURL: selectedProduct[\"picURL\"],\r\n        squareID: selectedProduct[\"squareID\"]\r\n    };\r\n\r\n    try {\r\n      const prodData = await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...updateDetails } })\r\n      );\r\n\r\n      swal({\r\n        text: `${prodData.data.updateProduct.prodName} has been updated.`,\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n      setProdLoaded(false);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  const deleteProdWarn = async () => {\r\n    swal({\r\n      text:\r\n        \" Are you sure that you would like to permanently delete this product?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteProd();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteProd = async () => {\r\n    const deleteDetails = {\r\n      id: selectedProduct[\"id\"],\r\n      _version: selectedProduct[\"_version\"]\r\n    };\r\n    \r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(deleteProduct, { input: { ...deleteDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setSelectedProduct();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Product\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddProd}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Product\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateProd}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Product\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteProdWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js",["398"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext, CustomerLoad } from \"../../../dataContexts/CustomerContext\";\r\nimport { ProductsContext, ProductsLoad } from \"../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext, StandingLoad } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\n\r\nimport RouteGrid from \"../ByRoute/Parts/RouteGrid\";\r\nimport RouteList from \"../ByRoute/Parts/RouteList\";\r\nimport ToolBar from \"../ByRoute/Parts/ToolBar\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 95%;\r\n  margin: 10px auto;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  \r\n  background: #ffffff;\r\n`;\r\n\r\nfunction ByRoute() {\r\n  const [ route, setRoute ] = useState(\"AM Pastry\");\r\n  const [ routeList, setRouteList ] = useState();\r\n  const [ orderList, setOrderList ] = useState();\r\n\r\n  const { custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standLoaded, setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(false);\r\n    setProdLoaded(false);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(false);\r\n    setStandLoaded(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch('https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done')\r\n    // Handle success\r\n    .then(response => response.json())  // convert to json\r\n    .then(json => console.log(JSON.parse(json)))    //print data to console\r\n    .catch(err => console.log('Request Failed', err)); // Catch errors\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n\r\n      <MainWrapper>\r\n        <RouteList orderList={orderList} setRouteList={setRouteList} setRoute={setRoute} routeList={routeList}/>\r\n        <DescripWrapper>\r\n          <ToolBar setOrderList={setOrderList}/>\r\n          <RouteGrid route={route} orderList={orderList}/>\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByRoute;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js",["399"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\n\r\nimport {\r\n  buildProductArray,\r\n  createColumns,\r\n  createListOfCustomers,\r\n  createQtyGrid,\r\n} from \"../../../../helpers/delivGridHelpers\";\r\n\r\nconst RouteGrid = ({ route, orderList }) => {\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const constructColumns = () => {\r\n    let columns;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter((grd) => grd[\"route\"] === route);\r\n      let listOfProducts = buildProductArray(gridToEdit, products);\r\n\r\n      columns = createColumns(listOfProducts);\r\n    }\r\n    return columns;\r\n  };\r\n\r\n  const constructData = () => {\r\n    let qtyGrid;\r\n    if (orderList) {\r\n      \r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter(\r\n        (order) => order[\"route\"] === route\r\n      );\r\n      let listOfCustomers = createListOfCustomers(gridToEdit, route);\r\n      qtyGrid = createQtyGrid(listOfCustomers, gridToEdit);\r\n    }\r\n    return qtyGrid;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let col = constructColumns();\r\n    let dat = constructData();\r\n    setColumns(col ? col : []);\r\n    setData(dat ? dat : []);\r\n  }, [route, orderList, orders, standing]);\r\n\r\n  const dynamicColumns = columns.map((col, i) => {\r\n    return (\r\n      <Column\r\n        npmkey={col.field}\r\n        field={col.field}\r\n        header={col.header}\r\n        style={col.width}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable\r\n          className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n          value={data}\r\n          resizableColumns\r\n          columnResizeMode=\"fit\"\r\n        >\r\n          {dynamicColumns}\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js",["400"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ orderList, setRouteList, setRoute, routeList }) => {\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (orderList) {\r\n      let rtList = orderList.map((ord) => ord[\"route\"]);\r\n      let setRtList = new Set(rtList);\r\n      let rtListArray = Array.from(setRtList);\r\n      rtListArray = rtListArray.map((rt) => ({ route: rt }));\r\n\r\n      setRouteList(rtListArray);\r\n    }\r\n  }, [orderList, orders, standing]);\r\n\r\n  const handleSelection = (e) => {\r\n    setRoute(e.value.route);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        <DataTable\r\n          value={routeList}\r\n          className=\"p-datatable-striped\"\r\n          selectionMode=\"single\"\r\n          onSelectionChange={handleSelection}\r\n          dataKey=\"id\"\r\n        >\r\n          <Column field=\"route\" header=\"Routes\"></Column>\r\n        </DataTable>\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js",["401","402","403"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { CustomerContext } from \"../../../../dataContexts/CustomerContext\";\r\nimport { RoutesContext } from \"../../../../dataContexts/RoutesContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  removeDoubles,\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../../helpers/delivGridHelpers\";\r\n\r\nimport {\r\n  sortZtoADataByIndex,\r\n  sortAtoZDataByIndex,\r\n} from \"../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport { listRoutes } from \"../../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst calcDayNum = (delivDate) => {\r\n  let day = DateTime.fromSQL(delivDate);\r\n  let dayNum = day.weekday;\r\n  if (dayNum === 7) {\r\n    dayNum = 0;\r\n  }\r\n  dayNum = dayNum + 1;\r\n  return dayNum;\r\n};\r\n\r\nconst routeRunsThatDay = (rte, dayNum) => {\r\n  if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst productCanBeInPlace = (grd, routes, rte) => {\r\n  if (\r\n    grd[\"where\"].includes(\"Mixed\") ||\r\n    grd[\"where\"].includes(\r\n      routes[\r\n        routes.findIndex((route) => route[\"routeName\"] === rte[\"routeName\"])\r\n      ][\"RouteDepart\"]\r\n    )\r\n  ) {\r\n    return true;\r\n  } else {\r\n    if (productCanMakeIt(grd, routes, rte)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nconst productCanMakeIt = (grd, routes, rte) => {\r\n  for (let testRte of routes) {\r\n    if (\r\n      grd[\"where\"].includes(testRte[\"RouteDepart\"]) &&\r\n      testRte[\"RouteArrive\"] === rte[\"RouteDepart\"] &&\r\n      Number(testRte[\"routeStart\"] + testRte[\"routeTime\"]) <\r\n        Number(rte[\"routeStart\"])\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst productReadyBeforeRouteStarts = (\r\n  products,\r\n  customers,\r\n  routes,\r\n  grd,\r\n  rte\r\n) => {\r\n  if (\r\n    products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n    ][\"readyTime\"] <\r\n      routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n        \"routeStart\"\r\n      ] ||\r\n    products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === grd[\"prodName\"])\r\n    ][\"readyTime\"] >\r\n      customers[\r\n        customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n      ][\"latestFinalDeliv\"]\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst customerIsOpen = (customers, grd, routes, rte) => {\r\n  if (\r\n    customers[\r\n      customers.findIndex((cust) => cust[\"custName\"] === grd[\"custName\"])\r\n    ][\"latestFirstDeliv\"] <\r\n    Number(\r\n      routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n        \"routeStart\"\r\n      ]\r\n    ) +\r\n      Number(\r\n        routes[routes.findIndex((rt) => rt[\"routeName\"] === rte[\"routeName\"])][\r\n          \"routeTime\"\r\n        ]\r\n      )\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst ToolBar = ({ setOrderList }) => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { routes, setRoutes } = useContext(RoutesContext);\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (orders && standing && customers && products) {\r\n      try {\r\n        let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n        \r\n        let buildStand = buildStandList(\"*\", delivDate, standing);\r\n       \r\n        // fill in route based on default for customer\r\n        let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n        let ordList = removeDoubles(fullOrder);\r\n        let noZeroDelivDateOrderList = zerosDelivFilter(\r\n          ordList,\r\n          delivDate,\r\n          customers\r\n        );\r\n\r\n        let gridOrderArray = buildGridOrderArray(\r\n          noZeroDelivDateOrderList,\r\n          products\r\n        );\r\n\r\n        sortZtoADataByIndex(routes, \"routeStart\");\r\n        for (let rte of routes) {\r\n          for (let grd of gridOrderArray) {\r\n            let dayNum = calcDayNum(delivDate);\r\n\r\n            if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n              continue;\r\n            } else {\r\n              if (\r\n                routeRunsThatDay(rte, dayNum) &&\r\n                productCanBeInPlace(grd, routes, rte) &&\r\n                productReadyBeforeRouteStarts(\r\n                  products,\r\n                  customers,\r\n                  routes,\r\n                  grd,\r\n                  rte\r\n                ) &&\r\n                customerIsOpen(customers, grd, routes, rte)\r\n              ) {\r\n                grd[\"route\"] = rte[\"routeName\"];\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        setOrderList(gridOrderArray);\r\n      } catch {\r\n        console.log(\"Whoops!\");\r\n      }\r\n    }\r\n  }, [delivDate, orders, standing, customers, products]);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n    setIsLoading(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-field p-col-12 p-md-4\">\r\n        <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n        <Calendar\r\n          id=\"delivDate\"\r\n          placeholder={convertDatetoBPBDate(delivDate)}\r\n          dateFormat=\"mm/dd/yy\"\r\n          onChange={(e) => setDate(e.value)}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js",["404"],"import { convertDatetoBPBDate } from \"./dateTimeHelpers\";\r\nimport { sortZtoADataByIndex, sortAtoZDataByIndex } from \"./sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\n\r\nexport const removeDoubles = (orderList) => {\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n  return orderList;\r\n};\r\n\r\nexport const zerosDelivFilter = (orderList, delivDate, customers) => {\r\n  let noZeroDelivDateOrderList = orderList.filter(\r\n    (ord) =>\r\n      Number(ord[\"qty\"]) > 0 &&\r\n      ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n  );\r\n  for (let ord of noZeroDelivDateOrderList) {\r\n    if (ord[\"route\"] === undefined || ord[\"route\"] === \"deliv\") {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        let custZone = customers[ind][\"zoneName\"];\r\n        ord[\"zoneName\"] = custZone;\r\n      }\r\n      \r\n    } else {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        let custZone = customers[ind][\"zoneName\"];\r\n        ord[\"zoneName\"] = ord[\"route\"];\r\n      }\r\n    }\r\n  }\r\n  return noZeroDelivDateOrderList;\r\n};\r\n\r\nexport const filterForZoneService = (\r\n  noZeroDelivDateOrderList,\r\n  route,\r\n  routes\r\n) => {\r\n  let filterServe;\r\n  if (routes) {\r\n    let rtInd = routes.findIndex((rt) => rt[\"routeName\"] === route);\r\n    filterServe = noZeroDelivDateOrderList.filter((ord) =>\r\n      routes[rtInd][\"RouteServe\"].includes(ord[\"route\"])\r\n    );\r\n  }\r\n  return filterServe;\r\n};\r\n\r\nexport const buildGridOrderArray = (filterServe, products) => {\r\n  let gridOrderArray;\r\n  gridOrderArray = filterServe.map((ord) => ({\r\n    prodName: ord[\"prodName\"],\r\n    custName: ord[\"custName\"],\r\n    zone: ord[\"zoneName\"],\r\n    route: \"\",\r\n    qty: ord[\"qty\"],\r\n    where:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"bakedWhere\"],\r\n    when:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"readyTime\"],\r\n  }));\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const isZoneIncludedInRoute = (gridOrderArray, routes, delivDate, customers) => {\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of gridOrderArray) {\r\n      let day = DateTime.fromSQL(delivDate);\r\n      let dayNum = day.weekday;\r\n      if (dayNum === 7) {\r\n        dayNum = 0;\r\n      }\r\n      dayNum = (dayNum + 1);\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        \r\n        if (rte[\"RouteSched\"].includes(dayNum.toString())){\r\n          grd[\"route\"] = rte[\"routeName\"];\r\n        } else {\r\n          grd[\"route\"] = \"Pick up Carlton\"\r\n        }\r\n      }\r\n      }\r\n  }\r\n  \r\n  return gridOrderArray;\r\n};\r\n\r\nexport const buildProductArray = (gridToEdit, products) => {\r\n  let listOfProducts;\r\n\r\n  listOfProducts = gridToEdit.map((order) => order[\"prodName\"]);\r\n  listOfProducts = new Set(listOfProducts);\r\n  listOfProducts = Array.from(listOfProducts);\r\n  let prodArray = [];\r\n  for (let prod of listOfProducts) {\r\n    for (let item of products) {\r\n      if (prod === item[\"prodName\"]) {\r\n        let newItem = [\r\n          prod,\r\n          item[\"nickName\"],\r\n          item[\"packGroup\"],\r\n          item[\"packSize\"],\r\n        ];\r\n        prodArray.push(newItem);\r\n      }\r\n    }\r\n  }\r\n  return prodArray;\r\n};\r\n\r\nexport const createColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    { field: \"customer\", header: \"Customer\", width: { width: \"10%\" } },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod[0],\r\n      header: prod[1],\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createListOfCustomers = (orderList) => {\r\n  let listOfCustomers = orderList.map((order) => order[\"custName\"]);\r\n  listOfCustomers = new Set(listOfCustomers);\r\n  return listOfCustomers;\r\n};\r\n\r\nexport const createQtyGrid = (listOfCustomers, orderList) => {\r\n  let data = [];\r\n  for (let cust of listOfCustomers) {\r\n    let newData = { customer: cust };\r\n    for (let order of orderList) {\r\n      if (order[\"custName\"] === cust) {\r\n        newData[order[\"prodName\"]] = order[\"qty\"];\r\n      }\r\n    }\r\n\r\n    data.push(newData);\r\n  }\r\n\r\n  return data;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js",["405"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../../dataContexts/OrdersContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ProductGrid from \"../ByProduct/Parts/ProductGrid\";\r\nimport ToolBar from \"../ByProduct/Parts/ToolBar\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  margin: 0px 10px;\r\n  padding: 0px 10px;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nfunction ByProduct() {\r\n  const [product] = useState(\"\");\r\n  const [orderList, setOrderList] = useState(\"\");\r\n\r\n  const { custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standLoaded, setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(false);\r\n    setProdLoaded(false);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(false);\r\n    setStandLoaded(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch('https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done')\r\n    // Handle success\r\n    .then(response => response.json())  // convert to json\r\n    .then(json => console.log(JSON.parse(json)))    //print data to console\r\n    .catch(err => console.log('Request Failed', err)); // Catch errors\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n\r\n      <MainWrapper>\r\n        <DescripWrapper>\r\n          <ToolBar setOrderList={setOrderList} product={product} />\r\n          <ProductGrid product={product} orderList={orderList} />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByProduct;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js",["406"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst ToolBar = () => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n    setIsLoading(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-field p-col-12 p-md-4\">\r\n        <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n        <Calendar\r\n          id=\"delivDate\"\r\n          placeholder={convertDatetoBPBDate(delivDate)}\r\n          dateFormat=\"mm/dd/yy\"\r\n          onChange={(e) => setDate(e.value)}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js",["407"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { CustomerContext } from \"../../../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../../helpers/CartBuildingHelpers\";\r\n\r\nconst ProductGrid = () => {\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [builtGrid, setBuiltGrid] = useState();\r\n\r\n  useEffect(() => {\r\n    if (orders && standing && customers && products && delivDate) {\r\n      try {\r\n        let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n        let buildStand = buildStandList(\"*\", delivDate, standing);\r\n        let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n        let builtGridSetup = fullOrder.filter((ord) => ord[\"qty\"] !== 0);\r\n        builtGridSetup.forEach(\r\n          (grd) =>\r\n            (grd[\"zoneName\"] =\r\n              customers[\r\n                customers.findIndex(\r\n                  (cust) => cust[\"custName\"] === grd[\"custName\"]\r\n                )\r\n              ][\"zoneName\"]) &&\r\n            (grd[\"nickName\"] =\r\n              products[\r\n                products.findIndex(\r\n                  (prod) => prod[\"prodName\"] === grd[\"prodName\"]\r\n                )\r\n              ][\"nickName\"]) &&\r\n            (grd[\"custNick\"] =\r\n              customers[\r\n                customers.findIndex(\r\n                  (cust) => cust[\"custName\"] === grd[\"custName\"]\r\n                )\r\n              ][\"nickName\"])\r\n        );\r\n        setIsLoading(false);\r\n        setBuiltGrid(builtGridSetup);\r\n      } catch {\r\n        console.log(\"Whoops\");\r\n      }\r\n    }\r\n  }, [delivDate, orders, standing, customers, products]);\r\n\r\n  const headerTemplate = (data) => {\r\n    return (\r\n      <React.Fragment>\r\n        <h3>{data.zoneName}</h3>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const footerTemplate = (data) => {\r\n    return <React.Fragment></React.Fragment>;\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      value={builtGrid}\r\n      rowGroupMode=\"subheader\"\r\n      groupField=\"zoneName\"\r\n      sortMode=\"single\"\r\n      sortField=\"zoneName\"\r\n      sortOrder={1}\r\n      className=\"p-datatable-striped\"\r\n      rowGroupHeaderTemplate={headerTemplate}\r\n      rowGroupFooterTemplate={footerTemplate}\r\n    >\r\n      <Column\r\n        field=\"zoneName\"\r\n        header=\"Zone\"\r\n        filter\r\n        filterPlaceholder=\"Search by zone\"\r\n      ></Column>\r\n      <Column\r\n        field=\"prodName\"\r\n        header=\"Product\"\r\n        filter\r\n        filterPlaceholder=\"Search by product\"\r\n      ></Column>\r\n      <Column\r\n        field=\"nickName\"\r\n        header=\"Prod nick\"\r\n        filter\r\n        filterPlaceholder=\"Search by nickname\"\r\n      ></Column>\r\n      <Column\r\n        field=\"custName\"\r\n        header=\"Customer\"\r\n        filter\r\n        filterPlaceholder=\"Search by customer\"\r\n      ></Column>\r\n      <Column\r\n        field=\"custNick\"\r\n        header=\"Cust nick\"\r\n        filter\r\n        filterPlaceholder=\"Search by nickname\"\r\n      ></Column>\r\n      <Column field=\"qty\" header=\"Quantity\"></Column>\r\n    </DataTable>\r\n  );\r\n};\r\nexport default ProductGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js",["408","409"],"import React, { useEffect, useContext, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport BillingGrid from \"./Parts/BillingGrid\";\r\n\r\nimport Buttons from \"./Parts/Buttons\";\r\nimport SelectDate from \"./Parts/SelectDate\";\r\n\r\nimport { CustomerContext, CustomerLoad } from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext, ProductsLoad } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext, StandingLoad } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { listAltPricings } from \"../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 70%;\r\n  border: 1px solid lightgray;\r\n  padding: 5px 10px;\r\n  margin: 0px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Billing() {\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { orders, ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standing, standLoaded, setStandLoaded } = useContext(StandingContext);\r\n  let { setIsLoading } = useContext(ToggleContext)\r\n\r\n  const [ altPricing, setAltPricing ] = useState()\r\n  const [ nextInv, setNextInv ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setHoldLoaded(true);\r\n    if (!orders) {\r\n      setOrdersLoaded(false);\r\n    }\r\n    if (!standing) {\r\n      setStandLoaded(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const fetchAltPricing = async () => {\r\n    try {\r\n      const altPricingData = await API.graphql(\r\n        graphqlOperation(listAltPricings, {\r\n          limit: \"1000\",\r\n        })\r\n      );\r\n      \r\n      setAltPricing(altPricingData.data.listAltPricings.items);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Alt Pricing List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      \r\n      <BasicContainer>\r\n        <h1>Billing</h1>\r\n      </BasicContainer>\r\n      \r\n      <BasicContainer>\r\n        <SelectDate nextInv={nextInv} setNextInv={setNextInv}/>\r\n      </BasicContainer>\r\n     \r\n      <Buttons />\r\n     \r\n      <BasicContainer>\r\n        <BillingGrid altPricing={altPricing} nextInv={nextInv}/>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Billing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js",["410","411"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Buttons.js",["412"],"import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\n\r\n\r\nfunction Buttons() {\r\n  \r\n\r\n \r\n\r\n  return (\r\n    <React.Fragment>\r\n     \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js",["413"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n  \r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst SelectDate = ({ nextInv, setNextInv }) => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n\r\n  \r\n \r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n  };\r\n\r\n \r\n  return (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n      <div className=\"p-field p-col-12 p-md-4\">\r\n        <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n        <Calendar\r\n          id=\"delivDate\"\r\n          placeholder={convertDatetoBPBDate(delivDate)}\r\n          disabled\r\n          dateFormat=\"mm/dd/yy\"\r\n          onChange={(e) => setDate(e.value)}\r\n        />\r\n        </div>\r\n        <div>\r\n        <span className=\"p-float-label\">\r\n            <InputText\r\n              id=\"invNum\"\r\n              size=\"50\"\r\n              placeholder={nextInv}\r\n              onKeyUp={(e) =>\r\n                e.code === \"Enter\" &&\r\n                setNextInv(e.target.value)\r\n              }\r\n              onBlur={(e) => setNextInv(e.target.value)}\r\n            />\r\n            <label htmlFor=\"invNum\">\r\n              Enter next available invoice #\r\n            </label>\r\n          </span>\r\n      </div>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectDate;\r\n\r\n",{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","replacedBy":"417"},{"ruleId":"418","severity":1,"message":"419","line":38,"column":7,"nodeType":"420","endLine":38,"endColumn":9,"suggestions":"421"},{"ruleId":"418","severity":1,"message":"422","line":45,"column":7,"nodeType":"420","endLine":45,"endColumn":9,"suggestions":"423"},{"ruleId":"418","severity":1,"message":"424","line":38,"column":9,"nodeType":"420","endLine":38,"endColumn":11,"suggestions":"425"},{"ruleId":"426","severity":1,"message":"427","line":3,"column":10,"nodeType":"428","messageId":"429","endLine":3,"endColumn":29},{"ruleId":"426","severity":1,"message":"430","line":34,"column":26,"nodeType":"428","messageId":"429","endLine":34,"endColumn":45},{"ruleId":"418","severity":1,"message":"431","line":38,"column":7,"nodeType":"420","endLine":38,"endColumn":9,"suggestions":"432"},{"ruleId":"426","severity":1,"message":"433","line":34,"column":25,"nodeType":"428","messageId":"429","endLine":34,"endColumn":43},{"ruleId":"418","severity":1,"message":"434","line":38,"column":7,"nodeType":"420","endLine":38,"endColumn":9,"suggestions":"435"},{"ruleId":"414","replacedBy":"436"},{"ruleId":"416","replacedBy":"437"},{"ruleId":"418","severity":1,"message":"438","line":48,"column":6,"nodeType":"420","endLine":48,"endColumn":43,"suggestions":"439"},{"ruleId":"418","severity":1,"message":"440","line":69,"column":6,"nodeType":"420","endLine":69,"endColumn":58,"suggestions":"441"},{"ruleId":"418","severity":1,"message":"442","line":61,"column":6,"nodeType":"420","endLine":61,"endColumn":24,"suggestions":"443"},{"ruleId":"414","replacedBy":"444"},{"ruleId":"416","replacedBy":"445"},{"ruleId":"414","replacedBy":"446"},{"ruleId":"416","replacedBy":"447"},{"ruleId":"418","severity":1,"message":"448","line":52,"column":7,"nodeType":"420","endLine":52,"endColumn":70,"suggestions":"449"},{"ruleId":"418","severity":1,"message":"450","line":77,"column":6,"nodeType":"420","endLine":77,"endColumn":8,"suggestions":"451"},{"ruleId":"426","severity":1,"message":"452","line":73,"column":5,"nodeType":"428","messageId":"429","endLine":73,"endColumn":17},{"ruleId":"426","severity":1,"message":"453","line":75,"column":5,"nodeType":"428","messageId":"429","endLine":75,"endColumn":21},{"ruleId":"426","severity":1,"message":"454","line":81,"column":11,"nodeType":"428","messageId":"429","endLine":81,"endColumn":19},{"ruleId":"426","severity":1,"message":"455","line":82,"column":11,"nodeType":"428","messageId":"429","endLine":82,"endColumn":18},{"ruleId":"426","severity":1,"message":"456","line":93,"column":5,"nodeType":"428","messageId":"429","endLine":93,"endColumn":20},{"ruleId":"418","severity":1,"message":"457","line":147,"column":6,"nodeType":"420","endLine":147,"endColumn":25,"suggestions":"458"},{"ruleId":"418","severity":1,"message":"459","line":162,"column":6,"nodeType":"420","endLine":162,"endColumn":25,"suggestions":"460"},{"ruleId":"426","severity":1,"message":"461","line":42,"column":5,"nodeType":"428","messageId":"429","endLine":42,"endColumn":18},{"ruleId":"426","severity":1,"message":"462","line":45,"column":5,"nodeType":"428","messageId":"429","endLine":45,"endColumn":11},{"ruleId":"426","severity":1,"message":"463","line":46,"column":5,"nodeType":"428","messageId":"429","endLine":46,"endColumn":14},{"ruleId":"426","severity":1,"message":"464","line":48,"column":5,"nodeType":"428","messageId":"429","endLine":48,"endColumn":17},{"ruleId":"426","severity":1,"message":"465","line":49,"column":5,"nodeType":"428","messageId":"429","endLine":49,"endColumn":20},{"ruleId":"426","severity":1,"message":"454","line":51,"column":11,"nodeType":"428","messageId":"429","endLine":51,"endColumn":19},{"ruleId":"426","severity":1,"message":"455","line":52,"column":11,"nodeType":"428","messageId":"429","endLine":52,"endColumn":18},{"ruleId":"418","severity":1,"message":"466","line":55,"column":6,"nodeType":"420","endLine":55,"endColumn":25,"suggestions":"467"},{"ruleId":"418","severity":1,"message":"468","line":64,"column":6,"nodeType":"420","endLine":64,"endColumn":8,"suggestions":"469"},{"ruleId":"418","severity":1,"message":"470","line":65,"column":6,"nodeType":"420","endLine":65,"endColumn":8,"suggestions":"471"},{"ruleId":"418","severity":1,"message":"472","line":57,"column":6,"nodeType":"420","endLine":57,"endColumn":8,"suggestions":"473"},{"ruleId":"418","severity":1,"message":"474","line":32,"column":6,"nodeType":"420","endLine":32,"endColumn":14,"suggestions":"475"},{"ruleId":"426","severity":1,"message":"476","line":47,"column":10,"nodeType":"428","messageId":"429","endLine":47,"endColumn":16},{"ruleId":"418","severity":1,"message":"448","line":68,"column":6,"nodeType":"420","endLine":68,"endColumn":8,"suggestions":"477"},{"ruleId":"418","severity":1,"message":"472","line":57,"column":6,"nodeType":"420","endLine":57,"endColumn":8,"suggestions":"478"},{"ruleId":"418","severity":1,"message":"479","line":32,"column":6,"nodeType":"420","endLine":32,"endColumn":13,"suggestions":"480"},{"ruleId":"418","severity":1,"message":"481","line":44,"column":5,"nodeType":"420","endLine":44,"endColumn":7,"suggestions":"482"},{"ruleId":"426","severity":1,"message":"483","line":75,"column":13,"nodeType":"428","messageId":"429","endLine":75,"endColumn":24},{"ruleId":"418","severity":1,"message":"472","line":51,"column":6,"nodeType":"420","endLine":51,"endColumn":8,"suggestions":"484"},{"ruleId":"418","severity":1,"message":"485","line":57,"column":6,"nodeType":"420","endLine":57,"endColumn":42,"suggestions":"486"},{"ruleId":"418","severity":1,"message":"487","line":33,"column":6,"nodeType":"420","endLine":33,"endColumn":35,"suggestions":"488"},{"ruleId":"418","severity":1,"message":"489","line":154,"column":6,"nodeType":"420","endLine":154,"endColumn":8,"suggestions":"490"},{"ruleId":"418","severity":1,"message":"474","line":160,"column":6,"nodeType":"420","endLine":160,"endColumn":14,"suggestions":"491"},{"ruleId":"418","severity":1,"message":"492","line":231,"column":6,"nodeType":"420","endLine":231,"endColumn":56,"suggestions":"493"},{"ruleId":"426","severity":1,"message":"494","line":42,"column":13,"nodeType":"428","messageId":"429","endLine":42,"endColumn":21},{"ruleId":"418","severity":1,"message":"472","line":57,"column":6,"nodeType":"420","endLine":57,"endColumn":8,"suggestions":"495"},{"ruleId":"418","severity":1,"message":"489","line":23,"column":6,"nodeType":"420","endLine":23,"endColumn":8,"suggestions":"496"},{"ruleId":"418","severity":1,"message":"448","line":63,"column":6,"nodeType":"420","endLine":63,"endColumn":56,"suggestions":"497"},{"ruleId":"418","severity":1,"message":"498","line":57,"column":6,"nodeType":"420","endLine":57,"endColumn":8,"suggestions":"499"},{"ruleId":"418","severity":1,"message":"448","line":63,"column":6,"nodeType":"420","endLine":63,"endColumn":8,"suggestions":"500"},{"ruleId":"426","severity":1,"message":"501","line":49,"column":11,"nodeType":"428","messageId":"429","endLine":49,"endColumn":20},{"ruleId":"418","severity":1,"message":"502","line":104,"column":6,"nodeType":"420","endLine":104,"endColumn":44,"suggestions":"503"},{"ruleId":"426","severity":1,"message":"504","line":3,"column":8,"nodeType":"428","messageId":"429","endLine":3,"endColumn":14},{"ruleId":"418","severity":1,"message":"489","line":35,"column":6,"nodeType":"420","endLine":35,"endColumn":8,"suggestions":"505"},"no-native-reassign",["506"],"no-negated-in-lhs",["507"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["508"],"React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["509"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["510"],"no-unused-vars","'FilterStandHoldDups' is defined but never used.","Identifier","unusedVar","'setOriginalStanding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["511"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["512"],["506"],["507"],"React Hook useEffect has a missing dependency: 'currentCartList'. Either include it or remove the dependency array.",["513"],"React Hook useEffect has a missing dependency: 'setCurrentCartList'. Either include it or remove the dependency array.",["514"],"React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["515"],["506"],["507"],["506"],["507"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["516"],"React Hook useEffect has missing dependencies: 'props.location.search', 'setCartList', and 'setChosen'. Either include them or remove the dependency array.",["517"],"'setStandList' is assigned a value but never used.","'setModifications' is assigned a value but never used.","'standing' is assigned a value but never used.","'holding' is assigned a value but never used.","'currentCartList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customerGroup', 'orders', and 'setRoute'. Either include them or remove the dependency array.",["518"],"React Hook useEffect has missing dependencies: 'orders' and 'setPonote'. Either include them or remove the dependency array.",["519"],"'setStandArray' is assigned a value but never used.","'orders' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'recentOrders' is assigned a value but never used.","'setRecentOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["520"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["521"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["522"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["523"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["524"],"'target' is assigned a value but never used.",["525"],["526"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["527"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["528"],"'fullDetails' is assigned a value but never used.",["529"],"React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["530"],"React Hook useEffect has a missing dependency: 'setRouteList'. Either include it or remove the dependency array. If 'setRouteList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["531"],"React Hook useEffect has a missing dependency: 'setDelivDate'. Either include it or remove the dependency array.",["532"],["533"],"React Hook useEffect has missing dependencies: 'routes' and 'setOrderList'. Either include them or remove the dependency array. If 'setOrderList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["534"],"'custZone' is assigned a value but never used.",["535"],["536"],["537"],"React Hook useEffect has missing dependencies: 'customers', 'orders', 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setStandLoaded', and 'standing'. Either include them or remove the dependency array.",["538"],["539"],"'customers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'altPricing' and 'products'. Either include them or remove the dependency array.",["540"],"'styled' is defined but never used.",["541"],"no-global-assign","no-unsafe-negation",{"desc":"542","fix":"543"},{"desc":"544","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"572","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"572","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"574","fix":"590"},{"desc":"591","fix":"592"},{"desc":"572","fix":"593"},{"desc":"588","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"576","fix":"599"},{"desc":"600","fix":"601"},{"desc":"588","fix":"602"},"Update the dependencies array to be: [fetchCustomers]",{"range":"603","text":"604"},"Update the dependencies array to be: [fetchOrders]",{"range":"605","text":"606"},"Update the dependencies array to be: [fetchProducts]",{"range":"607","text":"608"},"Update the dependencies array to be: [fetchStanding]",{"range":"609","text":"610"},"Update the dependencies array to be: [fetchHolding]",{"range":"611","text":"612"},"Update the dependencies array to be: [products, orders, chosen, delivDate, currentCartList]",{"range":"613","text":"614"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",{"range":"615","text":"616"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"617","text":"618"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"619","text":"620"},"Update the dependencies array to be: [props.location.search, setCartList, setChosen]",{"range":"621","text":"622"},"Update the dependencies array to be: [chosen, customerGroup, delivDate, orders, setRoute]",{"range":"623","text":"624"},"Update the dependencies array to be: [chosen, delivDate, orders, setPonote]",{"range":"625","text":"626"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"627","text":"628"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"629","text":"630"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"631","text":"632"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"633","text":"634"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"635","text":"636"},"Update the dependencies array to be: [setIsLoading]",{"range":"637","text":"638"},{"range":"639","text":"634"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"640","text":"641"},"Update the dependencies array to be: [products]",{"range":"642","text":"643"},{"range":"644","text":"634"},"Update the dependencies array to be: [route, orderList, orders, standing, constructColumns, constructData]",{"range":"645","text":"646"},"Update the dependencies array to be: [orderList, orders, setRouteList, standing]",{"range":"647","text":"648"},"Update the dependencies array to be: [setDelivDate]",{"range":"649","text":"650"},{"range":"651","text":"636"},"Update the dependencies array to be: [delivDate, orders, standing, customers, products, routes, setOrderList]",{"range":"652","text":"653"},{"range":"654","text":"634"},{"range":"655","text":"650"},"Update the dependencies array to be: [delivDate, orders, standing, customers, products, setIsLoading]",{"range":"656","text":"657"},"Update the dependencies array to be: [customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",{"range":"658","text":"659"},{"range":"660","text":"638"},"Update the dependencies array to be: [delivDate, orders, standing, nextInv, products, altPricing]",{"range":"661","text":"662"},{"range":"663","text":"650"},[901,903],"[fetchCustomers]",[1147,1149],"[fetchOrders]",[899,901],"[fetchProducts]",[1069,1071],"[fetchStanding]",[990,992],"[fetchHolding]",[1566,1603],"[products, orders, chosen, delivDate, currentCartList]",[1749,1801],"[chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",[1638,1656],"[chosen, setStandArray, setStandList, standing]",[1556,1619],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[2277,2279],"[props.location.search, setCartList, setChosen]",[3649,3668],"[chosen, customerGroup, delivDate, orders, setRoute]",[3975,3994],"[chosen, delivDate, orders, setPonote]",[1731,1750],"[chosen, delivDate, orders, setCalendarEvents, standing]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1693,1695],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[903,911],"[fetchRoutes, routes, setIsLoading]",[1895,1897],"[setIsLoading]",[1693,1695],[896,903],"[fetchZones, setIsLoading, zones]",[1131,1133],"[products]",[1728,1730],[1810,1846],"[route, orderList, orders, standing, constructColumns, constructData]",[1040,1069],"[orderList, orders, setRouteList, standing]",[4075,4077],"[setDelivDate]",[4180,4188],[6285,6335],"[delivDate, orders, standing, customers, products, routes, setOrderList]",[1651,1653],[645,647],[2380,2430],"[delivDate, orders, standing, customers, products, setIsLoading]",[1880,1882],"[customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",[1989,1991],[3410,3448],"[delivDate, orders, standing, nextInv, products, altPricing]",[803,805]]