[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeAllOrders.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js":"77","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js":"78","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js":"79","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js":"80","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js":"81","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeDough.js":"82","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js":"83","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js":"84","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"85","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js":"86","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js":"87","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js":"88","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\filters.js":"89","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\utils.js":"90","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js":"91","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js":"92","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js":"93","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js":"94","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js":"95","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js":"96","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js":"97","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js":"98","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js":"99","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js":"100","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js":"101","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js":"102","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js":"103","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js":"104","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js":"105","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js":"106","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js":"107","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js":"108","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js":"109","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js":"110","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js":"111","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBake.js":"112","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToMake.js":"113","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"114","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"115","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"116","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"117","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"118","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\ExportPastryPrepPdf.js":"119","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"120","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"121","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"122","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"123","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composePastryPrep.js":"124","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToPrep.js":"125","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BucketAmount.js":"126","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BinInfo.js":"127","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\PanAmount.js":"128","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\GetMixInfo.js":"129","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BagMixesScreen.js":"130","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js":"131","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\MixFormula.js":"132","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"133","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js":"134","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js":"135","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js":"136","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js":"137","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js":"138","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"139","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"140","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"141","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"142","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"143","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"144","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js":"145","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js":"146","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js":"147","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js":"148","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js":"149","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js":"150","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js":"151","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js":"152","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js":"153","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Rate.js":"154","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Total.js":"155","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\delivOrder\\delivOrder.js":"156","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\custProd\\custProd.js":"157","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\CustomApp.js":"158","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\manageUsers.js":"159","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Buttons.js":"160","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Info.js":"161","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\UserList.js":"162","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\NavCustomers.js":"163","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\helpers.js":"164","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\QBHelpers.js":"165","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\PDFHelpers.js":"166","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\voice\\voice.js":"167","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeCroixInfo.js":"168","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\FreezerThaw.js":"169","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeFreezerThaw.js":"170","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixCount.js":"171","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeBackup.js":"172","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Backup.js":"173","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2Backup.js":"174","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBakeBackup.js":"175","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes2.js":"176","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1_2.js":"177"},{"size":500,"mtime":1609089131749,"results":"178","hashOfConfig":"179"},{"size":362,"mtime":1609089131749,"results":"180","hashOfConfig":"181"},{"size":3924,"mtime":1642165574725,"results":"182","hashOfConfig":"179"},{"size":1305,"mtime":1641952926091,"results":"183","hashOfConfig":"179"},{"size":6148,"mtime":1641995472837,"results":"184","hashOfConfig":"179"},{"size":8315,"mtime":1640026304217,"results":"185","hashOfConfig":"179"},{"size":1821,"mtime":1615751621965,"results":"186","hashOfConfig":"181"},{"size":4289,"mtime":1631671690470,"results":"187","hashOfConfig":"181"},{"size":1437,"mtime":1615383938668,"results":"188","hashOfConfig":"181"},{"size":1724,"mtime":1616793575974,"results":"189","hashOfConfig":"179"},{"size":1563,"mtime":1631997055494,"results":"190","hashOfConfig":"179"},{"size":1421,"mtime":1620171317021,"results":"191","hashOfConfig":"179"},{"size":1718,"mtime":1633462526782,"results":"192","hashOfConfig":"181"},{"size":1433,"mtime":1641995299960,"results":"193","hashOfConfig":"179"},{"size":1877,"mtime":1621942072383,"results":"194","hashOfConfig":"179"},{"size":1963,"mtime":1615553936489,"results":"195","hashOfConfig":"181"},{"size":7445,"mtime":1641407312885,"results":"196","hashOfConfig":"181"},{"size":8206,"mtime":1638556867695,"results":"197","hashOfConfig":"181"},{"size":12627,"mtime":1640693261344,"results":"198","hashOfConfig":"179"},{"size":1851,"mtime":1636374470475,"results":"199","hashOfConfig":"179"},{"size":3768,"mtime":1618240925162,"results":"200","hashOfConfig":"179"},{"size":3526,"mtime":1615553539269,"results":"201","hashOfConfig":"179"},{"size":14179,"mtime":1640805538239,"results":"202","hashOfConfig":"179"},{"size":19732,"mtime":1640693262206,"results":"203","hashOfConfig":"179"},{"size":7500,"mtime":1640044117414,"results":"204","hashOfConfig":"179"},{"size":4787,"mtime":1623759416627,"results":"205","hashOfConfig":"179"},{"size":8263,"mtime":1640376061542,"results":"206","hashOfConfig":"181"},{"size":4442,"mtime":1642095720819,"results":"207","hashOfConfig":"179"},{"size":5339,"mtime":1641435728181,"results":"208","hashOfConfig":"181"},{"size":16595,"mtime":1640955400933,"results":"209","hashOfConfig":"179"},{"size":3444,"mtime":1618794737066,"results":"210","hashOfConfig":"181"},{"size":11611,"mtime":1641525646178,"results":"211","hashOfConfig":"179"},{"size":5827,"mtime":1630772415822,"results":"212","hashOfConfig":"181"},{"size":14288,"mtime":1639168655064,"results":"213","hashOfConfig":"181"},{"size":21027,"mtime":1640047600165,"results":"214","hashOfConfig":"181"},{"size":3577,"mtime":1638216706071,"results":"215","hashOfConfig":"179"},{"size":2495,"mtime":1636426177861,"results":"216","hashOfConfig":"179"},{"size":5917,"mtime":1637248672566,"results":"217","hashOfConfig":"179"},{"size":1903,"mtime":1620419316591,"results":"218","hashOfConfig":"179"},{"size":1920,"mtime":1631046580258,"results":"219","hashOfConfig":"179"},{"size":13268,"mtime":1639423755811,"results":"220","hashOfConfig":"179"},{"size":2706,"mtime":1615903181106,"results":"221","hashOfConfig":"181"},{"size":2092,"mtime":1639153573168,"results":"222","hashOfConfig":"179"},{"size":2679,"mtime":1615903258284,"results":"223","hashOfConfig":"181"},{"size":4886,"mtime":1623759416631,"results":"224","hashOfConfig":"179"},{"size":3461,"mtime":1618762822178,"results":"225","hashOfConfig":"179"},{"size":7065,"mtime":1637529574689,"results":"226","hashOfConfig":"181"},{"size":13919,"mtime":1642462995644,"results":"227","hashOfConfig":"179"},{"size":8184,"mtime":1640035641411,"results":"228","hashOfConfig":"181"},{"size":1667,"mtime":1618668363266,"results":"229","hashOfConfig":"179"},{"size":1902,"mtime":1618765403958,"results":"230","hashOfConfig":"179"},{"size":3530,"mtime":1615903238512,"results":"231","hashOfConfig":"181"},{"size":1888,"mtime":1615903277736,"results":"232","hashOfConfig":"179"},{"size":2185,"mtime":1615903223171,"results":"233","hashOfConfig":"179"},{"size":2155,"mtime":1615903290204,"results":"234","hashOfConfig":"181"},{"size":8714,"mtime":1632955598458,"results":"235","hashOfConfig":"179"},{"size":3933,"mtime":1615903165052,"results":"236","hashOfConfig":"179"},{"size":308,"mtime":1620419249556,"results":"237","hashOfConfig":"181"},{"size":8809,"mtime":1641342293904,"results":"238","hashOfConfig":"181"},{"size":3156,"mtime":1636376507560,"results":"239","hashOfConfig":"181"},{"size":1512,"mtime":1621942072448,"results":"240","hashOfConfig":"179"},{"size":2909,"mtime":1623325332201,"results":"241","hashOfConfig":"179"},{"size":1890,"mtime":1617307853955,"results":"242","hashOfConfig":"179"},{"size":1488,"mtime":1615570828178,"results":"243","hashOfConfig":"181"},{"size":2558,"mtime":1632437638257,"results":"244","hashOfConfig":"181"},{"size":6951,"mtime":1633111764778,"results":"245","hashOfConfig":"179"},{"size":8575,"mtime":1637088138786,"results":"246","hashOfConfig":"179"},{"size":3054,"mtime":1617713108483,"results":"247","hashOfConfig":"179"},{"size":8255,"mtime":1636386913627,"results":"248","hashOfConfig":"179"},{"size":2162,"mtime":1623759416604,"results":"249","hashOfConfig":"179"},{"size":3519,"mtime":1621942072458,"results":"250","hashOfConfig":"179"},{"size":1203,"mtime":1621942072461,"results":"251","hashOfConfig":"179"},{"size":1463,"mtime":1621942072460,"results":"252","hashOfConfig":"181"},{"size":801,"mtime":1620952815188,"results":"253","hashOfConfig":"181"},{"size":1910,"mtime":1620952815187,"results":"254","hashOfConfig":"181"},{"size":4181,"mtime":1637096985533,"results":"255","hashOfConfig":"179"},{"size":3676,"mtime":1638548826173,"results":"256","hashOfConfig":"179"},{"size":801,"mtime":1620952815194,"results":"257","hashOfConfig":"179"},{"size":1830,"mtime":1637185550291,"results":"258","hashOfConfig":"181"},{"size":12379,"mtime":1640484583266,"results":"259","hashOfConfig":"179"},{"size":1696,"mtime":1636907976934,"results":"260","hashOfConfig":"181"},{"size":10368,"mtime":1640802299563,"results":"261","hashOfConfig":"179"},{"size":22460,"mtime":1640376040344,"results":"262","hashOfConfig":"179"},{"size":9590,"mtime":1640706077810,"results":"263","hashOfConfig":"181"},{"size":2111,"mtime":1640034365065,"results":"264","hashOfConfig":"181"},{"size":671,"mtime":1620399298712,"results":"265","hashOfConfig":"179"},{"size":5279,"mtime":1637349084064,"results":"266","hashOfConfig":"179"},{"size":3388,"mtime":1618668410879,"results":"267","hashOfConfig":"179"},{"size":4907,"mtime":1639362418717,"results":"268","hashOfConfig":"179"},{"size":7264,"mtime":1638798326560,"results":"269","hashOfConfig":"179"},{"size":8355,"mtime":1640775170385,"results":"270","hashOfConfig":"181"},{"size":5275,"mtime":1636767929430,"results":"271","hashOfConfig":"179"},{"size":3791,"mtime":1636908047683,"results":"272","hashOfConfig":"179"},{"size":4775,"mtime":1639502954575,"results":"273","hashOfConfig":"181"},{"size":3450,"mtime":1640031375064,"results":"274","hashOfConfig":"179"},{"size":3386,"mtime":1618668400552,"results":"275","hashOfConfig":"179"},{"size":3893,"mtime":1639507687106,"results":"276","hashOfConfig":"181"},{"size":3501,"mtime":1618668437732,"results":"277","hashOfConfig":"181"},{"size":5532,"mtime":1639504028734,"results":"278","hashOfConfig":"179"},{"size":3468,"mtime":1637348355922,"results":"279","hashOfConfig":"181"},{"size":3137,"mtime":1640035550538,"results":"280","hashOfConfig":"179"},{"size":2036,"mtime":1638882908142,"results":"281","hashOfConfig":"179"},{"size":6956,"mtime":1640706105235,"results":"282","hashOfConfig":"179"},{"size":6876,"mtime":1631046566274,"results":"283","hashOfConfig":"179"},{"size":6787,"mtime":1618794829362,"results":"284","hashOfConfig":"179"},{"size":296,"mtime":1618795089593,"results":"285","hashOfConfig":"179"},{"size":6530,"mtime":1639503443733,"results":"286","hashOfConfig":"179"},{"size":5843,"mtime":1621975859523,"results":"287","hashOfConfig":"181"},{"size":2466,"mtime":1639516232392,"results":"288","hashOfConfig":"179"},{"size":1899,"mtime":1618794786478,"results":"289","hashOfConfig":"179"},{"size":7607,"mtime":1640340221794,"results":"290","hashOfConfig":"179"},{"size":2831,"mtime":1631046650468,"results":"291","hashOfConfig":"179"},{"size":1788,"mtime":1638713650346,"results":"292","hashOfConfig":"181"},{"size":2575,"mtime":1615553481891,"results":"293","hashOfConfig":"179"},{"size":1517,"mtime":1615553494489,"results":"294","hashOfConfig":"179"},{"size":1490,"mtime":1615553525148,"results":"295","hashOfConfig":"179"},{"size":4566,"mtime":1616250120792,"results":"296","hashOfConfig":"179"},{"size":5698,"mtime":1642097089153,"results":"297","hashOfConfig":"179"},{"size":3457,"mtime":1639516598397,"results":"298","hashOfConfig":"179"},{"size":3027,"mtime":1641994640341,"results":"299","hashOfConfig":"179"},{"size":6567,"mtime":1642131365016,"results":"300","hashOfConfig":"179"},{"size":5719,"mtime":1642096166826,"results":"301","hashOfConfig":"181"},{"size":1469,"mtime":1641994614554,"results":"302","hashOfConfig":"181"},{"size":6738,"mtime":1640303572914,"results":"303","hashOfConfig":"179"},{"size":1761,"mtime":1639494149393,"results":"304","hashOfConfig":"181"},{"size":358,"mtime":1637420996337,"results":"305","hashOfConfig":"179"},{"size":884,"mtime":1633991479173,"results":"306","hashOfConfig":"181"},{"size":382,"mtime":1622996637032,"results":"307","hashOfConfig":"179"},{"size":1736,"mtime":1639134631370,"results":"308","hashOfConfig":"179"},{"size":1425,"mtime":1639440683822,"results":"309","hashOfConfig":"181"},{"size":1216,"mtime":1620952815183,"results":"310","hashOfConfig":"179"},{"size":2511,"mtime":1640375918996,"results":"311","hashOfConfig":"181"},{"size":2687,"mtime":1628808212491,"results":"312","hashOfConfig":"179"},{"size":3042,"mtime":1641995213923,"results":"313","hashOfConfig":"179"},{"size":1978,"mtime":1633199352643,"results":"314","hashOfConfig":"179"},{"size":3883,"mtime":1642099390251,"results":"315","hashOfConfig":"179"},{"size":2922,"mtime":1642165324775,"results":"316","hashOfConfig":"179"},{"size":5438,"mtime":1635100063140,"results":"317","hashOfConfig":"181"},{"size":1328,"mtime":1633085293552,"results":"318","hashOfConfig":"179"},{"size":474,"mtime":1622036129632,"results":"319","hashOfConfig":"179"},{"size":355,"mtime":1633485110524,"results":"320","hashOfConfig":"179"},{"size":1100,"mtime":1633488489888,"results":"321","hashOfConfig":"181"},{"size":8524,"mtime":1633559913453,"results":"322","hashOfConfig":"179"},{"size":7158,"mtime":1633991332802,"results":"323","hashOfConfig":"181"},{"size":1395,"mtime":1633913305657,"results":"324","hashOfConfig":"179"},{"size":1258,"mtime":1622036129626,"results":"325","hashOfConfig":"181"},{"size":882,"mtime":1622036129629,"results":"326","hashOfConfig":"181"},{"size":1466,"mtime":1633488546275,"results":"327","hashOfConfig":"179"},{"size":2329,"mtime":1633991326468,"results":"328","hashOfConfig":"181"},{"size":2542,"mtime":1633991313607,"results":"329","hashOfConfig":"179"},{"size":459,"mtime":1633442653944,"results":"330","hashOfConfig":"179"},{"size":4452,"mtime":1633991303945,"results":"331","hashOfConfig":"179"},{"size":1908,"mtime":1633485290908,"results":"332","hashOfConfig":"179"},{"size":595,"mtime":1633300524844,"results":"333","hashOfConfig":"181"},{"size":894,"mtime":1633432653617,"results":"334","hashOfConfig":"181"},{"size":3749,"mtime":1633991167618,"results":"335","hashOfConfig":"179"},{"size":11602,"mtime":1632937045508,"results":"336","hashOfConfig":"179"},{"size":232,"mtime":1632692487717,"results":"337","hashOfConfig":"181"},{"size":3065,"mtime":1633016592631,"results":"338","hashOfConfig":"179"},{"size":6000,"mtime":1633991152770,"results":"339","hashOfConfig":"179"},{"size":6783,"mtime":1633991126776,"results":"340","hashOfConfig":"179"},{"size":2428,"mtime":1632939554689,"results":"341","hashOfConfig":"179"},{"size":1068,"mtime":1633045922202,"results":"342","hashOfConfig":"179"},{"size":342,"mtime":1636376410851,"results":"343","hashOfConfig":"179"},{"size":4819,"mtime":1639506819638,"results":"344","hashOfConfig":"179"},{"size":863,"mtime":1636825732900,"results":"345","hashOfConfig":"179"},{"size":2758,"mtime":1637078832200,"results":"346","hashOfConfig":"181"},{"size":17485,"mtime":1640615051165,"results":"347","hashOfConfig":"179"},{"size":2938,"mtime":1638290834284,"results":"348","hashOfConfig":"179"},{"size":1477,"mtime":1638229021762,"results":"349","hashOfConfig":"179"},{"size":17295,"mtime":1640707114050,"results":"350","hashOfConfig":"179"},{"size":10370,"mtime":1639442230679,"results":"351","hashOfConfig":"179"},{"size":5368,"mtime":1642463563676,"results":"352","hashOfConfig":"179"},{"size":8053,"mtime":1639442239955,"results":"353","hashOfConfig":"179"},{"size":2837,"mtime":1639439473903,"results":"354","hashOfConfig":"179"},{"size":17336,"mtime":1641498916388,"results":"355","hashOfConfig":"181"},{"size":5496,"mtime":1642463555304,"results":"356","hashOfConfig":"179"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},"162wsrg",{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},"1cny99d",{"filePath":"363","messages":"364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"366"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"371","messages":"372","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"362"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"362"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"362"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"408"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"418"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"362"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"427"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"430"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"434"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"362"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"362"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"362"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"460","messages":"461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"362"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"362"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"473"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"362"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"408"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"408"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"362"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"473"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"362"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"362"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"408"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"473"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"533"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"544","messages":"545","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"427"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"362"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"554","messages":"555","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"362"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"559","messages":"560","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"561","messages":"562","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"362"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"366"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"576","messages":"577","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"362"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"581","messages":"582","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"366"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"362"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"596","messages":"597","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"362"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"603","messages":"604","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"605","messages":"606","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"366"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"616"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"619","messages":"620","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"621","messages":"622","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"533"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"362"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"473"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"644","messages":"645","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"646","messages":"647","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"362"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"362"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"366"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"362"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"366"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"675","messages":"676","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"677","messages":"678","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"533"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"682","messages":"683","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"362"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"695","messages":"696","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"362"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"533"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"362"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"362"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"366"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"721","messages":"722","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"362"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"727"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"533"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"733","messages":"734","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"736"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"739","messages":"740","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"741","messages":"742","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"743","messages":"744","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"434"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"533"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"434"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"362"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"759","messages":"760","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"761","messages":"762","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763","usedDeprecatedRules":"408"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"533"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"366"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],["780","781"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["782","783"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",["784","785","786"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Amplify, { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport awsconfig from \"./aws-exports\";\r\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\r\n\r\nimport { listAuthSettingss } from \"./graphql/queries\";\r\nimport { updateAuthSettings } from \"./graphql/mutations\";\r\n\r\nimport { CustomerProvider } from \"./dataContexts/CustomerContext\";\r\nimport { OrdersProvider } from \"./dataContexts/OrdersContext\";\r\nimport { ProductsProvider } from \"./dataContexts/ProductsContext\";\r\nimport { StandingProvider } from \"./dataContexts/StandingContext\";\r\nimport { HoldingProvider } from \"./dataContexts/HoldingContext\";\r\nimport { CurrentDataProvider } from \"./dataContexts/CurrentDataContext\";\r\nimport { ToggleProvider } from \"./dataContexts/ToggleContext\";\r\nimport { RoutesProvider } from \"./dataContexts/RoutesContext\";\r\n\r\nimport AppRoutes from \"./AppRoutes\";\r\nimport NavCustomers from \"./NavCustomers\";\r\nimport Nav from \"./Nav\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { sortAtoZDataByIndex } from \"./helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst NavLock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 100;\r\n`;\r\n\r\nconst BodyLock = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  top: 100px;\r\n`;\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nfunction App() {\r\n  const [users, setUsers] = useState([]);\r\n  const [user, setUser] = useState();\r\n  const [authType, setAuthType] = useState();\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let currentUser = Auth.currentAuthenticatedUser().then((use) =>\r\n      setUser(use.attributes.sub)\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let copyOfUsers = clonedeep(users);\r\n    let id;\r\n    let authT\r\n    console.log(copyOfUsers);\r\n    if (user) {\r\n      for (let cop of copyOfUsers) {\r\n        if (cop.sub === user) {\r\n          id = cop.id;\r\n          authT = cop.authType\r\n        }\r\n      }\r\n    }\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      tempPassword: null,\r\n      tempUsername: null,\r\n    };\r\n    setAuthType(authT)\r\n    console.log(authT)\r\n    updateTemps(updateDetails);\r\n  }, [users, user]);\r\n\r\n  const updateTemps = async (details) => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(updateAuthSettings, { input: { ...details } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching User List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(listAuthSettingss, {\r\n          limit: \"1000\",\r\n        })\r\n      );\r\n      const userList = userData.data.listAuthSettingss.items;\r\n      sortAtoZDataByIndex(userList, \"businessName\");\r\n      let noDelete = userList.filter((user) => user[\"_deleted\"] !== true);\r\n\r\n      setUsers(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <NavLock>\r\n      {authType === \"bpbadmin\" ? <Nav /> : <NavCustomers />}\r\n      </NavLock>\r\n\r\n      <RoutesProvider>\r\n        <ToggleProvider>\r\n          <CustomerProvider>\r\n            <ProductsProvider>\r\n              <OrdersProvider>\r\n                <StandingProvider>\r\n                  <HoldingProvider>\r\n                    <CurrentDataProvider>\r\n                      <BodyLock>\r\n                       \r\n                       <AppRoutes authType={authType} userNum={user}/>\r\n                      </BodyLock>\r\n                    </CurrentDataProvider>\r\n                  </HoldingProvider>\r\n                </StandingProvider>\r\n              </OrdersProvider>\r\n            </ProductsProvider>\r\n          </CustomerProvider>\r\n        </ToggleProvider>\r\n      </RoutesProvider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n",["787","788"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",["789","790","791","792","793"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",["794","795","796","797"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["798","799","800"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["801","802","803","804","805","806"],"import React, { useState, createContext, useContext, useEffect } from \"react\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { listOrders } from \"../graphql/queries\";\r\nimport { createOrder } from \"../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { ProductsContext } from \"./ProductsContext\";\r\nimport { ToggleContext } from \"./ToggleContext\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\n\r\nexport const OrdersContext = createContext();\r\n\r\nexport const OrdersProvider = (props) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [recentOrders, setRecentOrders] = useState([]);\r\n  const [originalOrders, setOriginalOrders] = useState([]);\r\n  const [ordersLoaded, setOrdersLoaded] = useState(false);\r\n\r\n  return (\r\n    <OrdersContext.Provider\r\n      value={{\r\n        orders,\r\n        setOrders,\r\n        recentOrders,\r\n        setRecentOrders,\r\n        originalOrders,\r\n        setOriginalOrders,\r\n        ordersLoaded,\r\n        setOrdersLoaded,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </OrdersContext.Provider>\r\n  );\r\n};\r\n\r\nexport const OrdersLoad = () => {\r\n  const { orders, setOrders, setOrdersLoaded } = useContext(OrdersContext);\r\n  const { readyForSq, setReadyForSq, setReadyForWeekly } =\r\n    useContext(ToggleContext);\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  useEffect(() => {\r\n    buildOrders();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (orders.length > 0 && products.length > 0) {\r\n      setReadyForSq(true);\r\n    }\r\n  }, [orders, products]);\r\n\r\n  const buildOrders = async () => {\r\n    let ord = await fetchOrders();\r\n    setOrders(ord);\r\n    setOrdersLoaded(true);\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n\r\n   \r\n    try {\r\n      const ordData = await API.graphql(\r\n        graphqlOperation(listOrders, {\r\n          limit: \"5000\"\r\n         \r\n        })\r\n      );\r\n      const ordList = ordData.data.listOrders.items;\r\n\r\n      let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n      let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n      sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n\r\n      return sortedData;\r\n    } catch (error) {\r\n      console.log(\"error on fetching Orders List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSq = async (ords) => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n\r\n      for (let newOrd of newOrders) {\r\n        let qty = Number(newOrd[\"qty\"]);\r\n        let dt = new Date().toISOString();\r\n        let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n        delivDate = delivDate.split(\"-\");\r\n        delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n        let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n        let rt;\r\n        let custName = newOrd[\"custName\"];\r\n\r\n        let prodName =\r\n          products[\r\n            products.findIndex((prod) => newOrd[\"item\"].includes(prod.squareID))\r\n          ][\"prodName\"];\r\n\r\n        if (newOrd[\"route\"] === locIDBPBN) {\r\n          rt = \"atownpick\";\r\n        } else {\r\n          rt = \"slopick\";\r\n        }\r\n\r\n        let itemToAdd = {\r\n          SO: qty,\r\n          qty: qty,\r\n          timeStamp: dt,\r\n          isWhole: false,\r\n          PONote: \"paid\",\r\n          delivDate: delivDate,\r\n          custName: custName,\r\n          prodName: prodName,\r\n          route: rt,\r\n        };\r\n\r\n        // Search orders for object, if doesn't exist, add:\r\n        let ind = ords.findIndex(\r\n          (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n        );\r\n\r\n        if (ind === -1) {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n            );\r\n            ords.push(itemToAdd);\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n      setOrders(ords);\r\n    } catch {\r\n      console.log(\"Request Failed\");\r\n    }\r\n  };\r\n\r\n  return <React.Fragment></React.Fragment>;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["807"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["808","809"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["810"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n         \r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",["811"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",["812"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["813"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js",["814"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["815"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n",["816","817"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["818"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js",["819"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport ToolBar from \"../logistics/ByRoute/Parts/ToolBar\"\r\nimport { confirmDialog } from 'primereact/confirmdialog'\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposePastryPrep from \"./Utils/composePastryPrep\";\r\n\r\nimport { updateProduct, updateInfoQBAuth, createInfoQBAuth } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nlet today = todayPlus()[0];\r\n\r\nconst compose = new ComposePastryPrep();\r\n\r\nfunction BPBNSetOut({ loc }) {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [setOut, setSetOut] = useState([]);\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [pastryPrep, setPastryPrep] = useState([]);\r\n  const [almondPrep, setAlmondPrep] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"todayPlus\",todayPlus()[0])\r\n    if (todayPlus()[0] === '2021-12-24'){\r\n      setDelivDate('2021-12-25')\r\n    } else {\r\n      setDelivDate(todayPlus()[0])\r\n    }\r\n  },[])\r\n\r\n  \r\n  useEffect(() => {\r\n    confirmDialog({\r\n      message:\r\n        \"Click YES to confirm these setout numbers will be used.\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      accept: () => setoutTimeInStone(),\r\n    });\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherPastryPrepInfo(database)\r\n     \r\n\r\n    );\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const setoutTimeInStone = async () => {\r\n    \r\n      let addDetails = {\r\n        id: delivDate+loc+\"setoutTime\",\r\n        infoContent: \"updated\",\r\n        infoName: loc+\"setoutTime\"\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateInfoQBAuth, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createInfoQBAuth, { input: { ...addDetails } })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on updating info\", error);\r\n        }\r\n      }\r\n    \r\n  }\r\n\r\n  const gatherPastryPrepInfo = (database) => {\r\n    let pastryPrepData = compose.returnPastryPrepBreakDown(\r\n      delivDate,\r\n      database,\r\n      loc\r\n    );\r\n    setSetOut(pastryPrepData.setOut);\r\n    setPastryPrep(pastryPrepData.pastryPrep);\r\n    setAlmondPrep(pastryPrepData.almondPrep);\r\n  };\r\n\r\n  const checkDateAlert = (delivDate) => {\r\n    if (delivDate !== today) {\r\n      confirmDialog({\r\n        message:\r\n          \"This is not the list for TODAY.  Are you sure this is the one you want to print?\",\r\n        header: \"Confirmation\",\r\n        icon: \"pi pi-exclamation-triangle\",\r\n        accept: () => exportPastryPrepPdf(),\r\n      });\r\n    } else {\r\n      exportPastryPrepPdf();\r\n    }\r\n  };\r\n\r\n  const exportPastryPrepPdf = async () => {\r\n    \r\n    for (let set of setOut) {\r\n      let addDetails = {\r\n        id: set.id,\r\n        prepreshaped: set.qty,\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n      }\r\n    }\r\n    let finalY;\r\n    let pageMargin = 60;\r\n    let tableToNextTitle = 12;\r\n    let titleToNextTable = tableToNextTitle + 4;\r\n    let tableFont = 11;\r\n    let titleFont = 14;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(\r\n      pageMargin,\r\n      20,\r\n      `${loc} Pastry Prep ${convertDatetoBPBDate(delivDate)}`\r\n    );\r\n\r\n    finalY = 20;\r\n\r\n    doc.setFontSize(titleFont);\r\n    doc.text(pageMargin, finalY + tableToNextTitle, `Set Out`);\r\n\r\n    doc.autoTable({\r\n      body: setOut,\r\n      margin: pageMargin,\r\n      columns: [\r\n        { header: \"Frozen Croissants\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\",\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.autoTable({\r\n      body: pastryPrep,\r\n      margin: pageMargin,\r\n      columns: [\r\n        { header: \"Pastry Prep\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\",\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    });\r\n\r\n    if (loc === \"Prado\") {\r\n      finalY = doc.previousAutoTable.finalY;\r\n\r\n      doc.autoTable({\r\n        body: almondPrep,\r\n        margin: pageMargin,\r\n        columns: [\r\n          { header: \"Almond Prep\", dataKey: \"prodNick\" },\r\n          { header: \"Qty\", dataKey: \"qty\" },\r\n        ],\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n        theme: \"grid\",\r\n        headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n      });\r\n    }\r\n\r\n    doc.save(`SetOut${loc}${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n     \r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={e => checkDateAlert(delivDate)}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print {loc} Prep List\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>\r\n          {loc} PASTRY PREP {convertDatetoBPBDate(delivDate)}\r\n        </h1>\r\n        <ToolBar delivDate={delivDate} setDelivDate={setDelivDate} />\r\n        <div>{header}</div>\r\n        \r\n        <h3>Set Out</h3>\r\n        <DataTable value={setOut} className=\"p-datatable-sm\">\r\n          <Column field=\"prodNick\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Qty\"></Column>\r\n        </DataTable>\r\n\r\n        <h3>Pastry Prep</h3>\r\n        <DataTable value={pastryPrep} className=\"p-datatable-sm\">\r\n          <Column field=\"prodNick\" header=\"Product\"></Column>\r\n          <Column field=\"qty\" header=\"Qty\"></Column>\r\n        </DataTable>\r\n        {loc === \"Prado\" && (\r\n          <React.Fragment>\r\n            <h3>Almonds</h3>\r\n            <DataTable value={almondPrep} className=\"p-datatable-sm\">\r\n              <Column field=\"prodNick\" header=\"Product\"></Column>\r\n              <Column field=\"qty\" header=\"Qty\"></Column>\r\n            </DataTable>\r\n          </React.Fragment>\r\n        )}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNSetOut;\r\n",["820","821"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoBake.js",["822"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js",["823"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport ToolBar from \"../logistics/ByRoute/Parts/ToolBar\"\r\nimport { confirmDialog } from 'primereact/confirmdialog'\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeWhatToMake from \"./Utils/composeWhatToMake\";\r\nimport ComposePastryPrep from \"./Utils/composePastryPrep\";\r\nimport ComposeWhatToPrep from \"./Utils/composeWhatToPrep\";\r\n\r\nimport { updateProduct,updateInfoQBAuth } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeWhatToMake();\r\nconst composePastry = new ComposePastryPrep();\r\nconst composePrep = new ComposeWhatToPrep();\r\n\r\nlet finalY;\r\nlet pageMargin = 20;\r\nlet tableToNextTitle = 4;\r\nlet titleToNextTable = tableToNextTitle + 2;\r\nlet tableFont = 11;\r\nlet titleFont = 14;\r\n\r\nconst buildTable = (title, doc, body, col) => {\r\n  \r\n  doc.autoTable({\r\n    theme: \"grid\",\r\n    headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    body: body,\r\n    margin: pageMargin+25,\r\n    columns: col,\r\n    startY: finalY + titleToNextTable,\r\n    styles: { fontSize: tableFont },\r\n  });\r\n};\r\n\r\nfunction BPBNBaker2() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [setOut, setSetOut] = useState([]);\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [whatToMake, setWhatToMake] = useState([]);\r\n  const [pastryPrep, setPastryPrep] = useState([]);\r\n  const [infoWrap, setInfoWrap] = useState({});\r\n  const [whatToPrep, setWhatToPrep] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(\"todayPlus\",todayPlus()[0])\r\n    if (todayPlus()[0] === '2021-12-24'){\r\n      setDelivDate('2021-12-25')\r\n    } else {\r\n      setDelivDate(todayPlus()[0])\r\n    }\r\n  },[])\r\n\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherWhatToPrepInfo(database)\r\n    );\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherWhatToPrepInfo = (database) => {\r\n    let whatToPrepData = composePrep.returnWhatToPrepBreakDown(delivDate, database);\r\n    setWhatToPrep(whatToPrepData.whatToPrep);\r\n  };\r\n\r\n  useEffect(() => {\r\n    confirmDialog({\r\n      message:\r\n        \"Click YES to confirm these setout numbers will be used.\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      accept: () => setoutTimeInStone(),\r\n    });\r\n  },[])\r\n  \r\n\r\n  useEffect(() => {\r\n    setInfoWrap({\r\n      whatToPrep: whatToPrep,\r\n    });\r\n  }, [whatToPrep]);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherWhatToMakeInfo(database)\r\n    );\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherWhatToMakeInfo = (database) => {\r\n    let whatToMakeData = compose.returnWhatToMakeBreakDown(database,delivDate);\r\n    setWhatToMake(whatToMakeData.whatToMake);\r\n  };\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherPastryPrepInfo(database)\r\n    );\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const setoutTimeInStone = async () => {\r\n    \r\n    let addDetails = {\r\n      id: \"CarltonsetoutTime\",\r\n      infoContent: \"updated\",\r\n      infoName: \"CarltonsetoutTime\"\r\n    };\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateInfoQBAuth, { input: { ...addDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on updating info\", error);\r\n    }\r\n  \r\n}\r\n\r\n  const gatherPastryPrepInfo = (database) => {\r\n    let pastryPrepData = composePastry.returnPastryPrepBreakDown(\r\n      delivDate,\r\n      database,\r\n      \"Carlton\"\r\n    );\r\n    setSetOut(pastryPrepData.setOut);\r\n    setPastryPrep(pastryPrepData.pastryPrep);\r\n  };\r\n\r\n  const exportPastryPrepPdf = async (infoWrap) => {\r\n    setIsLoading(true)\r\n    \r\n    for (let set of setOut) {\r\n      let addDetails = {\r\n        id: set.id,\r\n        prepreshaped: set.qty,\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n      }\r\n    }\r\n   \r\n    for (let make of whatToMake) {\r\n      let addDetails = {\r\n        id: make.id,\r\n        prepreshaped: make.qty,\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n      }\r\n    }\r\n\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `WhatToMake ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n\r\n    doc.setFontSize(titleFont);\r\n   \r\n    doc.autoTable({\r\n      theme: 'grid',\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n      body: whatToMake,\r\n      margin: pageMargin,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Weight\", dataKey: \"weight\" },\r\n        { header: \"Dough\", dataKey: \"dough\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY + tableToNextTitle;\r\n\r\n  let col = [\r\n    { header: \"Product\", dataKey: \"prodName\" },\r\n    { header: \"Qty\", dataKey: \"qty\" },\r\n  ];\r\n  buildTable('',doc, infoWrap.whatToPrep, col);\r\n\r\n  finalY = doc.previousAutoTable.finalY + tableToNextTitle;\r\n\r\n    doc.autoTable({\r\n      body: setOut,\r\n      margin: pageMargin+25,\r\n      columns: [\r\n        { header: \"Set Out\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\",\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    });\r\n    /*\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.autoTable({\r\n      body: pastryPrep,\r\n      margin: pageMargin+25,\r\n      columns: [\r\n        { header: \"Pastry Prep\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\"\r\n    });\r\n    */\r\n    doc.save(`WhatToShape${delivDate}.pdf`);\r\n    setIsLoading(false)\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={e => exportPastryPrepPdf(infoWrap)}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Prep List\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>What To Shape {convertDatetoBPBDate(delivDate)}</h1>\r\n        <ToolBar delivDate={delivDate} setDelivDate={setDelivDate} />\r\n        <div>{header}</div>\r\n\r\n        <h3>What To Shape</h3>\r\n        <DataTable value={whatToMake} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"weight\" header=\"Weight\"></Column>\r\n          <Column field=\"dough\" header=\"Dough\"></Column>\r\n          <Column field=\"qty\" header=\"Qty\"></Column>\r\n        </DataTable>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNBaker2;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["824","825","826","827","828","829"],"import React, { useEffect, useContext, useRef } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\nimport CustomerGroup from \"./Parts/CurrentOrderInfoParts/CustomerGroup\";\r\n\r\nimport { confirmDialog } from \"primereact/confirmdialog\";\r\nimport { Toast } from \"primereact/toast\";\r\n\r\nimport { todayPlus, checkDeadlineStatus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData, checkForUpdates } from \"../../helpers/databaseFetchers\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n`;\r\n\r\nconst MainWindowPhone = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 5px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 5px 10px;\r\n  color: rgb(66, 97, 201);\r\n`;\r\n\r\nconst DateStyle = styled.div`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 5px 10px;\r\n`;\r\n\r\nfunction Ordering() {\r\n  const {\r\n    reload,\r\n    setIsLoading,\r\n    setModifications,\r\n    ordersHasBeenChanged,\r\n    setOrdersHasBeenChanged,\r\n    deadlinePassed,\r\n    setDeadlinePassed,\r\n  } = useContext(ToggleContext);\r\n\r\n  const {\r\n    authType,\r\n    largeScreen,\r\n    database,\r\n    setDatabase,\r\n    delivDate,\r\n    setDelivDate\r\n    \r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n \r\n  const toast = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let deadlineStatus = false;\r\n    if (authType !== \"bpbadmin\") {\r\n      deadlineStatus = checkDeadlineStatus(delivDate);\r\n    }\r\n    setDeadlinePassed(deadlineStatus);\r\n\r\n    if (deadlineStatus) {\r\n      confirmDialog({\r\n        message:\r\n          \"6:00 PM order deadline for tomorrow has passed.  Next available order date is \" +\r\n          todayPlus()[2] +\r\n          \". Continue?\",\r\n        header: \"Confirmation\",\r\n        icon: \"pi pi-exclamation-triangle\",\r\n        accept: () => setDelivDate(todayPlus()[2]),\r\n      });\r\n    }\r\n  }, [delivDate, authType]);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading)\r\n      .then((database) =>\r\n        checkForUpdates(\r\n          database,\r\n          ordersHasBeenChanged,\r\n          setOrdersHasBeenChanged,\r\n          delivDate,\r\n          setIsLoading\r\n        )\r\n      )\r\n      .then((database) => setDatabase(database));\r\n    setModifications(false);\r\n  }, [reload]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const fullScreen = (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <Calendar />\r\n      </BasicContainer>\r\n      <Toast ref={toast} />\r\n      <BasicContainer>\r\n        {authType === \"bpbadmin\" ? <OrderCommandLine /> : \"\"}\r\n        <CurrentOrderInfo\r\n         \r\n        />\r\n        <CurrentOrderList />\r\n        {!deadlinePassed || authType === \"bpbadmin\" ? (\r\n          <OrderEntryButtons />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const smallScreen = (\r\n    <React.Fragment>\r\n      <Title>Back Porch Bakery</Title>\r\n      <inlineContainer>\r\n        <DateStyle>\r\n          <CustomerGroup\r\n            \r\n          />{\" \"}\r\n          order for:\r\n        </DateStyle>\r\n        <Calendar />\r\n      </inlineContainer>\r\n      <BasicContainer>\r\n        <Toast ref={toast} />\r\n        {authType === \"bpbadmin\" ? <OrderCommandLine /> : \"\"}\r\n        <CurrentOrderInfo\r\n          \r\n        />\r\n        <CurrentOrderList />\r\n        <OrderEntryButtons />\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {largeScreen ? (\r\n        <MainWindow>{fullScreen}</MainWindow>\r\n      ) : (\r\n        <MainWindowPhone>{smallScreen}</MainWindowPhone>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n",["830","831"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js",[],["832","833"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js",["834","835","836","837"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeCroixInfo from \"./BPBSWhatToMakeUtils/composeCroixInfo\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\n\r\nimport { updateProduct } from \"../../graphql/mutations\";\r\nimport { confirmDialog } from 'primereact/confirmdialog'\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1.2fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1.2fr 1.4fr 1fr;\r\n  column-gap: 5px;\r\n  row-gap: 10px;\r\n  padding: 0px;\r\n`;\r\n\r\nconst BorderBox = styled.div`\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: grey;\r\n`;\r\n\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\n\r\nconst compose = new ComposeCroixInfo();\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction CroixToMake() {\r\n  const { setIsLoading, setReload } = useContext(ToggleContext);\r\n\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [mod, setMod] = useState(false);\r\n  const [modType, setModType] = useState();\r\n  const [openingCount, setOpeningCount] = useState();\r\n  const [makeCount, setMakeCount] = useState([]);\r\n  const [closingCount, setClosingCount] = useState();\r\n  const [projectionCount, setProjectionCount] = useState();\r\n  const [products, setProducts] = useState();\r\n  const [sheetTotal, setSheetTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let ct = 0\r\n    for (let make of makeCount){\r\n      ct += Number(make.qty)\r\n    }\r\n    setSheetTotal(ct)\r\n  },[makeCount])\r\n\r\n  \r\n  useEffect(() => {\r\n    confirmDialog({\r\n      message:\r\n        \"Please make sure that MAKE TODAY numbers at the end of the day reflect what actually got made to today so tomorrow's count will be accurate.  Muchas Gracis!.\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      \r\n    });\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => {\r\n      gatherCroixInfo(database);\r\n    });\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherCroixInfo = (database) => {\r\n    let makeData = compose.returnCroixBreakDown(database, delivDate);\r\n    setOpeningCount(makeData.openingCount);\r\n    setMakeCount(makeData.makeCount);\r\n    setClosingCount(makeData.closingCount);\r\n    console.log(\"prj\",makeData.projectionCount)\r\n    setProjectionCount(makeData.projectionCount);\r\n    setProducts(makeData.products);\r\n  };\r\n\r\n  const openingHeader = <div>Opening Freezer</div>;\r\n\r\n  const makeHeader = <div>MAKE TODAY</div>;\r\n\r\n  const closeHeader = <div>Closing Freezer</div>;\r\n\r\n  const projectionHeader = <div>EOD Projections</div>;\r\n\r\n  const Toggle = (e, which) => {\r\n   \r\n    let newMod = clonedeep(mod);\r\n    if (newMod === true) {\r\n      submitNewNumbers(which);\r\n    }\r\n    \r\n    setMod(!newMod);\r\n    setModType(which);\r\n  };\r\n\r\n  const submitNewNumbers = async (which) => {\r\n  \r\n    let prodToMod = clonedeep(products);\r\n    if (which === \"opening\") {\r\n      setIsLoading(true);\r\n      for (let op of openingCount) {\r\n        for (let prod of prodToMod) {\r\n         \r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerCount: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n    if (which === \"sheets\") {\r\n      setIsLoading(true);\r\n      for (let op of makeCount) {\r\n        for (let prod of prodToMod) {\r\n         \r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n            console.log(\"makeCount\",makeCount)\r\n            console.log(\"projection\",projectionCount)\r\n            // find product in projectionCount\r\n            let projInd = projectionCount.findIndex(proj => proj.prod === op.prod)\r\n            let freezerClosing = projectionCount[projInd].today+Number(op.total)\r\n            // set freezerClosing to proj.today\r\n\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              sheetMake: op.qty,\r\n              freezerClosing: freezerClosing\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n      setIsLoading(false);\r\n    }\r\n    if (which === \"closing\") {\r\n      setIsLoading(true);\r\n      for (let op of openingCount) {\r\n        for (let prod of prodToMod) {\r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerCount: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const modifySheets = (\r\n    <React.Fragment>\r\n      <TwoColumnGrid>\r\n      <div>{sheetTotal}</div>\r\n      <Button onClick={(e) => Toggle(e, \"sheets\")}>\r\n      {mod && modType === \"sheets\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n      </TwoColumnGrid>\r\n      \r\n    </React.Fragment>\r\n    \r\n  );\r\n  const modifyOpening = (\r\n    <Button onClick={(e) => Toggle(e, \"opening\")}>\r\n      {mod && modType === \"opening\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n  );\r\n  const modifyClosing = (\r\n    <Button onClick={(e) => Toggle(e, \"closing\")}>\r\n      {mod && modType === \"closing\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n  );\r\n\r\n  const handleInput = (e, which) => {\r\n  \r\n    return (\r\n      <InputText\r\n        className=\"p-inputtext-sm\"\r\n        placeholder={e.qty}\r\n        style={{\r\n          width: \"60px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"1.2em\"\r\n\r\n        }}\r\n        onKeyUp={(e2) => e2.code === \"Enter\" && setInfo(e2, which, e.prod)}\r\n        onBlur={(e2) => setInfo(e2, which, e.prod)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const numHolder = (e, which, day) => {\r\n\r\n    \r\n    let num = e.qty;\r\n    if (which === \"proj\") {\r\n      let indToMake = makeCount.findIndex(pro => pro.prod === e.prod)\r\n      let toMake = makeCount[indToMake].total\r\n      num = day+toMake;\r\n\r\n    }\r\n    let col = \"#E3F2FD\"\r\n    if (num<0){\r\n      col = \"#FFC0CB\"\r\n    }\r\n    return (\r\n      <InputText\r\n        className=\"p-inputtext-sm\"\r\n        disabled\r\n        placeholder={num}\r\n        style={{\r\n          width: \"80px\",\r\n          backgroundColor: col,\r\n          color: \"#000000\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"1.2em\"\r\n\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const setInfo = (e, which, prod) => {\r\n    if (which === \"opening\") {\r\n      \r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      for (let op of cloneOpeningCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingCount.findIndex((cl) => cl.prod === op.prod);\r\n          op.qty = e.target.value;\r\n          cloneClosingCount[ind].qty =\r\n            cloneClosingCount[ind].fixed + Number(e.target.value) - cloneOpeningCount[ind].fixed\r\n        }\r\n      }\r\n      setClosingCount(cloneClosingCount)\r\n      setOpeningCount(cloneOpeningCount);\r\n    }\r\n    if (which === \"sheets\") {\r\n     \r\n      let ind2 = products.findIndex((pro) => pro.forBake === prod);\r\n      let cloneMakeCount = clonedeep(makeCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      for (let op of cloneMakeCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingCount.findIndex((cl) => cl.prod === op.prod);\r\n          op.qty = e.target.value;\r\n          cloneClosingCount[ind].qty =\r\n            cloneClosingCount[ind].fixed +\r\n            products[ind2].batchSize * Number(e.target.value) -\r\n            products[ind2].batchSize * cloneMakeCount[ind].fixed;\r\n          cloneMakeCount[ind].total = products[ind2].batchSize * Number(e.target.value)\r\n        }\r\n      }\r\n      setClosingCount(cloneClosingCount);\r\n      setMakeCount(cloneMakeCount);\r\n    }\r\n    if (which === \"closing\") {\r\n     \r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n     \r\n      for (let op of cloneOpeningCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingCount.findIndex((cl) => cl.prod === op.prod);\r\n          op.qty =\r\n            cloneOpeningCount[ind].fixed -\r\n            cloneClosingCount[ind].qty +\r\n            Number(e.target.value);\r\n          cloneClosingCount[ind].qty = Number(e.target.value)\r\n        }\r\n      }\r\n      setClosingCount(cloneClosingCount)\r\n      setOpeningCount(cloneOpeningCount);\r\n    }\r\n  };\r\n\r\n  \r\n  const exportListPdf = () => {\r\n    let finalY;\r\n    let pageMargin = 40;\r\n    let tableFont = 11;\r\n    let titleFont = 14;\r\n\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `What to Shape ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 10;\r\n\r\n    doc.setFontSize(titleFont);\r\n\r\n    doc.autoTable({\r\n      body: makeCount,\r\n      margin: pageMargin,\r\n      columns: [\r\n        { header: \"Croix\", dataKey: \"prod\" },\r\n        { header: \"Sheets\", dataKey: \"qty\" },\r\n        { header: \"Total\", dataKey: \"total\" },\r\n        { header: \"Shaper 1\"},\r\n        { header: \"Shaper 2\"},\r\n        { header: \"Shaper 3\"},\r\n\r\n      ],\r\n      startY: finalY + 20,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\",\r\n      headStyles: { fillColor: \"#dddddd\", textColor: \"#111111\" },\r\n    });\r\n\r\n    doc.save(`WhatToMake${delivDate}.pdf`);\r\n  };\r\n\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={(e) => exportListPdf()}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Croix Shape List\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>Croissant Production {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n        <TwoColumnGrid>\r\n          <ThreeColumnGrid>\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"openingCount\"\r\n                value={openingCount}\r\n                header={openingHeader}\r\n                //footer={modifyOpening}\r\n              >\r\n                <Column\r\n                  style={{\r\n                    width: \"90px\",\r\n                    backgroundColor: \"#E3F2FD\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                  field=\"prod\"\r\n                  header=\"Product\"\r\n                ></Column>\r\n                {mod && modType === \"opening\" ? (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"opening\"\r\n                    body={(e) => handleInput(e, \"opening\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    id=\"qty\"\r\n                    header=\"Qty\"\r\n                    body={(e) => numHolder(e, \"opening\")}\r\n                  ></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"makeCount\"\r\n                value={makeCount}\r\n                header={makeHeader}\r\n                footer={modifySheets}\r\n              >\r\n                {mod && modType === \"sheets\" && (\r\n                  <Column\r\n                    style={{\r\n                      width: \"90px\",\r\n                      backgroundColor: \"#E3F2FD\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                    field=\"prod\"\r\n                    header=\"Prod\"\r\n                  ></Column>\r\n                )}\r\n                {mod && modType === \"sheets\" ? (\r\n                  <Column\r\n                    field=\"qty\"\r\n                    header=\"Sheets\"\r\n                    id=\"sheets\"\r\n                    body={(e) => handleInput(e, \"sheets\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    id=\"qty\"\r\n                    header=\"Sheets\"\r\n                    body={(e) => numHolder(e, \"sheets\")}\r\n                  ></Column>\r\n                )}\r\n\r\n                {((!mod && modType === \"sheets\") || modType !== \"sheets\") && (\r\n                  <Column field=\"total\" header=\"Total\"></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"closingCount\"\r\n                value={projectionCount}\r\n                header={closeHeader}\r\n                //footer={modifyClosing}\r\n              >\r\n                {mod && modType === \"closing\" && (\r\n                  <Column\r\n                    style={{\r\n                      width: \"90px\",\r\n                      backgroundColor: \"#E3F2FD\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                    field=\"prod\"\r\n                    header=\"Prod\"\r\n                  ></Column>\r\n                )}\r\n                {mod && modType === \"closing\" ? (\r\n                  <Column\r\n                    field=\"qty\"\r\n                    header=\"Qty\"\r\n                    id=\"closing\"\r\n                    body={(e) => handleInput(e, \"closing\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"closing\"\r\n                    body={(e) => numHolder(e, \"proj\", e.today)}\r\n                  ></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n          </ThreeColumnGrid>\r\n          <BorderBox>\r\n            <DataTable value={projectionCount} header={projectionHeader}>\r\n              <Column\r\n                style={{\r\n                  width: \"90px\",\r\n                  backgroundColor: \"#E3F2FD\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                field=\"prod\"\r\n                header=\"Product\"\r\n              ></Column>\r\n              <Column\r\n                header=\"TOM\"\r\n                body={(e) => numHolder(e, \"proj\", e.tom)}\r\n              ></Column>\r\n              <Column\r\n                header=\"2DAY\"\r\n                body={(e) => numHolder(e, \"proj\", e[\"2day\"])}\r\n              ></Column>\r\n              <Column\r\n                header=\"3DAY\"\r\n                body={(e) => numHolder(e, \"proj\", e[\"3day\"])}\r\n              ></Column>\r\n              <Column\r\n                header=\"4DAY\"\r\n                body={(e) => numHolder(e, \"proj\", e[\"4day\"])}\r\n              ></Column>\r\n            </DataTable>\r\n          </BorderBox>\r\n        </TwoColumnGrid>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CroixToMake;\r\n",["838","839"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js",["840"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction DoughCalc() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default DoughCalc;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js",["841"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js",["842","843"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeAMPastry from \"./utils/composeAMPastry\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeAMPastry();\r\n\r\nfunction AMPastry() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [AMPastry, setAMPastry] = useState([]);\r\n  const [AMOthers, setAMOthers] = useState([]);\r\n\r\n  const [columnsAMPastry, setColumnsAMPastry] = useState([]);\r\n  const [columnsAMOthers, setColumnsAMOthers] = useState([]);\r\n\r\n\r\n  let delivDate = todayPlus()[0];\r\n\r\n  const createDynamic = (cols) => {\r\n    const dynamicColumns = cols.map((col, i) => {\r\n      return (\r\n        <Column\r\n          npmkey={col.field}\r\n          field={col.field}\r\n          header={col.header}\r\n          key={col.field}\r\n          style={col.width}\r\n        />\r\n      );\r\n    });\r\n    return dynamicColumns;\r\n  };\r\n\r\n  const dynamicColumnsAMPastry = createDynamic(columnsAMPastry);\r\n  const dynamicColumnsAMOthers = createDynamic(columnsAMOthers)\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherMakeInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherMakeInfo = (database) => {\r\n    let AMPastryData = compose.returnAMPastryBreakDown(delivDate, database);\r\n    setAMPastry(AMPastryData.AMPastry);\r\n    setColumnsAMPastry(AMPastryData.columnsAMPastry);\r\n    setAMOthers(AMPastryData.AMOthers);\r\n    setColumnsAMOthers(AMPastryData.columnsAMOthers)\r\n  };\r\n\r\n  const exportAMPastryStickers = () => {\r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ind = 0;\r\n    for (let past of AMPastry) {\r\n      ind += 1;\r\n      doc.setFontSize(14);\r\n      doc.text(`${past.customer} ${convertDatetoBPBDate(delivDate)}`, 0.1, 0.36);\r\n\r\n      doc.setFontSize(12);\r\n      past.pl && doc.text(`Pl: ${past.pl}`, 0.2, 0.72);\r\n      past.ch && doc.text(`Ch: ${past.ch}`, 0.2, 0.98);\r\n      past.pg && doc.text(`Pg: ${past.pg}`, 0.2, 1.24);\r\n      past.sf && doc.text(`Sf: ${past.sf}`, 0.2, 1.5);\r\n\r\n      past.al && doc.text(`Al: ${past.al}`, 1.46, 0.72);\r\n      past.mb && doc.text(`Mb: ${past.mb}`, 1.46, 0.98);\r\n      past.unmb && doc.text(`UnMb: ${past.unmb}`, 1.46, 1.24);\r\n      past.mini && doc.text(`mini: ${past.mini}`, 1.46, 1.5);\r\n      past.sand && doc.text(`sand: ${past.sand}`, 1.46, 1.76);\r\n\r\n      past.bb && doc.text(`BB: ${past.bb}`, 2.72, 0.72);\r\n      past.sco && doc.text(`Sco: ${past.sco}`, 2.72, 0.98);\r\n      past.bd && doc.text(`Bd: ${past.bd}`, 2.72, 1.24);\r\n      past.brn && doc.text(`Brn: ${past.brn}`, 2.72, 1.5);\r\n      if (ind<AMPastry.length){\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n    }\r\n    }\r\n\r\n    doc.save(`TestSticker.pdf`);\r\n  };\r\n\r\n  const exportAMPastryPDF = () => {\r\n    let finalY;\r\n    let pageMargin = 10;\r\n    let tableToNextTitle = 12;\r\n    let titleToNextTable = tableToNextTitle + 4;\r\n    let tableFont = 11;\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `AM Pastry ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n    if (columnsAMPastry.length > 0) {\r\n      doc.autoTable({\r\n        body: AMPastry,\r\n        columns: columnsAMPastry,\r\n        startY: finalY + titleToNextTable,\r\n        styles: { fontSize: tableFont },\r\n      });\r\n    }\r\n\r\n    doc.save(`AMPastry${delivDate}.pdf`);\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryStickers}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry Stickers\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportAMPastryPDF}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print AM Pastry List\r\n        </Button>\r\n\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>AM Pastry Pack {convertDatetoBPBDate(delivDate)}</h1>\r\n        <div>{header}</div>\r\n\r\n        {AMPastry.length > 0 && (\r\n          <React.Fragment>\r\n            <h3>AM Pastry</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMPastry}\r\n            >\r\n              {dynamicColumnsAMPastry}\r\n            </DataTable>{\" \"}\r\n            {/*\r\n            <h3>AM Others</h3>\r\n            <DataTable\r\n              className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n              value={AMOthers}\r\n            >\r\n              {dynamicColumnsAMOthers}\r\n            </DataTable>{\" \"} */}\r\n          </React.Fragment>\r\n        )}\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AMPastry;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js",["844","845","846"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"../BPBNProd/Utils/composeDough\";\r\nimport ComposeWhatToMake from \"./BPBSWhatToMakeUtils/composeWhatToMake\"\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ButtonStyle = styled.button`\r\n  border: 0;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  font-size: 20px;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n  &:hover {\r\n    background-color: #3E8E41;\r\n  }\r\n  &:active {\r\n    background-color: #3E8E41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n  `\r\n\r\n\r\nconst addUp = (acc, val) => {\r\n  return acc + val;\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\nconst shortage = new ComposeWhatToMake()\r\n\r\nfunction BPBSMixPocket() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n\r\n  const [ pockets, setPockets ] = useState([])\r\n  const [ doughs, setDoughs ] = useState([]);\r\n  const [ doughComponents, setDoughComponents ] = useState([]);\r\n  const [ shortWeight, setShortWeight ] = useState(0);\r\n\r\n  let twoDay  = todayPlus()[2];\r\n\r\n  useEffect(() => {\r\n    console.log(\"todayPlus\",todayPlus()[0])\r\n    if (todayPlus()[0] === '2021-12-24'){\r\n      setDelivDate('2021-12-25')\r\n    } else {\r\n      setDelivDate(todayPlus()[0])\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    try{\r\n      console.log(\"pockets\",pockets)\r\n      let total = 0\r\n      for (let pock of pockets){\r\n        total = total + pock.pocketSize*pock.qty\r\n      }\r\n      console.log(\"Total\",total.toFixed(2))\r\n\r\n      let newDoughs = clonedeep(doughs)\r\n      let ind = doughs.findIndex(dg => dg.doughName === \"French\")\r\n      console.log(\"ind\",ind)\r\n      \r\n      newDoughs[ind].needed = total.toFixed(2)\r\n      console.log(\"newDoughs\",newDoughs)\r\n      setDoughs(newDoughs)\r\n\r\n\r\n    }catch{}\r\n  },[pockets])\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database,delivDate));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  \r\n  const gatherDoughInfo = (database,delivDate) => {\r\n    let doughData = compose.returnDoughBreakDown(database, \"Prado\",delivDate);\r\n    let shortageData = shortage.getYoullBeShort(database,delivDate)\r\n    setDoughs(doughData.doughs);\r\n    console.log(\"doughs\",doughData)\r\n    setDoughComponents(doughData.doughComponents);\r\n    setPockets(doughData.pockets)\r\n    let short = 0\r\n    console.log(\"shortage\",shortageData)\r\n    for (let data of shortageData){\r\n      console.log(\"data\",data)\r\n      let shortNum\r\n      data.short>0 ? shortNum = data.short : shortNum = 0\r\n      short = (short + (Number(data.pocketWeight)*Number(shortNum)))\r\n    }\r\n    setShortWeight(short.toFixed(2))\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const handleClick = (e, amt, mixNumber, oldDough, neededDough) => {\r\n    let oldStuff\r\n    console.log(\"oldDough\",oldDough)\r\n    console.log(\"amt\",amt*.2)\r\n    if (oldDough<(amt*.2)){\r\n      oldStuff = oldDough\r\n    } else {\r\n      oldStuff = amt*.2\r\n    }\r\n    console.log(\"oldStuff\",oldStuff)\r\n    amt = amt - oldStuff\r\n    amt = amt/mixNumber\r\n    let oldStuffDiv = oldStuff/mixNumber\r\n    console.log(\"oldStuffDiv\",oldStuffDiv)\r\n    let doughName = e.target.id.split(\"_\")[0];\r\n    let components = doughComponents.filter((dgh) => dgh.dough === doughName);\r\n    let wetWeight = Number(\r\n      doughs[doughs.findIndex((dgh) => dgh.doughName === doughName)].hydration\r\n    );\r\n    let wetList = components\r\n      .filter((dgh) => dgh.componentType === \"wet\")\r\n      .map((it) => it.amount);\r\n    let wetTotals;\r\n    wetList.length > 0 ? (wetTotals = wetList.reduce(addUp)) : (wetTotals = 0);\r\n    let dryList = components\r\n      .filter((dgh) => dgh.componentType === \"dry\")\r\n      .map((it) => it.amount);\r\n    let dryTotals;\r\n    dryList.length > 0 ? (dryTotals = dryList.reduce(addUp)) : (dryTotals = 0);\r\n    let levList = components\r\n      .filter((dgh) => dgh.componentType === \"lev\")\r\n      .map((it) => it.amount);\r\n    let levTotals;\r\n    levList.length > 0 ? (levTotals = levList.reduce(addUp)) : (levTotals = 0);\r\n    let dryplusList = components\r\n      .filter((dgh) => dgh.componentType === \"dryplus\")\r\n      .map((it) => it.amount);\r\n    let dryplusTotals;\r\n    dryplusList.length > 0\r\n      ? (dryplusTotals = dryplusList.reduce(addUp))\r\n      : (dryplusTotals = 0);\r\n    let postList = components\r\n      .filter((dgh) => dgh.componentType === \"post\")\r\n      .map((it) => it.amount);\r\n    let postTotals;\r\n    postList.length > 0\r\n      ? (postTotals = postList.reduce(addUp))\r\n      : (postTotals = 0);\r\n    let dryWeight =\r\n      (100 / (100 + wetWeight + levTotals + dryplusTotals + postTotals)) * amt;\r\n\r\n    \r\n    \r\n    const doc = new jsPDF({\r\n      orientation: \"l\",\r\n      unit: \"in\",\r\n      format: [2, 4],\r\n    });\r\n\r\n    let ct = 0.7;\r\n    let dryFilt = components.filter((dgh) => dgh.componentType === \"dry\");\r\n    if (dryFilt.length > 0) {\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Dry`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      for (let item of dryFilt) {\r\n\r\n        if (((item.amount / dryTotals) * dryWeight)>50){\r\n          let itemAmount = ((item.amount / dryTotals) * dryWeight)\r\n          let bags = Math.floor(itemAmount/50)\r\n          item.amount = dryTotals * ((dryWeight-(50 * bags))/dryWeight)\r\n          doc.text(`50 lb. bag ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / dryTotals) * dryWeight).toFixed(2)}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let dryplusFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        dgh.componentName !== \"Salt\" &&\r\n        dgh.componentName !== \"Yeast\"\r\n    );\r\n    if (dryplusFilt.length > 0) {\r\n      for (let item of dryplusFilt) {\r\n        \r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let wetFilt = components.filter((dgh) => dgh.componentType === \"wet\");\r\n    if (wetFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Wet`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of wetFilt) {\r\n        \r\n        if (((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))>30){\r\n          let itemAmount = ((item.amount / wetTotals) * (wetWeight * dryWeight * 0.01))\r\n          let bags = Math.floor(itemAmount/30)\r\n          item.amount = wetTotals * (((wetWeight* dryWeight * 0.01)-(30 * bags))/(wetWeight* dryWeight * 0.01))\r\n          doc.text(`30 lb. buckets ${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${bags}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        \r\n        ct += 0.24;\r\n        }\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(\r\n          `${((item.amount / wetTotals) * wetWeight * dryWeight * 0.01).toFixed(\r\n            2\r\n          )}`,\r\n          0.3,\r\n          ct\r\n        );\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let levNameList = Array.from(\r\n      new Set(\r\n        components\r\n          .filter((com) => com.componentType === \"lev\")\r\n          .map((it) => it.componentName)\r\n      )\r\n    );\r\n    for (let lev of levNameList) {\r\n      let levFilt = doughComponents.filter((dgh) => dgh.dough === lev);\r\n\r\n      let levList = doughComponents\r\n        .filter((dgh) => dgh.dough === lev)\r\n        .map((it) => it.amount);\r\n      let levTotals;\r\n      levList.length > 0\r\n        ? (levTotals = levList.reduce(addUp))\r\n        : (levTotals = 0);\r\n\r\n      let levPercent =\r\n        components[components.findIndex((comp) => comp.componentName === lev)]\r\n          .amount * 0.01;\r\n    \r\n      if (levFilt.length > 0) {\r\n        doc.addPage({\r\n          format: [2, 4],\r\n          orientation: \"l\",\r\n        });\r\n        doc.setFontSize(14);\r\n        doc.text(`${doughName} - ${lev}`, 0.2, 0.36);\r\n        doc.setFontSize(10)\r\n        doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n        doc.setFontSize(12);\r\n        let ct = 0.7;\r\n        for (let item of levFilt) {\r\n          doc.text(`${item.componentName}`, 1.2, ct);\r\n          doc.text(\r\n            `${((item.amount / levTotals) * levPercent * dryWeight).toFixed(\r\n              2\r\n            )}`,\r\n            0.3,\r\n            ct\r\n          );\r\n          doc.text(`lb.`, 0.8, ct);\r\n          ct += 0.24;\r\n        }\r\n      }\r\n    }\r\n    let postFilt = components.filter((dgh) => dgh.componentType === \"post\");\r\n    if (postFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} - Add ins`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of postFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n\r\n    let saltyeastFilt = components.filter(\r\n      (dgh) =>\r\n        dgh.componentType === \"dryplus\" &&\r\n        (dgh.componentName === \"Salt\" ||\r\n        dgh.componentName === \"Yeast\")\r\n    );\r\n\r\n    \r\n    console.log(\"salty\",saltyeastFilt)\r\n    if (saltyeastFilt.length > 0) {\r\n      doc.addPage({\r\n        format: [2, 4],\r\n        orientation: \"l\",\r\n      });\r\n      doc.setFontSize(14);\r\n      doc.text(`${doughName} (Old Dough ${oldStuffDiv.toFixed(0)} lb.)`, 0.2, 0.36);\r\n      doc.setFontSize(10)\r\n      doc.text(`${mixNumber} x ${amt.toFixed(2)} lb. Batch`,2.6,.36)\r\n\r\n      doc.setFontSize(12);\r\n      let ct = 0.7;\r\n      for (let item of saltyeastFilt) {\r\n        doc.text(`${item.componentName}`, 1.2, ct);\r\n        doc.text(`${(item.amount * dryWeight * 0.01).toFixed(2)}`, 0.3, ct);\r\n        doc.text(`lb.`, 0.8, ct);\r\n        ct += 0.24;\r\n      }\r\n    }\r\n    if (doughName === \"French\"){\r\n    doc.addPage({\r\n      format: [2, 4],\r\n      orientation: \"l\",\r\n    });\r\n    ct = 0.7;\r\n    \r\n    for (let item of pockets){\r\n\r\n      let pan\r\n    let per\r\n    let extra\r\n    if (item.pocketSize < 1.25){\r\n      per = 16\r\n    }\r\n    if (item.pocketSize <= .35){\r\n      per = 35\r\n    }\r\n    if (item.pocketSize <= .25){\r\n      per = 48\r\n    }\r\n    pan = Math.floor(item.qty/per)\r\n    extra = item.qty%per\r\n\r\n\r\n      doc.text(`${item.pocketSize}`, 1.2, ct);\r\n        doc.text(`${item.qty}`, 0.3, ct);\r\n        doc.text(`x.`, 0.8, ct);\r\n        doc.text(`${\"(\"+per+\"/pan) \"+pan+\" +\"+extra}`,1.8,ct)\r\n        ct += 0.24;\r\n    }\r\n  }\r\n\r\n    doc.save(`${doughName}Stickers.pdf`);\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    console.log(\"firstE\",e)\r\n    let weight = e.pocketSize\r\n    return (\r\n      <InputText\r\n        id={e.weight}\r\n        key={e.weight}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder=\"0\"\r\n        onKeyUp={(e) => e.code === \"Enter\" ? handlePockChange(e,weight) : ''}\r\n        onBlur={(e) => handlePockChange(e,weight)}\r\n      />\r\n    );\r\n  }\r\n\r\n  const handlePockChange = (e,weight) => {\r\n    let value = e.target.value\r\n    console.log(\"pockets\",pockets)\r\n    let copyPockets = clonedeep(pockets)\r\n    let ind = copyPockets.findIndex(cop => cop.pocketSize === weight)\r\n    console.log(\"ind\",ind)\r\n    if (ind>-1){\r\n      copyPockets[ind].carryPocket = value\r\n    }\r\n    \r\n    setPockets(copyPockets)\r\n  }\r\n\r\n  const handleExtraInput = (e) => {\r\n    console.log(\"firstE\",e)\r\n    let weight = e.pocketSize\r\n    return (\r\n      <InputText\r\n        id={e.weight+\"2\"}\r\n        key={e.weight+\"2\"}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder ={e.late}\r\n        onKeyUp={(e) => e.code === \"Enter\" ? handleExtraPockChange(e,weight) : ''}\r\n        onBlur={(e) => handleExtraPockChange(e,weight)}\r\n      />\r\n    );\r\n  }\r\n\r\n  const handleExtraPockChange = (e,weight) => {\r\n    let value = e.target.value\r\n    let copyPockets = clonedeep(pockets)\r\n    let ind = copyPockets.findIndex(cop => cop.pocketSize === weight)\r\n    console.log(\"ind\",ind)\r\n    if (ind>-1){\r\n      copyPockets[ind].late = Number(value)\r\n     \r\n    }\r\n    setPockets(copyPockets)\r\n  }\r\n\r\n  const calcTotal = (e) => {\r\n    let final = Number(e.qtyFixed)-Number(e.carryPocket)+Number(e.late)\r\n    e.qty = final\r\n    return (<div>{final}</div>)\r\n  }\r\n\r\n  const calcPanTotal = (e) => {\r\n    console.log(\"epan\",e)\r\n    let final = Number(e.qtyFixed)-Number(e.carryPocket)+Number(e.late)\r\n    let pan\r\n    let per\r\n    let extra\r\n    if (e.pocketSize < 1.25){\r\n      per = 16\r\n    }\r\n    if (e.pocketSize <= .35){\r\n      per = 35\r\n    }\r\n    if (e.pocketSize <= .25){\r\n      per = 48\r\n    }\r\n    pan = Math.floor(final/per)\r\n    extra = final%per\r\n  \r\n    return (<div>{\"(\"+per+\"/pan)  \"+pan+\"  +\"+extra}</div>)\r\n  }\r\n\r\n  const handleShortChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      setShortWeight(Number(e.target.value));\r\n    }\r\n  };\r\n\r\n  const handleShortBlur = (e) => {\r\n    setShortWeight(Number(e.target.value));\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>BPBS French Mix/Pocket</h1>\r\n        {doughs.filter(dgh => dgh.doughName===\"French\").map((dough) => (\r\n          <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n            <h3>\r\n              {dough.doughName}: (for tomorrow {dough.needed} lb.) + (short Today {shortWeight} lb.) + (buffer {dough.buffer} lb.) = TOTAL: \r\n              {Number(Number(shortWeight) + Number(dough.needed) + Number(dough.buffer))}\r\n            </h3>\r\n            <ThreeColumnGrid key={dough.id + \"_first2Col\"}>\r\n              <div>\r\n              <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n                  <span>Shortage:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_oldDough\"}\r\n                      id={dough.id + \"_oldDough\"}\r\n                      placeholder={shortWeight}\r\n                      onChange={handleShortChange}\r\n                      onBlur={handleShortBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n                <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n                  <span>Old BULK Dough (to be thrown in mix):</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_oldDough\"}\r\n                      id={dough.id + \"_oldDough\"}\r\n                      placeholder={dough.oldDough}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n                <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n                  <span>Buffer Dough:</span>\r\n                  <div className=\"p-inputgroup\">\r\n                    <InputText\r\n                      key={dough.id + \"_buffer\"}\r\n                      id={dough.id + \"_buffer\"}\r\n                      placeholder={dough.buffer}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <span className=\"p-inputgroup-addon\">lb.</span>\r\n                  </div>\r\n                </TwoColumnGrid>\r\n              </div>\r\n              <ButtonStyle\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) + Number(shortWeight),\r\n                      1,\r\n                      Number(dough.oldDough)\r\n                  )\r\n                }\r\n                label=\"Print 1x Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                1x Mix\r\n              </ButtonStyle>\r\n              <ButtonStyle\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) + Number(shortWeight),\r\n                     \r\n                      2,\r\n                      Number(dough.oldDough)\r\n                      \r\n                  )\r\n                }\r\n                label=\"Print 2x Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                2x Mix\r\n              </ButtonStyle>\r\n              <ButtonStyle\r\n                key={dough.id + \"_print\"}\r\n                id={dough.doughName + \"_print\"}\r\n                onClick={(e) =>\r\n                  handleClick(\r\n                    e,\r\n                    Number(dough.buffer) +\r\n                      Number(dough.needed) + Number(shortWeight),\r\n                      3,\r\n                      Number(dough.oldDough)\r\n                  )\r\n                }\r\n                label=\"Print 3x Set\"\r\n                className=\"p-button-rounded p-button-lg\"\r\n                icon=\"pi pi-print\"\r\n              >\r\n                3x Mix\r\n              </ButtonStyle>\r\n              \r\n            </ThreeColumnGrid>\r\n          </React.Fragment>\r\n        ))}\r\n        <WholeBox>\r\n            <h3>French Pockets</h3>\r\n            <DataTable value={pockets} className=\"p-datatable-sm\">\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Carry Pockets\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n              <Column field=\"pocketSize\" header=\"Pocket Size\"></Column>\r\n              <Column field=\"prepped\" header=\"Pre Shaped\"></Column>\r\n              <Column\r\n              className=\"p-text-center\"\r\n              header=\"Early/Extra\"\r\n              field=\"qty\"\r\n              body={(e) => handleExtraInput(e)}\r\n            ></Column>\r\n            \r\n             \r\n              <Column field=\"qty\" header=\"Pocket Today\" body={(e) => calcTotal(e)}></Column>\r\n              <Column field=\"pan\" header=\"Pan Count\" body={(e) => calcPanTotal(e)}></Column>\r\n            </DataTable>\r\n          </WholeBox>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBSMixPocket;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js",["847"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\SpecialOrders.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\testComponent.js",["848"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js",["849","850","851","852","853","854","855"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["856"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport RouteList from \"./RouteList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditRoutes() {\r\n  const [selectedRoute, setSelectedRoute] = useState();\r\n  const [routes, setRoutes] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          selectedRoute={selectedRoute}\r\n          setSelectedRoute={setSelectedRoute}\r\n          routes={routes}\r\n          setRoutes={setRoutes}\r\n        />\r\n        {selectedRoute && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedRoute={selectedRoute}\r\n                  setSelectedRoute={setSelectedRoute}\r\n                  routes={routes}\r\n                  setRoutes={setRoutes}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedRoute={selectedRoute}\r\n            setSelectedRoute={setSelectedRoute}\r\n            routes={routes}\r\n            setRoutes={setRoutes}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Notes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["857"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ZoneList from \"./ZoneList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedZone, setSelectedZone] = useState(1);\r\n  const [zones, setZones] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList\r\n          selectedZone={selectedZone}\r\n          setSelectedZone={setSelectedZone}\r\n          zones={zones}\r\n          setZones={setZones}\r\n        />\r\n        {selectedZone && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedZone={selectedZone}\r\n                  setSelectedZone={setSelectedZone}\r\n                  zones={zones}\r\n                  setZones={setZones}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedZone={selectedZone}\r\n            setSelectedZone={setSelectedZone}\r\n            zones={zones}\r\n            setZones={setZones}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\WhoShape.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js",["858"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditDoughs() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditDoughs;\r\n",["859","860"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",["861","862","863","864","865","866","867"],"import { convertDatetoBPBDate, todayPlus } from \"../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\n\r\nimport { wildcardRegExp } from \"wildcard-regex\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst today = todayPlus()[0];\r\n\r\nexport const getFullOrders = (delivDate, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n  let buildStand = buildStandList(\"*\", delivDate, standing);\r\n  let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n  return fullOrder;\r\n};\r\n\r\nexport const getFullProdOrders = (delivDate, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n  let buildStand = buildProdStandList(\"*\", delivDate, standing);\r\n  let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n  return fullOrder;\r\n};\r\n\r\nexport const buildCartList = (chosen, delivDate, orders) => {\r\n  let BPBDate = convertDatetoBPBDate(delivDate);\r\n  let filteredOrders = clonedeep(orders);\r\n  let builtCartList = [];\r\n  if (filteredOrders) {\r\n    builtCartList = filteredOrders.filter(\r\n      (order) =>\r\n        order[\"delivDate\"] === BPBDate &&\r\n        order[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n    );\r\n  }\r\n\r\n  return builtCartList;\r\n};\r\n\r\nexport const buildStandList = (chosen, delivDate, standing, route, ponote) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter((stand) =>\r\n    stand[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n\r\n  builtStandList = builtStandList.filter((stand) => stand.isStand === true);\r\n\r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nexport const buildProdStandList = (\r\n  chosen,\r\n  delivDate,\r\n  standing,\r\n  route,\r\n  ponote\r\n) => {\r\n  let filteredStanding = clonedeep(standing);\r\n  let builtStandList = [];\r\n  builtStandList = filteredStanding.filter((standing) =>\r\n    standing[\"custName\"].match(wildcardRegExp(`${chosen}`))\r\n  );\r\n\r\n  let convertedStandList = convertStandListtoStandArray(\r\n    builtStandList,\r\n    delivDate,\r\n    route,\r\n    ponote\r\n  );\r\n  return convertedStandList;\r\n};\r\n\r\nconst convertStandListtoStandArray = (\r\n  builtStandList,\r\n  delivDate,\r\n  route,\r\n  ponote\r\n) => {\r\n  let dateSplit = delivDate.split(\"-\");\r\n  let dayOfWeek = DateTime.local(\r\n    Number(dateSplit[0]),\r\n    Number(dateSplit[1]),\r\n    Number(dateSplit[2])\r\n  ).weekdayShort;\r\n  let convertedStandList = builtStandList.map((order) => ({\r\n    id: null,\r\n    version: order[\"_version\"],\r\n    qty: order[dayOfWeek],\r\n    prodName: order[\"prodName\"],\r\n    custName: order[\"custName\"],\r\n\r\n    isWhole: true,\r\n    delivDate: convertDatetoBPBDate(delivDate),\r\n    timeStamp: order[\"timeStamp\"],\r\n    SO: order[dayOfWeek],\r\n  }));\r\n  return convertedStandList;\r\n};\r\n\r\nexport const compileOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"] &&\r\n        orderList[i][\"delivDate\"] === orderList[j][\"delivDate\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\nexport const compileFullOrderList = (cartList, standList) => {\r\n  let orderList = cartList.concat(standList);\r\n\r\n  // Remove old cart order from orders if it exists\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  sortAtoZDataByIndex(orderList, \"prodName\");\r\n  return orderList;\r\n};\r\n\r\nexport const buildCurrentOrder = (\r\n  chosen,\r\n  delivDate,\r\n  orders,\r\n  standing,\r\n  route,\r\n  ponote\r\n) => {\r\n  let cartList = buildCartList(chosen, delivDate, orders);\r\n  let standList = buildStandList(chosen, delivDate, standing, route, ponote);\r\n  let currentOrderList = compileOrderList(cartList, standList);\r\n  console.log(\"currentOrderList\", currentOrderList);\r\n  return currentOrderList;\r\n};\r\n\r\nexport const testEntryForProduct = (entry) => {\r\n  return /\\d+\\s\\w+/g.test(entry);\r\n};\r\n\r\nexport const createArrayofEnteredProducts = (entry) => {\r\n  const array = [...entry.matchAll(/\\d+\\s\\w+/g)];\r\n  let enteredProducts = array.map((item) => item[0].split(\" \"));\r\n  return enteredProducts;\r\n};\r\n\r\nexport const createOrdersToUpdate = (\r\n  products,\r\n  enteredProducts,\r\n  chosen,\r\n  ponote,\r\n  route,\r\n  orderTypeWhole,\r\n  delivDate\r\n) => {\r\n  let ordersToUpdate = [];\r\n  for (let product of products) {\r\n    for (let enteredItem of enteredProducts) {\r\n      if (product[\"nickName\"] === enteredItem[1]) {\r\n        let newOrder = {\r\n          qty: Number(enteredItem[0]),\r\n          prodName: product[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: route,\r\n          SO: 0,\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n        };\r\n        ordersToUpdate.push(newOrder);\r\n      }\r\n    }\r\n  }\r\n  return ordersToUpdate;\r\n};\r\n\r\nexport const buildOrdersToModify = (\r\n  orders,\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  custOrderList,\r\n  ponote,\r\n  route\r\n) => {\r\n  let ordersToModify = [...orders];\r\n  for (let orderToUpdate of ordersToUpdate) {\r\n    for (let custOrder of custOrderList) {\r\n      if (orderToUpdate[\"prodName\"] === custOrder[\"prodName\"]) {\r\n        let index = ordersToModify.findIndex(\r\n          (order) =>\r\n            order[\"prodName\"] === custOrder[\"prodName\"] &&\r\n            order[\"custName\"] === chosen &&\r\n            order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n        );\r\n        if (index >= 0) {\r\n          ordersToModify[index][\"qty\"] = orderToUpdate[\"qty\"];\r\n        } else {\r\n          orderToUpdate[\"SO\"] = custOrder[\"SO\"];\r\n          orderToUpdate.ponote = ponote;\r\n          orderToUpdate.route = route;\r\n          ordersToModify.push(orderToUpdate);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n\r\nexport const addUpdatesToOrders = (\r\n  chosen,\r\n  delivDate,\r\n  ordersToUpdate,\r\n  ordersToModify\r\n) => {\r\n  for (let ord of ordersToUpdate) {\r\n    let index = ordersToModify.findIndex(\r\n      (order) =>\r\n        order[\"prodName\"] === ord[\"prodName\"] &&\r\n        order[\"custName\"] === chosen &&\r\n        order[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n    if (index < 0) {\r\n      ordersToModify.push(ord);\r\n    }\r\n  }\r\n  return ordersToModify;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\databaseFetchers.js",["868","869","870","871","872","873"],"import {\r\n  listProducts,\r\n  listCustomers,\r\n  listRoutes,\r\n  listStandings,\r\n  listOrders,\r\n  listAltPricings,\r\n  listDoughs,\r\n  listDoughComponents,\r\n  listNotess,\r\n  listZones,\r\n  listInfoQBAuths,\r\n} from \"../graphql/queries\";\r\n\r\nimport {\r\n  createOrder,\r\n  updateDough,\r\n  updateProduct,\r\n  deleteOrder,\r\n} from \"../graphql/mutations\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n  checkDeadlineStatus,\r\n  tomBasedOnDelivDate,\r\n} from \"../helpers/dateTimeHelpers\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { getOrdersList } from \"../pages/BPBNProd/Utils/utils\";\r\nimport ComposeNorthList from \"../pages/logistics/utils/composeNorthList\";\r\nimport ComposeCroixInfo from \"../pages/BPBSProd/BPBSWhatToMakeUtils/composeCroixInfo\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst composer = new ComposeCroixInfo();\r\nconst compose = new ComposeNorthList();\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\nlet yesterday2 = todayPlus()[4];\r\nlet weekAgo = todayPlus()[5];\r\n\r\nlet yesterday = convertDatetoBPBDate(todayPlus()[4]);\r\n\r\nconst buildDateTime = (string) => {\r\n  return DateTime.fromFormat(string, \"yyyy/dd/MM\").toISO();\r\n};\r\n\r\nconst fetchFromDataBase = async (baseFunc, base, limit) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, { limit: limit })\r\n    );\r\n\r\n    const list = data.data[base].items;\r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nconst fetchFromDataBaseWithFilter = async (baseFunc, base, limit, filt) => {\r\n  try {\r\n    const data = await API.graphql(\r\n      graphqlOperation(baseFunc, {\r\n        limit: limit,\r\n        filter: filt,\r\n      })\r\n    );\r\n\r\n    const list = data.data[base].items;\r\n\r\n    return list;\r\n  } catch (error) {\r\n    console.log(`error on fetching ${base} data`, error);\r\n  }\r\n};\r\n\r\nexport const fetchProducts = async () => {\r\n  let prodList = await fetchFromDataBase(listProducts, \"listProducts\", \"500\");\r\n  sortAtoZDataByIndex(prodList, \"prodName\");\r\n  return prodList;\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  let custList = await fetchFromDataBase(listCustomers, \"listCustomers\", \"500\");\r\n  sortAtoZDataByIndex(custList, \"custName\");\r\n  custList = custList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  return custList;\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  let routeList = await fetchFromDataBase(listRoutes, \"listRoutes\", \"500\");\r\n  sortAtoZDataByIndex(routeList, \"routeStart\");\r\n  return routeList;\r\n};\r\n\r\nexport const fetchStanding = async () => {\r\n  let standList = await fetchFromDataBase(\r\n    listStandings,\r\n    \"listStandings\",\r\n    \"5000\"\r\n  );\r\n  let noDelete = standList.filter((stand) => stand[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  return sortedData;\r\n};\r\n\r\nexport const fetchDoughs = async () => {\r\n  let dough = await fetchFromDataBase(listDoughs, \"listDoughs\", \"1000\");\r\n  return dough;\r\n};\r\n\r\nexport const fetchDoughComponents = async () => {\r\n  let doughComponents = await fetchFromDataBase(\r\n    listDoughComponents,\r\n    \"listDoughComponents\",\r\n    \"1000\"\r\n  );\r\n  return doughComponents;\r\n};\r\n\r\nexport const fetchAltPricing = async () => {\r\n  let altPricing = await fetchFromDataBase(\r\n    listAltPricings,\r\n    \"listAltPricings\",\r\n    \"1000\"\r\n  );\r\n  return altPricing;\r\n};\r\n\r\nexport const fetchQBInfo = async () => {\r\n  let QBInfo = await fetchFromDataBase(\r\n    listInfoQBAuths,\r\n    \"listInfoQBAuths\",\r\n    \"1000\"\r\n  );\r\n  return QBInfo;\r\n};\r\n\r\nexport const fetchNotes = async () => {\r\n  let notes = await fetchFromDataBase(listNotess, \"listNotess\", \"1000\");\r\n  return notes;\r\n};\r\n\r\nexport const fetchOrders = async () => {\r\n  let ordList = await fetchFromDataBaseWithFilter(\r\n    listOrders,\r\n    \"listOrders\",\r\n    \"5000\"\r\n  );\r\n  let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n  let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n  sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const promisedData = (setIsLoading) => {\r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchData(setIsLoading));\r\n  });\r\n\r\n  return all;\r\n};\r\n\r\nconst fetchData = async (setIsLoading) => {\r\n  setIsLoading(true);\r\n\r\n  let products = await fetchProducts();\r\n  let customers = await fetchCustomers();\r\n  let routes = await fetchRoutes();\r\n  let standing = await fetchStanding();\r\n  let orders = await fetchOrders();\r\n  let doughs = await fetchDoughs();\r\n  let doughComponents = await fetchDoughComponents();\r\n  let altPricing = await fetchAltPricing();\r\n  let QBInfo = await fetchQBInfo();\r\n  let data = [\r\n    products,\r\n    customers,\r\n    routes,\r\n    standing,\r\n    orders,\r\n    doughs,\r\n    doughComponents,\r\n    altPricing,\r\n    QBInfo,\r\n  ];\r\n  setIsLoading(false);\r\n\r\n  return data;\r\n};\r\n\r\nexport const notesData = (setIsLoading) => {\r\n  const all = new Promise((resolve, reject) => {\r\n    resolve(fetchNotesData(setIsLoading));\r\n  });\r\n\r\n  return all;\r\n};\r\n\r\nconst fetchNotesData = async (setIsLoading) => {\r\n  let notes = await fetchNotes();\r\n\r\n  if (!notes) {\r\n    return [];\r\n  } else {\r\n    return notes;\r\n  }\r\n};\r\n\r\nexport const fetchInfo = async (operation, opString, limit) => {\r\n  try {\r\n    let info = await API.graphql(\r\n      graphqlOperation(operation, {\r\n        limit: limit,\r\n      })\r\n    );\r\n    let list = info.data[opString].items;\r\n\r\n    let noDelete = list.filter((li) => li[\"_deleted\"] !== true);\r\n    return noDelete;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchZones = async () => {\r\n  try {\r\n    let zones = await fetchInfo(listZones, \"listZones\", \"50\");\r\n    return zones;\r\n  } catch (error) {\r\n    console.log(\"error on fetching Zone List\", error);\r\n  }\r\n};\r\n\r\nexport const checkForUpdates = async (\r\n  db,\r\n  ordersHasBeenChanged,\r\n  setOrdersHasBeenChanged,\r\n  delivDate,\r\n  setIsLoading\r\n) => {\r\n  setIsLoading(true)\r\n  const [products, customers, routes, standing, orders, doughs, altPricing] =\r\n    db;\r\n  console.log(\"Checking if Orders Have been changed\");\r\n  let prodsToUpdate = clonedeep(products);\r\n  let doughsToUpdate = clonedeep(doughs);\r\n  let ordersToUpdate = clonedeep(orders);\r\n\r\n  let bakedOrdersListTest = getOrdersList(tomBasedOnDelivDate(today), db);\r\n      bakedOrdersListTest = bakedOrdersListTest.filter((frz) =>\r\n        NorthCroixBakeFilter(frz)\r\n      );\r\n  console.log(\"bake test\",bakedOrdersListTest)\r\n  if (ordersHasBeenChanged) {\r\n    console.log(\"Yes they have! deleting old orders\");\r\n\r\n    let newYest = convertDatetoBPBDate(yesterday2);\r\n    let newWeekAgo = convertDatetoBPBDate(weekAgo);\r\n\r\n    for (let ord of ordersToUpdate) {\r\n      let ind = customers.findIndex((cust) => cust.custName === ord.custName);\r\n      let weeklyCheck = \"daily\";\r\n\r\n      if (ind > -1) {\r\n        weeklyCheck = customers[ind].invoicing;\r\n      }\r\n      if (\r\n        (ord.delivDate === newYest && weeklyCheck === \"daily\") ||\r\n        (ord.delivDate === newWeekAgo && weeklyCheck === \"weekly\")\r\n      ) {\r\n        let ordToUpdate = {\r\n          id: ord.id,\r\n        };\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(deleteOrder, { input: { ...ordToUpdate } })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on deleting Order\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"Yes they have!  Updating freezerNorth numbers\");\r\n\r\n    try {\r\n      let bakedOrdersList = getOrdersList(tomBasedOnDelivDate(today), db);\r\n      bakedOrdersList = bakedOrdersList.filter((frz) =>\r\n        NorthCroixBakeFilter(frz)\r\n      );\r\n\r\n      for (let prod of bakedOrdersList) {\r\n        if (prod.freezerNorthFlag !== tomorrow) {\r\n          prod.freezerNorthFlag = today;\r\n        }\r\n\r\n        if (prod.freezerNorthFlag === today) {\r\n          try {\r\n            let projectionCount = composer.getProjectionCount(db, delivDate);\r\n\r\n            for (let proj of projectionCount) {\r\n              if (prod.forBake === proj.prod) {\r\n                prod.freezerCount = proj.today;\r\n              }\r\n            }\r\n          } catch {}\r\n\r\n          prod.freezerNorth = prod.freezerNorthClosing;\r\n\r\n          let frozenDelivsArray = compose.getFrozensLeavingCarlton(today, db);\r\n          let frozenDeliv;\r\n          try {\r\n            frozenDeliv =\r\n              frozenDelivsArray[\r\n                frozenDelivsArray.findIndex((fr) => fr.prod === prod.prodNick)\r\n              ].qty;\r\n          } catch {\r\n            frozenDeliv = 0;\r\n          }\r\n          let setOutArray = compose.getBakedTomorrowAtCarlton(today, db);\r\n          let setOut;\r\n          try {\r\n            setOut =\r\n              setOutArray[\r\n                setOutArray.findIndex((set) => set.prod === prod.prodNick)\r\n              ].qty;\r\n          } catch {\r\n            setOut = 0;\r\n          }\r\n\r\n          prod.freezerNorthClosing =\r\n            prod.freezerNorthClosing +\r\n            Math.ceil((setOut + frozenDeliv - prod.freezerNorthClosing) / 12) *\r\n              12 -\r\n            setOut -\r\n            frozenDeliv +\r\n            Number(prod.bakeExtra);\r\n\r\n          prod.freezerNorthFlag = tomorrow;\r\n          let prodToUpdate = {\r\n            id: prod.prodID,\r\n            freezerNorth: prod.freezerNorth,\r\n            freezerCount: prod.freezerClosing,\r\n            freezerNorthClosing: prod.freezerNorthClosing,\r\n            freezerNorthFlag: prod.freezerNorthFlag,\r\n            sheetMake: 0,\r\n          };\r\n\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateProduct, { input: { ...prodToUpdate } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    } catch {}\r\n\r\n    console.log(\"Yes they have!  Updating preshaped numbers\");\r\n\r\n    for (let prod of prodsToUpdate) {\r\n      if (prod.updatePreDate !== tomorrow) {\r\n        prod.updatePreDate = today;\r\n      }\r\n      if (prod.updatePreDate === today) {\r\n        prod.preshaped = prod.prepreshaped;\r\n        prod.updatePreDate = tomorrow;\r\n        let prodToUpdate = {\r\n          id: prod.id,\r\n          preshaped: prod.preshaped,\r\n          prepreshaped: prod.prepreshaped,\r\n          updatePreDate: prod.updatePreDate,\r\n        };\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateProduct, { input: { ...prodToUpdate } })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on creating Orders\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"Yes they have!  Updating prepped bucket numbers\");\r\n\r\n    for (let dgh of doughsToUpdate) {\r\n      if (dgh.updatePreBucket !== tomorrow) {\r\n        dgh.updatePreBucket = today;\r\n      }\r\n      if (dgh.updatePreBucket === today) {\r\n        //  need to update correct prebucket set number\r\n        dgh.bucketSets = dgh.preBucketSets;\r\n        dgh.updatePreBucket = tomorrow;\r\n        let doughToUpdate = {\r\n          id: dgh.id,\r\n          bucketSets: dgh.bucketSets,\r\n          preBucketSets: dgh.preBucketSets,\r\n          updatePreBucket: dgh.updatePreBucket,\r\n        };\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateDough, { input: { ...doughToUpdate } })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on creating Orders\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"Yes they have!  Loading new Square Orders in DB\");\r\n\r\n    let ord = await fetchSq(db);\r\n    if (ord) {\r\n      for (let newOrd of ord) {\r\n        let qty = Number(newOrd[\"qty\"]);\r\n        let dt = new Date().toISOString();\r\n        let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n        delivDate = delivDate.split(\"-\");\r\n        delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n        let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n        let rt = \"slopick\";\r\n        let custName = newOrd[\"custName\"];\r\n        let prodName;\r\n        try {\r\n          prodName =\r\n            products[\r\n              products.findIndex((prod) =>\r\n                newOrd[\"item\"].includes(prod.squareID)\r\n              )\r\n            ][\"prodName\"];\r\n        } catch {\r\n          prodName = \"Brownie\";\r\n        }\r\n\r\n        if (newOrd.location === locIDBPBN) {\r\n          rt = \"atownpick\";\r\n        }\r\n\r\n        let itemToAdd = {\r\n          SO: qty,\r\n          qty: qty,\r\n          timeStamp: dt,\r\n          isWhole: false,\r\n          PONote: \"paid\",\r\n          delivDate: delivDate,\r\n          custName: custName,\r\n          prodName: prodName,\r\n          route: rt,\r\n        };\r\n\r\n        let ind = orders.findIndex(\r\n          (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n        );\r\n\r\n        if (ind === -1) {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n            );\r\n\r\n            ordersToUpdate.push(itemToAdd);\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      console.log(\"Square orders did not load\");\r\n    }\r\n  }\r\n  let DBToMod = clonedeep(db);\r\n  DBToMod[4] = ordersToUpdate;\r\n  DBToMod[5] = doughsToUpdate;\r\n  DBToMod[0] = prodsToUpdate;\r\n  setOrdersHasBeenChanged(false);\r\n  setIsLoading(false)\r\n  return DBToMod;\r\n};\r\n\r\nconst fetchSq = async () => {\r\n  try {\r\n    let response = await fetch(\r\n      \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n    );\r\n\r\n    let newOrders = await response.json();\r\n    newOrders = JSON.parse(newOrders);\r\n    return newOrders;\r\n  } catch {\r\n    console.log(\"Error on Square load\");\r\n  }\r\n};\r\n\r\nconst NorthCroixBakeFilter = (ord) => {\r\n  return (\r\n   \r\n    ord.packGroup === \"baked pastries\" &&\r\n    ord.doughType === \"Croissant\"\r\n  );\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js",["874","875"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["876"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listRoutes } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Route List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedRoute(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {routes && (\r\n          <DataTable\r\n            value={routes}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedRoute}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"routeName\"\r\n              header=\"Routes\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["877"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, [zones]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n\r\n      setZones(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedZone(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {zones && (\r\n          <DataTable\r\n            value={zones}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedZone}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"zoneName\"\r\n              header=\"Zones\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["878","879"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n`;\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nconst hubDepart = [{ RouteDepart: \"Prado\" }, { RouteDepart: \"Carlton\" }];\r\n\r\nconst hubArrive = [{ RouteArrive: \"Prado\" }, { RouteArrive: \"Carlton\" }];\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const fullZones = useRef();\r\n\r\n  const [days, setDays] = useState([]);\r\n\r\n  const onDayChange = (e) => {\r\n    let selectedDays = [...days];\r\n    if (e.checked) selectedDays.push(e.value);\r\n    else selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n\r\n    let itemToUpdate = clonedeep(selectedRoute);\r\n    itemToUpdate[\"RouteSched\"] = selectedDays;\r\n    setSelectedRoute(itemToUpdate);\r\n    setDays(selectedDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTarget(selectedRoute[\"RouteServe\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    setDays(selectedRoute[\"RouteSched\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    let parsedZones = [];\r\n    if (fullZones.current) {\r\n      parsedZones = fullZones.current.filter(\r\n        (full) => !selectedRoute[\"RouteServe\"].includes(full)\r\n      );\r\n    }\r\n    setSource(parsedZones);\r\n  }, [selectedRoute]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n      let mappedNoDelete = noDelete.map((item) => item[\"zoneName\"]);\r\n      fullZones.current = mappedNoDelete;\r\n      setSource(mappedNoDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setSelectedRoute(setPickValue(event, selectedRoute));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> Route Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"zoneName\"> Route Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"routeName\"\r\n          placeholder={selectedRoute.routeName}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n          }\r\n          onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeStart\"\r\n            placeholder={selectedRoute.routeStart}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeTime\"\r\n            placeholder={selectedRoute.routeTime}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteDepart\"\r\n            optionLabel=\"RouteDepart\"\r\n            options={hubDepart}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteArrive\"\r\n            optionLabel=\"RouteArrive\"\r\n            options={hubArrive}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"\r\n            }\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <WeekWrapper>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb1\"\r\n            value=\"1\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"1\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb1\" className=\"p-checkbox-label\">\r\n            Sun\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb2\"\r\n            value=\"2\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"2\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb2\" className=\"p-checkbox-label\">\r\n            Mon\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"3\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"3\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Tues\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"4\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"4\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Wed\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"5\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"5\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Thurs\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"6\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"6\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Fri\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"7\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"7\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Sat\r\n          </label>\r\n        </div>\r\n      </WeekWrapper>\r\n      <PickList\r\n        sourceHeader=\"All Zones\"\r\n        targetHeader=\"Served By This Route\"\r\n        source={source}\r\n        target={selectedRoute[\"RouteServe\"]}\r\n        itemTemplate={itemTemplate}\r\n        onChange={onChange}\r\n        sourceStyle={{ height: \"250px\" }}\r\n        targetStyle={{ height: \"250px\" }}\r\n      ></PickList>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseServices.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js",["880","881","882","883","884","885"],"import React, { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { confirmDialog } from \"primereact/confirmdialog\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n  daysOfTheWeek,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport {\r\n  checkQBValidation,\r\n  createQBInvoice,\r\n  getQBInvIDandSyncToken,\r\n  emailQBInvoice,\r\n} from \"../../../helpers/QBHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nlet today = todayPlus()[0];\r\nlet Sunday = daysOfTheWeek()[0];\r\nlet Sunday15due = daysOfTheWeek()[7];\r\n\r\nconst SelectDate = ({ database, dailyInvoices }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const toast = useRef(null);\r\n\r\n  const showSuccess = (invNum) => {\r\n    toast.current.show({\r\n      severity: \"success\",\r\n      summary: \"Invoice created\",\r\n      detail: invNum + \" successfully entered\",\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  const showSuccessEmail = (custo, status) => {\r\n    toast.current.show({\r\n      severity: status === 200 ? \"success\" : \"error\",\r\n      summary: \"Invoice Emailed\",\r\n      detail: \"Invoice Status for \" + custo,\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  const showNoEmail = (custo) => {\r\n    toast.current.show({\r\n      severity: \"warn\",\r\n      summary: \"No Invoice\",\r\n      detail: \"No Invoice for \" + custo,\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  const showDoNotMail = (custo) => {\r\n    toast.current.show({\r\n      severity: \"info\",\r\n      summary: \"No Mail\",\r\n      detail: \"No Mailing Option for \" + custo,\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n  };\r\n\r\n  const createQBItem = (count, ord, qbID) => {\r\n    let lineID = qbID ? delivDate.replace(/-/g, \"\") + qbID : \"0000991234\";\r\n    lineID = lineID.slice(5);\r\n    console.log(\"Id\", lineID);\r\n    return {\r\n      Id: lineID,\r\n\r\n      Description: ord.prodName,\r\n      Amount: Number(ord.rate) * Number(ord.qty),\r\n      DetailType: \"SalesItemLineDetail\",\r\n      SalesItemLineDetail: {\r\n        ServiceDate: delivDate,\r\n\r\n        UnitPrice: ord.rate,\r\n        Qty: ord.qty,\r\n        ItemRef: {\r\n          name: ord.prodName,\r\n          value: qbID,\r\n        },\r\n        ItemAccountRef: {\r\n          name: \"Uncategorized Income\",\r\n        },\r\n        TaxCodeRef: {\r\n          value: \"TAX\",\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  const exportCSV = async (dailyInv, email) => {\r\n    setIsLoading(true);\r\n    let access = await checkQBValidation();\r\n\r\n    /*  \r\n\r\n      Format for dailyInv:\r\n\r\n        custName: \"15 degrees\",\r\n        invNum: \"0104202215c\",\r\n        orders:\r\n          0:\r\n            prodName: \"Blueberry Muffin\",\r\n            qty: 1,\r\n            rate: 1.56\r\n        qbID: \"596\"\r\n\r\n    */\r\n\r\n    for (let inv of dailyInv) {\r\n      /* begin export csv module */\r\n\r\n      try {\r\n        let count = 0;\r\n        let total = 0;\r\n        let custOrders = [];\r\n\r\n        for (let ord of inv.orders) {\r\n          count = count + 1;\r\n          total = total + Number(ord.rate) * Number(ord.qty);\r\n          let thisProd =\r\n            products[\r\n              products.findIndex((pro) => pro.prodName === ord.prodName)\r\n            ];\r\n          let qbID = null;\r\n          try {\r\n            qbID = thisProd.qbID;\r\n          } catch {}\r\n\r\n          let item = createQBItem(count, ord, qbID);\r\n          custOrders.push(item);\r\n        }\r\n\r\n        let TxnDate = delivDate;\r\n        let DocNum = inv.invNum;\r\n        let dueDate = todayPlus()[11]; // relate this to terms\r\n        let custo =\r\n          customers[\r\n            customers.findIndex((cust) => cust.custName === inv.custName)\r\n          ];\r\n        let custInvoicing = custo.invoicing;\r\n        let custNick = custo.nickName;\r\n\r\n        let ponote;\r\n        try {\r\n          ponote =\r\n            orders[\r\n              orders.findIndex(\r\n                (order) =>\r\n                  order.delivDate === convertDatetoBPBDate(delivDate) &&\r\n                  order.custName === inv.custName\r\n              )\r\n            ].PONote;\r\n        } catch {\r\n          ponote = \"na\";\r\n        }\r\n        let addr1;\r\n        let addr2;\r\n        let state;\r\n        let zipCode;\r\n        let terms;\r\n        let custEmail;\r\n\r\n        try {\r\n          addr1 = custo.addr1;\r\n          addr2 = custo.city;\r\n          state = \"CA\";\r\n          zipCode = custo.zip;\r\n          terms = custo.terms;\r\n          custEmail = custo.email;\r\n        } catch {}\r\n\r\n        let custSetup = {\r\n          AllowIPNPayment: false,\r\n          AllowOnlinePayment: false,\r\n          AllowOnlineCreditCardPayment: false,\r\n          AllowOnlineACHPayment: true,\r\n          domain: \"QBO\",\r\n          DocNumber: DocNum,\r\n          sparse: true,\r\n          TxnDate: TxnDate,\r\n          CurrencyRef: {\r\n            value: \"USD\",\r\n            name: \"United States Dollar\",\r\n          },\r\n          Line: custOrders,\r\n          CustomerRef: {\r\n            value: inv.qbID,\r\n            name: inv.custName,\r\n          },\r\n          CustomerMemo: {\r\n            value: ponote,\r\n          },\r\n          BillAddr: {\r\n            Line1: addr1,\r\n            CountrySubDivisionCode: state,\r\n            PostalCode: zipCode,\r\n          },\r\n          ShipAddr: {\r\n            Line1: addr1,\r\n            Line2: addr2,\r\n          },\r\n          FreeFormAddress: true,\r\n\r\n          ClassRef: {\r\n            value: \"3600000000001292604\",\r\n            name: \"Wholesale\",\r\n          },\r\n          SalesTermRef: {\r\n            name: terms,\r\n          },\r\n          DueDate: dueDate,\r\n          ShipDate: TxnDate,\r\n\r\n          BillEmail: {\r\n            Address: custEmail,\r\n          },\r\n        };\r\n        if (custInvoicing !== \"no invoice\") {\r\n          let invID;\r\n\r\n          invID = await getQBInvIDandSyncToken(access, DocNum);\r\n\r\n          if (Number(invID.data.Id) > 0) {\r\n            custSetup.Id = invID.data.Id;\r\n            custSetup.SyncToken = invID.data.SyncToken;\r\n\r\n            if (custInvoicing === \"daily\") {\r\n              custSetup.sparse = false;\r\n            }\r\n          } else {\r\n          }\r\n\r\n          createQBInvoice(access, custSetup);\r\n          showSuccess(DocNum);\r\n        }\r\n      } catch {}\r\n\r\n      /* end csv module */\r\n\r\n      if (email) {\r\n        /* Begin email module */\r\n\r\n        let DocNum = inv.invNum;\r\n        let invID = await getQBInvIDandSyncToken(access, DocNum);\r\n\r\n        if (Number(invID.data.Id) > 0) {\r\n          invID = invID.data.Id;\r\n          let custo =\r\n            customers[\r\n              customers.findIndex((cust) => cust.custName === inv.custName)\r\n            ];\r\n          if (custo.toBeEmailed) {\r\n            let didItEmail = await emailQBInvoice(access, invID);\r\n            showSuccessEmail(inv.custName, didItEmail.status);\r\n          } else {\r\n            showDoNotMail(inv.custName);\r\n          }\r\n        } else {\r\n          showNoEmail(inv.custName);\r\n        }\r\n\r\n        /* end email module */\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const confirm = (e) => {\r\n    confirmDialog({\r\n      message: \"Are all invoices accurate and ready for publishing?\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      accept: () => exportCSV(dailyInvoices, true),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toast ref={toast} />\r\n      <BasicContainer>\r\n        <div className=\"p-field p-col-12 p-md-4\">\r\n          <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n          <Calendar\r\n            id=\"delivDate\"\r\n            placeholder={convertDatetoBPBDate(delivDate)}\r\n            dateFormat=\"mm/dd/yy\"\r\n            onChange={(e) => setDate(e.value)}\r\n          />\r\n        </div>\r\n\r\n        <Button\r\n          className=\"p-button-success\"\r\n          onClick={() => exportCSV(dailyInvoices, false)}\r\n        >\r\n          EXPORT CSV\r\n        </Button>\r\n        <Button\r\n          className=\"p-button-success\"\r\n          onClick={(e) => {\r\n            confirm();\r\n          }}\r\n        >\r\n          Email Invoices\r\n        </Button>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectDate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js",["886","887","888","889"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { createDailyInvoices } from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { calcInvoiceTotal } from \"../helpers\";\r\n\r\nimport { ExpandedBillingRows } from \"./Parts/ExpandedBillingRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nconst BillingGrid = ({\r\n  database,\r\n  nextInv,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  zones,\r\n}) => {\r\n  const [products, customers, routes, standing, orders, d, dd, altPricing] =\r\n    database;\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { setIsLoading, reload, setReload } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (standing && orders && customers && products && altPricing && zones) {\r\n      createDailyInvoices(\r\n        delivDate,\r\n        orders,\r\n        standing,\r\n        customers,\r\n        products,\r\n        altPricing,\r\n        zones\r\n      ).then((data) => setDailyInvoices(data));\r\n    }\r\n  }, [delivDate, database, nextInv, zones]);\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedBillingRows\r\n        data={data}\r\n        dailyInvoices={dailyInvoices}\r\n        setDailyInvoices={setDailyInvoices}\r\n        products={products}\r\n        altPricing={altPricing}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n        delivDate={delivDate}\r\n        orders={orders}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={dailyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"invNum\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n          <Column field=\"invNum\" header=\"Invoice#\" />\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n          <Column header=\"total\" body={(e) => calcInvoiceTotal(e.orders)} />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(\r\n                e.invNum,\r\n                dailyInvoices,\r\n                setDailyInvoices,\r\n                orders,\r\n                delivDate,\r\n                setIsLoading,\r\n                reload,\r\n                setReload\r\n              )\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["890","891"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { listDoughs } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setDropDownValue,\r\n  \r\n} from \"../../../helpers/formHelpers\";\r\n\r\n\r\n\r\n\r\n\r\nconst bakedWheres = [\r\n  { bakedWhere: \"Prado\" },\r\n  { bakedWhere: \"Carlton\" },\r\n  { bakedWhere: \"Mixed\" },\r\n];\r\n\r\nconst Baking = ({ selectedProduct, setSelectedProduct }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n  const [doughTypes, setDoughTypes ] = useState()\r\n  const { products } = useContext(ProductsContext);\r\n\r\n  const [ fullProducts, setFullProducts ] = useState([])\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs();\r\n    setIsLoading(false);\r\n  }, []);\r\n  \r\n  const fetchDoughs = async () => {\r\n    try {\r\n      const doughData = await API.graphql(\r\n        graphqlOperation(listDoughs, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const doughList = doughData.data.listDoughs.items;\r\n      sortAtoZDataByIndex(doughList, \"doughName\");\r\n      let noDelete = doughList.filter((dough) => dough[\"_deleted\"] !== true);\r\n      let doughsToAdd = noDelete.map(no => ({doughType: no.doughName}))\r\n      doughsToAdd.push({doughType: \"NA\"})\r\n      setDoughTypes(doughsToAdd);\r\n  \r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    let stageProducts = products.map(prod => ({depends: prod[\"prodName\"]}))\r\n    stageProducts.push({depends: \"NONE\"})\r\n    \r\n    setFullProducts(stageProducts)\r\n  },[])\r\n  \r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-user\"></i> Baking Info\r\n      </h2>\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"doughType\">Dough Type</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"doughType\"\r\n          optionLabel=\"doughType\"\r\n          options={doughTypes}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.doughType : \"Select Dough Type\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakedWhere\">Baked Where</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"bakedWhere\"\r\n          optionLabel=\"bakedWhere\"\r\n          options={bakedWheres}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.bakedWhere : \"Baked Where\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"leadTime\">Lead Days</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"leadTime\"\r\n          placeholder={selectedProduct.leadTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"readyTime\">Guaranteed Ready (0-24)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"readyTime\"\r\n          placeholder={selectedProduct.readyTime}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"forBake\">Name for Bakers</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"forBake\"\r\n          placeholder={selectedProduct.forBake}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"batchSize\">Batch Size</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"batchSize\"\r\n          placeholder={selectedProduct.batchSize}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"bakeExtra\">Bake Extra</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"bakeExtra\"\r\n          placeholder={selectedProduct.bakeExtra}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"weight\">Dough Weight (lbs.)</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"weight\"\r\n          placeholder={selectedProduct.weight}\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" &&\r\n            setSelectedProduct(setValue(e, selectedProduct))\r\n          }\r\n          onBlur={(e) => setSelectedProduct(fixValue(e, selectedProduct))}\r\n        />\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"depends\">Dependant Product</label>\r\n        </span>\r\n        <Dropdown\r\n          id=\"depends\"\r\n          optionLabel=\"depends\"\r\n          options={fullProducts}\r\n          onChange={(e) =>\r\n            setSelectedProduct(setDropDownValue(e, selectedProduct))\r\n          }\r\n          placeholder={\r\n            selectedProduct ? selectedProduct.depends : \"Depends On\"\r\n          }\r\n        />\r\n      </div>\r\n      <br />\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Baking;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",["892","893"],"import React, { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\n\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  deleteProduct,\r\n  createProduct,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { listInfoQBAuths } from \"../../../graphql/queries\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { checkQBValidation } from \"../../../helpers/QBHelpers\";\r\n\r\nconst axios = require(\"axios\").default;\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  width: 80%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nconst Buttons = ({ selectedProduct, setSelectedProduct }) => {\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  const { setIsLoading } = useContext(ToggleContext)\r\n\r\n  const handleAddProd = () => {\r\n    let prodName;\r\n    let nickName;\r\n    let addDetails;\r\n    let newID;\r\n\r\n    swal(\"Enter Product Name:\", {\r\n      content: \"input\",\r\n    }).then((value) => {\r\n      prodName = value;\r\n      swal(`Enter Nickname for ${value}:`, {\r\n        content: \"input\",\r\n      }).then(async (value) => {\r\n        nickName = value;\r\n        addDetails = {\r\n          qbID: newID,\r\n          prodName: prodName,\r\n          nickName: nickName,\r\n          packGroup: \"\",\r\n          packSize: 0,\r\n          doughType: \"\",\r\n          freezerThaw: false,\r\n          packGroupOrder: 0,\r\n          readyTime: 15,\r\n          bakedWhere: [\"\"],\r\n          wholePrice: 0,\r\n          retailPrice: 0,\r\n          isWhole: false,\r\n          depends: [\"\"],\r\n          weight: 0,\r\n          descrip: \"description\",\r\n          picURL: \"\",\r\n          squareID: \"xxx\",\r\n          currentStock: 0,\r\n          whoCountedLast: \"\",\r\n          eodCount: false,\r\n          forBake: prodName,\r\n          bakeExtra: 0,\r\n          batchSize: 1,\r\n          defaultInclude: false,\r\n          leadTime: 3,\r\n        };\r\n        setIsLoading(true)\r\n        await createQBProd(addDetails).then((data) => {\r\n          newID = data;\r\n        });\r\n\r\n        addDetails.qbID = newID;\r\n\r\n        createProd(addDetails);\r\n        \r\n      });\r\n    });\r\n  };\r\n\r\n  const createQBProd = async (addDetails, SyncToken) => {\r\n    let Sync = \"0\"\r\n    if (SyncToken){\r\n      Sync = SyncToken\r\n    }\r\n    console.log(\"Sync\",Sync)\r\n    let access = await checkQBValidation()\r\n    \r\n\r\n    let QBDetails = {\r\n      Name: addDetails.prodName,\r\n      Active: true,\r\n      FullyQualifiedName: addDetails.prodName,\r\n      Taxable: false,\r\n      UnitPrice: addDetails.wholePrice,\r\n      Type: \"Service\",\r\n      IncomeAccountRef: {\r\n        value: \"56\",\r\n        name: \"Uncategorized Income\",\r\n      },\r\n      PurchaseCost: 0,\r\n      ExpenseAccountRef: {\r\n        value: \"57\",\r\n        name: \"Outside Expense\",\r\n      },\r\n      TrackQtyOnHand: false,\r\n      domain: \"QBO\",\r\n      sparse: false,\r\n      SyncToken: Sync,\r\n    };\r\n\r\n    try{\r\n      if(Number(addDetails.qbID)>0){\r\n        QBDetails.Id = addDetails.qbID\r\n      }\r\n    } catch {}\r\n    console.log(\"QBDetails\",QBDetails)\r\n    let res;\r\n\r\n    try {\r\n      await axios\r\n        .post(\"https://brzqs4z7y3.execute-api.us-east-2.amazonaws.com/done\", {\r\n          accessCode: \"Bearer \" + access,\r\n          itemInfo: QBDetails,\r\n          itemType: \"Item\"\r\n        })\r\n        .then((data) => {\r\n          res = data.data;\r\n        });\r\n    } catch {\r\n      console.log(\"Error creating Item \" + addDetails.prodName);\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  const createProd = async (addDetails) => {\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(createProduct, { input: { ...addDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setIsLoading(false)\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const updateProd = async () => {\r\n    let newID;\r\n    let SyncToken;\r\n    setIsLoading(true)\r\n\r\n    const updateDetails = {\r\n      qbID: selectedProduct[\"qbID\"],\r\n      id: selectedProduct[\"id\"],\r\n      _version: selectedProduct[\"_version\"],\r\n      prodName: selectedProduct[\"prodName\"],\r\n      nickName: selectedProduct[\"nickName\"],\r\n      packGroup: selectedProduct[\"packGroup\"],\r\n      packSize: selectedProduct[\"packSize\"],\r\n      doughType: selectedProduct[\"doughType\"],\r\n      freezerThaw: selectedProduct[\"freezerThaw\"],\r\n      eodCount: selectedProduct[\"eodCount\"],\r\n      packGroupOrder: selectedProduct[\"packGroupOrder\"],\r\n      readyTime: selectedProduct[\"readyTime\"],\r\n      bakedWhere: selectedProduct[\"bakedWhere\"],\r\n      wholePrice: selectedProduct[\"wholePrice\"],\r\n      retailPrice: selectedProduct[\"retailPrice\"],\r\n      isWhole: selectedProduct[\"isWhole\"],\r\n      depends: selectedProduct[\"depends\"],\r\n      weight: selectedProduct[\"weight\"],\r\n      descrip: selectedProduct[\"descrip\"],\r\n      picURL: selectedProduct[\"picURL\"],\r\n      squareID: selectedProduct[\"squareID\"],\r\n      currentStock: selectedProduct[\"currentStock\"],\r\n      whoCountedLast: selectedProduct[\"whoCountedLast\"],\r\n      forBake: selectedProduct[\"forBake\"],\r\n      bakeExtra: selectedProduct[\"bakeExtra\"],\r\n      batchSize: selectedProduct[\"batchSize\"],\r\n      defaultInclude: selectedProduct[\"defaultInclude\"],\r\n      leadTime: selectedProduct[\"leadTime\"],\r\n    };\r\n\r\n    if (!updateDetails.squareID){\r\n      updateDetails.squareID = \"xxx\"\r\n    }\r\n\r\n    console.log(updateDetails);\r\n\r\n    let access = await checkQBValidation()\r\n\r\n    console.log(\"updateQBID\",updateDetails.qbID)\r\n    console.log(access)\r\n    try {\r\n      await axios\r\n        .post(\"https://sntijvwmv6.execute-api.us-east-2.amazonaws.com/done\", {\r\n          accessCode: \"Bearer \" + access,\r\n          itemInfo: updateDetails.qbID,\r\n          itemType: \"Item\"\r\n        })\r\n        .then((data) => {\r\n          SyncToken = data.data;\r\n          console.log(\"data\",data.data)\r\n        });\r\n    } catch {\r\n      console.log(\"Error creating Item \" + updateDetails.prodName);\r\n    }\r\n    \r\n\r\n    await createQBProd(updateDetails, SyncToken).then((data) => {\r\n      newID = data;\r\n    });\r\n\r\n    updateDetails.qbID = newID;\r\n    console.log(\"newID\",newID)\r\n    \r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...updateDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setIsLoading(false)\r\n    } catch (error) {\r\n      console.log(\"error on updating products\", error);\r\n    }\r\n\r\n    swal({\r\n      text: `${updateDetails.prodName} has been updated.`,\r\n      icon: \"success\",\r\n      buttons: false,\r\n      timer: 2000,\r\n    });\r\n    \r\n  };\r\n\r\n  const deleteProdWarn = async () => {\r\n    swal({\r\n      text: \" Are you sure that you would like to permanently delete this product?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteProd();\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteProd = async () => {\r\n    const deleteDetails = {\r\n      id: selectedProduct[\"id\"],\r\n      _version: selectedProduct[\"_version\"],\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(deleteProduct, { input: { ...deleteDetails } })\r\n      );\r\n      setProdLoaded(false);\r\n      setSelectedProduct();\r\n    } catch (error) {\r\n      console.log(\"error on fetching Prod List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonBox>\r\n      <Button\r\n        label=\"Add a Product\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={handleAddProd}\r\n        className={\"p-button-raised p-button-rounded\"}\r\n      />\r\n      <br />\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Update Product\"\r\n            icon=\"pi pi-user-edit\"\r\n            onClick={updateProd}\r\n            className={\"p-button-raised p-button-rounded p-button-success\"}\r\n          />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n      {selectedProduct && (\r\n        <React.Fragment>\r\n          <Button\r\n            label=\"Delete Product\"\r\n            icon=\"pi pi-user-minus\"\r\n            onClick={deleteProdWarn}\r\n            className={\"p-button-raised p-button-rounded p-button-warning\"}\r\n          />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      )}\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeAllOrders.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Buttons.js",[],["894","895"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\NoteList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\notes\\Parts\\Note.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeSpecialOrders.js",["896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\composeProductGrid.js",["921","922","923","924","925","926"],"\r\n\r\nimport { getFullOrders } from \"../../../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  zerosDelivFilter,\r\n  buildGridOrderArray,\r\n} from \"../../../../../helpers/delivGridHelpers\";\r\nimport { sortAtoZDataByIndex, sortZtoADataByIndex } from \"../../../../../helpers/sortDataHelpers\";\r\nimport {\r\n  calcDayNum,\r\n  routeRunsThatDay,\r\n  productCanBeInPlace,\r\n  productReadyBeforeRouteStarts,\r\n  customerIsOpen,\r\n} from \"./utils\";\r\n\r\n\r\n\r\nconst addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n        for (let rte of routes) {\r\n          for (let grd of prodGrid) {\r\n            let dayNum = calcDayNum(delivDate);\r\n            \r\n            if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n              continue;\r\n            } else {\r\n              if (\r\n                routeRunsThatDay(rte, dayNum) &&\r\n                productCanBeInPlace(grd, routes, customers, rte) &&\r\n                productReadyBeforeRouteStarts(\r\n                  products,\r\n                  customers,\r\n                  routes,\r\n                  grd,\r\n                  rte\r\n                ) &&\r\n                customerIsOpen(customers, grd, routes, rte)\r\n              ) {\r\n                grd.route = rte.routeName;\r\n                grd.routeDepart = rte.RouteDepart;\r\n                grd.routeStart = rte.routeStart;\r\n                grd.routeServe = rte.RouteServe;\r\n              }\r\n\r\n              // Lincoln Market French exception\r\n              if (\r\n                (grd.prodName === \"French Stick\" || grd.prodName === \"Dutch Stick\")  && grd.custName === \"Lincoln Market\"\r\n              ){\r\n                grd.route = \"Lunch\";\r\n                grd.routeDepart = \"Prado\";\r\n                grd.routeStart = 9.5;\r\n                grd.routeServe = ['Downtown SLO', 'Foothill'];\r\n              }\r\n\r\n\r\n            }\r\n          }\r\n        }\r\n        for (let grd of prodGrid) {\r\n          if (grd.zone===\"slopick\" || grd.zone===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.zone===\"atownpick\" || grd.zone===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"slopick\" || grd.route===\"Prado Retail\"){\r\n            grd.route=\"Pick up SLO\"\r\n          }\r\n          if (grd.route===\"atownpick\" || grd.route===\"Carlton Retail\"){\r\n            grd.route=\"Pick up Carlton\"\r\n          }\r\n          if (grd.route===\"deliv\"){\r\n            grd.route=\"NOT ASSIGNED\"\r\n          }\r\n        }\r\n\r\n   \r\n    return prodGrid\r\n}\r\n\r\n\r\n\r\nexport default class ComposeProductGrid {\r\n  returnProdGrid = (database, delivDate) => {\r\n    let prodGrid = this.getProdGrid(database, delivDate);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      prodGrid: prodGrid,     \r\n    };\r\n  };\r\n\r\n  getProdGrid(database, delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodGrid = getFullOrders(delivDate, database);\r\n   \r\n    prodGrid = zerosDelivFilter(prodGrid, delivDate, database);\r\n    \r\n    prodGrid = buildGridOrderArray(prodGrid, database);\r\n    \r\n    prodGrid = addRoutes(delivDate, prodGrid, database);\r\n    \r\n    //prodGrid = addAttr(database, prodGrid);\r\n    for (let grd of prodGrid) {\r\n      \r\n      try{grd[\"delivOrder\"] = customers[customers.findIndex(cust => cust.custName === grd.custName)].delivOrder\r\n      \r\n      \r\n    } catch {\r\n      console.log(\"must be retail\")\r\n    }\r\n    sortAtoZDataByIndex(prodGrid,\"delivOrder\")\r\n    \r\n      \r\n    }\r\n    \r\n    return prodGrid;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js",["927","928","929","930","931"],"import React, { useEffect } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\nimport { sortAtoZDataByIndex } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ orderList, setRouteList, setRoute, routeList, database }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  useEffect(() => {\r\n    if (orderList) {\r\n      \r\n      let rtList = orderList.map((ord) => ord[\"route\"]);\r\n      let setRtList = new Set(rtList);\r\n      let rtListArray = Array.from(setRtList);\r\n      rtListArray = rtListArray.map((rt) => ({ route: rt }));\r\n      for (let rt of rtListArray){\r\n        let printOrder\r\n        try{\r\n          printOrder = routes[routes.findIndex(rou => rou.routeName === rt.route)].printOrder\r\n        } catch {\r\n          printOrder=0\r\n        }\r\n\r\n        rt.printOrder = printOrder\r\n      }\r\n      sortAtoZDataByIndex(rtListArray,\"printOrder\")\r\n    \r\n      setRouteList(rtListArray);\r\n    }\r\n  }, [orderList, database]);\r\n\r\n  const handleSelection = (e) => {\r\n    setRoute(e.value.route);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        <DataTable\r\n          value={routeList}\r\n          className=\"p-datatable-striped\"\r\n          selectionMode=\"single\"\r\n          onSelectionChange={handleSelection}\r\n          dataKey=\"id\"\r\n        >\r\n          <Column field=\"route\" header=\"Routes\"></Column>\r\n        </DataTable>\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js",["932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeRetailBags.js",["948","949","950","951"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addRetailBagQty,\r\n  addRetailBagQtyTomorrow\r\n} from \"./utils\";\r\n\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeRetailBags = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(products.filter((prod) => filt(prod)).map((prod) => prod.prodName))\r\n  ).map((make) => ({\r\n    prodName: make,\r\n    qty: 0,\r\n    tomQty: 0\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getRetailBags = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\n\r\n\r\nexport default class ComposeRetailBags {\r\n  returnRetailBags = (database) => {\r\n    let retailBags = this.getRetailBags(database);\r\n   \r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      retailBags: retailBags,     \r\n    };\r\n  };\r\n\r\n  getRetailBags(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let retailBags = makeRetailBags(products, this.retailBagsFilter);\r\n    let fullOrdersToday = getRetailBags(today, database);\r\n    let fullOrdersTomorrow = getRetailBags(tomorrow, database);\r\n    for (let ret of retailBags) {\r\n      addRetailBagQty(ret, fullOrdersToday);\r\n      addRetailBagQtyTomorrow(ret, fullOrdersTomorrow);\r\n    }\r\n    console.log(\"retail\",retailBags)\r\n    \r\n    return retailBags;\r\n  }\r\n\r\n  retailBagsFilter = (prod) => {\r\n    let fil =\r\n      prod.packGroup === \"retail\"\r\n    return fil;\r\n  };\r\n\r\n  \r\n\r\n\r\n}\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeDough.js",["952","953","954"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeNorthList.js",["955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeWhatToMake.js",["980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002"],"import { todayPlus,tomBasedOnDelivDate,TwodayBasedOnDelivDate } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport { getFullProdOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport {\r\n  addProdAttr,\r\n  addFresh,\r\n  addNeedEarly,\r\n  addShelf,\r\n  addPretzel,\r\n  addPocketsQty,\r\n} from \"./utils\";\r\nimport { handleFrenchConundrum } from \"./conundrums\";\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nlet tomorrow = todayPlus()[1];\r\nlet today = todayPlus()[0];\r\n\r\nconst makeProds = (products, filt) => {\r\n  let make = Array.from(\r\n    new Set(\r\n      products\r\n        .filter((prod) => filt(prod))\r\n        .map(\r\n          (prod) =>\r\n            prod.forBake + \"_\" + prod.weight.toString() + \"_\" + prod.doughType\r\n        )\r\n    )\r\n  ).map((make) => ({\r\n    forBake: make.split(\"_\")[0],\r\n    weight: Number(make.split(\"_\")[1]),\r\n    doughType: make.split(\"_\")[2],\r\n    qty: 0,\r\n    makeTotal: 0,\r\n    bagEOD: 0,\r\n  }));\r\n  return make;\r\n};\r\n\r\nconst getFullMakeOrders = (delivDate, database) => {\r\n  console.log(\"getFullMakeOrder\",delivDate)\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nconst getFullProdMakeOrders = (delivDate, database) => {\r\n  let fullOrder = getFullProdOrders(delivDate, database);\r\n  \r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnMakeBreakDown = (database,delivDate) => {\r\n    let pocketsNorth = this.getPocketsNorth(database,delivDate);\r\n    let freshProds = this.getFreshProds(database,delivDate);\r\n    let shelfProds = this.getShelfProds(database,delivDate);\r\n    let pretzels = this.getPretzels(database,delivDate)\r\n    let freezerProds = this.getFreezerProds(database,delivDate);\r\n    let youllBeShort = this.getYoullBeShort(database,delivDate);\r\n\r\n    [freshProds, shelfProds] = handleFrenchConundrum(freshProds,shelfProds,database,delivDate);\r\n\r\n    return {\r\n      pocketsNorth: pocketsNorth,\r\n      freshProds: freshProds,\r\n      shelfProds: shelfProds,\r\n      pretzels: pretzels,\r\n      freezerProds: freezerProds,\r\n      youllBeShort: youllBeShort,\r\n    };\r\n  };\r\n\r\n  getPocketsNorth(database,delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makePocketsNorth = makeProds(products, this.pocketsNorthFilter);\r\n    console.log(\"getPocketsNorth\",delivDate)\r\n    let fullOrdersToday = getFullMakeOrders(delivDate, database);\r\n    for (let make of makePocketsNorth) {\r\n      addPocketsQty(make, fullOrdersToday);\r\n    }\r\n    return makePocketsNorth;\r\n  }\r\n\r\n  pocketsNorthFilter = (prod) => {\r\n    let fil =\r\n      prod.bakedWhere.includes(\"Mixed\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreshProds = (database, delivDate) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    console.log(\"delivDate\",delivDate)\r\n    let makeFreshProds = makeProds(products, this.freshProdFilter);\r\n    let tom = tomBasedOnDelivDate(delivDate)\r\n    if (delivDate === \"2021-12-24\"){\r\n      tom = TwodayBasedOnDelivDate(delivDate)\r\n    }\r\n    let fullOrdersToday = getFullMakeOrders(delivDate, database);\r\n    let fullOrdersTomorrow = getFullMakeOrders(tom, database);\r\n    for (let make of makeFreshProds) {\r\n      addFresh(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n    }\r\n    return makeFreshProds;\r\n  };\r\n\r\n  freshProdFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) < 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\";\r\n    return fil;\r\n  };\r\n\r\n  getShelfProds(database,delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeShelfProds = makeProds(products, this.shelfProdsFilter);\r\n    let tom = tomBasedOnDelivDate(delivDate)\r\n    if (delivDate === \"2021-12-24\"){\r\n      tom = TwodayBasedOnDelivDate(delivDate)\r\n    }\r\n    let fullOrdersToday = getFullMakeOrders(delivDate, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tom, database);\r\n  \r\n    for (let make of makeShelfProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n\r\n    console.log(\"makeShelfProds\",makeShelfProds)\r\n    makeShelfProds = makeShelfProds.filter(make => (make.makeTotal + make.needEarly + make.qty)>0)\r\n\r\n    return makeShelfProds;\r\n  }\r\n\r\n  shelfProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.doughType !==\"Pretzel Bun\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getPretzels(database,delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeShelfProds = makeProds(products, this.pretzelsFilter);\r\n    let tom = tomBasedOnDelivDate(delivDate)\r\n    if (delivDate === \"2021-12-24\"){\r\n      tom = TwodayBasedOnDelivDate(delivDate)\r\n    }\r\n    let fullOrdersToday = getFullMakeOrders(delivDate, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tom, database);\r\n  \r\n    for (let make of makeShelfProds) {\r\n      addPretzel(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n\r\n    console.log(\"makeShelfProds\",makeShelfProds)\r\n    makeShelfProds = makeShelfProds.filter(make => (make.makeTotal + make.needEarly + make.qty)>0)\r\n\r\n    return makeShelfProds;\r\n  }\r\n\r\n  pretzelsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.doughType === \"Pretzel Bun\" &&\r\n      prod.freezerThaw !== true;\r\n    return fil;\r\n  };\r\n\r\n  getFreezerProds(database,delivDate) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let makeFreezerProds = makeProds(products, this.freezerProdsFilter);\r\n    let tom = tomBasedOnDelivDate(delivDate)\r\n    if (delivDate === \"2021-12-24\"){\r\n      tom = TwodayBasedOnDelivDate(delivDate)\r\n    }\r\n    let fullOrdersToday = getFullMakeOrders(delivDate, database);\r\n    let fullOrdersTomorrow = getFullProdMakeOrders(tom, database);\r\n    for (let make of makeFreezerProds) {\r\n      addShelf(make, fullOrdersToday, fullOrdersTomorrow, products, routes);\r\n      addNeedEarly(make, products);\r\n    }\r\n    return makeFreezerProds;\r\n  }\r\n\r\n  freezerProdsFilter = (prod) => {\r\n    let fil =\r\n      !prod.bakedWhere.includes(\"Carlton\") &&\r\n      Number(prod.readyTime) >= 15 &&\r\n      prod.packGroup !== \"frozen pastries\" &&\r\n      prod.packGroup !== \"baked pastries\" &&\r\n      prod.freezerThaw === true;\r\n    return fil;\r\n  };\r\n\r\n  getYoullBeShort = (database,delivDate) => {\r\n    console.log(\"youllBeShort\",delivDate)\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let pocketsNorth = this.getPocketsNorth(database,delivDate)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let shelfProds = this.getShelfProds(database,delivDate)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let freshProds = this.getFreshProds(database,delivDate)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n    let freezerProds = this.getFreezerProds(database,delivDate)\r\n      .filter((item) => item.doughType === \"French\")\r\n      .map((item) => ({\r\n        pocketWeight: item.weight,\r\n        makeTotal: item.makeTotal,\r\n      }));\r\n\r\n    let weightStr = pocketsNorth.concat(shelfProds, freshProds, freezerProds);\r\n   \r\n    let weightList = Array.from(\r\n      new Set(weightStr.map((weight) => weight.pocketWeight))\r\n    ).map((pock) => ({ pocketWeight: pock, makeTotal: 0 }));\r\n   \r\n    for (let weight of weightList) {\r\n      for (let pocket of weightStr) {\r\n        if (pocket.pocketWeight === weight.pocketWeight) {\r\n          weight.makeTotal = weight.makeTotal + pocket.makeTotal;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let weight of weightList) {\r\n      let availablePockets = products[products.findIndex(\r\n        (prod) =>\r\n          prod.weight === weight.pocketWeight && prod.doughType === \"French\"\r\n      )].preshaped;\r\n      let preAvailablePockets = products[products.findIndex(\r\n        (prod) =>\r\n          prod.weight === weight.pocketWeight && prod.doughType === \"French\"\r\n      )].prepreshaped;\r\n      weight.need = weight.makeTotal\r\n      weight.preshaped = availablePockets\r\n      weight.prepreshaped = preAvailablePockets\r\n      weight.short = Number(weight.makeTotal)-Number(availablePockets)\r\n      weight.makeTotal = -(Number(weight.makeTotal)-Number(availablePockets))\r\n      weight.preMakeTotal = -(Number(weight.makeTotal)-Number(preAvailablePockets))\r\n     \r\n    }\r\n\r\n    weightList = weightList.filter(weight => weight.makeTotal !== '')\r\n    return weightList;\r\n  }\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\testComponent\\databaseFetchers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\filters.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\utils.js",["1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js",["1015","1016","1017","1018","1019","1020","1021"],"import { convertDatetoBPBDate } from \"./dateTimeHelpers\";\r\nimport { sortZtoADataByIndex, sortAtoZDataByIndex } from \"./sortDataHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport const removeDoubles = (orderList) => {\r\n  for (let i = 0; i < orderList.length; ++i) {\r\n    for (let j = i + 1; j < orderList.length; ++j) {\r\n      if (\r\n        orderList[i][\"prodName\"] === orderList[j][\"prodName\"] &&\r\n        orderList[i][\"custName\"] === orderList[j][\"custName\"]\r\n      ) {\r\n        orderList.splice(j, 1);\r\n      }\r\n    }\r\n  }\r\n  return orderList;\r\n};\r\n\r\nexport const zerosDelivFilter = (orderList, delivDate, database) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let noZeroDelivDateOrderList = orderList.filter(\r\n    (ord) =>\r\n      Number(ord[\"qty\"]) > 0 &&\r\n      ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n  );\r\n  for (let ord of noZeroDelivDateOrderList) {\r\n    if (ord[\"route\"] === undefined || ord[\"route\"] === \"deliv\") {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        let custZone = customers[ind][\"zoneName\"];\r\n        ord[\"zoneName\"] = custZone;\r\n      }\r\n    } else {\r\n      let ind = customers.findIndex(\r\n        (cust) => cust[\"custName\"] === ord[\"custName\"]\r\n      );\r\n      if (ind > -1) {\r\n        ord[\"zoneName\"] = ord[\"route\"];\r\n      }\r\n    }\r\n  }\r\n  return noZeroDelivDateOrderList;\r\n};\r\n\r\nexport const filterForZoneService = (\r\n  noZeroDelivDateOrderList,\r\n  route,\r\n  routes\r\n) => {\r\n  let filterServe;\r\n  if (routes) {\r\n    let rtInd = routes.findIndex((rt) => rt[\"routeName\"] === route);\r\n    filterServe = noZeroDelivDateOrderList.filter((ord) =>\r\n      routes[rtInd][\"RouteServe\"].includes(ord[\"route\"])\r\n    );\r\n  }\r\n  return filterServe;\r\n};\r\n\r\nconst buildCustName = (ord, customers) => {\r\n  try {\r\n    return customers[\r\n      customers.findIndex((cust) => cust[\"custName\"] === ord[\"custName\"])\r\n    ].nickName;\r\n  } catch {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const buildGridOrderArray = (filterServe, database) => {\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n  let gridOrderArray;\r\n  \r\n  gridOrderArray = filterServe.map((ord) => ({\r\n    prodName: ord[\"prodName\"],\r\n    delivOrder:\r\n      customers.findIndex((cust) => cust.custName === ord.custName) > -1\r\n        ? customers[\r\n            customers.findIndex((cust) => cust.custName === ord.custName)\r\n          ].delivOrder\r\n        : 0,\r\n    prodNick:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].nickName,\r\n    custName: ord[\"custName\"],\r\n    custNick: buildCustName(ord, customers),\r\n    zone: ord[\"zoneName\"],\r\n    //  Lincoln Market french exception\r\n    route: ord[\"route\"],\r\n    qty: ord[\"qty\"],\r\n    doughType:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"doughType\"],\r\n    where:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ][\"bakedWhere\"],\r\n    when: products[\r\n      products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n    ][\"readyTime\"],\r\n    forBake:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].forBake,\r\n    preshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].preshaped,\r\n    prepreshaped:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].prepreshaped,\r\n    updatePreDate:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].updatePreDate,\r\n    prodID:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].id,\r\n    packSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packSize,\r\n    weight:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].weight,\r\n    currentStock:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].currentStock,\r\n    batchSize:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].batchSize,\r\n    bakeExtra:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].bakeExtra,\r\n    packGroup:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].packGroup,\r\n      freezerNorth:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].freezerNorth,\r\n      freezerNorthClosing:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].freezerNorthClosing,\r\n      freezerNorthFlag:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].freezerNorthFlag,\r\n      freezerCount:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].freezerCount,\r\n      freezerClosing:\r\n      products[\r\n        products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n      ].freezerClosing,\r\n      \r\n  }));\r\n  \r\n  return gridOrderArray;\r\n};\r\n\r\nexport const isZoneIncludedInRoute = (\r\n  gridOrderArray,\r\n  routes,\r\n  delivDate,\r\n  customers\r\n) => {\r\n  sortZtoADataByIndex(routes, \"routeStart\");\r\n  for (let rte of routes) {\r\n    for (let grd of gridOrderArray) {\r\n      let day = DateTime.fromSQL(delivDate);\r\n      let dayNum = day.weekday;\r\n      if (dayNum === 7) {\r\n        dayNum = 0;\r\n      }\r\n      dayNum = dayNum + 1;\r\n\r\n      if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n        continue;\r\n      } else {\r\n        if (rte[\"RouteSched\"].includes(dayNum.toString())) {\r\n          grd[\"route\"] = rte[\"routeName\"];\r\n        } else {\r\n          grd[\"route\"] = \"Pick up Carlton\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return gridOrderArray;\r\n};\r\n\r\nexport const buildProductArray = (gridToEdit, products) => {\r\n  let listOfProducts;\r\n\r\n  listOfProducts = gridToEdit.map((order) => order[\"prodName\"]);\r\n  listOfProducts = new Set(listOfProducts);\r\n  listOfProducts = Array.from(listOfProducts);\r\n  let prodArray = [];\r\n  for (let prod of listOfProducts) {\r\n    for (let item of products) {\r\n      if (prod === item[\"prodName\"]) {\r\n        let newItem = [\r\n          prod,\r\n          item[\"nickName\"],\r\n          item[\"packGroup\"],\r\n          item[\"packSize\"],\r\n        ];\r\n        prodArray.push(newItem);\r\n      }\r\n    }\r\n  }\r\n  return prodArray;\r\n};\r\n\r\nexport const createColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"70px\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod,\r\n      header: prod,\r\n      dataKey: prod,\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createRouteGridColumns = (listOfProducts) => {\r\n  sortAtoZDataByIndex(listOfProducts, 2);\r\n  let columns = [\r\n    {\r\n      field: \"customer\",\r\n      header: \"customer\",\r\n      dataKey: \"customer\",\r\n      width: { width: \"10%\" },\r\n    },\r\n  ];\r\n  for (let prod of listOfProducts) {\r\n    let newCol = {\r\n      field: prod[0],\r\n      header: prod[1],\r\n      dataKey: prod[1],\r\n      width: { width: \"30px\" },\r\n    };\r\n    columns.push(newCol);\r\n  }\r\n  return columns;\r\n};\r\n\r\nexport const createListOfCustomers = (orderList) => {\r\n\r\n  let listOfCustomers = orderList.filter(ord => ord.custNick).map((order) => order[\"custName\"]);\r\n  listOfCustomers = Array.from(new Set(listOfCustomers));\r\n  return listOfCustomers;\r\n};\r\n\r\nexport const createQtyGrid = (listOfCustomers, orderList) => {\r\n \r\n  let data = [];\r\n  for (let cust of listOfCustomers) {\r\n    let newData = {\r\n      customer: cust,\r\n    };\r\n    for (let order of orderList) {\r\n      if (order[\"custName\"] === cust) {\r\n        newData[\"delivOrder\"] = order.delivOrder;\r\n        newData[order[\"prodName\"]] = order[\"qty\"];\r\n      }\r\n    }\r\n    data.push(newData);\r\n  }\r\n  \r\n  sortAtoZDataByIndex(data, \"delivOrder\");\r\n  return data;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\utils\\utils.js",["1022","1023","1024","1025","1026","1027","1028"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\utils.js",["1029","1030","1031","1032","1033","1034","1035"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js",["1036","1037","1038","1039"],"import React, { useContext } from \"react\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { updateOrder, createOrder } from \"../../../../graphql/mutations\";\r\nimport { checkQBValidation, createQBInvoice, deleteQBInvoice, getQBInvIDandSyncToken } from \"../../../../helpers/QBHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nexport const DeleteInvoice = (\r\n  invNum,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  orders,\r\n  delivDate,\r\n  setIsLoading,\r\n  reload,\r\n  setReload\r\n) => {\r\n\r\n  \r\n\r\n  const deleteCheck = (invNum) => {\r\n    swal({\r\n      text: \" Are you sure that you would like to permanently delete this invoice?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Yes\", \"Don't do it!\"],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (!willDelete) {\r\n        deleteInvoiceFinal(invNum);\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteInvoiceFinal = async (invNum) => {\r\n    setIsLoading(true)\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    invToModify = invToModify.filter((inv) => inv[\"invNum\"] !== invNum);\r\n   \r\n    let access = await checkQBValidation();\r\n    let invID = await getQBInvIDandSyncToken(access, invNum);\r\n\r\n    \r\n    let qbID = invID.data.Id\r\n    let sync = invID.data.SyncToken\r\n    if (qbID){\r\n      let custSetup = {\r\n        Id: qbID,\r\n        SyncToken: sync,\r\n        \r\n      };\r\n      console.log(\"qbID\",qbID)\r\n      console.log(\"SyncToken\",sync)\r\n      \r\n      deleteQBInvoice(access, custSetup);\r\n      console.log(\"I think it worked\")\r\n    } else {\r\n      console.log(\"No invoice to delete\")\r\n    }\r\n    \r\n   \r\n    let dailyParsedInvoices = dailyInvoices.filter(\r\n      (daily) => daily.invNum === invNum\r\n    );\r\n    let parsedCust = dailyParsedInvoices[0].custName;\r\n    dailyParsedInvoices = dailyParsedInvoices[0].orders.filter(daily => daily.prodName !== \"DELIVERY\")\r\n    for (let parse of dailyParsedInvoices) {\r\n      parse.custName = parsedCust;\r\n    }\r\n\r\n    let parsedOrders = orders.filter(\r\n      (ord) =>\r\n        ord.custName === parsedCust &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate) \r\n    );\r\n    console.log(\"dailyParsedInvoices\", dailyParsedInvoices);\r\n    console.log(\"parsedOrders\", parsedOrders);\r\n\r\n    for (let ord of dailyParsedInvoices) {\r\n      let updateDetails = {\r\n        qty: ord.qty,\r\n        prodName: ord.prodName,\r\n        custName: ord.custName,\r\n        rate: 0,\r\n        SO: ord.qty,\r\n        delivDate: convertDatetoBPBDate(delivDate)\r\n        \r\n      };\r\n      \r\n\r\n      let ind = parsedOrders.findIndex(\r\n        (parse) => parse.prodName === ord.prodName\r\n      );\r\n      if (ind > -1) {\r\n        updateDetails[\"id\"] = parsedOrders[ind].id;\r\n        console.log(\"updateDetails\",updateDetails)\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful update\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed Update\");\r\n        }\r\n      } else {\r\n        \r\n        \r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n          );\r\n          console.log(updateDetails.prodName, \"Successful create\");\r\n        } catch (error) {\r\n          console.log(error, \"Failed create\");\r\n        }\r\n      }\r\n    }\r\n  \r\n    setReload(!reload)\r\n    setIsLoading(false)\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      icon=\"pi pi-trash\"\r\n      className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n      onClick={(e) => deleteCheck(invNum)}\r\n    />\r\n  );\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js",["1040","1041"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js",["1042"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"primeflex/primeflex.css\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport {\r\n  getCompList,\r\n  getFlourWeight,\r\n  getItemPercent,\r\n  handleInput,\r\n} from \"./utils\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst AddButtons = styled.div`\r\n  display: flex;\r\n  width: 60%;\r\n  margin: auto;\r\n  padding: 10px;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst preIngs = [\r\n  { preIng: \"Levain\" },\r\n  { preIng: \"Poolish\" },\r\n  { preIng: \"Rye Levain\" },\r\n  { preIng: \"Hi Glut Levain\" },\r\n  { preIng: \"Hi Glut Poolish\" },\r\n];\r\n\r\nconst PreMix = ({\r\n  selectedDough,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  setIsModified,\r\n}) => {\r\n  const [selectedPre, setSelectedPre] = useState(\"\");\r\n  const [ pre, setPre ] = useState();\r\n\r\n  useEffect(() => {\r\n    const preDo = getCompList(\"lev\", doughComponents, selectedDough);\r\n    console.log(\"preDo\",preDo)\r\n    setPre(preDo)\r\n  }, []);\r\n  \r\n\r\n  const handlePrePick = (e) => {\r\n   \r\n    setSelectedPre(e.value.preIng);\r\n  };\r\n\r\n  const handleAddPre = () => {\r\n    let listToMod = clonedeep(doughComponents);\r\n    let newItem = {\r\n      dough: selectedDough.doughName,\r\n      componentType: \"lev\",\r\n      componentName: selectedPre,\r\n      amount: 0,\r\n    };\r\n\r\n    listToMod.push(newItem);\r\n    setDoughComponents(listToMod);\r\n  };\r\n\r\n  const directWeight = (e) => {\r\n    let fl = getFlourWeight(e, doughComponents, selectedDough);\r\n    let percent = getItemPercent(e, doughComponents, selectedDough);\r\n    return (fl * percent * 0.01).toFixed(2);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"datatable-templating-demo\">\r\n        <div className=\"card\">\r\n          {pre && pre.length > 0 ? (\r\n            <DataTable value={pre} className=\"p-datatable-sm\">\r\n              <Column field=\"ing\" header=\"Pre Mix\"></Column>\r\n\r\n              <Column\r\n                className=\"p-text-center\"\r\n                header=\"% of flour weight\"\r\n                body={(e) =>\r\n                  handleInput(\r\n                    e,\r\n                    doughComponents,\r\n                    selectedDough,\r\n                    setDoughComponents,\r\n                    setIsModified\r\n                  )\r\n                }\r\n              ></Column>\r\n              <Column\r\n                className=\"p-text-center\"\r\n                header=\"Weight\"\r\n                body={directWeight}\r\n              ></Column>\r\n              <Column\r\n                className=\"p-text-center\"\r\n                header=\"Total %\"\r\n                body={(e) => getItemPercent(e, doughComponents, selectedDough)}\r\n              ></Column>\r\n            </DataTable>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n      <AddButtons className=\"addPre\">\r\n        <Dropdown\r\n          id=\"preIng\"\r\n          optionLabel=\"preIng\"\r\n          options={preIngs}\r\n          style={{ width: \"50%\" }}\r\n          onChange={handlePrePick}\r\n          placeholder={selectedPre !== \"\" ? selectedPre : \"Select a Pre Mix\"}\r\n        />\r\n        <Button\r\n          className=\"p-button-rounded p-button-outlined\"\r\n          icon=\"pi pi-plus\"\r\n          onClick={handleAddPre}\r\n        />\r\n      </AddButtons>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PreMix;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\conundrums.js",["1043","1044","1045","1046"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\utils.js",["1047","1048","1049"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeAMPastry.js",["1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064"],"import {\r\n    todayPlus,\r\n  } from \"../../../helpers/dateTimeHelpers\";\r\n  import {\r\n    createColumns,\r\n    zerosDelivFilter,\r\n    buildGridOrderArray,\r\n  } from \"../../../helpers/delivGridHelpers\";\r\n  \r\n  import { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\n  \r\n  import { sortZtoADataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n  import {\r\n    calcDayNum,\r\n    routeRunsThatDay,\r\n    productCanBeInPlace,\r\n    productReadyBeforeRouteStarts,\r\n    customerIsOpen,\r\n  } from \"../ByRoute/Parts/utils/utils\";\r\n \r\n  let today = todayPlus()[0];\r\n  \r\n  const addRoutes = (delivDate, prodGrid, database) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    sortZtoADataByIndex(routes, \"routeStart\");\r\n    for (let rte of routes) {\r\n      for (let grd of prodGrid) {\r\n        let dayNum = calcDayNum(delivDate);\r\n  \r\n        if (!rte[\"RouteServe\"].includes(grd[\"zone\"])) {\r\n          continue;\r\n        } else {\r\n          if (\r\n            routeRunsThatDay(rte, dayNum) &&\r\n            productCanBeInPlace(grd, routes, customers, rte) &&\r\n            productReadyBeforeRouteStarts(\r\n              products,\r\n              customers,\r\n              routes,\r\n              grd,\r\n              rte\r\n            ) &&\r\n            customerIsOpen(customers, grd, routes, rte)\r\n          ) {\r\n            grd.route = rte.routeName;\r\n            grd.routeDepart = rte.RouteDepart;\r\n            grd.routeStart = rte.routeStart;\r\n            grd.routeServe = rte.RouteServe;\r\n            grd.routeArrive = rte.RouteArrive;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let grd of prodGrid) {\r\n      if (grd.zone === \"slopick\" || grd.zone === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.zone === \"atownpick\" || grd.zone === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"slopick\" || grd.route === \"Prado Retail\") {\r\n        grd.route = \"Pick up SLO\";\r\n      }\r\n      if (grd.route === \"atownpick\" || grd.route === \"Carlton Retail\") {\r\n        grd.route = \"Pick up Carlton\";\r\n      }\r\n      if (grd.route === \"deliv\") {\r\n        grd.route = \"NOT ASSIGNED\";\r\n      }\r\n    }\r\n  \r\n    return prodGrid;\r\n  };\r\n  \r\n  const getProdNickNames = (delivDate, database, filt) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let fullNames = Array.from(\r\n      new Set(fullOrder.filter((fu) => filt(fu)).map((fil) => fil.prodName))\r\n    );\r\n    let nickNames = fullNames.map(\r\n      (fil) =>\r\n        products[products.findIndex((prod) => fil === prod.prodName)].nickName\r\n    );\r\n    return nickNames;\r\n  };\r\n  \r\n  const getCustNames = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    return Array.from(\r\n      new Set(fullOrder.filter((fu) => filter(fu)).map((fil) => fil.custName))\r\n    );\r\n  };\r\n  \r\n  \r\n  const makeOrders = (delivDate, database, filter) => {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let prodNames = getProdNickNames(delivDate, database, filter);\r\n    let custNames = getCustNames(delivDate, database, filter);\r\n    let fullOrder = getFullOrders(delivDate, database);\r\n    fullOrder = zerosDelivFilter(fullOrder, delivDate, database);\r\n    fullOrder = buildGridOrderArray(fullOrder, database);\r\n    fullOrder = addRoutes(delivDate, fullOrder, database);\r\n  \r\n    let orderArray = [];\r\n    for (let cust of custNames) {\r\n      let custItem = {};\r\n      custItem = {\r\n        customer: cust,\r\n      };\r\n      for (let prod of prodNames) {\r\n        let prodFullName =\r\n          products[products.findIndex((pr) => pr.nickName === prod)].prodName;\r\n        try {\r\n          custItem[prod] =\r\n            fullOrder[\r\n              fullOrder.findIndex(\r\n                (ord) => ord.prodName === prodFullName && ord.custName === cust\r\n              )\r\n            ].qty;\r\n        } catch {\r\n          custItem[prod] = null;\r\n        }\r\n      }\r\n      orderArray.push(custItem);\r\n    }\r\n    return orderArray;\r\n  };\r\n  \r\n \r\n  export default class ComposeAMPastry {\r\n    returnAMPastryBreakDown = (delivDate, database) => {\r\n      let AMPastry = this.returnAMPastry(database);\r\n      \r\n      let columnsAMPastry = this.returnColumnsAMPastry(\r\n        delivDate,\r\n        database\r\n      );\r\n\r\n      let AMOthers = this.returnAMOthers(database);\r\n      \r\n      let columnsAMOthers = this.returnColumnsAMOthers(\r\n        delivDate,\r\n        database\r\n      );\r\n  \r\n      // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n  \r\n      return {\r\n        AMPastry: AMPastry,\r\n        columnsAMPastry: columnsAMPastry,\r\n        AMOthers: AMOthers,\r\n        columnsAMOthers: columnsAMOthers\r\n      };\r\n    };\r\n  \r\n    \r\n  \r\n    \r\n    returnAMPastry = (database) => {\r\n      let shelfProds = makeOrders(today, database, this.AMPastryFilter);\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMPastryFilter = (ord) => {\r\n      return (\r\n        (ord.where.includes(\"Mixed\") || ord.where.includes(\"Prado\")) &&\r\n        ord.packGroup === \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMPastry = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMPastryFilter\r\n      );\r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n    returnAMOthers = (database) => {\r\n      let custos = makeOrders(today, database, this.AMPastryFilter);\r\n      custos = Array.from(new Set(custos.map(cust => cust.customer)))\r\n      let shelfProds = makeOrders(today, database, this.AMOthersFilter);\r\n     \r\n      shelfProds = shelfProds.filter(shelf => custos.includes(shelf.customer))\r\n      return shelfProds;\r\n    };\r\n  \r\n    AMOthersFilter = (ord) => {\r\n      return (\r\n        \r\n        ord.packGroup !== \"baked pastries\" &&\r\n        ord.routeDepart === \"Prado\"\r\n      );\r\n    };\r\n  \r\n    returnColumnsAMOthers = (delivDate, database) => {\r\n      let filteredOrders = getProdNickNames(\r\n        delivDate,\r\n        database,\r\n        this.AMOthersFilter\r\n      );\r\n      \r\n      if (filteredOrders.length > 0) {\r\n        return createColumns(filteredOrders);\r\n      } else {\r\n        return [];\r\n      }\r\n    };\r\n\r\n\r\n  }\r\n  ","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js",["1065"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js",[],["1066","1067"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1WhatToPrep.js",["1068"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js",["1069","1070"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Dough.js",["1071"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { confirmDialog } from \"primereact/confirmdialog\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeDough from \"./Utils/composeDough\";\r\nimport { todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { getMixInfo } from \"./BPBNBaker1Parts/GetMixInfo\";\r\nimport { binInfo } from \"./BPBNBaker1Parts/BinInfo\";\r\nimport { panAmount } from \"./BPBNBaker1Parts/PanAmount\";\r\nimport { bucketAmount } from \"./BPBNBaker1Parts/BucketAmount\";\r\n\r\nimport { updateDough } from \"../../graphql/mutations\";\r\n\r\nimport { BagMixesScreen } from \"./BPBNBaker1Parts/BagMixesScreen\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst WholeBoxPhone = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 90%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst compose = new ComposeDough();\r\n\r\nfunction BPBNBaker1Dough({\r\n  doughs,\r\n  setDoughs,\r\n  setDoughComponents,\r\n  infoWrap,\r\n  setBagAndEpiCount,\r\n  setOliveCount,\r\n  setBcCount,\r\n  setBagDoughTwoDays,\r\n  deliv\r\n}) {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [mixes, setMixes] = useState([]);\r\n  const [bin, setBin] = useState([]);\r\n  const [pans, setPans] = useState([]);\r\n  const [buckets, setBuckets] = useState([]);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherDoughInfo(database,deliv));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherDoughInfo = (database,deliv) => {\r\n    console.log(\"deliv1\",deliv)\r\n    let doughData = compose.returnDoughBreakDown(database, \"Carlton\",deliv);\r\n    setDoughs(doughData.Baker1Dough);\r\n    setDoughComponents(doughData.Baker1DoughComponents);\r\n    setBagAndEpiCount(doughData.bagAndEpiCount);\r\n    setOliveCount(doughData.oliveCount);\r\n    setBcCount(doughData.bcCount);\r\n    setBagDoughTwoDays(doughData.bagDoughTwoDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (doughs[0] && infoWrap) {\r\n      setMixes(getMixInfo(doughs, infoWrap)[4]);\r\n      setBin(binInfo(doughs, infoWrap));\r\n      setPans(panAmount(doughs, infoWrap));\r\n      setBuckets(bucketAmount(doughs, infoWrap));\r\n    }\r\n  }, [doughs, infoWrap]);\r\n\r\n  \r\n  const handleChange = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateDoughDB(e);\r\n      confirmDialog({\r\n        message:\r\n        \"You will need to refresh page to fully recalculate dough.  Got it?\",\r\n      header: \"Confirmation\",\r\n        icon: \"pi pi-exclamation-triangle\",\r\n       \r\n      });\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    updateDoughDB(e);\r\n    confirmDialog({\r\n      message:\r\n        \"You will need to refresh page to fully recalculate dough.  Got it?\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      \r\n    });\r\n  };\r\n\r\n  const updateDoughDB = async (e) => {\r\n    let id = e.target.id.split(\"_\")[0];\r\n    let attr = e.target.id.split(\"_\")[1];\r\n    let qty = e.target.value;\r\n\r\n    let doughsToMod = clonedeep(doughs);\r\n    doughsToMod[doughsToMod.findIndex((dgh) => dgh.id === id)][attr] = qty;\r\n    setDoughs(doughsToMod);\r\n\r\n    let updateDetails = {\r\n      id: id,\r\n      [attr]: qty,\r\n    };\r\n\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateDough, { input: { ...updateDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on fetching Dough List\", error);\r\n    }\r\n  };\r\n\r\n  const doughMixList = (dough) => {\r\n    let doughTotal = (\r\n      Number(dough.needed) +\r\n      Number(dough.buffer) +\r\n      Number(dough.short)\r\n    ).toFixed(2);\r\n\r\n    let doughName = dough.doughName;\r\n    let doughNeeded = dough.needed;\r\n    let doughShort = Number(dough.short);\r\n\r\n    return (\r\n      <React.Fragment key={dough.id + \"_firstFrag\"}>\r\n        <h3>\r\n          {doughName}: (need {doughNeeded} lb.) TOTAL:\r\n          {doughTotal} SHORT: {doughShort}\r\n        </h3>\r\n        <TwoColumnGrid key={dough.id + \"_first2Col\"}>\r\n          <div>\r\n            <TwoColumnGrid key={dough.id + \"_second2Col\"}>\r\n              <span>Old Dough:</span>\r\n              <div className=\"p-inputgroup\">\r\n                <InputText\r\n                  key={dough.id + \"_oldDough\"}\r\n                  id={dough.id + \"_oldDough\"}\r\n                  placeholder={dough.oldDough}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <span className=\"p-inputgroup-addon\">lb.</span>\r\n              </div>\r\n            </TwoColumnGrid>\r\n            <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n              <span>Buffer Dough:</span>\r\n              <div className=\"p-inputgroup\">\r\n                <InputText\r\n                  key={dough.id + \"_buffer\"}\r\n                  id={dough.id + \"_buffer\"}\r\n                  placeholder={dough.buffer}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <span className=\"p-inputgroup-addon\">lb.</span>\r\n              </div>\r\n            </TwoColumnGrid>\r\n            <TwoColumnGrid key={dough.id + \"_third2Col\"}>\r\n              <span>Actual Bucket Sets:</span>\r\n              <div className=\"p-inputgroup\">\r\n                <InputText\r\n                  key={dough.id + \"_bucketSets\"}\r\n                  id={dough.id + \"_bucketSets\"}\r\n                  placeholder={dough.bucketSets}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <span className=\"p-inputgroup-addon\">sets</span>\r\n              </div>\r\n            </TwoColumnGrid>\r\n          </div>\r\n        </TwoColumnGrid>\r\n\r\n        <BagMixesScreen mixes={mixes} doughs={doughs} infoWrap={infoWrap} deliv={deliv}/>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const innards = (\r\n    <React.Fragment>\r\n      <h1>BPBN Baguette Mix</h1>\r\n      {doughs[0] && doughMixList(doughs[0])}\r\n\r\n      <h2>Bins</h2>\r\n      <DataTable value={bin} className=\"p-datatable-sm\">\r\n        <Column field=\"title\" header=\"Product\"></Column>\r\n        <Column field=\"amount\" header=\"Amount\"></Column>\r\n      </DataTable>\r\n\r\n      <h2>Pocket Pans</h2>\r\n      <DataTable value={pans} className=\"p-datatable-sm\">\r\n        <Column field=\"title\" header=\"Pan\"></Column>\r\n        <Column field=\"amount\" header=\"Amount\"></Column>\r\n      </DataTable>\r\n\r\n      <h2>Bucket Sets</h2>\r\n      <DataTable value={buckets} className=\"p-datatable-sm\">\r\n        <Column field=\"title\" header=\"Bucket Sets\"></Column>\r\n        <Column field=\"amount\" header=\"Amount\"></Column>\r\n      </DataTable>\r\n    </React.Fragment>\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      {width > breakpoint ? (\r\n        <WholeBox>{innards}</WholeBox>\r\n      ) : (\r\n        <WholeBoxPhone>{innards}</WholeBoxPhone>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNBaker1Dough;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToMake.js",["1072","1073"],"import { todayPlus, tomBasedOnDelivDate,TwodayBasedOnDelivDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport { DayOneFilter, DayTwoFilter, getOrdersList, addUp } from \"./utils\";\r\nconst { DateTime } = require(\"luxon\");\r\n\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnWhatToMakeBreakDown = (database,delivDate) => {\r\n    let whatToMake = this.returnWhatToMake(database,delivDate);\r\n    return {\r\n      whatToMake: whatToMake,\r\n    };\r\n  };\r\n\r\n  returnWhatToMake = (database,delivDate) => {\r\n    let tom = tomBasedOnDelivDate(delivDate)\r\n    let twoday = TwodayBasedOnDelivDate(delivDate)\r\n    \r\n    let whatToMake = this.makeAddQty(\r\n      getOrdersList(tom, database, true)\r\n        .filter((set) => DayOneFilter(set))\r\n        .concat(\r\n          getOrdersList(twoday, database, true).filter((set) =>\r\n            DayTwoFilter(set)\r\n          )\r\n        )\r\n    );\r\n    \r\n    return whatToMake;\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.forBake))\r\n    ).map((mk) => ({\r\n      forBake: mk,\r\n      dough: \"\",\r\n      weight: 0,\r\n      qty: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.forBake === frz.forBake)\r\n        .map((ord) => ord.qty);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n\r\n      let bakeInd =\r\n        bakedTomorrow[\r\n          bakedTomorrow.findIndex((baked) => baked.forBake === make.forBake)\r\n        ];\r\n      make.qty = qtyAccToday * bakeInd.packSize;\r\n      make.dough = bakeInd.doughType;\r\n      make.weight = bakeInd.weight;\r\n      make.id = bakeInd.prodID;\r\n    }\r\n    return makeList2;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["1074","1075","1076","1077","1078","1079","1080","1081"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport TitleBox from \"./CurrentOrderInfoParts/TitleBox\";\r\nimport CustomerGroup from \"./CurrentOrderInfoParts/CustomerGroup\";\r\nimport RouteSelect from \"./CurrentOrderInfoParts/RouteSelect\";\r\nimport PONote from \"./CurrentOrderInfoParts/PONote\";\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { convertDatetoBPBDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr .25fr 1fr .25fr 1fr .25fr 1fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst FulfillOptionsPhone = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst CurrentOrderInfo = () => {\r\n  \r\n  const { largeScreen, customerGroup, setCustomerGroup, authType, database, setDatabase, chosen, delivDate, route, currentCartList } =\r\n    useContext(CurrentDataContext);\r\n\r\n  const { setModifications, cartList } = useContext(ToggleContext);\r\n\r\n  const [alignment, setAlignment] = useState();\r\n\r\n  useEffect(() => {\r\n    if (customerGroup) {\r\n      for (let cust of customerGroup) {\r\n        if (cust[\"custName\"] === chosen) {\r\n          switch (cust[\"zoneName\"]) {\r\n            case \"slopick\":\r\n              setAlignment(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setAlignment(\"atownpick\");\r\n              break;\r\n            default:\r\n              setAlignment(\"deliv\");\r\n          }\r\n        }\r\n      }\r\n      if (currentCartList) {\r\n        let orderCheck = currentCartList.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate) &&\r\n            Number(ord.qty > 0)\r\n        );\r\n\r\n        if (orderCheck.length > 0) {\r\n          switch (orderCheck[0].route) {\r\n            case \"slopick\":\r\n              setAlignment(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setAlignment(\"atownpick\");\r\n              break;\r\n            default:\r\n              try{\r\n                let ind = customers.findIndex(custo => custo.custName === chosen)\r\n              setAlignment(customers[ind].zoneName)\r\n              } catch {\r\n                setAlignment(\"atownpick\")\r\n              }\r\n              \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [chosen, delivDate, customerGroup, currentCartList]);\r\n\r\n\r\n  const handleChange = (e, newAlignment) => {\r\n   \r\n    if (\r\n      newAlignment !== \"deliv\" &&\r\n      newAlignment !== \"slopick\" &&\r\n      newAlignment !== \"atownpick\"\r\n    ) {\r\n      newAlignment = \"deliv\";\r\n    }\r\n    setAlignment(newAlignment);\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.route = newAlignment;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.route = route;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {largeScreen ? <TitleBox /> : \"\"}\r\n\r\n      <CurrentInfo>\r\n        {largeScreen ? (\r\n          <FulfillOptions>\r\n            <CustomerGroup\r\n              \r\n            />\r\n            {cartList ? (\r\n              <RouteSelect\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n                customerGroup={customerGroup}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </FulfillOptions>\r\n        ) : (\r\n          <FulfillOptionsPhone>\r\n            {cartList ? (\r\n              <ToggleButtonGroup\r\n                color=\"primary\"\r\n                value={alignment}\r\n                exclusive\r\n                onChange={handleChange}\r\n              >\r\n                <ToggleButton value=\"deliv\">Delivery</ToggleButton>\r\n                <ToggleButton value=\"slopick\">SLO Pickup</ToggleButton>\r\n                <ToggleButton value=\"atownpick\">Atown Pickup</ToggleButton>\r\n              </ToggleButtonGroup>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </FulfillOptionsPhone>\r\n        )}\r\n\r\n        <SpecialInfo>\r\n          {cartList ? (\r\n            <PONote database={database} setDatabase={setDatabase} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\ExportPastryPrepPdf.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["1082"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",["1083","1084","1085","1086"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["1087","1088","1089","1090","1091"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport { Calendar } from \"primereact/calendar\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst Cal = () => {\r\n  const { largeScreen, database, chosen, delivDate, setDelivDate, calendarEvents, setCalendarEvents } =\r\n    useContext(CurrentDataContext);\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const [calDate, setCalDate] = useState(new Date(delivDate.replace(\"-\", \"/\")));\r\n\r\n\r\n  useEffect(() => {\r\n    setCalDate(new Date(delivDate.replace(\"-\", \"/\")));\r\n  }, [delivDate]);\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      let backToStandingArray = CreateStandingArray(standing, chosen);\r\n      let cartDateArray = CreateCartDateArray(orders, chosen);\r\n      let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n      let standingEvents = {\r\n        groupID: \"standing\",\r\n        daysOfWeek: backToStandingArray,\r\n\r\n        display: \"background\",\r\n      };\r\n\r\n      let calendarEvents = [\r\n        { groupID: \"delivdate\", date: delivDate, display: \"background\" },\r\n      ];\r\n\r\n      calendarEvents.push(standingEvents);\r\n\r\n      for (let order of cartDateArray) {\r\n        let newEvent = { groupID: \"cart\", date: order, display: \"background\" };\r\n        calendarEvents.push(newEvent);\r\n      }\r\n\r\n      for (let order of cartBlankDateArray) {\r\n        let newEvent2 = {\r\n          groupID: \"blanks\",\r\n          date: order,\r\n          display: \"background\",\r\n        };\r\n        calendarEvents.push(newEvent2);\r\n      }\r\n\r\n      setCalendarEvents(calendarEvents);\r\n    }\r\n  }, [chosen, delivDate, database]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    try {\r\n      document.getElementById(\"orderCommand\").focus();\r\n    } catch {\r\n      console.log();\r\n    }\r\n\r\n    setDelivDate(selectInfo.dateStr);\r\n  };\r\n\r\n  const bigScreen = (\r\n    <div className=\"calendarApp\" id=\"test\">\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin]}\r\n        defaultView=\"dayGridMonth\"\r\n        aspectRatio={1}\r\n        contentHeight=\"auto\"\r\n        eventBackgroundColor=\"blue\"\r\n        dateClick={handleDateSelect}\r\n        headerToolbar={{\r\n          start: \"title\",\r\n          center: \"\",\r\n          end: \"prev,next\",\r\n        }}\r\n        events={calendarEvents}\r\n      />\r\n    </div>\r\n  );\r\n\r\n\r\n  const dateTemplate = (date) => {\r\n    let delivDay = Number(delivDate.split(\"-\")[2]);\r\n    let delivMonth = Number(delivDate.split(\"-\")[1]) - 1;\r\n    let delivYear = Number(delivDate.split(\"-\")[0]);\r\n    try {\r\n      for (let cal of calendarEvents) {\r\n        try {\r\n          let calDay = Number(cal.date.split(\"-\")[2]);\r\n          let calMonth = Number(cal.date.split(\"-\")[1]) - 1;\r\n          let calYear = Number(cal.date.split(\"-\")[0]);\r\n          if (\r\n            date.day === calDay &&\r\n            date.month === calMonth &&\r\n            date.year === calYear &&\r\n            cal.groupID === \"blanks\"\r\n          ) {\r\n            return date.day;\r\n          }\r\n        } catch (error) {}\r\n      }\r\n    } catch (error) {}\r\n    try {\r\n      if (\r\n        date.day === delivDay &&\r\n        date.month === delivMonth &&\r\n        date.year === delivYear\r\n      ) {\r\n        return (\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#2c8fe6\",\r\n              color: \"#fcf06d\",\r\n              fontWeight: \"bold\",\r\n              borderRadius: \"50%\",\r\n              width: \"3em\",\r\n              height: \"3em\",\r\n              lineHeight: \"3em\",\r\n              padding: \"0em 1em\",\r\n            }}\r\n          >\r\n            {date.day}\r\n          </div>\r\n        );\r\n      }\r\n    } catch (error) {}\r\n    try {\r\n      for (let cal of calendarEvents) {\r\n        try {\r\n          let calDay = Number(cal.date.split(\"-\")[2]);\r\n          let calMonth = Number(cal.date.split(\"-\")[1]) - 1;\r\n          let calYear = Number(cal.date.split(\"-\")[0]);\r\n          if (\r\n            date.day === calDay &&\r\n            date.month === calMonth &&\r\n            date.year === calYear &&\r\n            cal.groupID === \"cart\"\r\n          ) {\r\n            return (\r\n              <div\r\n                style={{\r\n                  backgroundColor: \"#7acc90\",\r\n                  color: \"#ffffff\",\r\n                  fontWeight: \"bold\",\r\n                  borderRadius: \"50%\",\r\n                  width: \"3em\",\r\n                  height: \"3em\",\r\n                  lineHeight: \"3em\",\r\n                  padding: \"0em 1em\",\r\n                }}\r\n              >\r\n                {date.day}\r\n              </div>\r\n            );\r\n            \r\n          }\r\n        } catch (error) {}\r\n      }\r\n    } catch (error) {}\r\n   \r\n    return date.day;\r\n  };\r\n\r\n  const handlePhoneChange = (date) => {\r\n    let year = date.value.getFullYear();\r\n    let month = date.value.getMonth() + 1;\r\n    let day = date.value.getDate();\r\n    let formatted = year + \"-\" + month + \"-\" + day;\r\n\r\n    setDelivDate(formatted);\r\n  };\r\n\r\n  const smallScreen = (\r\n    <div className=\"p-field p-col-12 p-md-4\">\r\n      <Calendar\r\n        id=\"mask\"\r\n        placeholder={delivDate}\r\n        value={calDate}\r\n        onChange={(e) => handlePhoneChange(e)}\r\n        dateTemplate={dateTemplate}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>{largeScreen ? bigScreen : smallScreen}</React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Cal;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composePastryPrep.js",["1092","1093"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToPrep.js",["1094"],"import { todayPlus, tomBasedOnDelivDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport { getOrdersList, addUp } from \"./utils\";\r\n\r\nimport { whatToPrepFilter, whatToPrepTomFilter } from \"./filters\";\r\n\r\n\r\n\r\nexport default class ComposeWhatToMake {\r\n  returnWhatToPrepBreakDown = (delivDate, database) => {\r\n    let whatToPrep = this.returnWhatToPrep(delivDate, database);\r\n\r\n    return {\r\n      whatToPrep: whatToPrep,\r\n    };\r\n  };\r\n\r\n  returnWhatToPrep = (delivDate, database) => {\r\n    let whatToPrepList = getOrdersList(delivDate, database);\r\n    let tomorrow = tomBasedOnDelivDate(delivDate)\r\n  \r\n    let whatToPrepListTom = getOrdersList(tomorrow, database);\r\n    let whatToMakeToday = whatToPrepList.filter((set) => whatToPrepFilter(set));\r\n    let whatToMakeTomorrow = whatToPrepListTom.filter((set) =>\r\n      whatToPrepTomFilter(set)\r\n    );\r\n\r\n    let whatToMake = this.makeAddQty(whatToMakeToday);\r\n    let whatToMakeTom = this.makeAddQty(whatToMakeTomorrow);\r\n\r\n    whatToMake = whatToMake.concat(whatToMakeTom);\r\n    whatToMake = whatToMake.filter(wh => wh.qty>0)\r\n    return whatToMake;\r\n  };\r\n\r\n  makeAddQty = (bakedTomorrow) => {\r\n    let makeList2 = Array.from(\r\n      new Set(bakedTomorrow.map((prod) => prod.prodName))\r\n    ).map((mk) => ({\r\n      prodName: mk,\r\n      qty: 0,\r\n      shaped: 0,\r\n      short: 0,\r\n      needEarly: 0,\r\n    }));\r\n    for (let make of makeList2) {\r\n      make.qty = 1;\r\n\r\n      let qtyAccToday = 0;\r\n\r\n      let qtyToday = bakedTomorrow\r\n        .filter((frz) => make.prodName === frz.prodName)\r\n        .map((ord) => ord.qty * ord.packSize);\r\n\r\n      if (qtyToday.length > 0) {\r\n        qtyAccToday = qtyToday.reduce(addUp);\r\n      }\r\n\r\n      make.qty = qtyAccToday;\r\n    }\r\n    return makeList2;\r\n  };\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BucketAmount.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BinInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\PanAmount.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\GetMixInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\BagMixesScreen.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Parts\\MixFormula.js",["1095","1096"],"import { todayPlus } from '../../../helpers/dateTimeHelpers';\r\nimport { getMixInfo } from './GetMixInfo'\r\n\r\nlet tomorrow = todayPlus()[1]\r\n\r\nexport const mixFormula = (doughs, infoWrap, multi, deliv) => {\r\n    //  Set up Mix 1\r\n\r\n    console.log(\"infoWrap\",infoWrap)\r\n  \r\n    let [dough, multiple, stickerAmount, bucketSets, mixes, info] = getMixInfo(\r\n      doughs,\r\n      infoWrap\r\n    );\r\n     stickerAmount = (\r\n      Number(dough.needed) +\r\n      Number(dough.buffer) +\r\n      Number(dough.short)\r\n    ).toFixed(2);\r\n\r\n    bucketSets = dough.bucketSets\r\n    if (deliv===tomorrow){\r\n      console.log(\"using preBucketSets\")\r\n      bucketSets = dough.preBucketSets\r\n    }\r\n    \r\n    let OldDough = dough.oldDough\r\n    \r\n    if(multi === 0 && (Number(OldDough\r\n      )>(Number(stickerAmount)*.2))){\r\n      OldDough = stickerAmount*.2\r\n      \r\n    }\r\n  \r\n    let Mix1BucketSets = Math.round(bucketSets * multiple[multi]);\r\n    \r\n    let Mix1OldDough = (OldDough * multiple[multi]).toFixed(2);\r\n    let Mix150lbFlour = Math.floor(\r\n      (0.5730 * ((stickerAmount-OldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) / 50\r\n    );\r\n    let Mix125lbWater = Math.floor(\r\n      (0.374 * ((stickerAmount-OldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) / 25\r\n    );\r\n    let Mix1BreadFlour = (\r\n      (0.5730 * ((stickerAmount-OldDough) * multiple[multi]) - (Mix1BucketSets * 19.22)) % 50\r\n    ).toFixed(2);\r\n    let Mix1WholeWheat = (0.038 * (stickerAmount-OldDough) * multiple[multi]).toFixed(2);\r\n    console.log(\"stickerAmount\",stickerAmount)\r\n    console.log(\"oldDough\",OldDough)\r\n    console.log(\"bucketSets\",bucketSets)\r\n    console.log(\"multiple\",multiple[multi])\r\n    let Mix1Water = (\r\n      ((0.374 * (stickerAmount-OldDough) - bucketSets * 19.22) * multiple[multi]) %\r\n      25\r\n    ).toFixed(2);\r\n    let Mix1Salt = (0.013 * (stickerAmount-OldDough) * multiple[multi]).toFixed(2);\r\n    let Mix1Yeast = (0.002 * (stickerAmount-OldDough) * multiple[multi]).toFixed(2);\r\n  \r\n    return [\r\n      { title: \"Bucket Sets\", amount: Mix1BucketSets },\r\n      { title: \"Old Dough\", amount: Mix1OldDough },\r\n      { title: \"50 lb. Bread Flour\", amount: Mix150lbFlour },\r\n      { title: \"25 lb. Bucket Water\", amount: Mix125lbWater },\r\n      { title: \"Bread Flour\", amount: Mix1BreadFlour },\r\n      { title: \"Whole Wheat Flour\", amount: Mix1WholeWheat },\r\n      { title: \"Water\", amount: Mix1Water },\r\n      { title: \"Salt\", amount: Mix1Salt },\r\n      { title: \"Yeast\", amount: Mix1Yeast },\r\n    ];\r\n  };","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\CustomerGroup.js",["1097","1098","1099","1100","1101","1102","1103","1104"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\TitleBox.js",["1105"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\RouteSelect.js",["1106","1107","1108","1109","1110"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst RouteSelect = () => {\r\n  const { setModifications, cartList, orderTypeWhole } =\r\n    useContext(ToggleContext);\r\n\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    delivDate,\r\n    currentCartList,\r\n    database,\r\n    setDatabase,\r\n    customerGroup,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [products, customers, routes, standing, orders] = database;\r\n\r\n  useEffect(() => {\r\n    setRoute(\"atownpick\");\r\n\r\n    try {\r\n      let ind = customerGroup.findIndex(cust => cust.custName === chosen)\r\n     \r\n        \r\n          switch (customerGroup[ind].zoneName) {\r\n            case \"slopick\":\r\n              setRoute(\"slopick\");\r\n              break;\r\n            case \"atownpick\":\r\n              setRoute(\"atownpick\");\r\n              break;\r\n            default:\r\n              setRoute(\"deliv\");\r\n          }\r\n        \r\n      \r\n\r\n      let orderCheck = currentCartList.filter(\r\n        (ord) =>\r\n          ord.custName === chosen &&\r\n          ord.delivDate === convertDatetoBPBDate(delivDate) &&\r\n          Number(ord.qty) > 0\r\n      );\r\n\r\n      if (orderCheck.length > 0) {\r\n        switch (orderCheck[0].route) {\r\n          case \"slopick\":\r\n            setRoute(\"slopick\");\r\n            break;\r\n          case \"atownpick\":\r\n            setRoute(\"atownpick\");\r\n            break;\r\n          default:\r\n            console.log(\"neither\");\r\n        }\r\n      }\r\n    } catch {\r\n      console.log(\"Not initialized yet\");\r\n    }\r\n  }, [chosen, delivDate, customerGroup, currentCartList]);\r\n\r\n  const handleSetRoute = (e) => {\r\n    let ordToMod = clonedeep(orders);\r\n\r\n    for (let ord of ordToMod) {\r\n      if (\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n      ) {\r\n        ord.route = e;\r\n      }\r\n\r\n      if (\r\n        ordToMod.filter(\r\n          (ord) =>\r\n            ord.custName === chosen &&\r\n            ord.delivDate === convertDatetoBPBDate(delivDate)\r\n        ).length === 0\r\n      ) {\r\n        for (let curr of currentCartList) {\r\n          curr.route = route;\r\n          ordToMod.push(curr);\r\n        }\r\n      }\r\n    }\r\n\r\n    let DBToMod = clonedeep(database);\r\n    DBToMod[4] = ordToMod;\r\n    setDatabase(DBToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {orderTypeWhole ? (\r\n        <React.Fragment>\r\n          <RadioButton\r\n            value=\"deliv\"\r\n            name=\"delivery\"\r\n            onChange={(e) => handleSetRoute(e.value)}\r\n            checked={route === \"deliv\"}\r\n            disabled={\r\n              currentCartList.length !== 0 || cartList === true ? false : true\r\n            }\r\n          />\r\n          <label htmlFor=\"delivery\">Delivery</label>\r\n        </React.Fragment>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <RadioButton\r\n        value=\"slopick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"slopick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n      <RadioButton\r\n        value=\"atownpick\"\r\n        name=\"delivery\"\r\n        onChange={(e) => handleSetRoute(e.value)}\r\n        checked={route === \"atownpick\"}\r\n        disabled={\r\n          currentCartList.length !== 0 || cartList === true ? false : true\r\n        }\r\n      />\r\n      <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default RouteSelect;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfoParts\\PONote.js",["1111","1112","1113","1114","1115","1116","1117"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtonsParts\\AddUpdate.js",["1118","1119","1120","1121","1122","1123","1124","1125"],"import React, { useContext, useRef } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { getRate } from \"../../../../helpers/billingGridHelpers\";\r\n\r\n\r\nimport {\r\n  updateOrder,\r\n  createOrder,\r\n  createStanding,\r\n  updateStanding,\r\n} from \"../../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Toast } from 'primereact/toast';\r\n\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\nconst axios = require('axios').default\r\n\r\n\r\nfunction AddUpdate({ database, setDatabase }) {\r\n  const [products, customers, routes, standing, orders, d, dd, altPricing] =\r\n    database;\r\n  const { route, ponote } = useContext(CurrentDataContext);\r\n  const { delivDate, chosen, currentCartList, standArray } =\r\n    useContext(CurrentDataContext);\r\n  const { reload, setReload } = useContext(ToggleContext);\r\n\r\n  const {\r\n    orderTypeWhole,\r\n    modifications,\r\n    setModifications,\r\n    cartList,\r\n    standList,\r\n    setIsLoading,\r\n  } = useContext(ToggleContext);\r\n\r\n  const toast = useRef(null);\r\n\r\n  const showSuccess = (prod) => {\r\n    toast.current.show({severity:'success', summary: 'Order Updated', detail:prod+' successfully entered', life: 3000});\r\n}\r\n  \r\n  const callApi = async () => {\r\n    /*\r\n    try{\r\n      axios.post('https://cuorbg4yv5.execute-api.us-east-2.amazonaws.com/done',\r\n      {\r\n        key1: chosen + \" has updated Cart order for \"+delivDate\r\n      })\r\n    }catch{\r\n      \r\n    }\r\n    */\r\n  }\r\n    \r\n\r\n  const handleUpdateCart = async () => {\r\n    for (let ord of currentCartList) {\r\n     \r\n      let rte = route;\r\n      let price = getRate(products, ord, altPricing);\r\n\r\n      const updateDetails = {\r\n        qty: ord[\"qty\"],\r\n        prodName: ord[\"prodName\"],\r\n        custName: chosen,\r\n        PONote: ponote,\r\n        rate: price,\r\n        route: rte,\r\n        SO: ord[\"qty\"],\r\n        isWhole: orderTypeWhole,\r\n        delivDate: convertDatetoBPBDate(delivDate),\r\n        timeStamp: new Date(),\r\n      };\r\n\r\n      if (ord[\"id\"]) {\r\n        console.log(\"trying update\");\r\n        updateDetails.id = ord[\"id\"];\r\n        updateDetails._version = ord[\"_version\"];\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n          );\r\n          showSuccess(updateDetails.prodName)\r\n          console.log(updateDetails.prodName, \"Successful update\");\r\n        } catch (error) {\r\n          console.log(updateDetails.prodName, \"Failed Update\");\r\n        }\r\n      } else {\r\n        console.log(\"trying create\");\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n          );\r\n          showSuccess(updateDetails.prodName)\r\n          console.log(updateDetails.prodName, \"Successful create\");\r\n        } catch (error) {\r\n          console.log(updateDetails.prodName, \"Failed create\", error);\r\n        }\r\n      }\r\n    }\r\n    callApi()\r\n    setModifications(false)\r\n    setReload(!reload);\r\n  };\r\n\r\n  const handleUpdateStanding = async () => {\r\n    for (let stand of standArray) {\r\n      if (stand[\"id\"]) {\r\n        const updateDetails = {\r\n          prodName: stand[\"prodName\"],\r\n          Mon: stand[\"Mon\"],\r\n          Tue: stand[\"Tue\"],\r\n          Wed: stand[\"Wed\"],\r\n          Thu: stand[\"Thu\"],\r\n          Fri: stand[\"Fri\"],\r\n          Sat: stand[\"Sat\"],\r\n          Sun: stand[\"Sun\"],\r\n          isStand: standList,\r\n          timeStamp: new Date(),\r\n          id: stand[\"id\"],\r\n          _version: stand[\"_version\"],\r\n        };\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(updateStanding, {\r\n              input: { ...updateDetails },\r\n            })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on creating Orders\", error);\r\n        }\r\n      } else {\r\n        const updateDetails = {\r\n          custName: chosen,\r\n          prodName: stand[\"prodName\"],\r\n          Mon: stand[\"Mon\"],\r\n          Tue: stand[\"Tue\"],\r\n          Wed: stand[\"Wed\"],\r\n          Thu: stand[\"Thu\"],\r\n          Fri: stand[\"Fri\"],\r\n          Sat: stand[\"Sat\"],\r\n          Sun: stand[\"Sun\"],\r\n          isStand: standList,\r\n          timeStamp: new Date(),\r\n        };\r\n        try {\r\n          await API.graphql(\r\n            graphqlOperation(createStanding, {\r\n              input: { ...updateDetails },\r\n            })\r\n          );\r\n        } catch (error) {\r\n          console.log(\"error on creating Orders\", error);\r\n        }\r\n      }\r\n    }\r\n    setReload(!reload);\r\n  };\r\n\r\n  const handleAddUpdate = async () => {\r\n    setIsLoading(true);\r\n    if (cartList) {\r\n      handleUpdateCart();\r\n    } else {\r\n      handleUpdateStanding();\r\n    }\r\n    //setReload(!reload)\r\n\r\n    try {\r\n      document.getElementById(\"orderCommand\").focus();\r\n    } catch {\r\n      console.log();\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const innards = \r\n  <React.Fragment>\r\n    <Toast ref={toast} />\r\n    <Button\r\n  label=\"Submit Order\"\r\n  icon=\"pi pi-plus\"\r\n  disabled={chosen === \"  \"}\r\n  onClick={handleAddUpdate}\r\n  className=\"p-button-raised p-button-rounded p-button-danger p-button-lg\"\r\n/>\r\n  </React.Fragment>\r\n  \r\n\r\n  return modifications ? innards : ''\r\n}\r\n\r\nexport default AddUpdate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["1126","1127","1128","1129","1130"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["1131","1132","1133","1134","1135","1136"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport TrashCan from \"./BuildCurrentCartListParts/TrashCan\";\r\nimport Product from \"./BuildCurrentCartListParts/Product\";\r\nimport Previous from \"./BuildCurrentCartListParts/Previous\";\r\nimport Rate from \"./BuildCurrentCartListParts/Rate\";\r\nimport Total from \"./BuildCurrentCartListParts/Total\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { buildCurrentOrder } from \"../../../../helpers/CartBuildingHelpers\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { getRate } from \"../../../../helpers/billingGridHelpers\";\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport { sortAtoZDataByIndex } from \"../../../../helpers/sortDataHelpers\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 0.5fr 2fr 0.5fr 0.5fr 0.75fr 0.5fr;\r\n  row-gap: 4px;\r\n  flex-shrink: 1;\r\n`;\r\n\r\nconst OrderGridPhone = styled.div`\r\n  width: 100%;\r\n  \r\n  padding: 10px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 2.5fr 1fr 1fr;\r\n  row-gap: 2px;\r\n  flex-shrink: 1;\r\n`;\r\n\r\nconst GrandAlign = styled.div`\r\n  width: 100%;\r\n  \r\n  padding: 10px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 2.5fr 1fr 1fr;\r\n  row-gap: 2px;\r\n  flex-shrink: 1;\r\n`;\r\n\r\nconst TotalStyle = styled.div`\r\n  font-size: 1.5em;\r\n`\r\n\r\nconst PhoneWrap = styled.div`\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: lightblue;\r\n  margin: 10px;\r\n  `\r\nconst TrashCanContainer = styled.div`\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst BuildCurrentCartList = ({ database, setDatabase, authType }) => {\r\n  const [grandTotal, setGrandTotal] = useState();\r\n  const [products, customers, routes, standing, orders, d, dd, altPricing] =\r\n    database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    ponote,\r\n    route,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const { reload, setModifications, deadlinePassed } = useContext(ToggleContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (database.length > 0) {\r\n      if (chosen !== \"  \") {\r\n        let currentOrderList = buildCurrentOrder(\r\n          chosen,\r\n          delivDate,\r\n          orders,\r\n          standing,\r\n          route,\r\n          ponote\r\n        );\r\n\r\n        for (let curr of currentOrderList) {\r\n          curr[\"temp\"] = false;\r\n          if (curr.SO !== curr.qty) {\r\n            setModifications(true);\r\n          }\r\n        }\r\n        let template\r\n        try{\r\n          template =\r\n          customers[customers.findIndex((cust) => cust.custName === chosen)]\r\n            .templateProd;\r\n        } catch {\r\n          template =[]\r\n        }\r\n        \r\n        let currentProds =[]\r\n        try{\r\n          currentProds = currentOrderList.map((curr) => curr.prodName);\r\n        } catch {\r\n          currentProds =[]\r\n        }\r\n        try{\r\n          template = template.filter((temp) => !currentProds.includes(temp));\r\n        } catch {\r\n          template = []\r\n        }\r\n       \r\n        for (let temp of template) {\r\n          let tempOrder = {\r\n            custName: chosen,\r\n            delivDate: convertDatetoBPBDate(delivDate),\r\n            isWhole: true,\r\n            prodName: temp,\r\n            SO: 0,\r\n            qty: 0,\r\n            temp: true,\r\n          };\r\n          currentOrderList.push(tempOrder);\r\n         \r\n        }\r\n        sortAtoZDataByIndex(currentOrderList, \"prodName\");\r\n        setCurrentCartList(currentOrderList);\r\n      }\r\n    }\r\n  }, [chosen, delivDate, orders, standing, reload]);\r\n\r\n  useEffect(() => {\r\n    if (currentCartList.length > 0) {\r\n      let grandTotal = 0;\r\n\r\n      for (let ord in currentCartList) {\r\n        grandTotal =\r\n          grandTotal +\r\n          getRate(products, currentCartList[ord], altPricing) *\r\n            currentCartList[ord].qty;\r\n      }\r\n\r\n      setGrandTotal(grandTotal.toFixed(2));\r\n    }\r\n  }, [currentCartList]);\r\n\r\n  const innards1 =(\r\n    <OrderGrid>\r\n        <label></label>\r\n        <label>PRODUCT</label>\r\n        <label>QTY</label>\r\n        <label>PREV</label>\r\n        <label>RATE</label>\r\n        <label>TOTAL</label>\r\n        {currentCartList\r\n          .filter((curr) => curr.qty !== 0 || curr.temp === true)\r\n          .map((order) => (\r\n            <React.Fragment key={uuidv4() + \"b\"}>\r\n              <TrashCanContainer>\r\n                <TrashCan\r\n                  order={order}\r\n                  database={database}\r\n                  setDatabase={setDatabase}\r\n                  authType={authType}\r\n                  \r\n                />\r\n              </TrashCanContainer>\r\n\r\n              <Product\r\n                order={order}\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n                authType={authType}\r\n              />\r\n              <Previous order={order} />\r\n              <Rate order={order} database={database} />\r\n              <Total order={order} database={database} />\r\n            </React.Fragment>\r\n          ))}\r\n        <label></label>\r\n        <label></label>\r\n        <label></label>\r\n        <label></label>\r\n        <label>GRAND TOTAL</label>\r\n        <label>$ {grandTotal}</label>\r\n      </OrderGrid>\r\n  )\r\n\r\n  const innards2 =(\r\n    <React.Fragment>\r\n        \r\n        {currentCartList\r\n          .filter((curr) => curr.qty !== 0 || curr.temp === true)\r\n          .map((order) => (\r\n            <React.Fragment key={uuidv4() + \"b\"}>\r\n              <PhoneWrap>\r\n              <OrderGridPhone>\r\n              \r\n              <Product\r\n                order={order}\r\n                database={database}\r\n                setDatabase={setDatabase}\r\n              />\r\n              <Previous order={order} />\r\n              </OrderGridPhone>\r\n              <OrderGridPhone>\r\n              <TrashCanContainer>\r\n                <TrashCan\r\n                  order={order}\r\n                  database={database}\r\n                  setDatabase={setDatabase}\r\n                  authType={authType}\r\n                />\r\n              </TrashCanContainer>\r\n               \r\n              <Rate order={order} database={database} />\r\n              \r\n              \r\n              <Total order={order} database={database} />\r\n              </OrderGridPhone>\r\n              </PhoneWrap>\r\n            </React.Fragment>\r\n          ))}\r\n       \r\n        <GrandAlign>\r\n        <label></label>\r\n        <label>TOTAL</label>\r\n        <TotalStyle>${grandTotal}</TotalStyle>\r\n        </GrandAlign>\r\n      </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {width > breakpoint ? innards1 : innards2 }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentCartList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\ProductList.js",["1137","1138","1139","1140"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct, productList, setProductList }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate } =\r\n    useContext(CurrentDataContext);\r\n  const { cartList } = useContext(ToggleContext)\r\n  \r\n  useEffect(() => {\r\n    if (database.length>0){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      orders,\r\n      chosen,\r\n      delivDate,\r\n      customers,\r\n      cartList\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value.prodName);\r\n  };\r\n\r\n  \r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      placeholder={\r\n        pickedProduct === \"\" ? \"Select a Product ...\" : pickedProduct\r\n      }\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen !== \"  \" ? false : true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\AddProduct.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderParts\\StandOrHold.js",["1141"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\n\r\nconst StandOrHold = ({ standHold, setStandHold }) => {\r\n  const { standList, setStandList, setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    standList ? setStandHold(\"MAKE H.O.\") : setStandHold(\"MAKE S.O.\");\r\n  }, [standList]);\r\n\r\n  const handleStandHold = () => {\r\n    let newStand = !standList;\r\n    setModifications(true)\r\n    setStandList(newStand);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className={\r\n        !standList\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n      onClick={handleStandHold}\r\n      label={standHold}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StandOrHold;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\Quantity.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\AddProduct.js",["1142","1143","1144","1145","1146"],"import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\nimport { decideWhetherToAddOrModify } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst AddProduct = ({ database, setDatabase, pickedProduct, setPickedProduct, authType }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n  } = useContext(CurrentDataContext);\r\n  const { orderTypeWhole, setModifications, deadlinePassed } = useContext(ToggleContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  const handleAdd = () => {\r\n    let qty = Number(document.getElementById(\"addedProdQty\").value);\r\n    let ind = products.findIndex(prod => prod.prodName === pickedProduct.prodName)\r\n    let rate = products[ind].wholePrice\r\n  \r\n    let newOrder = {\r\n      qty: qty,\r\n      prodName: pickedProduct.prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      rate: rate,\r\n      SO: 0,\r\n      isWhole: orderTypeWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    let newOrderList = decideWhetherToAddOrModify(\r\n      orders,\r\n      newOrder,\r\n      delivDate\r\n    );\r\n    \r\n    let DBToUpdate = clonedeep(database)\r\n    DBToUpdate[4] = newOrderList\r\n    setDatabase(DBToUpdate)\r\n    setModifications(true)\r\n    document.getElementById(\"addedProdQty\").value = null;\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      label={width > breakpoint ? \"ADD\" : ''}\r\n      disabled={chosen === \"  \" || pickedProduct === \"\" || (deadlinePassed && (authType === \"owner\" || authType === \"employee\"))}\r\n      icon=\"pi pi-plus\"\r\n      className = {width > breakpoint ? '' : 'p-button-rounded p-button-lg'}\r\n      onClick={() => handleAdd()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryParts\\ProductList.js",["1147","1148","1149","1150","1151"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { findAvailableProducts } from \"../../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { confirmDialog } from 'primereact/confirmdialog'\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst OptionGroup = styled.div`\r\n  font-size: .7em;\r\n`\r\n\r\nconst ProductList = ({ database, pickedProduct, setPickedProduct, authType }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const { chosen, delivDate, currentCartList } = useContext(CurrentDataContext);\r\n  const { deadlinePassed, cartList } = useContext(ToggleContext)\r\n\r\n  const [productList, setProductList] = useState();\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (database.length>0 && currentCartList){\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      currentCartList,\r\n      chosen,\r\n      delivDate,\r\n      customers,\r\n      cartList\r\n    );\r\n    setProductList(availableProducts);\r\n  }\r\n  }, [database, chosen, delivDate, currentCartList]);\r\n\r\n  const handleChange = (e) => {\r\n    let targ = e.target.value;\r\n\r\n    if (targ.prodName.includes(\"IN PRODUCTION\")) {\r\n      targ.prodName = targ.prodName.slice(0, -16);\r\n      confirmDialog({\r\n        message: 'This product is already in production.  We will do our best but we cannot guarantee delivery.  Rush fee may apply. Continue?',\r\n        header: 'Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        accept: () => setPickedProduct(targ)\r\n    });\r\n    } else {\r\n      setPickedProduct(targ)\r\n    }\r\n    \r\n    \r\n  };\r\n\r\n  \r\n\r\n  const itemTemplate = (option) => {\r\n   \r\n    return width>breakpoint ? option.prodName : <OptionGroup>{option.prodName}</OptionGroup>\r\n  }\r\n\r\n  return (\r\n    <Dropdown\r\n      options={productList}\r\n      optionLabel=\"prodName\"\r\n      itemTemplate = {itemTemplate}\r\n      placeholder=\"Select a product\"\r\n      name=\"products\"\r\n      value={pickedProduct}\r\n      onChange={handleChange}\r\n      disabled={chosen === \"  \" || (deadlinePassed && authType !== \"bpbadmin\") ? true : false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Previous.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Product.js",["1152","1153","1154","1155"],"import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { convertDatetoBPBDate } from \"../../../../../helpers/dateTimeHelpers\";\r\n\r\nconst { DateTime, Interval } = require(\"luxon\");\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst InputBox = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  padding: 0;\r\n  margin: 5px 10px;\r\n  color: rgb(66, 97, 201);\r\n`;\r\n\r\nconst Product = ({ order, database, setDatabase, authType }) => {\r\n  const [products, customers, routes, standing, orders] = database;\r\n  const {\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    chosen,\r\n    delivDate,\r\n    route,\r\n    ponote,\r\n  } = useContext(CurrentDataContext);\r\n  const { setModifications, deadlinePassed } = useContext(ToggleContext);\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  const updateProduct = (prodName, e) => {\r\n    let qty = Number(e);\r\n    let ordToMod = clonedeep(orders);\r\n    let ind = ordToMod.findIndex(\r\n      (ord) =>\r\n        ord.prodName === prodName &&\r\n        ord.custName === chosen &&\r\n        ord.delivDate === convertDatetoBPBDate(delivDate)\r\n    );\r\n\r\n    if (ind > -1) {\r\n      ordToMod[ind].qty = qty;\r\n    } else {\r\n      // find item in currentCartOrder\r\n      let cartInd = currentCartList.findIndex(\r\n        (curr) => curr.prodName === prodName\r\n      );\r\n\r\n      currentCartList[cartInd].route = route;\r\n      currentCartList[cartInd].PONote = ponote;\r\n      currentCartList[cartInd].qty = qty;\r\n\r\n      ordToMod.push(currentCartList[cartInd]);\r\n    }\r\n    let DBToUpdate = clonedeep(database);\r\n    DBToUpdate[4] = ordToMod;\r\n    setDatabase(DBToUpdate);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleQtyModify = (prodName, e) => {\r\n    if (e.code === \"Enter\") {\r\n      updateProduct(prodName, e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (prodName, e) => {\r\n    if (e.value) {\r\n      updateProduct(prodName, e.value);\r\n    }\r\n  };\r\n\r\n  const checkAvailability = (prod) => {\r\n    let ind = products.findIndex((pro) => pro.prodName === prod);\r\n    let leadTime = products[ind].leadTime;\r\n\r\n    let available = false;\r\n    let today = DateTime.now().setZone(\"America/Los_Angeles\");\r\n    let ddate = DateTime.fromISO(delivDate).setZone(\"America/Los_Angeles\");\r\n    const diff = Math.ceil(Interval.fromDateTimes(today, ddate).length(\"days\"));\r\n\r\n    if (Number(diff) > Number(leadTime) - 1) {\r\n      available = true;\r\n    }\r\n\r\n    return available;\r\n  };\r\n\r\n  const innards1 = (\r\n    <React.Fragment>\r\n      <div key={uuidv4()}>{order[\"prodName\"]}</div>\r\n      <InputBox>\r\n        <input\r\n          type=\"text\"\r\n          size=\"3\"\r\n          maxLength=\"4\"\r\n          key={uuidv4() + \"c\"}\r\n          disabled={\r\n            (deadlinePassed && authType !== \"bpbadmin\") ||\r\n            (checkAvailability[\"prodName\"] && authType !== \"bpbadmin\")\r\n              ? true\r\n              : false\r\n          }\r\n          id={order[\"prodName\"] + \"item\"}\r\n          name={order[\"prodName\"]}\r\n          data-qty={order[\"qty\"]}\r\n          placeholder={order[\"qty\"]}\r\n          onKeyUp={(e) => {\r\n            handleQtyModify(order[\"prodName\"], e);\r\n          }}\r\n          onBlur={(e) => {\r\n            handleBlur(order[\"prodName\"], e.target);\r\n          }}\r\n        ></input>\r\n      </InputBox>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const innards2 = (\r\n    <React.Fragment>\r\n      <Title key={uuidv4()}>{order[\"prodName\"]}</Title>\r\n      <InputNumber\r\n        value={order[\"qty\"]}\r\n        disabled={\r\n          (deadlinePassed && authType !== \"bpbadmin\") ||\r\n          (checkAvailability[\"prodName\"] && authType !== \"bpbadmin\")\r\n            ? true\r\n            : false\r\n        }\r\n        inputId={order[\"prodName\"] + \"item\"}\r\n        size=\"2\"\r\n        style={{ height: \"5em\" }}\r\n        onValueChange={(e) => {\r\n          handleBlur(order[\"prodName\"], e);\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>{width > breakpoint ? innards1 : innards2}</React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\TrashCan.js",["1156","1157","1158","1159","1160"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Rate.js",["1161","1162","1163","1164","1165","1166"],"import React from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { getRate } from \"../../../../../helpers/billingGridHelpers\"\r\n\r\nconst RateContainer = styled.div`\r\n  color: black;\r\n`;\r\n\r\nconst Rate = ({ order,database }) => {\r\n \r\n  const [products, customers, routes, standing, orders, d,dd, altPricing] = database;\r\n  let price = getRate(products,order, altPricing)\r\n \r\n  return (\r\n    <RateContainer>\r\n      <label key={uuidv4() + \"d\"}>\r\n        {price.toFixed(2)}/ea.\r\n      </label>\r\n    </RateContainer>\r\n  );\r\n};\r\n\r\nexport default Rate;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartListParts\\Total.js",["1167","1168","1169","1170","1171","1172"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { getRate } from \"../../../../../helpers/billingGridHelpers\"\r\n\r\nconst TotalContainer = styled.h3`\r\n \r\n color: rgb(88, 96, 115);\r\n`;\r\n\r\n\r\nconst Total = ({ order, database }) => {\r\n \r\n  const [products, customers, routes, standing, orders,d,dd, altPricing] = database;\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n  });\r\n\r\n  let price = getRate(products,order, altPricing)\r\n  price = price*order.qty\r\n  \r\n  return width>breakpoint ? <div key={uuidv4() + \"d\"}>\r\n  {price.toFixed(2)}\r\n</div> : <TotalContainer key={uuidv4() + \"d\"}>\r\n        {price.toFixed(2)}\r\n      </TotalContainer> \r\n};\r\n\r\nexport default Total;",["1173","1174"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\delivOrder\\delivOrder.js",["1175","1176"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { updateCustomer } from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst DelivOrder = () => {\r\n  let { setIsLoading, modifications, setModifications } =\r\n    useContext(ToggleContext);\r\n\r\n  const [customerList, setCustomerList] = useState();\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let custFilt;\r\n    custFilt = customers.filter(\r\n      (cust) =>\r\n        cust.zoneName !== \"slopick\" &&\r\n        cust.zoneName !== \"atownpick\" &&\r\n        cust.zoneName !== \"Prado Retail\" &&\r\n        cust.zoneName !== \"Carlton Retail\"\r\n    );\r\n    sortAtoZDataByIndex(custFilt,\"delivOrder\")\r\n    setCustomerList(custFilt);\r\n  }, [customers]);\r\n\r\n  \r\n\r\n  const columns = [\r\n    { field: \"custName\", header: \"Customer\" },\r\n    { field: \"zoneName\", header: \"Zone\" },\r\n    { field: \"addr1\", header: \"Address\" },\r\n    { field: \"city\", header: \"City\" },\r\n  ];\r\n\r\n  \r\n\r\n  const onRowReorder = (e) => {\r\n    setCustomerList(e.value);\r\n    setModifications(true);\r\n  };\r\n\r\n  const updateDeliveryOrder = async () => {\r\n    setIsLoading(true)\r\n    let ind = 0;\r\n    for (let cust of customerList) {\r\n      ind=ind+1\r\n      const updateDetails = {\r\n        id: cust.id,\r\n        delivOrder: ind,\r\n      };\r\n\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateCustomer, { input: { ...updateDetails } })\r\n        );\r\n        \r\n      } catch (error) {\r\n        console.log(\"error on creating Orders\", error);\r\n        setIsLoading(false);\r\n      }\r\n    \r\n    }\r\n    setIsLoading(false)\r\n    setModifications(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <Button\r\n        label=\"Update Delivery Order\"\r\n        icon=\"pi pi-plus\"\r\n        onClick={updateDeliveryOrder}\r\n        className={\r\n          modifications\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n      />\r\n      <div>\r\n        <div className=\"card\">\r\n          <DataTable value={customerList} onRowReorder={onRowReorder}>\r\n            <Column rowReorder style={{ width: \"3em\" }} />\r\n\r\n            <Column field=\"custName\" header=\"customer\"></Column>\r\n            <Column field=\"zoneName\" header=\"Zone\"></Column>\r\n            <Column field=\"addr1\" header=\"Address\"></Column>\r\n            <Column field=\"city\" header=\"City\"></Column>\r\n          </DataTable>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DelivOrder;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\custProd\\custProd.js",["1177","1178","1179","1180","1181"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\CustomApp.js",["1182","1183","1184"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction CustomApp({ chosen }) {\r\n\r\n  return (\r\n    <div>{chosen} was here.</div>\r\n  );\r\n}\r\n\r\nexport default CustomApp;\r\n",["1185","1186"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\manageUsers.js",["1187"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Buttons.js",["1188","1189"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\Info.js",["1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\manageUsers\\UserList.js",["1202"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listAuthSettingss } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst UserList = ({ selectedUser, setSelectedUser, users, setUsers }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchUsers();\r\n    setIsLoading(false);\r\n  }, [users]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const userData = await API.graphql(\r\n        graphqlOperation(listAuthSettingss, {\r\n          limit: \"1000\",\r\n        })\r\n      );\r\n      const userList = userData.data.listAuthSettingss.items;\r\n      sortAtoZDataByIndex(userList, \"businessName\");\r\n      let noDelete = userList.filter((user) => user[\"_deleted\"] !== true);\r\n\r\n      setUsers(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedUser(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {users && (\r\n          <DataTable\r\n            value={users}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedUser}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"businessName\"\r\n              header=\"Business Name\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n            <Column\r\n              field=\"firstName\"\r\n              header=\"First\"\r\n            ></Column>\r\n            <Column\r\n              field=\"lastName\"\r\n              header=\"Last\"\r\n              \r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\NavCustomers.js",["1203","1204","1205","1206"],"import React, { useState } from \"react\";\r\n\r\nimport { Menubar } from \"primereact/menubar\";\r\nimport { TabMenu } from \"primereact/tabmenu\";\r\nimport { AmplifySignOut } from \"@aws-amplify/ui-react\";\r\n\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.min.css\";\r\nimport \"primeicons/primeicons.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst BackGround = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  background-color: white;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 10fr 1fr;\r\n  background-color: white;\r\n`;\r\n\r\nfunction Nav() {\r\n  const [selectedMenu, setSelectedMenu] = useState(\"\");\r\n\r\n  const items = [\r\n    \r\n  \r\n    {\r\n      label: \"Ordering\",\r\n      icon: \"pi pi-fw pi-shopping-cart\",\r\n      command: () => {\r\n        window.location = \"/Ordering\";\r\n      },\r\n    },\r\n    \r\n    \r\n  ];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <TopBar>\r\n        <Menubar model={items} />\r\n        <AmplifySignOut />\r\n      </TopBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\helpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\QBHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\PDFHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\voice\\voice.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeUtils\\composeCroixInfo.js",["1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\FreezerThaw.js",["1237"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\utils\\composeFreezerThaw.js",["1238","1239","1240","1241"],"import { todayPlus } from \"../../../helpers/dateTimeHelpers\";\r\nimport { getFullOrders } from \"../../../helpers/CartBuildingHelpers\";\r\nimport { addProdAttr } from \"./utils\";\r\n\r\nlet today = todayPlus()[0];\r\n\r\nconst getFreezer = (delivDate, database) => {\r\n  let fullOrder = getFullOrders(delivDate, database);\r\n  fullOrder = addProdAttr(fullOrder, database); // adds forBake, packSize, currentStock\r\n  return fullOrder;\r\n};\r\n\r\nexport default class ComposeFreezerThaw {\r\n  returnFreezerThaw = (database) => {\r\n    let freezerThaw,allProds = this.getFreezerThaw(database);\r\n   \r\n\r\n    // [freshProds, shelfProds] = handleFrenchConundrum(freshProds, shelfProds);\r\n\r\n    return {\r\n      freezerThaw: freezerThaw,\r\n      allProds: allProds\r\n    };\r\n  };\r\n\r\n  getFreezerThaw(database) {\r\n    const [products, customers, routes, standing, orders] = database;\r\n    let fullOrdersToday = getFreezer(today, database);\r\n    for (let ord of fullOrdersToday){\r\n        let ind = products.findIndex(prod => prod.prodName===ord.prodName)\r\n        if (products[ind].freezerThaw===true){\r\n            ord.freezerThaw=true\r\n        } else {\r\n            ord.freezerThaw=false\r\n        }\r\n\r\n    }\r\n    let freezeFilter = fullOrdersToday.filter(full => full.freezerThaw === true)\r\n    console.log(\"full\", freezeFilter);\r\n    let allProds = Array.from(new Set(freezeFilter.map(freeze => freeze.prodName)))\r\n    console.log(\"allProds\",allProds)\r\n    return [freezeFilter, allProds]\r\n  }\r\n\r\n\r\n  \r\n\r\n}\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixCount.js",["1242","1243","1244","1245","1246","1247","1248"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeCroixInfo from \"./BPBSWhatToMakeUtils/composeCroixInfo\";\r\nimport ComposeNorthList from \"../logistics/utils/composeNorthList\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\n\r\nimport { updateProduct } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { set } from \"lodash\";\r\n\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst TwoColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1.2fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ThreeColumnGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  column-gap: 5px;\r\n  row-gap: 10px;\r\n  padding: 0px;\r\n`;\r\n\r\nconst BorderBox = styled.div`\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: grey;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ButtonStyle = styled.button`\r\n  border: 0;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  font-size: 20px;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n  &:hover {\r\n    background-color: #3e8e41;\r\n  }\r\n  &:active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n\r\nconst compose = new ComposeCroixInfo();\r\nconst compNorth = new ComposeNorthList();\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction CroixToMake() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[0]);\r\n  const [mod, setMod] = useState(false);\r\n  const [modType, setModType] = useState();\r\n  const [openingCount, setOpeningCount] = useState();\r\n  const [openingNorthCount, setOpeningNorthCount] = useState();\r\n  const [closingCount, setClosingCount] = useState();\r\n  const [closingNorthCount, setClosingNorthCount] = useState();\r\n  const [products, setProducts] = useState();\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) => gatherCroixInfo(database));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherCroixInfo = async (database) => {\r\n    let makeData = compose.returnCroixBreakDown(database, delivDate);\r\n\r\n    setOpeningCount(makeData.openingCount);\r\n    setClosingCount(makeData.closingCount);\r\n    setOpeningNorthCount(makeData.openingNorthCount);\r\n    setClosingNorthCount(makeData.closingNorthCount);\r\n    setProducts(makeData.products);\r\n  };\r\n\r\n  const openingHeader = <div>Opening South</div>;\r\n  const closeHeader = <div>Closing South</div>;\r\n\r\n  const openingNorthHeader = <div>Opening North</div>;\r\n  const closeNorthHeader = <div>Closing North</div>;\r\n\r\n  const Toggle = (e, which) => {\r\n    let newMod = clonedeep(mod);\r\n    if (newMod === true) {\r\n      submitNewNumbers(which);\r\n    }\r\n    console.log(\"mod\", newMod);\r\n    setMod(!newMod);\r\n    setModType(which);\r\n  };\r\n\r\n  const submitNewNumbers = async (which) => {\r\n    console.log(\"Submitting \" + which);\r\n    let prodToMod = clonedeep(products);\r\n    if (which === \"opening\") {\r\n\r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      setIsLoading(true);\r\n      for (let op of openingCount) {\r\n        for (let prod of prodToMod) {\r\n          console.log(\"op\", op);\r\n          console.log(\"prod\", prod);\r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n\r\n            let openId = cloneOpeningCount.findIndex(open => op.prod === open.prod)\r\n            cloneOpeningCount[openId].fixed = cloneOpeningCount[openId].qty\r\n\r\n            let closeId = cloneClosingCount.findIndex(close => op.prod === close.prod)\r\n            cloneClosingCount[closeId].fixed = cloneClosingCount[closeId].qty\r\n\r\n            setOpeningCount(cloneOpeningCount)\r\n            setClosingCount(cloneClosingCount)\r\n\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerCount: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n    if (which === \"closing\") {\r\n     \r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      setIsLoading(true);\r\n      for (let op of openingCount) {\r\n        for (let prod of prodToMod) {\r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n\r\n            let openId = cloneOpeningCount.findIndex(open => op.prod === open.prod)\r\n            cloneOpeningCount[openId].fixed = cloneOpeningCount[openId].qty\r\n\r\n            let closeId = cloneClosingCount.findIndex(close => op.prod === close.prod)\r\n            cloneClosingCount[closeId].fixed = cloneClosingCount[closeId].qty\r\n\r\n            setOpeningCount(cloneOpeningCount)\r\n            setClosingCount(cloneClosingCount)\r\n\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerCount: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n\r\n    if (which === \"openingNorth\") {\r\n      setIsLoading(true);\r\n      for (let op of openingNorthCount) {\r\n        for (let prod of prodToMod) {\r\n          console.log(\"op\", op);\r\n          console.log(\"prod\", prod);\r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerNorth: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n\r\n    if (which === \"closingNorth\") {\r\n      setIsLoading(true);\r\n      for (let op of closingNorthCount) {\r\n        for (let prod of prodToMod) {\r\n          let itemUpdate;\r\n          if (op.prod === prod.forBake) {\r\n            itemUpdate = {\r\n              id: prod.id,\r\n              freezerNorthClosing: op.qty,\r\n            };\r\n\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(updateProduct, { input: { ...itemUpdate } })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on updating product\", error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const modifyOpening = (\r\n    <Button\r\n      onClick={(e) => Toggle(e, \"opening\")}\r\n      className={\r\n        mod && modType === \"opening\"\r\n          ? \"p-button-raised p-button-rounded p-button-danger\"\r\n          : \"p-button-raised p-button-rounded p-button-success\"\r\n      }\r\n    >\r\n      {mod && modType === \"opening\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n  );\r\n  const modifyClosing = (\r\n    <Button onClick={(e) => Toggle(e, \"closing\")}\r\n    className={\r\n      mod && modType === \"closing\"\r\n        ? \"p-button-raised p-button-rounded p-button-danger\"\r\n        : \"p-button-raised p-button-rounded p-button-success\"\r\n    }>\r\n      {mod && modType === \"closing\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n  );\r\n\r\n  const modifyNorthClosing = (\r\n    <Button onClick={(e) => Toggle(e, \"closingNorth\")}\r\n    className={\r\n      mod && modType === \"closingNorth\"\r\n        ? \"p-button-raised p-button-rounded p-button-danger\"\r\n        : \"p-button-raised p-button-rounded p-button-success\"\r\n    }\r\n    >\r\n      {mod && modType === \"closingNorth\" ? (\r\n        <React.Fragment>SUBMIT</React.Fragment>\r\n      ) : (\r\n        <React.Fragment>MODIFY</React.Fragment>\r\n      )}\r\n    </Button>\r\n  );\r\n\r\n  const handleInput = (e, which) => {\r\n    console.log(\"e\", e);\r\n\r\n    return (\r\n      <InputText\r\n        className=\"p-inputtext-sm\"\r\n        placeholder={e.qty}\r\n        style={{\r\n          width: \"60px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"1.2em\",\r\n        }}\r\n        onKeyUp={(e2) => e2.code === \"Enter\" && setInfo(e2, which, e.prod)}\r\n        onBlur={(e2) => setInfo(e2, which, e.prod)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const numHolder = (e, which, day) => {\r\n    let num = e.qty;\r\n    if (which === \"proj\") {\r\n      num = day;\r\n    }\r\n    return (\r\n      <InputText\r\n        className=\"p-inputtext-sm\"\r\n        disabled\r\n        placeholder={num}\r\n        style={{\r\n          width: \"60px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"1.2em\",\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const setInfo = (e, which, prod) => {\r\n    if (which === \"opening\") {\r\n      console.log(e.target.value, which, prod);\r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      for (let op of cloneOpeningCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingCount.findIndex((cl) => cl.prod === op.prod);\r\n          op.qty = e.target.value;\r\n          cloneClosingCount[ind].qty =\r\n            cloneClosingCount[ind].fixed +\r\n            Number(e.target.value) -\r\n            cloneOpeningCount[ind].fixed;\r\n        }\r\n      }\r\n      setClosingCount(cloneClosingCount);\r\n      setOpeningCount(cloneOpeningCount);\r\n    }\r\n\r\n    if (which === \"closing\") {\r\n      console.log(e.target.value, which, prod);\r\n      let cloneOpeningCount = clonedeep(openingCount);\r\n      let cloneClosingCount = clonedeep(closingCount);\r\n      console.log(\"open\", cloneOpeningCount);\r\n      console.log(\"close\", cloneClosingCount);\r\n      for (let op of cloneOpeningCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingCount.findIndex((cl) => cl.prod === op.prod);\r\n          op.qty =\r\n            cloneOpeningCount[ind].fixed -\r\n            cloneClosingCount[ind].qty +\r\n            Number(e.target.value);\r\n          cloneClosingCount[ind].qty = Number(e.target.value);\r\n        }\r\n      }\r\n      setClosingCount(cloneClosingCount);\r\n      setOpeningCount(cloneOpeningCount);\r\n    }\r\n\r\n    if (which === \"openingNorth\") {\r\n      console.log(e.target.value, which, prod);\r\n      let cloneOpeningNorthCount = clonedeep(openingNorthCount);\r\n      let cloneClosingNorthCount = clonedeep(closingNorthCount);\r\n      for (let op of cloneOpeningNorthCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingNorthCount.findIndex(\r\n            (cl) => cl.prod === op.prod\r\n          );\r\n          op.qty = e.target.value;\r\n          cloneClosingNorthCount[ind].qty =\r\n            cloneClosingNorthCount[ind].fixed +\r\n            Number(e.target.value) -\r\n            cloneOpeningNorthCount[ind].fixed;\r\n        }\r\n      }\r\n      setClosingNorthCount(cloneClosingNorthCount);\r\n      setOpeningNorthCount(cloneOpeningNorthCount);\r\n    }\r\n\r\n    if (which === \"closingNorth\") {\r\n      console.log(e.target.value, which, prod);\r\n\r\n      let cloneClosingNorthCount = clonedeep(closingNorthCount);\r\n\r\n      console.log(\"close\", cloneClosingNorthCount);\r\n      for (let op of cloneClosingNorthCount) {\r\n        if (op.prod === prod) {\r\n          let ind = cloneClosingNorthCount.findIndex(\r\n            (cl) => cl.prod === op.prod\r\n          );\r\n          op.qty = Number(e.target.value);\r\n          cloneClosingNorthCount[ind].qty = Number(e.target.value);\r\n        }\r\n      }\r\n      setClosingNorthCount(cloneClosingNorthCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>Croissant Freezer Count {convertDatetoBPBDate(delivDate)}</h1>\r\n\r\n        <TwoColumnGrid>\r\n          <ThreeColumnGrid>\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"openingCount\"\r\n                value={openingCount}\r\n                header={openingHeader}\r\n                footer={modifyOpening}\r\n              >\r\n                <Column\r\n                  style={{\r\n                    width: \"90px\",\r\n                    backgroundColor: \"#E3F2FD\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                  field=\"prod\"\r\n                  header=\"Product\"\r\n                ></Column>\r\n                {mod && modType === \"opening\" ? (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"opening\"\r\n                    body={(e) => handleInput(e, \"opening\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    body={(e) => numHolder(e, \"opening\")}\r\n                  ></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"closingCount\"\r\n                value={closingCount}\r\n                header={closeHeader}\r\n                footer={modifyClosing}\r\n              >\r\n                {mod && modType === \"closing\" && (\r\n                  <Column\r\n                    style={{\r\n                      width: \"90px\",\r\n                      backgroundColor: \"#E3F2FD\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                    field=\"prod\"\r\n                    header=\"Prod\"\r\n                  ></Column>\r\n                )}\r\n                {mod && modType === \"closing\" ? (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"closing\"\r\n                    body={(e) => handleInput(e, \"closing\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"closing\"\r\n                    body={(e) => numHolder(e, \"closing\")}\r\n                  ></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n          </ThreeColumnGrid>\r\n          <ThreeColumnGrid>\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"openingNorthCount\"\r\n                value={openingNorthCount}\r\n                header={openingNorthHeader}\r\n              >\r\n                <Column\r\n                  style={{\r\n                    width: \"90px\",\r\n                    backgroundColor: \"#E3F2FD\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                  field=\"prod\"\r\n                  header=\"Product\"\r\n                ></Column>\r\n\r\n                <Column\r\n                  header=\"Qty\"\r\n                  body={(e) => numHolder(e, \"openingNorth\")}\r\n                ></Column>\r\n              </DataTable>\r\n            </BorderBox>\r\n\r\n            <BorderBox>\r\n              <DataTable\r\n                id=\"closingNorthCount\"\r\n                value={closingNorthCount}\r\n                header={closeNorthHeader}\r\n                footer={modifyNorthClosing}\r\n              >\r\n                {mod && modType === \"closingNorth\" && (\r\n                  <Column\r\n                    style={{\r\n                      width: \"90px\",\r\n                      backgroundColor: \"#E3F2FD\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                    field=\"prod\"\r\n                    header=\"Prod\"\r\n                  ></Column>\r\n                )}\r\n                {mod && modType === \"closingNorth\" ? (\r\n                  <Column\r\n                    field=\"qty\"\r\n                    header=\"Qty\"\r\n                    id=\"closingNorth\"\r\n                    body={(e) => handleInput(e, \"closingNorth\")}\r\n                  ></Column>\r\n                ) : (\r\n                  <Column\r\n                    header=\"Qty\"\r\n                    id=\"closingNorth\"\r\n                    body={(e) => numHolder(e, \"closingNorth\")}\r\n                  ></Column>\r\n                )}\r\n              </DataTable>\r\n            </BorderBox>\r\n          </ThreeColumnGrid>\r\n        </TwoColumnGrid>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CroixToMake;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMakeBackup.js",["1249"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1Backup.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2Backup.js",["1250"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport ToolBar from \"../logistics/ByRoute/Parts/ToolBar\"\r\nimport { confirmDialog } from 'primereact/confirmdialog'\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { convertDatetoBPBDate, todayPlus } from \"../../helpers/dateTimeHelpers\";\r\nimport { promisedData } from \"../../helpers/databaseFetchers\";\r\nimport ComposeWhatToMake from \"./Utils/composeWhatToMake\";\r\nimport ComposePastryPrep from \"./Utils/composePastryPrep\";\r\nimport ComposeWhatToPrep from \"./Utils/composeWhatToPrep\";\r\n\r\nimport { updateProduct,updateInfoQBAuth } from \"../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 60%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: left;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst compose = new ComposeWhatToMake();\r\nconst composePastry = new ComposePastryPrep();\r\nconst composePrep = new ComposeWhatToPrep();\r\n\r\nlet finalY;\r\nlet pageMargin = 20;\r\nlet tableToNextTitle = 4;\r\nlet titleToNextTable = tableToNextTitle + 2;\r\nlet tableFont = 11;\r\nlet titleFont = 14;\r\n\r\nconst buildTable = (title, doc, body, col) => {\r\n  \r\n  doc.autoTable({\r\n    theme: \"grid\",\r\n    headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    body: body,\r\n    margin: pageMargin+25,\r\n    columns: col,\r\n    startY: finalY + titleToNextTable,\r\n    styles: { fontSize: tableFont },\r\n  });\r\n};\r\n\r\nfunction BPBNBaker2() {\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n  const [setOut, setSetOut] = useState([]);\r\n  const [delivDate, setDelivDate] = useState(todayPlus()[1]);\r\n  const [whatToMake, setWhatToMake] = useState([]);\r\n  const [pastryPrep, setPastryPrep] = useState([]);\r\n  const [infoWrap, setInfoWrap] = useState({});\r\n  const [whatToPrep, setWhatToPrep] = useState();\r\n\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherWhatToPrepInfo(database)\r\n    );\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherWhatToPrepInfo = (database) => {\r\n    let whatToPrepData = composePrep.returnWhatToPrepBreakDown(delivDate, database);\r\n    setWhatToPrep(whatToPrepData.whatToPrep);\r\n  };\r\n\r\n  useEffect(() => {\r\n    confirmDialog({\r\n      message:\r\n        \"Click YES to confirm these setout numbers will be used.\",\r\n      header: \"Confirmation\",\r\n      icon: \"pi pi-exclamation-triangle\",\r\n      accept: () => setoutTimeInStone(),\r\n    });\r\n  },[])\r\n  \r\n\r\n  useEffect(() => {\r\n    setInfoWrap({\r\n      whatToPrep: whatToPrep,\r\n    });\r\n  }, [whatToPrep]);\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherWhatToMakeInfo(database)\r\n    );\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const gatherWhatToMakeInfo = (database) => {\r\n    let whatToMakeData = compose.returnWhatToMakeBreakDown(database,delivDate);\r\n    setWhatToMake(whatToMakeData.whatToMake);\r\n  };\r\n\r\n  useEffect(() => {\r\n    promisedData(setIsLoading).then((database) =>\r\n      gatherPastryPrepInfo(database)\r\n    );\r\n  }, [delivDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const setoutTimeInStone = async () => {\r\n    \r\n    let addDetails = {\r\n      id: \"CarltonsetoutTime\",\r\n      infoContent: \"updated\",\r\n      infoName: \"CarltonsetoutTime\"\r\n    };\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateInfoQBAuth, { input: { ...addDetails } })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error on updating info\", error);\r\n    }\r\n  \r\n}\r\n\r\n  const gatherPastryPrepInfo = (database) => {\r\n    let pastryPrepData = composePastry.returnPastryPrepBreakDown(\r\n      delivDate,\r\n      database,\r\n      \"Carlton\"\r\n    );\r\n    setSetOut(pastryPrepData.setOut);\r\n    setPastryPrep(pastryPrepData.pastryPrep);\r\n  };\r\n\r\n  const exportPastryPrepPdf = async (infoWrap) => {\r\n    setIsLoading(true)\r\n    \r\n    for (let set of setOut) {\r\n      let addDetails = {\r\n        id: set.id,\r\n        prepreshaped: set.qty,\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n      }\r\n    }\r\n   \r\n    for (let make of whatToMake) {\r\n      let addDetails = {\r\n        id: make.id,\r\n        prepreshaped: make.qty,\r\n      };\r\n      try {\r\n        await API.graphql(\r\n          graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n        );\r\n      } catch (error) {\r\n        console.log(\"error on updating product\", error);\r\n      }\r\n    }\r\n\r\n\r\n    const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(pageMargin, 20, `WhatToMake ${convertDatetoBPBDate(delivDate)}`);\r\n\r\n    finalY = 20;\r\n\r\n    doc.setFontSize(titleFont);\r\n   \r\n    doc.autoTable({\r\n      theme: 'grid',\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n      body: whatToMake,\r\n      margin: pageMargin,\r\n      columns: [\r\n        { header: \"Product\", dataKey: \"forBake\" },\r\n        { header: \"Weight\", dataKey: \"weight\" },\r\n        { header: \"Dough\", dataKey: \"dough\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n    });\r\n\r\n    finalY = doc.previousAutoTable.finalY + tableToNextTitle;\r\n\r\n  let col = [\r\n    { header: \"Product\", dataKey: \"prodName\" },\r\n    { header: \"Qty\", dataKey: \"qty\" },\r\n  ];\r\n  buildTable('',doc, infoWrap.whatToPrep, col);\r\n\r\n  finalY = doc.previousAutoTable.finalY + tableToNextTitle;\r\n\r\n    doc.autoTable({\r\n      body: setOut,\r\n      margin: pageMargin+25,\r\n      columns: [\r\n        { header: \"Set Out\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\",\r\n      headStyles: {fillColor: \"#dddddd\", textColor: \"#111111\"},\r\n    });\r\n    /*\r\n    finalY = doc.previousAutoTable.finalY;\r\n\r\n    doc.autoTable({\r\n      body: pastryPrep,\r\n      margin: pageMargin+25,\r\n      columns: [\r\n        { header: \"Pastry Prep\", dataKey: \"prodNick\" },\r\n        { header: \"Qty\", dataKey: \"qty\" },\r\n      ],\r\n      startY: finalY + titleToNextTable,\r\n      styles: { fontSize: tableFont },\r\n      theme: \"grid\"\r\n    });\r\n    */\r\n    doc.save(`BPBN_Baker1_${delivDate}.pdf`);\r\n    setIsLoading(false)\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={e => exportPastryPrepPdf(infoWrap)}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Prep List\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        <h1>What To Shape {convertDatetoBPBDate(delivDate)}</h1>\r\n        <ToolBar delivDate={delivDate} setDelivDate={setDelivDate} />\r\n        <div>{header}</div>\r\n\r\n        <h3>What To Shape</h3>\r\n        <DataTable value={whatToMake} className=\"p-datatable-sm\">\r\n          <Column field=\"forBake\" header=\"Product\"></Column>\r\n          <Column field=\"weight\" header=\"Weight\"></Column>\r\n          <Column field=\"dough\" header=\"Dough\"></Column>\r\n          <Column field=\"qty\" header=\"Qty\"></Column>\r\n        </DataTable>\r\n      </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BPBNBaker2;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\Utils\\composeWhatToBakeBackup.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes2.js",["1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1_2.js",[],{"ruleId":"1268","replacedBy":"1269"},{"ruleId":"1270","replacedBy":"1271"},{"ruleId":"1268","replacedBy":"1272"},{"ruleId":"1270","replacedBy":"1273"},{"ruleId":"1274","severity":1,"message":"1275","line":1,"column":38,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":48},{"ruleId":"1274","severity":1,"message":"1278","line":53,"column":9,"nodeType":"1276","messageId":"1277","endLine":53,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1279","line":84,"column":13,"nodeType":"1276","messageId":"1277","endLine":84,"endColumn":21},{"ruleId":"1268","replacedBy":"1280"},{"ruleId":"1270","replacedBy":"1281"},{"ruleId":"1274","severity":1,"message":"1282","line":54,"column":10,"nodeType":"1276","messageId":"1277","endLine":54,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":54,"column":31,"nodeType":"1276","messageId":"1277","endLine":54,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":54,"column":39,"nodeType":"1276","messageId":"1277","endLine":54,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":54,"column":49,"nodeType":"1276","messageId":"1277","endLine":54,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1287","line":66,"column":5,"nodeType":"1288","endLine":66,"endColumn":7,"suggestions":"1289"},{"ruleId":"1274","severity":1,"message":"1290","line":4,"column":10,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1291","line":13,"column":7,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1292","line":26,"column":10,"nodeType":"1276","messageId":"1277","endLine":26,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1293","line":26,"column":24,"nodeType":"1276","messageId":"1277","endLine":26,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1294","line":3,"column":10,"nodeType":"1276","messageId":"1277","endLine":3,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1295","line":34,"column":26,"nodeType":"1276","messageId":"1277","endLine":34,"endColumn":45},{"ruleId":"1286","severity":1,"message":"1296","line":38,"column":7,"nodeType":"1288","endLine":38,"endColumn":9,"suggestions":"1297"},{"ruleId":"1274","severity":1,"message":"1298","line":15,"column":5,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":14},{"ruleId":"1274","severity":1,"message":"1299","line":45,"column":11,"nodeType":"1276","messageId":"1277","endLine":45,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1300","line":45,"column":38,"nodeType":"1276","messageId":"1277","endLine":45,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1301","line":51,"column":6,"nodeType":"1288","endLine":51,"endColumn":8,"suggestions":"1302"},{"ruleId":"1286","severity":1,"message":"1303","line":57,"column":6,"nodeType":"1288","endLine":57,"endColumn":24,"suggestions":"1304"},{"ruleId":"1274","severity":1,"message":"1305","line":87,"column":9,"nodeType":"1276","messageId":"1277","endLine":87,"endColumn":16},{"ruleId":"1286","severity":1,"message":"1306","line":38,"column":9,"nodeType":"1288","endLine":38,"endColumn":11,"suggestions":"1307"},{"ruleId":"1274","severity":1,"message":"1308","line":34,"column":25,"nodeType":"1276","messageId":"1277","endLine":34,"endColumn":43},{"ruleId":"1286","severity":1,"message":"1309","line":38,"column":7,"nodeType":"1288","endLine":38,"endColumn":9,"suggestions":"1310"},{"ruleId":"1286","severity":1,"message":"1311","line":38,"column":7,"nodeType":"1288","endLine":38,"endColumn":9,"suggestions":"1312"},{"ruleId":"1286","severity":1,"message":"1313","line":38,"column":9,"nodeType":"1288","endLine":38,"endColumn":11,"suggestions":"1314"},{"ruleId":"1274","severity":1,"message":"1315","line":5,"column":20,"nodeType":"1276","messageId":"1277","endLine":5,"endColumn":29},{"ruleId":"1286","severity":1,"message":"1316","line":52,"column":7,"nodeType":"1288","endLine":52,"endColumn":70,"suggestions":"1317"},{"ruleId":"1286","severity":1,"message":"1316","line":37,"column":6,"nodeType":"1288","endLine":37,"endColumn":8,"suggestions":"1318"},{"ruleId":"1286","severity":1,"message":"1319","line":65,"column":6,"nodeType":"1288","endLine":65,"endColumn":8,"suggestions":"1320"},{"ruleId":"1268","replacedBy":"1321"},{"ruleId":"1270","replacedBy":"1322"},{"ruleId":"1286","severity":1,"message":"1323","line":64,"column":6,"nodeType":"1288","endLine":64,"endColumn":8,"suggestions":"1324"},{"ruleId":"1286","severity":1,"message":"1325","line":81,"column":5,"nodeType":"1288","endLine":81,"endColumn":7,"suggestions":"1326"},{"ruleId":"1268","replacedBy":"1327"},{"ruleId":"1270","replacedBy":"1328"},{"ruleId":"1274","severity":1,"message":"1329","line":19,"column":10,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1330","line":82,"column":10,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1282","line":82,"column":10,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":82,"column":20,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":82,"column":31,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":82,"column":39,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":82,"column":49,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1332","line":104,"column":6,"nodeType":"1288","endLine":104,"endColumn":27,"suggestions":"1333"},{"ruleId":"1268","replacedBy":"1334"},{"ruleId":"1270","replacedBy":"1335"},{"ruleId":"1268","replacedBy":"1336"},{"ruleId":"1270","replacedBy":"1337"},{"ruleId":"1274","severity":1,"message":"1338","line":83,"column":25,"nodeType":"1276","messageId":"1277","endLine":83,"endColumn":34},{"ruleId":"1274","severity":1,"message":"1339","line":85,"column":21,"nodeType":"1276","messageId":"1277","endLine":85,"endColumn":33},{"ruleId":"1274","severity":1,"message":"1340","line":251,"column":9,"nodeType":"1276","messageId":"1277","endLine":251,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1341","line":260,"column":9,"nodeType":"1276","messageId":"1277","endLine":260,"endColumn":22},{"ruleId":"1268","replacedBy":"1342"},{"ruleId":"1270","replacedBy":"1343"},{"ruleId":"1286","severity":1,"message":"1344","line":60,"column":6,"nodeType":"1288","endLine":60,"endColumn":8,"suggestions":"1345"},{"ruleId":"1274","severity":1,"message":"1346","line":57,"column":9,"nodeType":"1276","messageId":"1277","endLine":57,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1347","line":50,"column":10,"nodeType":"1276","messageId":"1277","endLine":50,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1348","line":74,"column":9,"nodeType":"1276","messageId":"1277","endLine":74,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1349","line":6,"column":10,"nodeType":"1276","messageId":"1277","endLine":6,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1350","line":83,"column":7,"nodeType":"1276","messageId":"1277","endLine":83,"endColumn":13},{"ruleId":"1286","severity":1,"message":"1351","line":113,"column":5,"nodeType":"1288","endLine":113,"endColumn":14,"suggestions":"1352"},{"ruleId":"1286","severity":1,"message":"1316","line":61,"column":6,"nodeType":"1288","endLine":61,"endColumn":8,"suggestions":"1353"},{"ruleId":"1286","severity":1,"message":"1354","line":39,"column":6,"nodeType":"1288","endLine":39,"endColumn":8,"suggestions":"1355"},{"ruleId":"1274","severity":1,"message":"1356","line":21,"column":10,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1357","line":80,"column":23,"nodeType":"1276","messageId":"1277","endLine":80,"endColumn":37},{"ruleId":"1286","severity":1,"message":"1319","line":91,"column":6,"nodeType":"1288","endLine":91,"endColumn":8,"suggestions":"1358"},{"ruleId":"1286","severity":1,"message":"1359","line":98,"column":6,"nodeType":"1288","endLine":98,"endColumn":16,"suggestions":"1360"},{"ruleId":"1286","severity":1,"message":"1359","line":107,"column":6,"nodeType":"1288","endLine":107,"endColumn":16,"suggestions":"1361"},{"ruleId":"1274","severity":1,"message":"1362","line":283,"column":9,"nodeType":"1276","messageId":"1277","endLine":283,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1363","line":287,"column":9,"nodeType":"1276","messageId":"1277","endLine":287,"endColumn":17},{"ruleId":"1286","severity":1,"message":"1344","line":57,"column":6,"nodeType":"1288","endLine":57,"endColumn":8,"suggestions":"1364"},{"ruleId":"1286","severity":1,"message":"1344","line":57,"column":6,"nodeType":"1288","endLine":57,"endColumn":8,"suggestions":"1365"},{"ruleId":"1286","severity":1,"message":"1344","line":60,"column":6,"nodeType":"1288","endLine":60,"endColumn":8,"suggestions":"1366"},{"ruleId":"1268","replacedBy":"1367"},{"ruleId":"1270","replacedBy":"1368"},{"ruleId":"1274","severity":1,"message":"1369","line":10,"column":7,"nodeType":"1276","messageId":"1277","endLine":10,"endColumn":12},{"ruleId":"1274","severity":1,"message":"1282","line":13,"column":10,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":13,"column":20,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":13,"column":31,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1282","line":22,"column":10,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":22,"column":20,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":22,"column":31,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1370","line":26,"column":3,"nodeType":"1276","messageId":"1277","endLine":26,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1298","line":47,"column":5,"nodeType":"1276","messageId":"1277","endLine":47,"endColumn":14},{"ruleId":"1274","severity":1,"message":"1371","line":49,"column":7,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1283","line":250,"column":31,"nodeType":"1276","messageId":"1277","endLine":250,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":250,"column":39,"nodeType":"1276","messageId":"1277","endLine":250,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1372","line":250,"column":65,"nodeType":"1276","messageId":"1277","endLine":250,"endColumn":75},{"ruleId":"1286","severity":1,"message":"1373","line":40,"column":6,"nodeType":"1288","endLine":40,"endColumn":16,"suggestions":"1374"},{"ruleId":"1286","severity":1,"message":"1375","line":46,"column":6,"nodeType":"1288","endLine":46,"endColumn":16,"suggestions":"1376"},{"ruleId":"1286","severity":1,"message":"1377","line":32,"column":6,"nodeType":"1288","endLine":32,"endColumn":14,"suggestions":"1378"},{"ruleId":"1286","severity":1,"message":"1379","line":32,"column":6,"nodeType":"1288","endLine":32,"endColumn":13,"suggestions":"1380"},{"ruleId":"1274","severity":1,"message":"1381","line":47,"column":10,"nodeType":"1276","messageId":"1277","endLine":47,"endColumn":16},{"ruleId":"1286","severity":1,"message":"1316","line":68,"column":6,"nodeType":"1288","endLine":68,"endColumn":8,"suggestions":"1382"},{"ruleId":"1274","severity":1,"message":"1383","line":37,"column":5,"nodeType":"1276","messageId":"1277","endLine":37,"endColumn":11},{"ruleId":"1274","severity":1,"message":"1384","line":38,"column":5,"nodeType":"1276","messageId":"1277","endLine":38,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1283","line":41,"column":31,"nodeType":"1276","messageId":"1277","endLine":41,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":41,"column":39,"nodeType":"1276","messageId":"1277","endLine":41,"endColumn":47},{"ruleId":"1286","severity":1,"message":"1385","line":85,"column":6,"nodeType":"1288","endLine":85,"endColumn":8,"suggestions":"1386"},{"ruleId":"1274","severity":1,"message":"1387","line":172,"column":13,"nodeType":"1276","messageId":"1277","endLine":172,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1283","line":22,"column":31,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1388","line":22,"column":57,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":58},{"ruleId":"1274","severity":1,"message":"1389","line":22,"column":60,"nodeType":"1276","messageId":"1277","endLine":22,"endColumn":62},{"ruleId":"1286","severity":1,"message":"1390","line":44,"column":6,"nodeType":"1288","endLine":44,"endColumn":43,"suggestions":"1391"},{"ruleId":"1286","severity":1,"message":"1316","line":44,"column":6,"nodeType":"1288","endLine":44,"endColumn":8,"suggestions":"1392"},{"ruleId":"1286","severity":1,"message":"1393","line":71,"column":5,"nodeType":"1288","endLine":71,"endColumn":7,"suggestions":"1394"},{"ruleId":"1274","severity":1,"message":"1395","line":19,"column":10,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":25},{"ruleId":"1274","severity":1,"message":"1396","line":21,"column":16,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":22},{"ruleId":"1268","replacedBy":"1397"},{"ruleId":"1270","replacedBy":"1398"},{"ruleId":"1274","severity":1,"message":"1399","line":7,"column":5,"nodeType":"1276","messageId":"1277","endLine":7,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1369","line":8,"column":5,"nodeType":"1276","messageId":"1277","endLine":8,"endColumn":10},{"ruleId":"1274","severity":1,"message":"1283","line":11,"column":31,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":11,"column":39,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1282","line":33,"column":10,"nodeType":"1276","messageId":"1277","endLine":33,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":33,"column":31,"nodeType":"1276","messageId":"1277","endLine":33,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":33,"column":39,"nodeType":"1276","messageId":"1277","endLine":33,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1282","line":49,"column":10,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":49,"column":20,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":49,"column":31,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":49,"column":39,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":49,"column":49,"nodeType":"1276","messageId":"1277","endLine":49,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1331","line":56,"column":20,"nodeType":"1276","messageId":"1277","endLine":56,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":56,"column":31,"nodeType":"1276","messageId":"1277","endLine":56,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":56,"column":39,"nodeType":"1276","messageId":"1277","endLine":56,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1282","line":122,"column":12,"nodeType":"1276","messageId":"1277","endLine":122,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1331","line":122,"column":22,"nodeType":"1276","messageId":"1277","endLine":122,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":122,"column":33,"nodeType":"1276","messageId":"1277","endLine":122,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":122,"column":41,"nodeType":"1276","messageId":"1277","endLine":122,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":122,"column":51,"nodeType":"1276","messageId":"1277","endLine":122,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1282","line":135,"column":12,"nodeType":"1276","messageId":"1277","endLine":135,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1331","line":135,"column":22,"nodeType":"1276","messageId":"1277","endLine":135,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":135,"column":33,"nodeType":"1276","messageId":"1277","endLine":135,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":135,"column":41,"nodeType":"1276","messageId":"1277","endLine":135,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":135,"column":51,"nodeType":"1276","messageId":"1277","endLine":135,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1284","line":20,"column":41,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":20,"column":51,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1282","line":97,"column":12,"nodeType":"1276","messageId":"1277","endLine":97,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1283","line":97,"column":33,"nodeType":"1276","messageId":"1277","endLine":97,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":97,"column":41,"nodeType":"1276","messageId":"1277","endLine":97,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":97,"column":51,"nodeType":"1276","messageId":"1277","endLine":97,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1282","line":19,"column":10,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":19,"column":20,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1284","line":19,"column":39,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":19,"column":49,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1400","line":42,"column":6,"nodeType":"1288","endLine":42,"endColumn":27,"suggestions":"1401"},{"ruleId":"1274","severity":1,"message":"1402","line":29,"column":7,"nodeType":"1276","messageId":"1277","endLine":29,"endColumn":12},{"ruleId":"1274","severity":1,"message":"1403","line":55,"column":9,"nodeType":"1276","messageId":"1277","endLine":55,"endColumn":15},{"ruleId":"1274","severity":1,"message":"1404","line":59,"column":10,"nodeType":"1276","messageId":"1277","endLine":59,"endColumn":15},{"ruleId":"1286","severity":1,"message":"1316","line":71,"column":6,"nodeType":"1288","endLine":71,"endColumn":8,"suggestions":"1405"},{"ruleId":"1274","severity":1,"message":"1331","line":75,"column":22,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":75,"column":33,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":75,"column":41,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":75,"column":51,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":57},{"ruleId":"1286","severity":1,"message":"1406","line":110,"column":6,"nodeType":"1288","endLine":110,"endColumn":24,"suggestions":"1407"},{"ruleId":"1274","severity":1,"message":"1408","line":128,"column":9,"nodeType":"1276","messageId":"1277","endLine":128,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1282","line":152,"column":12,"nodeType":"1276","messageId":"1277","endLine":152,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1284","line":152,"column":41,"nodeType":"1276","messageId":"1277","endLine":152,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":152,"column":51,"nodeType":"1276","messageId":"1277","endLine":152,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1409","line":159,"column":9,"nodeType":"1276","messageId":"1277","endLine":159,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1284","line":254,"column":41,"nodeType":"1276","messageId":"1277","endLine":254,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":254,"column":51,"nodeType":"1276","messageId":"1277","endLine":254,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":44,"column":22,"nodeType":"1276","messageId":"1277","endLine":44,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":44,"column":33,"nodeType":"1276","messageId":"1277","endLine":44,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":44,"column":41,"nodeType":"1276","messageId":"1277","endLine":44,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":44,"column":51,"nodeType":"1276","messageId":"1277","endLine":44,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1315","line":1,"column":10,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1410","line":17,"column":3,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1411","line":29,"column":9,"nodeType":"1276","messageId":"1277","endLine":29,"endColumn":15},{"ruleId":"1274","severity":1,"message":"1412","line":5,"column":3,"nodeType":"1276","messageId":"1277","endLine":5,"endColumn":25},{"ruleId":"1274","severity":1,"message":"1413","line":6,"column":3,"nodeType":"1276","messageId":"1277","endLine":6,"endColumn":27},{"ruleId":"1274","severity":1,"message":"1414","line":36,"column":5,"nodeType":"1276","messageId":"1277","endLine":36,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1284","line":39,"column":39,"nodeType":"1276","messageId":"1277","endLine":39,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":39,"column":49,"nodeType":"1276","messageId":"1277","endLine":39,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1331","line":91,"column":20,"nodeType":"1276","messageId":"1277","endLine":91,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":91,"column":31,"nodeType":"1276","messageId":"1277","endLine":91,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":91,"column":39,"nodeType":"1276","messageId":"1277","endLine":91,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":91,"column":49,"nodeType":"1276","messageId":"1277","endLine":91,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1282","line":108,"column":10,"nodeType":"1276","messageId":"1277","endLine":108,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":108,"column":20,"nodeType":"1276","messageId":"1277","endLine":108,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":108,"column":31,"nodeType":"1276","messageId":"1277","endLine":108,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":108,"column":39,"nodeType":"1276","messageId":"1277","endLine":108,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":108,"column":49,"nodeType":"1276","messageId":"1277","endLine":108,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1331","line":128,"column":20,"nodeType":"1276","messageId":"1277","endLine":128,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":128,"column":31,"nodeType":"1276","messageId":"1277","endLine":128,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":128,"column":39,"nodeType":"1276","messageId":"1277","endLine":128,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":128,"column":49,"nodeType":"1276","messageId":"1277","endLine":128,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1282","line":473,"column":12,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1331","line":473,"column":22,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":473,"column":33,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":473,"column":41,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1388","line":473,"column":59,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":60},{"ruleId":"1274","severity":1,"message":"1389","line":473,"column":62,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":64},{"ruleId":"1274","severity":1,"message":"1415","line":473,"column":66,"nodeType":"1276","messageId":"1277","endLine":473,"endColumn":69},{"ruleId":"1274","severity":1,"message":"1346","line":13,"column":9,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1399","line":15,"column":5,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1369","line":16,"column":5,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":10},{"ruleId":"1274","severity":1,"message":"1331","line":75,"column":22,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":75,"column":33,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":75,"column":41,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":75,"column":51,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":96,"column":22,"nodeType":"1276","messageId":"1277","endLine":96,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1284","line":96,"column":41,"nodeType":"1276","messageId":"1277","endLine":96,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":96,"column":51,"nodeType":"1276","messageId":"1277","endLine":96,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":121,"column":22,"nodeType":"1276","messageId":"1277","endLine":121,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1284","line":121,"column":41,"nodeType":"1276","messageId":"1277","endLine":121,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":121,"column":51,"nodeType":"1276","messageId":"1277","endLine":121,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":153,"column":22,"nodeType":"1276","messageId":"1277","endLine":153,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1284","line":153,"column":41,"nodeType":"1276","messageId":"1277","endLine":153,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":153,"column":51,"nodeType":"1276","messageId":"1277","endLine":153,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":185,"column":22,"nodeType":"1276","messageId":"1277","endLine":185,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1284","line":185,"column":41,"nodeType":"1276","messageId":"1277","endLine":185,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":185,"column":51,"nodeType":"1276","messageId":"1277","endLine":185,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":212,"column":22,"nodeType":"1276","messageId":"1277","endLine":212,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":212,"column":33,"nodeType":"1276","messageId":"1277","endLine":212,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":212,"column":41,"nodeType":"1276","messageId":"1277","endLine":212,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":212,"column":51,"nodeType":"1276","messageId":"1277","endLine":212,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1416","line":9,"column":10,"nodeType":"1276","messageId":"1277","endLine":9,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1417","line":9,"column":42,"nodeType":"1276","messageId":"1277","endLine":9,"endColumn":60},{"ruleId":"1274","severity":1,"message":"1283","line":46,"column":31,"nodeType":"1276","messageId":"1277","endLine":46,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":46,"column":39,"nodeType":"1276","messageId":"1277","endLine":46,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":46,"column":49,"nodeType":"1276","messageId":"1277","endLine":46,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1284","line":138,"column":39,"nodeType":"1276","messageId":"1277","endLine":138,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":138,"column":49,"nodeType":"1276","messageId":"1277","endLine":138,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1282","line":231,"column":8,"nodeType":"1276","messageId":"1277","endLine":231,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1331","line":231,"column":18,"nodeType":"1276","messageId":"1277","endLine":231,"endColumn":27},{"ruleId":"1274","severity":1,"message":"1283","line":231,"column":29,"nodeType":"1276","messageId":"1277","endLine":231,"endColumn":35},{"ruleId":"1274","severity":1,"message":"1284","line":231,"column":37,"nodeType":"1276","messageId":"1277","endLine":231,"endColumn":45},{"ruleId":"1274","severity":1,"message":"1285","line":231,"column":47,"nodeType":"1276","messageId":"1277","endLine":231,"endColumn":53},{"ruleId":"1274","severity":1,"message":"1282","line":21,"column":10,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":21,"column":31,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":21,"column":39,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":21,"column":49,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1283","line":75,"column":31,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":75,"column":39,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":75,"column":49,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1282","line":4,"column":10,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":4,"column":20,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":4,"column":31,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":4,"column":39,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":4,"column":49,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1284","line":52,"column":39,"nodeType":"1276","messageId":"1277","endLine":52,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":52,"column":49,"nodeType":"1276","messageId":"1277","endLine":52,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1282","line":4,"column":10,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":4,"column":20,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":4,"column":31,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":4,"column":39,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":4,"column":49,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1284","line":79,"column":39,"nodeType":"1276","messageId":"1277","endLine":79,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":79,"column":49,"nodeType":"1276","messageId":"1277","endLine":79,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1275","line":1,"column":17,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":27},{"ruleId":"1274","severity":1,"message":"1356","line":6,"column":10,"nodeType":"1276","messageId":"1277","endLine":6,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1418","line":11,"column":29,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":44},{"ruleId":"1274","severity":1,"message":"1419","line":46,"column":19,"nodeType":"1276","messageId":"1277","endLine":46,"endColumn":30},{"ruleId":"1274","severity":1,"message":"1420","line":7,"column":21,"nodeType":"1276","messageId":"1277","endLine":7,"endColumn":28},{"ruleId":"1286","severity":1,"message":"1421","line":33,"column":5,"nodeType":"1288","endLine":33,"endColumn":7,"suggestions":"1422"},{"ruleId":"1286","severity":1,"message":"1423","line":50,"column":6,"nodeType":"1288","endLine":50,"endColumn":8,"suggestions":"1424"},{"ruleId":"1274","severity":1,"message":"1331","line":17,"column":22,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":17,"column":33,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":17,"column":41,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":17,"column":51,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1283","line":4,"column":31,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":4,"column":39,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":4,"column":49,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1284","line":24,"column":41,"nodeType":"1276","messageId":"1277","endLine":24,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":24,"column":51,"nodeType":"1276","messageId":"1277","endLine":24,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":76,"column":22,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":76,"column":33,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":76,"column":41,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":76,"column":51,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1282","line":93,"column":12,"nodeType":"1276","messageId":"1277","endLine":93,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1331","line":93,"column":22,"nodeType":"1276","messageId":"1277","endLine":93,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":93,"column":33,"nodeType":"1276","messageId":"1277","endLine":93,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":93,"column":41,"nodeType":"1276","messageId":"1277","endLine":93,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":93,"column":51,"nodeType":"1276","messageId":"1277","endLine":93,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":106,"column":22,"nodeType":"1276","messageId":"1277","endLine":106,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":106,"column":33,"nodeType":"1276","messageId":"1277","endLine":106,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":106,"column":41,"nodeType":"1276","messageId":"1277","endLine":106,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":106,"column":51,"nodeType":"1276","messageId":"1277","endLine":106,"endColumn":57},{"ruleId":"1286","severity":1,"message":"1425","line":62,"column":6,"nodeType":"1288","endLine":62,"endColumn":21,"suggestions":"1426"},{"ruleId":"1268","replacedBy":"1427"},{"ruleId":"1270","replacedBy":"1428"},{"ruleId":"1274","severity":1,"message":"1315","line":8,"column":32,"nodeType":"1276","messageId":"1277","endLine":8,"endColumn":41},{"ruleId":"1286","severity":1,"message":"1373","line":40,"column":6,"nodeType":"1288","endLine":40,"endColumn":16,"suggestions":"1429"},{"ruleId":"1286","severity":1,"message":"1375","line":46,"column":6,"nodeType":"1288","endLine":46,"endColumn":16,"suggestions":"1430"},{"ruleId":"1274","severity":1,"message":"1315","line":12,"column":10,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1315","line":1,"column":10,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1346","line":4,"column":9,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1431","line":53,"column":39,"nodeType":"1276","messageId":"1277","endLine":53,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1432","line":53,"column":57,"nodeType":"1276","messageId":"1277","endLine":53,"endColumn":65},{"ruleId":"1286","severity":1,"message":"1433","line":104,"column":6,"nodeType":"1288","endLine":104,"endColumn":57,"suggestions":"1434"},{"ruleId":"1274","severity":1,"message":"1282","line":147,"column":10,"nodeType":"1276","messageId":"1277","endLine":147,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":147,"column":31,"nodeType":"1276","messageId":"1277","endLine":147,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":147,"column":39,"nodeType":"1276","messageId":"1277","endLine":147,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1435","line":149,"column":10,"nodeType":"1276","messageId":"1277","endLine":149,"endColumn":15},{"ruleId":"1274","severity":1,"message":"1436","line":150,"column":9,"nodeType":"1276","messageId":"1277","endLine":150,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1432","line":39,"column":5,"nodeType":"1276","messageId":"1277","endLine":39,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1437","line":75,"column":5,"nodeType":"1276","messageId":"1277","endLine":75,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1438","line":76,"column":5,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1439","line":86,"column":5,"nodeType":"1276","messageId":"1277","endLine":86,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1283","line":89,"column":31,"nodeType":"1276","messageId":"1277","endLine":89,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1346","line":15,"column":9,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1282","line":20,"column":10,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":20,"column":20,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":20,"column":31,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":37},{"ruleId":"1286","severity":1,"message":"1440","line":63,"column":6,"nodeType":"1288","endLine":63,"endColumn":35,"suggestions":"1441"},{"ruleId":"1274","severity":1,"message":"1315","line":2,"column":3,"nodeType":"1276","messageId":"1277","endLine":2,"endColumn":12},{"ruleId":"1274","severity":1,"message":"1346","line":20,"column":9,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1315","line":1,"column":10,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1442","line":11,"column":54,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":59},{"ruleId":"1274","severity":1,"message":"1443","line":11,"column":61,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":65},{"ruleId":"1274","severity":1,"message":"1444","line":5,"column":8,"nodeType":"1276","messageId":"1277","endLine":5,"endColumn":15},{"ruleId":"1274","severity":1,"message":"1445","line":5,"column":25,"nodeType":"1276","messageId":"1277","endLine":5,"endColumn":28},{"ruleId":"1274","severity":1,"message":"1446","line":5,"column":30,"nodeType":"1276","messageId":"1277","endLine":5,"endColumn":46},{"ruleId":"1274","severity":1,"message":"1282","line":32,"column":10,"nodeType":"1276","messageId":"1277","endLine":32,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":32,"column":31,"nodeType":"1276","messageId":"1277","endLine":32,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":32,"column":39,"nodeType":"1276","messageId":"1277","endLine":32,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1278","line":35,"column":9,"nodeType":"1276","messageId":"1277","endLine":35,"endColumn":20},{"ruleId":"1286","severity":1,"message":"1447","line":61,"column":6,"nodeType":"1288","endLine":61,"endColumn":60,"suggestions":"1448"},{"ruleId":"1274","severity":1,"message":"1449","line":8,"column":7,"nodeType":"1276","messageId":"1277","endLine":8,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1282","line":27,"column":10,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":27,"column":20,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":27,"column":31,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":27,"column":39,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":47},{"ruleId":"1286","severity":1,"message":"1450","line":71,"column":6,"nodeType":"1288","endLine":71,"endColumn":57,"suggestions":"1451"},{"ruleId":"1274","severity":1,"message":"1452","line":18,"column":5,"nodeType":"1276","messageId":"1277","endLine":18,"endColumn":10},{"ruleId":"1274","severity":1,"message":"1453","line":19,"column":5,"nodeType":"1276","messageId":"1277","endLine":19,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1282","line":28,"column":10,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":28,"column":20,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":28,"column":31,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":28,"column":39,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":47},{"ruleId":"1286","severity":1,"message":"1454","line":52,"column":6,"nodeType":"1288","endLine":52,"endColumn":35,"suggestions":"1455"},{"ruleId":"1274","severity":1,"message":"1456","line":23,"column":7,"nodeType":"1276","messageId":"1277","endLine":23,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1402","line":24,"column":7,"nodeType":"1276","messageId":"1277","endLine":24,"endColumn":12},{"ruleId":"1274","severity":1,"message":"1331","line":28,"column":20,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":28,"column":31,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":28,"column":39,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":28,"column":49,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1388","line":28,"column":57,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":58},{"ruleId":"1274","severity":1,"message":"1389","line":28,"column":60,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":62},{"ruleId":"1274","severity":1,"message":"1282","line":42,"column":10,"nodeType":"1276","messageId":"1277","endLine":42,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":42,"column":20,"nodeType":"1276","messageId":"1277","endLine":42,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":42,"column":31,"nodeType":"1276","messageId":"1277","endLine":42,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1285","line":42,"column":49,"nodeType":"1276","messageId":"1277","endLine":42,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1457","line":61,"column":6,"nodeType":"1288","endLine":61,"endColumn":24,"suggestions":"1458"},{"ruleId":"1274","severity":1,"message":"1283","line":74,"column":31,"nodeType":"1276","messageId":"1277","endLine":74,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1388","line":74,"column":57,"nodeType":"1276","messageId":"1277","endLine":74,"endColumn":58},{"ruleId":"1274","severity":1,"message":"1389","line":74,"column":60,"nodeType":"1276","messageId":"1277","endLine":74,"endColumn":62},{"ruleId":"1274","severity":1,"message":"1459","line":85,"column":37,"nodeType":"1276","messageId":"1277","endLine":85,"endColumn":51},{"ruleId":"1286","severity":1,"message":"1460","line":150,"column":6,"nodeType":"1288","endLine":150,"endColumn":51,"suggestions":"1461"},{"ruleId":"1286","severity":1,"message":"1462","line":165,"column":6,"nodeType":"1288","endLine":165,"endColumn":23,"suggestions":"1463"},{"ruleId":"1274","severity":1,"message":"1464","line":1,"column":17,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":25},{"ruleId":"1274","severity":1,"message":"1283","line":12,"column":31,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":12,"column":39,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":47},{"ruleId":"1286","severity":1,"message":"1465","line":29,"column":6,"nodeType":"1288","endLine":29,"endColumn":35,"suggestions":"1466"},{"ruleId":"1286","severity":1,"message":"1467","line":13,"column":6,"nodeType":"1288","endLine":13,"endColumn":17,"suggestions":"1468"},{"ruleId":"1274","severity":1,"message":"1331","line":14,"column":20,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":14,"column":31,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":14,"column":39,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1437","line":20,"column":5,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1438","line":21,"column":5,"nodeType":"1276","messageId":"1277","endLine":21,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1469","line":11,"column":8,"nodeType":"1276","messageId":"1277","endLine":11,"endColumn":12},{"ruleId":"1274","severity":1,"message":"1283","line":20,"column":31,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":20,"column":39,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":20,"column":49,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":55},{"ruleId":"1286","severity":1,"message":"1470","line":45,"column":6,"nodeType":"1288","endLine":45,"endColumn":52,"suggestions":"1471"},{"ruleId":"1274","severity":1,"message":"1331","line":28,"column":20,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":28,"column":31,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":28,"column":39,"nodeType":"1276","messageId":"1277","endLine":28,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1438","line":31,"column":5,"nodeType":"1276","messageId":"1277","endLine":31,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1282","line":15,"column":10,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1331","line":15,"column":20,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":15,"column":31,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":15,"column":39,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":15,"column":49,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1331","line":14,"column":20,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":14,"column":31,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":14,"column":39,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":14,"column":49,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1388","line":14,"column":57,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":58},{"ruleId":"1274","severity":1,"message":"1389","line":14,"column":59,"nodeType":"1276","messageId":"1277","endLine":14,"endColumn":61},{"ruleId":"1274","severity":1,"message":"1331","line":16,"column":20,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":16,"column":31,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":16,"column":39,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":16,"column":49,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1388","line":16,"column":56,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1389","line":16,"column":58,"nodeType":"1276","messageId":"1277","endLine":16,"endColumn":60},{"ruleId":"1268","replacedBy":"1472"},{"ruleId":"1270","replacedBy":"1473"},{"ruleId":"1286","severity":1,"message":"1323","line":41,"column":6,"nodeType":"1288","endLine":41,"endColumn":8,"suggestions":"1474"},{"ruleId":"1274","severity":1,"message":"1475","line":58,"column":9,"nodeType":"1276","messageId":"1277","endLine":58,"endColumn":16},{"ruleId":"1286","severity":1,"message":"1476","line":76,"column":6,"nodeType":"1288","endLine":76,"endColumn":8,"suggestions":"1477"},{"ruleId":"1286","severity":1,"message":"1316","line":127,"column":6,"nodeType":"1288","endLine":127,"endColumn":8,"suggestions":"1478"},{"ruleId":"1274","severity":1,"message":"1479","line":280,"column":21,"nodeType":"1276","messageId":"1277","endLine":280,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1479","line":293,"column":19,"nodeType":"1276","messageId":"1277","endLine":293,"endColumn":27},{"ruleId":"1274","severity":1,"message":"1479","line":323,"column":15,"nodeType":"1276","messageId":"1277","endLine":323,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1480","line":3,"column":27,"nodeType":"1276","messageId":"1277","endLine":3,"endColumn":33},{"ruleId":"1274","severity":1,"message":"1481","line":3,"column":35,"nodeType":"1276","messageId":"1277","endLine":3,"endColumn":41},{"ruleId":"1274","severity":1,"message":"1482","line":3,"column":43,"nodeType":"1276","messageId":"1277","endLine":3,"endColumn":48},{"ruleId":"1268","replacedBy":"1483"},{"ruleId":"1270","replacedBy":"1484"},{"ruleId":"1286","severity":1,"message":"1323","line":61,"column":6,"nodeType":"1288","endLine":61,"endColumn":8,"suggestions":"1485"},{"ruleId":"1274","severity":1,"message":"1486","line":30,"column":22,"nodeType":"1276","messageId":"1277","endLine":30,"endColumn":35},{"ruleId":"1274","severity":1,"message":"1279","line":131,"column":15,"nodeType":"1276","messageId":"1277","endLine":131,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1464","line":1,"column":17,"nodeType":"1276","messageId":"1277","endLine":1,"endColumn":25},{"ruleId":"1274","severity":1,"message":"1487","line":10,"column":10,"nodeType":"1276","messageId":"1277","endLine":10,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1445","line":12,"column":10,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1446","line":12,"column":15,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1488","line":12,"column":33,"nodeType":"1276","messageId":"1277","endLine":12,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1489","line":17,"column":3,"nodeType":"1276","messageId":"1277","endLine":17,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1329","line":20,"column":10,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1486","line":30,"column":22,"nodeType":"1276","messageId":"1277","endLine":30,"endColumn":35},{"ruleId":"1274","severity":1,"message":"1490","line":32,"column":9,"nodeType":"1276","messageId":"1277","endLine":32,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1491","line":33,"column":9,"nodeType":"1276","messageId":"1277","endLine":33,"endColumn":22},{"ruleId":"1286","severity":1,"message":"1492","line":63,"column":6,"nodeType":"1288","endLine":63,"endColumn":31,"suggestions":"1493"},{"ruleId":"1286","severity":1,"message":"1494","line":71,"column":6,"nodeType":"1288","endLine":71,"endColumn":20,"suggestions":"1495"},{"ruleId":"1286","severity":1,"message":"1496","line":32,"column":6,"nodeType":"1288","endLine":32,"endColumn":13,"suggestions":"1497"},{"ruleId":"1274","severity":1,"message":"1290","line":4,"column":10,"nodeType":"1276","messageId":"1277","endLine":4,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1291","line":13,"column":7,"nodeType":"1276","messageId":"1277","endLine":13,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1292","line":26,"column":10,"nodeType":"1276","messageId":"1277","endLine":26,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1293","line":26,"column":24,"nodeType":"1276","messageId":"1277","endLine":26,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1346","line":24,"column":9,"nodeType":"1276","messageId":"1277","endLine":24,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1331","line":197,"column":22,"nodeType":"1276","messageId":"1277","endLine":197,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":197,"column":33,"nodeType":"1276","messageId":"1277","endLine":197,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":197,"column":41,"nodeType":"1276","messageId":"1277","endLine":197,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":197,"column":51,"nodeType":"1276","messageId":"1277","endLine":197,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1498","line":216,"column":9,"nodeType":"1276","messageId":"1277","endLine":216,"endColumn":21},{"ruleId":"1274","severity":1,"message":"1331","line":222,"column":22,"nodeType":"1276","messageId":"1277","endLine":222,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":222,"column":33,"nodeType":"1276","messageId":"1277","endLine":222,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":222,"column":41,"nodeType":"1276","messageId":"1277","endLine":222,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":222,"column":51,"nodeType":"1276","messageId":"1277","endLine":222,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":247,"column":22,"nodeType":"1276","messageId":"1277","endLine":247,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":247,"column":33,"nodeType":"1276","messageId":"1277","endLine":247,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":247,"column":41,"nodeType":"1276","messageId":"1277","endLine":247,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":247,"column":51,"nodeType":"1276","messageId":"1277","endLine":247,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":278,"column":22,"nodeType":"1276","messageId":"1277","endLine":278,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":278,"column":33,"nodeType":"1276","messageId":"1277","endLine":278,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":278,"column":41,"nodeType":"1276","messageId":"1277","endLine":278,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":278,"column":51,"nodeType":"1276","messageId":"1277","endLine":278,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":369,"column":22,"nodeType":"1276","messageId":"1277","endLine":369,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":369,"column":33,"nodeType":"1276","messageId":"1277","endLine":369,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":369,"column":41,"nodeType":"1276","messageId":"1277","endLine":369,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":369,"column":51,"nodeType":"1276","messageId":"1277","endLine":369,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":445,"column":22,"nodeType":"1276","messageId":"1277","endLine":445,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":445,"column":33,"nodeType":"1276","messageId":"1277","endLine":445,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":445,"column":41,"nodeType":"1276","messageId":"1277","endLine":445,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":445,"column":51,"nodeType":"1276","messageId":"1277","endLine":445,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1331","line":526,"column":20,"nodeType":"1276","messageId":"1277","endLine":526,"endColumn":29},{"ruleId":"1274","severity":1,"message":"1283","line":526,"column":31,"nodeType":"1276","messageId":"1277","endLine":526,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":526,"column":39,"nodeType":"1276","messageId":"1277","endLine":526,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":526,"column":49,"nodeType":"1276","messageId":"1277","endLine":526,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1499","line":15,"column":10,"nodeType":"1276","messageId":"1277","endLine":15,"endColumn":26},{"ruleId":"1274","severity":1,"message":"1331","line":27,"column":22,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":31},{"ruleId":"1274","severity":1,"message":"1283","line":27,"column":33,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":27,"column":41,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1285","line":27,"column":51,"nodeType":"1276","messageId":"1277","endLine":27,"endColumn":57},{"ruleId":"1274","severity":1,"message":"1500","line":20,"column":8,"nodeType":"1276","messageId":"1277","endLine":20,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1501","line":24,"column":10,"nodeType":"1276","messageId":"1277","endLine":24,"endColumn":13},{"ruleId":"1274","severity":1,"message":"1502","line":57,"column":7,"nodeType":"1276","messageId":"1277","endLine":57,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1503","line":65,"column":7,"nodeType":"1276","messageId":"1277","endLine":65,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1504","line":76,"column":7,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1505","line":94,"column":7,"nodeType":"1276","messageId":"1277","endLine":94,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1339","line":101,"column":21,"nodeType":"1276","messageId":"1277","endLine":101,"endColumn":33},{"ruleId":"1274","severity":1,"message":"1346","line":57,"column":9,"nodeType":"1276","messageId":"1277","endLine":57,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1330","line":82,"column":10,"nodeType":"1276","messageId":"1277","endLine":82,"endColumn":20},{"ruleId":"1274","severity":1,"message":"1506","line":53,"column":10,"nodeType":"1276","messageId":"1277","endLine":53,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1370","line":59,"column":3,"nodeType":"1276","messageId":"1277","endLine":59,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1346","line":76,"column":9,"nodeType":"1276","messageId":"1277","endLine":76,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1282","line":88,"column":10,"nodeType":"1276","messageId":"1277","endLine":88,"endColumn":18},{"ruleId":"1274","severity":1,"message":"1283","line":88,"column":31,"nodeType":"1276","messageId":"1277","endLine":88,"endColumn":37},{"ruleId":"1274","severity":1,"message":"1284","line":88,"column":39,"nodeType":"1276","messageId":"1277","endLine":88,"endColumn":47},{"ruleId":"1274","severity":1,"message":"1285","line":88,"column":49,"nodeType":"1276","messageId":"1277","endLine":88,"endColumn":55},{"ruleId":"1274","severity":1,"message":"1507","line":90,"column":10,"nodeType":"1276","messageId":"1277","endLine":90,"endColumn":23},{"ruleId":"1274","severity":1,"message":"1431","line":90,"column":25,"nodeType":"1276","messageId":"1277","endLine":90,"endColumn":41},{"ruleId":"1274","severity":1,"message":"1403","line":92,"column":5,"nodeType":"1276","messageId":"1277","endLine":92,"endColumn":11},{"ruleId":"1274","severity":1,"message":"1459","line":97,"column":5,"nodeType":"1276","messageId":"1277","endLine":97,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1508","line":98,"column":5,"nodeType":"1276","messageId":"1277","endLine":98,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1509","line":101,"column":11,"nodeType":"1276","messageId":"1277","endLine":101,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1339","line":101,"column":30,"nodeType":"1276","messageId":"1277","endLine":101,"endColumn":42},{"ruleId":"1274","severity":1,"message":"1283","line":138,"column":33,"nodeType":"1276","messageId":"1277","endLine":138,"endColumn":39},{"ruleId":"1274","severity":1,"message":"1284","line":138,"column":41,"nodeType":"1276","messageId":"1277","endLine":138,"endColumn":49},{"ruleId":"1274","severity":1,"message":"1372","line":138,"column":67,"nodeType":"1276","messageId":"1277","endLine":138,"endColumn":77},"no-native-reassign",["1510"],"no-negated-in-lhs",["1511"],["1510"],["1511"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","'userData' is assigned a value but never used.",["1510"],["1511"],"'products' is assigned a value but never used.","'routes' is assigned a value but never used.","'standing' is assigned a value but never used.","'orders' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'customers' and 'setCustomerGroup'. Either include them or remove the dependency array.","ArrayExpression",["1512"],"'TabMenu' is defined but never used.","'BackGround' is assigned a value but never used.","'selectedMenu' is assigned a value but never used.","'setSelectedMenu' is assigned a value but never used.","'FilterStandHoldDups' is defined but never used.","'setOriginalStanding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["1513"],"'yesterday' is assigned a value but never used.","'readyForSq' is assigned a value but never used.","'setReadyForWeekly' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'buildOrders'. Either include it or remove the dependency array.",["1514"],"React Hook useEffect has a missing dependency: 'setReadyForSq'. Either include it or remove the dependency array.",["1515"],"'fetchSq' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["1516"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["1517"],"React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.",["1518"],"React Hook useEffect has a missing dependency: 'fetchRoutes'. Either include it or remove the dependency array.",["1519"],"'todayPlus' is defined but never used.","React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["1520"],["1521"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1522"],["1510"],["1511"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1523"],"React Hook useEffect has a missing dependency: 'setoutTimeInStone'. Either include it or remove the dependency array.",["1524"],["1510"],["1511"],"'sortAtoZDataByIndex' is defined but never used.","'pastryPrep' is assigned a value but never used.","'customers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDeadlinePassed' and 'setDelivDate'. Either include them or remove the dependency array.",["1525"],["1510"],["1511"],["1510"],["1511"],"'setReload' is assigned a value but never used.","'setDelivDate' is assigned a value but never used.","'modifyOpening' is assigned a value but never used.","'modifyClosing' is assigned a value but never used.",["1510"],["1511"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1526"],"'DateTime' is assigned a value but never used.","'AMOthers' is assigned a value but never used.","'dynamicColumnsAMOthers' is assigned a value but never used.","'Button' is defined but never used.","'twoDay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'doughs'. Either include it or remove the dependency array.",["1527"],["1528"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setRoutesLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1529"],"'ToggleContext' is defined but never used.","'setPocketCount' is assigned a value but never used.",["1530"],"React Hook useEffect has a missing dependency: 'loc'. Either include it or remove the dependency array.",["1531"],["1532"],"'pocketValues' is assigned a value but never used.","'newArray' is assigned a value but never used.",["1533"],["1534"],["1535"],["1510"],["1511"],"'today' is assigned a value but never used.","'checkDeadlineStatus' is defined but never used.","'buildDateTime' is assigned a value but never used.","'altPricing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setDoughs' and 'setIsLoading'. Either include them or remove the dependency array.",["1536"],"React Hook useEffect has missing dependencies: 'setDoughComponents' and 'setIsLoading'. Either include them or remove the dependency array.",["1537"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["1538"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["1539"],"'target' is assigned a value but never used.",["1540"],"'Sunday' is assigned a value but never used.","'Sunday15due' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDelivDate'. Either include it or remove the dependency array.",["1541"],"'custNick' is assigned a value but never used.","'d' is assigned a value but never used.","'dd' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'orders', 'products', 'setDailyInvoices', and 'standing'. Either include them or remove the dependency array. If 'setDailyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1542"],["1543"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["1544"],"'listInfoQBAuths' is defined but never used.","'uuidv4' is defined but never used.",["1510"],["1511"],"'tomorrow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'routes' and 'setRouteList'. Either include them or remove the dependency array. If 'setRouteList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1545"],"'axios' is assigned a value but never used.","'reload' is assigned a value but never used.","'zones' is assigned a value but never used.",["1546"],"React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["1547"],"'exportListPdf' is assigned a value but never used.","'init' is assigned a value but never used.","'noBaguette' is defined but never used.","'oneDay' is assigned a value but never used.","'TwodayBasedOnDelivDate' is defined but never used.","'ThreedayBasedOnDelivDate' is defined but never used.","'convertedTomorrow' is assigned a value but never used.","'alt' is assigned a value but never used.","'pocketFilter' is defined but never used.","'baker1PocketFilter' is defined but never used.","'createQBInvoice' is defined but never used.","'invToModify' is assigned a value but never used.","'getRate' is defined but never used.","React Hook useEffect has a missing dependency: 'setModifications'. Either include it or remove the dependency array.",["1548"],"React Hook useEffect has missing dependencies: 'doughComponents' and 'selectedDough'. Either include them or remove the dependency array.",["1549"],"React Hook useEffect has missing dependencies: 'altPricing', 'custo', 'products', and 'setPickedRate'. Either include them or remove the dependency array. If 'setPickedRate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1550"],["1510"],["1511"],["1551"],["1552"],"'setCustomerGroup' is assigned a value but never used.","'authType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'customers'. Either include it or remove the dependency array.",["1553"],"'width' is assigned a value but never used.","'breakpoint' is assigned a value but never used.","'currentCartList' is assigned a value but never used.","'setCurrentCartList' is assigned a value but never used.","'setModifications' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["1554"],"'mixes' is assigned a value but never used.","'info' is assigned a value but never used.","'Amplify' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.","React Hook useEffect has a missing dependency: 'setCustomerGroup'. Either include it or remove the dependency array.",["1555"],"'TitleFrame' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRoute'. Either include it or remove the dependency array.",["1556"],"'route' is assigned a value but never used.","'setRoute' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCheck' and 'setPonote'. Either include them or remove the dependency array.",["1557"],"'clonedeep' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["1558"],"'deadlinePassed' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers', 'database.length', 'ponote', 'route', 'setCurrentCartList', and 'setModifications'. Either include them or remove the dependency array.",["1559"],"React Hook useEffect has missing dependencies: 'altPricing' and 'products'. Either include them or remove the dependency array.",["1560"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'cartList', 'customers', 'orders', 'products', and 'setProductList'. Either include them or remove the dependency array. If 'setProductList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1561"],"React Hook useEffect has a missing dependency: 'setStandHold'. Either include it or remove the dependency array. If 'setStandHold' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1562"],"'swal' is defined but never used.","React Hook useEffect has missing dependencies: 'cartList', 'customers', and 'products'. Either include them or remove the dependency array.",["1563"],["1510"],["1511"],["1564"],"'columns' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers', 'products', 'setChosen', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["1565"],["1566"],"'prodData' is assigned a value but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.",["1510"],["1511"],["1567"],"'setCustLoaded' is assigned a value but never used.","'listCustomers' is defined but never used.","'Auth' is defined but never used.","'setPickUserValue' is defined but never used.","'setIsLoading' is assigned a value but never used.","'fullCustomers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTarget'. Either include it or remove the dependency array. If 'setTarget' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1568"],"React Hook useEffect has missing dependencies: 'customers' and 'setSource'. Either include them or remove the dependency array. If 'setSource' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1569"],"React Hook useEffect has missing dependencies: 'fetchUsers' and 'setIsLoading'. Either include them or remove the dependency array.",["1570"],"'frozenDelivs' is assigned a value but never used.","'calcInvoiceTotal' is defined but never used.","'jsPDF' is defined but never used.","'set' is defined but never used.","'ButtonContainer' is assigned a value but never used.","'ButtonWrapper' is assigned a value but never used.","'ButtonStyle' is assigned a value but never used.","'compNorth' is assigned a value but never used.","'confirmDialog' is defined but never used.","'customerGroup' is assigned a value but never used.","'setDeadlinePassed' is assigned a value but never used.","'chosen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1571","fix":"1572"},{"desc":"1573","fix":"1574"},{"desc":"1575","fix":"1576"},{"desc":"1577","fix":"1578"},{"desc":"1579","fix":"1580"},{"desc":"1581","fix":"1582"},{"desc":"1583","fix":"1584"},{"desc":"1585","fix":"1586"},{"desc":"1587","fix":"1588"},{"desc":"1589","fix":"1590"},{"desc":"1591","fix":"1592"},{"desc":"1593","fix":"1594"},{"desc":"1595","fix":"1596"},{"desc":"1597","fix":"1598"},{"desc":"1599","fix":"1600"},{"desc":"1601","fix":"1602"},{"desc":"1589","fix":"1603"},{"desc":"1604","fix":"1605"},{"desc":"1591","fix":"1606"},{"desc":"1607","fix":"1608"},{"desc":"1607","fix":"1609"},{"desc":"1599","fix":"1610"},{"desc":"1599","fix":"1611"},{"desc":"1599","fix":"1612"},{"desc":"1613","fix":"1614"},{"desc":"1615","fix":"1616"},{"desc":"1617","fix":"1618"},{"desc":"1619","fix":"1620"},{"desc":"1589","fix":"1621"},{"desc":"1622","fix":"1623"},{"desc":"1624","fix":"1625"},{"desc":"1589","fix":"1626"},{"desc":"1627","fix":"1628"},{"desc":"1629","fix":"1630"},{"desc":"1589","fix":"1631"},{"desc":"1632","fix":"1633"},{"desc":"1634","fix":"1635"},{"desc":"1636","fix":"1637"},{"desc":"1638","fix":"1639"},{"desc":"1613","fix":"1640"},{"desc":"1615","fix":"1641"},{"desc":"1642","fix":"1643"},{"desc":"1644","fix":"1645"},{"desc":"1646","fix":"1647"},{"desc":"1648","fix":"1649"},{"desc":"1650","fix":"1651"},{"desc":"1652","fix":"1653"},{"desc":"1654","fix":"1655"},{"desc":"1656","fix":"1657"},{"desc":"1658","fix":"1659"},{"desc":"1660","fix":"1661"},{"desc":"1662","fix":"1663"},{"desc":"1593","fix":"1664"},{"desc":"1665","fix":"1666"},{"desc":"1589","fix":"1667"},{"desc":"1593","fix":"1668"},{"desc":"1669","fix":"1670"},{"desc":"1671","fix":"1672"},{"desc":"1673","fix":"1674"},"Update the dependencies array to be: [customers, setCustomerGroup]",{"range":"1675","text":"1676"},"Update the dependencies array to be: [fetchStanding]",{"range":"1677","text":"1678"},"Update the dependencies array to be: [buildOrders]",{"range":"1679","text":"1680"},"Update the dependencies array to be: [orders, products, setReadyForSq]",{"range":"1681","text":"1682"},"Update the dependencies array to be: [fetchProducts]",{"range":"1683","text":"1684"},"Update the dependencies array to be: [fetchHolding]",{"range":"1685","text":"1686"},"Update the dependencies array to be: [fetchCustomers]",{"range":"1687","text":"1688"},"Update the dependencies array to be: [fetchRoutes]",{"range":"1689","text":"1690"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"1691","text":"1692"},"Update the dependencies array to be: [setIsLoading]",{"range":"1693","text":"1694"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1695","text":"1696"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1697","text":"1698"},"Update the dependencies array to be: [setoutTimeInStone]",{"range":"1699","text":"1700"},"Update the dependencies array to be: [delivDate, authType, setDeadlinePassed, setDelivDate]",{"range":"1701","text":"1702"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1703","text":"1704"},"Update the dependencies array to be: [doughs, pockets]",{"range":"1705","text":"1706"},{"range":"1707","text":"1694"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",{"range":"1708","text":"1709"},{"range":"1710","text":"1696"},"Update the dependencies array to be: [loc, products]",{"range":"1711","text":"1712"},{"range":"1713","text":"1712"},{"range":"1714","text":"1704"},{"range":"1715","text":"1704"},{"range":"1716","text":"1704"},"Update the dependencies array to be: [isReload, setDoughs, setIsLoading]",{"range":"1717","text":"1718"},"Update the dependencies array to be: [isReload, setDoughComponents, setIsLoading]",{"range":"1719","text":"1720"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"1721","text":"1722"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"1723","text":"1724"},{"range":"1725","text":"1694"},"Update the dependencies array to be: [setDelivDate]",{"range":"1726","text":"1727"},"Update the dependencies array to be: [delivDate, database, nextInv, zones, standing, orders, customers, products, altPricing, setDailyInvoices]",{"range":"1728","text":"1729"},{"range":"1730","text":"1694"},"Update the dependencies array to be: [products]",{"range":"1731","text":"1732"},"Update the dependencies array to be: [orderList, database, setRouteList, routes]",{"range":"1733","text":"1734"},{"range":"1735","text":"1694"},"Update the dependencies array to be: [route, orderList, constructColumns, constructData]",{"range":"1736","text":"1737"},"Update the dependencies array to be: [setModifications]",{"range":"1738","text":"1739"},"Update the dependencies array to be: [doughComponents, selectedDough]",{"range":"1740","text":"1741"},"Update the dependencies array to be: [altPricing, custo, pickedProduct, products, setPickedRate]",{"range":"1742","text":"1743"},{"range":"1744","text":"1718"},{"range":"1745","text":"1720"},"Update the dependencies array to be: [chosen, delivDate, customerGroup, currentCartList, customers]",{"range":"1746","text":"1747"},"Update the dependencies array to be: [chosen, delivDate, database, standing, orders, setCalendarEvents]",{"range":"1748","text":"1749"},"Update the dependencies array to be: [customers, orderTypeWhole, orders, database, userNum, setCustomerGroup]",{"range":"1750","text":"1751"},"Update the dependencies array to be: [chosen, delivDate, customerGroup, currentCartList, setRoute]",{"range":"1752","text":"1753"},"Update the dependencies array to be: [chosen, delivDate, database, setPonote, orderCheck]",{"range":"1754","text":"1755"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"1756","text":"1757"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications, customers]",{"range":"1758","text":"1759"},"Update the dependencies array to be: [altPricing, currentCartList, products]",{"range":"1760","text":"1761"},"Update the dependencies array to be: [database, chosen, delivDate, products, orders, customers, cartList, setProductList]",{"range":"1762","text":"1763"},"Update the dependencies array to be: [setStandHold, standList]",{"range":"1764","text":"1765"},"Update the dependencies array to be: [database, chosen, delivDate, currentCartList, products, customers, cartList]",{"range":"1766","text":"1767"},{"range":"1768","text":"1698"},"Update the dependencies array to be: [customers, products, setChosen, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"1769","text":"1770"},{"range":"1771","text":"1694"},{"range":"1772","text":"1698"},"Update the dependencies array to be: [selectedUser, customers, setTarget]",{"range":"1773","text":"1774"},"Update the dependencies array to be: [customers, selectedUser, setSource]",{"range":"1775","text":"1776"},"Update the dependencies array to be: [fetchUsers, setIsLoading, users]",{"range":"1777","text":"1778"},[2759,2761],"[customers, setCustomerGroup]",[1069,1071],"[fetchStanding]",[1535,1537],"[buildOrders]",[1657,1675],"[orders, products, setReadyForSq]",[899,901],"[fetchProducts]",[990,992],"[fetchHolding]",[901,903],"[fetchCustomers]",[883,885],"[fetchRoutes]",[1560,1623],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[1116,1118],"[setIsLoading]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[2231,2233],"[setoutTimeInStone]",[2686,2707],"[delivDate, authType, setDeadlinePassed, setDelivDate]",[1847,1849],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[2906,2915],"[doughs, pockets]",[1823,1825],[1457,1459],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setRoutesLoaded, setStandLoaded]",[2572,2574],[2788,2798],"[loc, products]",[3059,3069],[1693,1695],[1693,1695],[1863,1865],[945,955],"[isReload, setDoughs, setIsLoading]",[1085,1095],"[isReload, setDoughComponents, setIsLoading]",[903,911],"[fetchRoutes, routes, setIsLoading]",[896,903],"[fetchZones, setIsLoading, zones]",[1895,1897],[2207,2209],"[setDelivDate]",[1440,1477],"[delivDate, database, nextInv, zones, standing, orders, customers, products, altPricing, setDailyInvoices]",[1111,1113],[1931,1933],"[products]",[1264,1285],"[orderList, database, setRouteList, routes]",[2101,2103],[3152,3170],"[route, orderList, constructColumns, constructData]",[881,883],"[setModifications]",[1141,1143],"[doughComponents, selectedDough]",[1697,1712],"[altPricing, custo, pickedProduct, products, setPickedRate]",[942,952],[1082,1092],[3029,3080],"[chosen, delivDate, customerGroup, currentCartList, customers]",[1985,2014],"[chosen, delivDate, database, standing, orders, setCalendarEvents]",[1780,1834],"[customers, orderTypeWhole, orders, database, userNum, setCustomerGroup]",[1847,1898],"[chosen, delivDate, customerGroup, currentCartList, setRoute]",[1277,1306],"[chosen, delivDate, database, setPonote, orderCheck]",[1608,1626],"[chosen, setStandArray, setStandList, standing]",[4003,4048],"[chosen, delivDate, orders, standing, reload, database.length, route, ponote, setCurrentCartList, setModifications, customers]",[4403,4420],"[altPricing, currentCartList, products]",[922,951],"[database, chosen, delivDate, products, orders, customers, cartList, setProductList]",[424,435],"[setStandHold, standList]",[1407,1453],"[database, chosen, delivDate, currentCartList, products, customers, cartList]",[1538,1540],[2316,2318],"[customers, products, setChosen, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[3746,3748],[1853,1855],[1535,1560],"[selectedUser, customers, setTarget]",[1750,1764],"[customers, selectedUser, setSource]",[904,911],"[fetchUsers, setIsLoading, users]"]