[{"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js":"1","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js":"2","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js":"3","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js":"4","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js":"5","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js":"6","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js":"7","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js":"8","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js":"9","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js":"10","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js":"11","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js":"12","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js":"13","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js":"14","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js":"15","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js":"16","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js":"17","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js":"18","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js":"19","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js":"20","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js":"21","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js":"22","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js":"23","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js":"24","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js":"25","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js":"26","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js":"27","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js":"28","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js":"29","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js":"30","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js":"31","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js":"32","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js":"33","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js":"34","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js":"35","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js":"36","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js":"37","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js":"38","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js":"39","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js":"40","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js":"41","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js":"42","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js":"43","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js":"44","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js":"45","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js":"46","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js":"47","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js":"48","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js":"49","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js":"50","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js":"51","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js":"52","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js":"53","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js":"54","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js":"55","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js":"56","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js":"57","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js":"58","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js":"59","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js":"60","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js":"61","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js":"62","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js":"63","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js":"64","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js":"65","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js":"66","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js":"67","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js":"68","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js":"69","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js":"70","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js":"71","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js":"72","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js":"73","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js":"74","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js":"75","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js":"76","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js":"77","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js":"78","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js":"79","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\WeeklyBillingGrid.js":"80","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyRows.js":"81","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyOrdersRows.js":"82","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js":"83","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js":"84","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js":"85","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js":"86","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js":"87","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js":"88","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js":"89","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js":"90","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js":"91","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js":"92","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js":"93","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js":"94","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js":"95","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js":"96","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js":"97","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js":"98","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js":"99","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js":"100","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js":"101","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js":"102","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js":"103","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js":"104","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js":"105","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js":"106","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js":"107","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js":"108","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js":"109","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js":"110","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\prodBuildHelpers.js":"111"},{"size":362,"mtime":1609089131749,"results":"112","hashOfConfig":"113"},{"size":1863,"mtime":1617818579988,"results":"114","hashOfConfig":"113"},{"size":500,"mtime":1609089131749,"results":"115","hashOfConfig":"113"},{"size":1552,"mtime":1615234090706,"results":"116","hashOfConfig":"113"},{"size":4289,"mtime":1617798961457,"results":"117","hashOfConfig":"113"},{"size":4285,"mtime":1617821739211,"results":"118","hashOfConfig":"113"},{"size":1437,"mtime":1615383938668,"results":"119","hashOfConfig":"113"},{"size":1821,"mtime":1615751621965,"results":"120","hashOfConfig":"113"},{"size":5575,"mtime":1616159004282,"results":"121","hashOfConfig":"113"},{"size":1963,"mtime":1615553936489,"results":"122","hashOfConfig":"113"},{"size":1147,"mtime":1615769660331,"results":"123","hashOfConfig":"113"},{"size":1724,"mtime":1616793575974,"results":"124","hashOfConfig":"113"},{"size":3695,"mtime":1618861833430,"results":"125","hashOfConfig":"113"},{"size":1512,"mtime":1617815034947,"results":"126","hashOfConfig":"113"},{"size":5558,"mtime":1616621713104,"results":"127","hashOfConfig":"113"},{"size":430,"mtime":1613420662670,"results":"128","hashOfConfig":"113"},{"size":3035,"mtime":1615903495527,"results":"129","hashOfConfig":"113"},{"size":3205,"mtime":1616159609022,"results":"130","hashOfConfig":"113"},{"size":255,"mtime":1615903509294,"results":"131","hashOfConfig":"113"},{"size":3915,"mtime":1616761533191,"results":"132","hashOfConfig":"113"},{"size":385,"mtime":1615903603650,"results":"133","hashOfConfig":"113"},{"size":8547,"mtime":1615903588925,"results":"134","hashOfConfig":"113"},{"size":5034,"mtime":1615680842855,"results":"135","hashOfConfig":"113"},{"size":1941,"mtime":1615553782688,"results":"136","hashOfConfig":"113"},{"size":5445,"mtime":1618002741926,"results":"137","hashOfConfig":"113"},{"size":190,"mtime":1613420662655,"results":"138","hashOfConfig":"113"},{"size":190,"mtime":1613420662654,"results":"139","hashOfConfig":"113"},{"size":193,"mtime":1613420662657,"results":"140","hashOfConfig":"113"},{"size":191,"mtime":1613420662650,"results":"141","hashOfConfig":"113"},{"size":1873,"mtime":1614706269300,"results":"142","hashOfConfig":"113"},{"size":2839,"mtime":1615903326526,"results":"143","hashOfConfig":"113"},{"size":6607,"mtime":1617761959112,"results":"144","hashOfConfig":"113"},{"size":1071,"mtime":1615903378930,"results":"145","hashOfConfig":"113"},{"size":6551,"mtime":1618501155249,"results":"146","hashOfConfig":"113"},{"size":6366,"mtime":1617750737048,"results":"147","hashOfConfig":"113"},{"size":1334,"mtime":1614213824864,"results":"148","hashOfConfig":"149"},{"size":2653,"mtime":1617762093727,"results":"150","hashOfConfig":"113"},{"size":3526,"mtime":1615553539269,"results":"151","hashOfConfig":"113"},{"size":3768,"mtime":1618240925162,"results":"152","hashOfConfig":"113"},{"size":734,"mtime":1620153119665,"results":"153","hashOfConfig":"113"},{"size":9284,"mtime":1620153114898,"results":"154","hashOfConfig":"113"},{"size":14602,"mtime":1620153115231,"results":"155","hashOfConfig":"113"},{"size":1517,"mtime":1615553494489,"results":"156","hashOfConfig":"113"},{"size":1490,"mtime":1615553525148,"results":"157","hashOfConfig":"113"},{"size":4566,"mtime":1616250120792,"results":"158","hashOfConfig":"113"},{"size":2575,"mtime":1615553481891,"results":"159","hashOfConfig":"113"},{"size":3054,"mtime":1617713108483,"results":"160","hashOfConfig":"113"},{"size":6476,"mtime":1617713740979,"results":"161","hashOfConfig":"113"},{"size":1788,"mtime":1618443329262,"results":"162","hashOfConfig":"113"},{"size":2706,"mtime":1615903181106,"results":"163","hashOfConfig":"113"},{"size":2185,"mtime":1615903223171,"results":"164","hashOfConfig":"113"},{"size":8714,"mtime":1615903198181,"results":"165","hashOfConfig":"113"},{"size":3933,"mtime":1615903165052,"results":"166","hashOfConfig":"113"},{"size":2679,"mtime":1615903258284,"results":"167","hashOfConfig":"113"},{"size":2155,"mtime":1615903290204,"results":"168","hashOfConfig":"113"},{"size":3530,"mtime":1615903238512,"results":"169","hashOfConfig":"113"},{"size":1888,"mtime":1615903277736,"results":"170","hashOfConfig":"113"},{"size":1890,"mtime":1617307853955,"results":"171","hashOfConfig":"113"},{"size":1514,"mtime":1619978720348,"results":"172","hashOfConfig":"113"},{"size":6424,"mtime":1620153375193,"results":"173","hashOfConfig":"113"},{"size":2186,"mtime":1615578317981,"results":"174","hashOfConfig":"113"},{"size":2848,"mtime":1618841679011,"results":"175","hashOfConfig":"113"},{"size":5626,"mtime":1620153274892,"results":"176","hashOfConfig":"113"},{"size":1488,"mtime":1615570828178,"results":"177","hashOfConfig":"113"},{"size":3480,"mtime":1617913000436,"results":"178","hashOfConfig":"113"},{"size":14030,"mtime":1617921076706,"results":"179","hashOfConfig":"113"},{"size":1614,"mtime":1616720968751,"results":"180","hashOfConfig":"113"},{"size":8078,"mtime":1620160074661,"results":"181","hashOfConfig":"113"},{"size":4619,"mtime":1620162221983,"results":"182","hashOfConfig":"113"},{"size":2292,"mtime":1617662121769,"results":"183","hashOfConfig":"113"},{"size":1223,"mtime":1616718969576,"results":"184","hashOfConfig":"113"},{"size":4133,"mtime":1617824058058,"results":"185","hashOfConfig":"113"},{"size":4114,"mtime":1617659976077,"results":"186","hashOfConfig":"113"},{"size":4166,"mtime":1617909217980,"results":"187","hashOfConfig":"113"},{"size":8339,"mtime":1617910444640,"results":"188","hashOfConfig":"113"},{"size":3642,"mtime":1617909225980,"results":"189","hashOfConfig":"113"},{"size":1136,"mtime":1618403990465,"results":"190","hashOfConfig":"113"},{"size":4995,"mtime":1617659976081,"results":"191","hashOfConfig":"113"},{"size":2821,"mtime":1617659976086,"results":"192","hashOfConfig":"113"},{"size":7971,"mtime":1617909239492,"results":"193","hashOfConfig":"113"},{"size":1615,"mtime":1617659976084,"results":"194","hashOfConfig":"113"},{"size":6120,"mtime":1618403957233,"results":"195","hashOfConfig":"113"},{"size":5843,"mtime":1617824049416,"results":"196","hashOfConfig":"113"},{"size":192,"mtime":1617971208691,"results":"197","hashOfConfig":"113"},{"size":192,"mtime":1617971217372,"results":"198","hashOfConfig":"113"},{"size":194,"mtime":1617971225026,"results":"199","hashOfConfig":"113"},{"size":187,"mtime":1617971232662,"results":"200","hashOfConfig":"113"},{"size":3444,"mtime":1618794737066,"results":"201","hashOfConfig":"113"},{"size":194,"mtime":1617982198959,"results":"202","hashOfConfig":"113"},{"size":7050,"mtime":1620165119341,"results":"203","hashOfConfig":"113"},{"size":188,"mtime":1617982284825,"results":"204","hashOfConfig":"113"},{"size":184,"mtime":1618002271161,"results":"205","hashOfConfig":"113"},{"size":178,"mtime":1618002242693,"results":"206","hashOfConfig":"113"},{"size":184,"mtime":1618002310224,"results":"207","hashOfConfig":"113"},{"size":3461,"mtime":1618762822178,"results":"208","hashOfConfig":"113"},{"size":1902,"mtime":1618765403958,"results":"209","hashOfConfig":"113"},{"size":1667,"mtime":1618668363266,"results":"210","hashOfConfig":"113"},{"size":6790,"mtime":1618765015946,"results":"211","hashOfConfig":"113"},{"size":1451,"mtime":1618668391001,"results":"212","hashOfConfig":"113"},{"size":3342,"mtime":1618759249168,"results":"213","hashOfConfig":"113"},{"size":3386,"mtime":1618668400552,"results":"214","hashOfConfig":"113"},{"size":5121,"mtime":1618764059783,"results":"215","hashOfConfig":"113"},{"size":3501,"mtime":1618668437732,"results":"216","hashOfConfig":"113"},{"size":3356,"mtime":1618668379506,"results":"217","hashOfConfig":"113"},{"size":3388,"mtime":1618668410879,"results":"218","hashOfConfig":"113"},{"size":1899,"mtime":1618794786478,"results":"219","hashOfConfig":"113"},{"size":296,"mtime":1618795089593,"results":"220","hashOfConfig":"113"},{"size":6787,"mtime":1618794829362,"results":"221","hashOfConfig":"113"},{"size":1239,"mtime":1618836767832,"results":"222","hashOfConfig":"113"},{"size":9664,"mtime":1620133956503,"results":"223","hashOfConfig":"113"},{"size":5030,"mtime":1620164953968,"results":"224","hashOfConfig":"113"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},"1cny99d",{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"227"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"227"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"227"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"227"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"227"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"227"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"227"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"227"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"227"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"227"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"227"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"227"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dwemmr",{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"227"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"227"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"227"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"227"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"227"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"227"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"227"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"227"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"227"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"227"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"227"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"227"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"227"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"227"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"227"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"227"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"227"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"227"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"227"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"227"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"227"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"227"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"227"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\reportWebVitals.js",[],["484","485"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\App.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\index.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CustomerContext.js",["486"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listCustomers } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const CustomerContext = createContext();\r\n\r\nexport const CustomerProvider = (props) => {\r\n\r\n    const [customers, setCustomer] = useState([]);\r\n    const [ custLoaded, setCustLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <CustomerContext.Provider value={{ \r\n            customers, setCustomer, \r\n            custLoaded, setCustLoaded\r\n            }}>\r\n            {props.children}\r\n        </CustomerContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const CustomerLoad = () => {\r\n\r\n    const { setCustomer, setCustLoaded } = useContext(CustomerContext)\r\n\r\n    useEffect(() => {\r\n        fetchCustomers()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchCustomers = async () => {\r\n        try{\r\n          const custData = await API.graphql(graphqlOperation(listCustomers, {\r\n                limit: '500'\r\n                }))\r\n          const custList = custData.data.listCustomers.items;\r\n          sortAtoZDataByIndex(custList,\"custName\")\r\n          let noDelete = custList.filter(cust => cust[\"_deleted\"]!==true)\r\n          setCustomer(noDelete)\r\n          setCustLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Cust List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\dateTimeHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\OrdersContext.js",["487","488","489","490"],"import React, { useState, createContext, useContext, useEffect } from \"react\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../helpers/sortDataHelpers\";\r\n\r\nimport { listOrders } from \"../graphql/queries\";\r\nimport { createOrder } from \"../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport { ProductsContext } from \"./ProductsContext\";\r\nimport { ToggleContext } from \"./ToggleContext\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nexport const OrdersContext = createContext();\r\n\r\nexport const OrdersProvider = (props) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [recentOrders, setRecentOrders] = useState([]);\r\n  const [originalOrders, setOriginalOrders] = useState([]);\r\n  const [ordersLoaded, setOrdersLoaded] = useState(false);\r\n\r\n  return (\r\n    <OrdersContext.Provider\r\n      value={{\r\n        orders,\r\n        setOrders,\r\n        recentOrders,\r\n        setRecentOrders,\r\n        originalOrders,\r\n        setOriginalOrders,\r\n        ordersLoaded,\r\n        setOrdersLoaded,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </OrdersContext.Provider>\r\n  );\r\n};\r\n\r\nexport const OrdersLoad = () => {\r\n\r\n  \r\n  const { orders, setOrders, setOrdersLoaded } = useContext(\r\n    OrdersContext\r\n  );\r\n  const { readyForSq, setReadyForSq, setReadyForWeekly } = useContext(ToggleContext)\r\n  const { products } = useContext(ProductsContext)\r\n \r\n\r\n  useEffect(() => {\r\n    buildOrders();\r\n  },[]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if(orders.length>0 &&\r\n      products.length>0){\r\n        setReadyForSq(true)\r\n      }\r\n  },[orders,products])\r\n\r\n  useEffect(()=> {\r\n    if (readyForSq){\r\n      fetchSq(orders)\r\n    }\r\n  },[readyForSq])\r\n  \r\n  const buildOrders = async () => {\r\n    let ord = await fetchOrders();\r\n    setOrders(ord)\r\n    setOrdersLoaded(true); \r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n    try {\r\n      const ordData = await API.graphql(\r\n        graphqlOperation(listOrders, {\r\n          limit: \"5000\",\r\n        })\r\n      );\r\n      const ordList = ordData.data.listOrders.items;\r\n\r\n      let noDelete = ordList.filter((cust) => cust[\"_deleted\"] !== true);\r\n      let sortedData = sortAtoZDataByIndex(noDelete, \"timeStamp\");\r\n      sortedData = sortAtoZDataByIndex(sortedData, \"prodName\");\r\n\r\n      return sortedData;\r\n    } catch (error) {\r\n      console.log(\"error on fetching Orders List\", error);\r\n    }\r\n  };\r\n  \r\n  const fetchSq = async (ords) => {\r\n    try {\r\n      let response = await fetch(\r\n        \"https://8eo1jrov6a.execute-api.us-east-2.amazonaws.com/done\"\r\n      );\r\n\r\n      let newOrders = await response.json();\r\n      newOrders = JSON.parse(newOrders);\r\n\r\n      for (let newOrd of newOrders) {\r\n        let qty = Number(newOrd[\"qty\"]);\r\n        let dt = new Date().toISOString();\r\n        let delivDate = newOrd[\"delivDate\"].split(\"T\")[0];\r\n        delivDate = delivDate.split(\"-\");\r\n        delivDate = delivDate[1] + \"/\" + delivDate[2] + \"/\" + delivDate[0];\r\n\r\n        let locIDBPBN = \"16VS30T9E7CM9\";\r\n\r\n        let rt;\r\n        let custName = newOrd[\"custName\"];\r\n\r\n        let prodName =\r\n          products[\r\n            products.findIndex((prod) => newOrd[\"item\"].includes(prod.squareID))\r\n          ][\"prodName\"];\r\n\r\n        if (newOrd[\"route\"] === locIDBPBN) {\r\n          rt = \"atownpick\";\r\n        } else {\r\n          rt = \"slopick\";\r\n        }\r\n\r\n        let itemToAdd = {\r\n          SO: qty,\r\n          qty: qty,\r\n          timeStamp: dt,\r\n          isWhole: false,\r\n          PONote: \"paid\",\r\n          delivDate: delivDate,\r\n          custName: custName,\r\n          prodName: prodName,\r\n          route: rt,\r\n        };\r\n\r\n        // Search orders for object, if doesn't exist, add:\r\n        let ind = ords.findIndex(\r\n          (ord) => ord[\"custName\"] === custName && ord[\"prodName\"] === prodName\r\n        );\r\n\r\n        if (ind === -1) {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...itemToAdd } })\r\n            );\r\n            ords.push(itemToAdd);\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n      setOrders(ords);\r\n      \r\n      \r\n      \r\n    } catch {\r\n      console.log(\"Request Failed\");\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  return <React.Fragment></React.Fragment>;\r\n};\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ProductsContext.js",["491"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { listProducts } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\n\r\n\r\n\r\nexport const ProductsContext = createContext();\r\n\r\nexport const ProductsProvider = (props) => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [ prodLoaded, setProdLoaded ] = useState(false)\r\n    \r\n    \r\n    return (\r\n        <ProductsContext.Provider value={{ \r\n            products, setProducts, \r\n            prodLoaded, setProdLoaded\r\n            }}>\r\n            {props.children}\r\n        </ProductsContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const ProductsLoad = () => {\r\n\r\n    const { setProducts, setProdLoaded } = useContext(ProductsContext)\r\n\r\n    useEffect(() => {\r\n        fetchProducts()\r\n      },[])\r\n\r\n\r\n    const fetchProducts = async () => {\r\n        try{\r\n          const prodData = await API.graphql(graphqlOperation(listProducts, {limit: '500'}))\r\n          const prodList = prodData.data.listProducts.items;\r\n          sortAtoZDataByIndex(prodList,\"prodName\")\r\n          setProducts(prodList)\r\n          setProdLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Product List', error)\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\StandingContext.js",["492","493","494"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { FilterStandHoldDups } from '../helpers/useFetch'\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listStandings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const StandingContext = createContext();\r\n\r\n\r\nexport const StandingProvider = (props) => {\r\n\r\n    const [standing, setStanding] = useState([]);\r\n    const [ originalStanding, setOriginalStanding ] = useState([]);\r\n    const [ standLoaded, setStandLoaded ] = useState(false)\r\n\r\n    return (\r\n        <StandingContext.Provider value={{ standing, setStanding,originalStanding, setOriginalStanding, standLoaded, setStandLoaded }}>\r\n            {props.children}\r\n        </StandingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const StandingLoad = () => {\r\n\r\n    const { setStanding, setOriginalStanding, setStandLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        fetchStanding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchStanding = async () => {\r\n        try{\r\n            const standData = await API.graphql(graphqlOperation(listStandings, {\r\n                limit: '5000'\r\n                }))\r\n            const standList = standData.data.listStandings.items;\r\n            let noDelete = standList.filter(stand => stand[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n            \r\n           \r\n            setStanding(sortedData);\r\n            setStandLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Standing List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\sortDataHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\useFetch.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\CurrentDataContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\HoldingContext.js",["495","496"],"import React, { useState, createContext, useContext, useEffect } from 'react';\r\n\r\nimport { sortAtoZDataByIndex } from '../helpers/sortDataHelpers'\r\n\r\nimport { listHoldings } from '../graphql/queries'\r\n\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nexport const HoldingContext = createContext();\r\n\r\n\r\nexport const HoldingProvider = (props) => {\r\n\r\n    const [holding, setHolding] = useState([]);\r\n    const [ originalHolding, setOriginalHolding ] = useState([]);\r\n    const [ holdLoaded, setHoldLoaded ] = useState(false)\r\n\r\n    return (\r\n        <HoldingContext.Provider value={{ holding, setHolding, originalHolding, setOriginalHolding, holdLoaded, setHoldLoaded }}>\r\n            {props.children}\r\n        </HoldingContext.Provider>\r\n    );   \r\n    \r\n};\r\n\r\n\r\nexport const HoldingLoad = () => {\r\n\r\n\r\n    const { setHolding, setOriginalHolding, setHoldLoaded } = useContext(HoldingContext)\r\n\r\n    useEffect(() => {\r\n        fetchHolding()\r\n    },[])\r\n\r\n\r\n\r\n    const fetchHolding = async () => {\r\n        try{\r\n            const holdData = await API.graphql(graphqlOperation(listHoldings, {\r\n                limit: '5000'\r\n                }))\r\n            const holdList = holdData.data.listHoldings.items;\r\n            let noDelete = holdList.filter(hold => hold[\"_deleted\"]!==true)\r\n            \r\n            \r\n            let sortedData = sortAtoZDataByIndex(noDelete,\"timeStamp\")\r\n           \r\n         \r\n            setHolding(sortedData);\r\n            setHoldLoaded(true)\r\n        } catch (error){\r\n          console.log('error on fetching Hold List', error)\r\n        }\r\n      }\r\n  \r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    )\r\n    \r\n};\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\AppRoutes.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\ToggleContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\CartBuildingHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\dataContexts\\RoutesContext.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\AddCartEntryItem.js",["497"],"import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../../helpers/dateTimeHelpers\";\r\nimport {\r\n  findAvailableProducts,\r\n  decideWhetherToAddOrModify,\r\n} from \"../../../../helpers/sortDataHelpers\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst AddProductButtons = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  justify-content: space-around;\r\n  background-color: lightgrey;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst AddCartEntryItem = () => {\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders, setOrders } = useContext(OrdersContext);\r\n  const { chosen, delivDate, route, ponote, currentCartList } = useContext(\r\n    CurrentDataContext\r\n  );\r\n  const { orderTypeWhole } = useContext(ToggleContext);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [productList, setProductList] = useState();\r\n\r\n  useEffect(() => {\r\n    let availableProducts = findAvailableProducts(\r\n      products,\r\n      currentCartList,\r\n      chosen,\r\n      delivDate\r\n    );\r\n    setProductList(availableProducts);\r\n  }, [products, orders, chosen, delivDate]);\r\n\r\n  const handleChange = (e) => {\r\n    setPickedProduct(e.target.value);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    let qty = Number(document.getElementById(\"addedProdQty\").value);\r\n\r\n    let newOrder = {\r\n      qty: qty,\r\n      prodName: pickedProduct.prodName,\r\n      custName: chosen,\r\n      PONote: ponote,\r\n      route: route,\r\n      SO: 0,\r\n      isWhole: orderTypeWhole,\r\n      delivDate: convertDatetoBPBDate(delivDate),\r\n    };\r\n    let newOrderList = decideWhetherToAddOrModify(orders, newOrder, delivDate);\r\n    setOrders(newOrderList);\r\n    document.getElementById(\"addedProdQty\").value = null;\r\n    setPickedProduct(\"\");\r\n  };\r\n\r\n  return (\r\n    <AddProductButtons>\r\n      <Dropdown\r\n        options={productList}\r\n        optionLabel=\"prodName\"\r\n        placeholder=\"Select a product\"\r\n        name=\"products\"\r\n        value={pickedProduct}\r\n        onChange={handleChange}\r\n        disabled={chosen !== \"  \" ? false : true}\r\n      />\r\n      <span className=\"p-float-label\">\r\n        <InputText\r\n          id=\"addedProdQty\"\r\n          size=\"10\"\r\n          disabled={chosen !== \"  \" ? false : true}\r\n        />\r\n        <label htmlFor=\"qty\">Quantity</label>\r\n      </span>\r\n      <Button\r\n        label=\"ADD\"\r\n        disabled={chosen === \"  \" || pickedProduct === \"\"}\r\n        icon=\"pi pi-plus\"\r\n        onClick={() => handleAdd()}\r\n      />\r\n    </AddProductButtons>\r\n  );\r\n};\r\n\r\nexport default AddCartEntryItem;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\AddStandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\CartEntryItem.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\CartOrder\\BuildCurrentCartList.js",["498"],"\r\nimport React, { useContext, useEffect } from \"react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { buildCurrentOrder } from \"../../../../helpers/CartBuildingHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 0.5fr 3fr 0.5fr 0.5fr;\r\n  row-gap: 4px;\r\n  flex-shrink: 1;\r\n`;\r\nconst TrashCan = styled.div`\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst InputBox = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Previous = styled.div`\r\n  font-weight: bold;\r\n  color: red;\r\n`;\r\n\r\nconst BuildCurrentCartList = () => {\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    ponote,\r\n    route,\r\n  } = useContext(CurrentDataContext);\r\n  const { setModifications } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (chosen !== \"  \") {\r\n      let currentOrderList = buildCurrentOrder(\r\n        chosen,\r\n        delivDate,\r\n        orders,\r\n        standing,\r\n        route,\r\n        ponote\r\n      );\r\n      currentOrderList = currentOrderList.filter((order) => order[\"qty\"] !== 0);\r\n        \r\n      setCurrentCartList(currentOrderList);\r\n    }\r\n  }, [chosen, delivDate, orders, standing, route, ponote]);\r\n\r\n  const handleQtyModify = (prodName, qty) => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    let ind = cartToMod.findIndex((cur) => cur[\"prodName\"] === prodName);\r\n    cartToMod[ind][\"qty\"] = qty;\r\n\r\n    setCurrentCartList(cartToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label></label>\r\n        <label>PRODUCT</label>\r\n        <label>QTY</label>\r\n        <label>PREV</label>\r\n        {currentCartList.map((order) => (\r\n          <React.Fragment key={order[\"prodName\"] + \"b\"}>\r\n            <TrashCan>\r\n              <Button\r\n                icon=\"pi pi-trash\"\r\n                className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                value={0}\r\n                onClick={(e) => {\r\n                  handleQtyModify(order[\"prodName\"], 0);\r\n                }}\r\n                key={order[\"prodName\"] + \"e\"}\r\n                name={order[\"prodName\"]}\r\n                data-qty={order[\"qty\"]}\r\n                id={order[\"prodName\"]}\r\n              />\r\n            </TrashCan>\r\n            <label key={order[\"prodName\"]}>{order[\"prodName\"]}</label>\r\n            <InputBox>\r\n              <input\r\n                type=\"text\"\r\n                size=\"3\"\r\n                maxLength=\"4\"\r\n                key={order[\"prodName\"] + \"c\"}\r\n                id={order[\"prodName\"] + \"item\"}\r\n                name={order[\"prodName\"]}\r\n                data-qty={order[\"qty\"]}\r\n                placeholder={order[\"qty\"]}\r\n                onKeyUp={(e) => {\r\n                  handleQtyModify(order[\"prodName\"], Number(e.target.value));\r\n                }}\r\n                onBlur={(e) => {\r\n                  e.target.value = null;\r\n                }}\r\n              ></input>\r\n            </InputBox>\r\n            <Previous>\r\n              <label key={order[\"prodName\"] + \"d\"}>\r\n                {order[\"SO\"] === order[\"qty\"] ? \"\" : order[\"SO\"]}\r\n              </label>\r\n            </Previous>\r\n          </React.Fragment>\r\n        ))}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentCartList;","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\StandingOrderEntry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\e_CurrentOrderList\\StandingOrder\\BuildCurrentStandingList.js",["499"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderGrid = styled.div`\r\n  width: 100%;\r\n  font-size: 1em;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  display: grid;\r\n  grid-template-columns: 5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-self: center;\r\n  row-gap: 10px;\r\n`;\r\nconst StandInput = styled.input`\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  width: 80%;\r\n`;\r\n\r\nconst entryNotZero = {\r\n  fontSize: \"1.1em\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst entryZero = {\r\n  fontSize: \"1em\",\r\n  fontWeight: \"normal\",\r\n};\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst BuildCurrentStandingList = () => {\r\n  const { standing } = useContext(StandingContext);\r\n  const { setStandList, setModifications } = useContext(ToggleContext);\r\n  const { chosen, standArray, setStandArray } = useContext(CurrentDataContext);\r\n\r\n  useEffect(() => {\r\n    let Stand = standing.filter((stand) => stand[\"custName\"] === chosen);\r\n    if (Stand.length > 0) {\r\n      Stand = Stand[0][\"isStand\"];\r\n    } else {\r\n      Stand = true;\r\n    }\r\n\r\n    setStandList(Stand);\r\n    let buildStandArray = standing.filter(\r\n      (stand) => stand[\"isStand\"] === Stand && stand[\"custName\"] === chosen\r\n    );\r\n\r\n    setStandArray(buildStandArray);\r\n  }, [chosen, standing]);\r\n\r\n  const handleRemove = (index) => {\r\n    let ind = standArray.findIndex((stand) => stand[\"prodName\"] === index);\r\n    let adjustedStanding = clonedeep(standArray);\r\n    adjustedStanding[ind][\"Sun\"] = 0;\r\n    adjustedStanding[ind][\"Mon\"] = 0;\r\n    adjustedStanding[ind][\"Tue\"] = 0;\r\n    adjustedStanding[ind][\"Wed\"] = 0;\r\n    adjustedStanding[ind][\"Thu\"] = 0;\r\n    adjustedStanding[ind][\"Fri\"] = 0;\r\n    adjustedStanding[ind][\"Sat\"] = 0;\r\n    setStandArray(adjustedStanding);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleQtyModify = (e, qty) => {\r\n    if (isNaN(e.target.value)) {\r\n      e.target.value = null;\r\n      swal({\r\n        text: \"Only Numbers Please\",\r\n        icon: \"warning\",\r\n        buttons: false,\r\n        timer: 2000,\r\n      });\r\n    }\r\n    let day = e.target.dataset.day;\r\n    let prod = e.target.name;\r\n    let arrayToModify = clonedeep(standArray);\r\n    let ind = arrayToModify.findIndex((array) => array[\"prodName\"] === prod);\r\n    arrayToModify[ind][day] = qty;\r\n\r\n    setStandArray(arrayToModify);\r\n\r\n    setModifications(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <OrderGrid>\r\n        <label>PRODUCT</label>\r\n        <label>S</label>\r\n        <label>M</label>\r\n        <label>T</label>\r\n        <label>W</label>\r\n        <label>T</label>\r\n        <label>F</label>\r\n        <label>S</label>\r\n        <label></label>\r\n        {standArray\r\n          ? standArray.map((order) => (\r\n              <React.Fragment key={order[\"prodName\"] + \"frag\"}>\r\n                <label key={order[\"prodName\"] + \"prod\"}>\r\n                  {order[\"prodName\"]}\r\n                </label>\r\n\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sun\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sun\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_1\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sun\"]}\r\n                  data-day=\"Sun\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = null;\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Mon\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Mon\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_2\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Mon\"]}\r\n                  data-day=\"Mon\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Tue\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Tue\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_3\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Tue\"]}\r\n                  data-day=\"Tue\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Wed\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Wed\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_4\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Wed\"]}\r\n                  data-day=\"Wed\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Thu\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Thu\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_5\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Thu\"]}\r\n                  data-day=\"Thu\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Fri\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Fri\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_6\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Fri\"]}\r\n                  data-day=\"Fri\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n                <StandInput\r\n                  type=\"text\"\r\n                  key={order[\"prodName\"] + \"Sat\"}\r\n                  size=\"3\"\r\n                  style={Number(order[\"Sat\"]) > 0 ? entryNotZero : entryZero}\r\n                  maxLength=\"3\"\r\n                  id={order[\"prodName\"] + \"_7\"}\r\n                  name={order[\"prodName\"]}\r\n                  placeholder={order[\"Sat\"]}\r\n                  data-day=\"Sat\"\r\n                  onKeyUp={(e) => {\r\n                    handleQtyModify(e, Number(e.target.value));\r\n                  }}\r\n                  onBlur={(e) => {\r\n                    e.target.value = \"\";\r\n                  }}\r\n                ></StandInput>\r\n\r\n                <Button\r\n                  icon=\"pi pi-trash\"\r\n                  className=\"p-button-outlined p-button-rounded p-button-help p-button-sm\"\r\n                  key={order[\"prodName\"] + \"rem\"}\r\n                  name={order[\"prodName\"]}\r\n                  onClick={(e) => handleRemove(order[\"prodName\"])}\r\n                ></Button>\r\n              </React.Fragment>\r\n            ))\r\n          : \"\"}\r\n      </OrderGrid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BuildCurrentStandingList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\StandBuildingHelpers.js",[],["500","501"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\calendarBuildHelper.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Nav.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBS.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\BPBN.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Croix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Admin.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\Loader.js",["502"],"import React, { useContext, useEffect } from 'react';\r\n\r\n\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { ToggleContext } from './dataContexts/ToggleContext';\r\nimport { CustomerContext } from './dataContexts/CustomerContext';\r\nimport { OrdersContext } from './dataContexts/OrdersContext';\r\nimport { ProductsContext } from './dataContexts/ProductsContext';\r\nimport { StandingContext } from './dataContexts/StandingContext';\r\nimport { HoldingContext } from './dataContexts/HoldingContext';\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderSetup = styled.div`\r\n    width: 100%;\r\n    margin: 45vh 45%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 200;\r\n    `\r\n\r\nconst LoaderBack = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 199;\r\n    background-color:rgba(65, 64, 99, .5);\r\n    `\r\n\r\nconst Loader = () => {\r\n\r\n    let { isLoading, setIsLoading } = useContext(ToggleContext)\r\n\r\n    let { custLoaded } = useContext(CustomerContext)\r\n    let { holdLoaded } = useContext(HoldingContext)\r\n    let { ordersLoaded } = useContext(OrdersContext)\r\n    let { prodLoaded } = useContext(ProductsContext)\r\n    let { standLoaded } = useContext(StandingContext)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if (custLoaded === true &&\r\n            holdLoaded === true &&\r\n            ordersLoaded === true &&\r\n            prodLoaded === true &&\r\n            standLoaded === true){\r\n                setIsLoading(false)\r\n            }\r\n    },[custLoaded, holdLoaded, ordersLoaded, prodLoaded, standLoaded])\r\n    \r\n    return (\r\n        \r\n            <React.Fragment>\r\n                {isLoading ? <LoaderBack><LoaderSetup><ProgressSpinner/></LoaderSetup></LoaderBack> :''}\r\n            </React.Fragment>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default Loader\r\n\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Ordering.js",["503"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport Calendar from \"./Parts/Calendar\";\r\nimport CurrentOrderInfo from \"./Parts/CurrentOrderInfo\";\r\nimport CurrentOrderList from \"./Parts/CurrentOrderList\";\r\nimport OrderCommandLine from \"./Parts/OrderCommandLine\";\r\nimport OrderEntryButtons from \"./Parts/OrderEntryButtons\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext, HoldingLoad } from \"../../dataContexts/HoldingContext\";\r\nimport { CurrentDataContext } from \"../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainWindow = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n`;\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  border: 1px solid lightgray;\r\n  padding: 10px 10px;\r\n  margin: 0px 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Ordering(props) {\r\n  const { standLoaded } = useContext(StandingContext);\r\n  const { prodLoaded } = useContext(ProductsContext);\r\n  const { custLoaded } = useContext(CustomerContext);\r\n  const { ordersLoaded } = useContext(OrdersContext);\r\n  const { holdLoaded } = useContext(HoldingContext);\r\n  const { setChosen } = useContext(CurrentDataContext);\r\n  const { setCartList } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    if (props.location.search) {\r\n      setChosen(\r\n        props.location.search\r\n          .split(\"&\")[1]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\")\r\n      );\r\n      if (\r\n        props.location.search\r\n          .split(\"&\")[0]\r\n          .split(\"=\")[1]\r\n          .replace(/%20/g, \" \")\r\n          .replace(/%27/g, \"'\") === \"true\"\r\n      ) {\r\n        setCartList(true);\r\n      } else {\r\n        setCartList(false);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <MainWindow>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      {!holdLoaded ? <HoldingLoad /> : \"\"}\r\n\r\n      <BasicContainer>\r\n        <Calendar />\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n        <OrderCommandLine />\r\n        <CurrentOrderInfo />\r\n        <CurrentOrderList />\r\n        <OrderEntryButtons />\r\n      </BasicContainer>\r\n    </MainWindow>\r\n  );\r\n}\r\n\r\nexport default Ordering;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderCommandLine.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\CurrentOrderInfo.js",["504","505","506","507","508","509"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  tomorrow,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\nimport { createRetailOrderCustomers } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CurrentInfo = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-template-columns: 1fr;\r\n  column-gap: 10px;\r\n  row-gap: 10px;\r\n  background-color: lightgrey;\r\n`;\r\n\r\nconst SpecialInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  display: flex;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\nconst Title = styled.h2`\r\n  padding: 0;\r\n  margin: 10px 0;\r\n`;\r\nconst DateStyle = styled.h4`\r\n  padding: 0;\r\n  color: grey;\r\n  margin: 10px 0;\r\n`;\r\nconst FulfillOptions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 4fr 1fr 3fr 1fr 3fr 1fr 3fr;\r\n  margin: 10px;\r\n  align-items: center;\r\n  justify-items: left;\r\n`;\r\n\r\nconst ho = {\r\n  color: \"red\",\r\n};\r\n\r\nconst so = {\r\n  color: \"rgb(66, 97, 201)\",\r\n};\r\n\r\nconst CurrentOrderInfo = () => {\r\n  const {\r\n    cartList,\r\n    standList,\r\n    setStandList,\r\n    orderTypeWhole,\r\n    setModifications,\r\n  } = useContext(ToggleContext);\r\n\r\n  const [orderType, setOrderType] = useState();\r\n\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { holding } = useContext(HoldingContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const {\r\n    chosen,\r\n    route,\r\n    setRoute,\r\n    ponote,\r\n    setPonote,\r\n    setChosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    currentCartList,\r\n  } = useContext(CurrentDataContext);\r\n\r\n  const [customerGroup, setCustomerGroup] = useState(customers);\r\n\r\n  useEffect(() => {\r\n    if (cartList) {\r\n      setOrderType(\"Cart\");\r\n    } else {\r\n      if (standList) {\r\n        setOrderType(\"Stand\");\r\n      } else {\r\n        setOrderType(\"Hold\");\r\n      }\r\n    }\r\n  }, [cartList, standList]);\r\n\r\n  useEffect(() => {\r\n    orderTypeWhole\r\n      ? setCustomerGroup(customers)\r\n      : setCustomerGroup(createRetailOrderCustomers(orders));\r\n  }, [customers, orderTypeWhole, orders]);\r\n\r\n  useEffect(() => {\r\n    for (let cust of customerGroup) {\r\n      if (cust[\"custName\"] === chosen) {\r\n        switch (cust[\"zoneName\"]) {\r\n          case \"slopick\":\r\n            setRoute(\"slopick\");\r\n            break;\r\n          case \"atownpick\":\r\n            setRoute(\"atownpick\");\r\n            break;\r\n          default:\r\n            setRoute(\"deliv\");\r\n        }\r\n      }\r\n    }\r\n   \r\n    let orderCheck = orders.filter(\r\n      (ord) => ord[\"custName\"] === chosen && ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n    \r\n    if (orderCheck.length > 0) {\r\n      switch (orderCheck[0].route) {\r\n        case \"slopick\":\r\n          setRoute(\"slopick\");\r\n          break;\r\n        case \"atownpick\":\r\n          setRoute(\"atownpick\");\r\n          break;\r\n        default:\r\n          setRoute(\"deliv\");\r\n      }\r\n    }\r\n  }, [chosen, delivDate]);\r\n\r\n  useEffect(() => {\r\n    setPonote(\"\");\r\n\r\n    let orderCheck = orders.filter(\r\n      (ord) =>\r\n        ord[\"custName\"] === chosen &&\r\n        ord[\"delivDate\"] === convertDatetoBPBDate(delivDate)\r\n    );\r\n   \r\n\r\n    if (orderCheck.length > 0) {\r\n      setPonote(orderCheck[0][\"PONote\"]);\r\n    }\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleChosen = (chosen) => {\r\n    setChosen(chosen);\r\n    setDelivDate(tomorrow());\r\n    setModifications(false)\r\n  };\r\n\r\n  const changeDate = (date) => {\r\n    let fd = new Date(date);\r\n    fd.setMinutes(fd.getMinutes() + fd.getTimezoneOffset());\r\n    let returnDate = fd.toDateString();\r\n\r\n    return returnDate;\r\n  };\r\n\r\n  const handleSetRoute = (e) => {\r\n    setRoute(e)\r\n    setModifications(true)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {orderTypeWhole ? (\r\n        <React.Fragment>\r\n          <TitleBox>\r\n            <Title style={cartList ? so : standList ? so : ho}>\r\n              Wholesale {orderType} Order\r\n            </Title>\r\n            <DateStyle>{delivDate ? changeDate(delivDate) : \"\"}</DateStyle>\r\n          </TitleBox>\r\n        </React.Fragment>\r\n      ) : (\r\n        <h2 style={standList ? so : ho}>Retail {orderType} Order</h2>\r\n      )}\r\n\r\n      <CurrentInfo>\r\n        <FulfillOptions>\r\n          <Dropdown\r\n            id=\"customers\"\r\n            value={chosen}\r\n            options={customerGroup}\r\n            optionLabel=\"custName\"\r\n            placeholder={chosen === \"  \" ? \"Select a Customer ...\" : chosen}\r\n            onChange={(e) => handleChosen(e.value.custName)}\r\n          />\r\n\r\n          <RadioButton\r\n            value=\"deliv\"\r\n            name=\"delivery\"\r\n            onChange={(e) => handleSetRoute(e.value)}\r\n            checked={route === \"deliv\"}\r\n          />\r\n          <label htmlFor=\"delivery\">Delivery</label>\r\n\r\n          <RadioButton\r\n            value=\"slopick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => handleSetRoute(e.value)}\r\n            checked={route === \"slopick\"}\r\n          />\r\n          <label htmlFor=\"pickupSLO\">Pick up SLO</label>\r\n\r\n          <RadioButton\r\n            value=\"atownpick\"\r\n            name=\"delivery\"\r\n            onChange={(e) => handleSetRoute(e.value)}\r\n            checked={route === \"atownpick\"}\r\n          />\r\n          <label htmlFor=\"pickupAtown\">Pick up Carlton</label>\r\n        </FulfillOptions>\r\n\r\n        <SpecialInfo>\r\n          <span className=\"p-float-label\">\r\n            <InputText\r\n              id=\"in\"\r\n              size=\"50\"\r\n              value={ponote}\r\n              onChange={(e) => setPonote(e.target.value)}\r\n            />\r\n            <label htmlFor=\"in\">\r\n              {ponote === \"\" ? \"PO#/Special Instructions...\" : \"\"}\r\n            </label>\r\n          </span>\r\n        </SpecialInfo>\r\n      </CurrentInfo>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentOrderInfo;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\OrderEntryButtons.js",["510","511","512","513","514","515","516"],"import React, { useContext } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { convertDatetoBPBDate } from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport {\r\n  updateOrder,\r\n  createOrder,\r\n  createStanding,\r\n  updateStanding,\r\n} from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst OrderButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nfunction OrderEntryButtons() {\r\n  const { route, ponote } = useContext(CurrentDataContext);\r\n  const {\r\n    setChosen,\r\n    delivDate,\r\n    chosen,\r\n    currentCartList,\r\n    setCurrentCartList,\r\n    standArray,\r\n    setStandArray,\r\n  } = useContext(CurrentDataContext);\r\n  const {\r\n    orders,\r\n    setOrders,\r\n    setOrdersLoaded,\r\n    recentOrders,\r\n    setRecentOrders,\r\n  } = useContext(OrdersContext);\r\n  const { standing, setStandLoaded } = useContext(StandingContext);\r\n  const { holding, setHoldLoaded } = useContext(HoldingContext);\r\n  const {\r\n    orderTypeWhole,\r\n    setOrderTypeWhole,\r\n    modifications,\r\n    setModifications,\r\n    cartList,\r\n    setCartList,\r\n    standList,\r\n    setRouteIsOn,\r\n    setIsLoading,\r\n  } = useContext(ToggleContext);\r\n\r\n  let type = orderTypeWhole ? \"Retail\" : \"Wholesale\";\r\n  let cartStand = cartList ? \"Standing\" : \"Cart\";\r\n\r\n  const handleChangeorderTypeWhole = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setOrderTypeWhole(!orderTypeWhole);\r\n    setChosen(\"\");\r\n  };\r\n\r\n  const handleCartStandToggle = () => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    let realCartList = clonedeep(cartList);\r\n    realCartList ? setRouteIsOn(false) : setRouteIsOn(true);\r\n    setCartList(!cartList);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    let cartToMod = clonedeep(currentCartList);\r\n    for (let ord of cartToMod) {\r\n      ord[\"qty\"] = 0;\r\n    }\r\n    setCurrentCartList(cartToMod);\r\n    setModifications(true);\r\n  };\r\n\r\n  const handleAddUpdate = async () => {\r\n    setIsLoading(true);\r\n    if (cartList) {\r\n      \r\n      for (let ord of currentCartList) {\r\n        let rte=route\r\n\r\n        const updateDetails = {\r\n          qty: ord[\"qty\"],\r\n          prodName: ord[\"prodName\"],\r\n          custName: chosen,\r\n          PONote: ponote,\r\n          route: rte,\r\n          SO: ord[\"qty\"],\r\n          isWhole: orderTypeWhole,\r\n          delivDate: convertDatetoBPBDate(delivDate),\r\n          timeStamp: new Date(),\r\n        };\r\n\r\n        if (ord[\"id\"]) {\r\n          updateDetails.id = ord[\"id\"];\r\n          updateDetails._version = ord[\"_version\"];\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on updating Orders\", error);\r\n          }\r\n        } else {\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createOrder, { input: { ...updateDetails } })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let stand of standArray) {\r\n        if (stand[\"id\"]) {\r\n          const updateDetails = {\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n            id: stand[\"id\"],\r\n            _version: stand[\"_version\"],\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(updateStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        } else {\r\n          const updateDetails = {\r\n            custName: chosen,\r\n            prodName: stand[\"prodName\"],\r\n            Mon: stand[\"Mon\"],\r\n            Tue: stand[\"Tue\"],\r\n            Wed: stand[\"Wed\"],\r\n            Thu: stand[\"Thu\"],\r\n            Fri: stand[\"Fri\"],\r\n            Sat: stand[\"Sat\"],\r\n            Sun: stand[\"Sun\"],\r\n            isStand: standList,\r\n            timeStamp: new Date(),\r\n          };\r\n          try {\r\n            await API.graphql(\r\n              graphqlOperation(createStanding, {\r\n                input: { ...updateDetails },\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.log(\"error on creating Orders\", error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setModifications(false);\r\n    setStandLoaded(false);\r\n    setHoldLoaded(false);\r\n    setOrdersLoaded(false);\r\n    document.getElementById(\"orderCommand\").focus();\r\n  };\r\n\r\n  return (\r\n    <OrderButtons>\r\n      <Button\r\n        label=\"Add/Update\"\r\n        icon=\"pi pi-plus\"\r\n        disabled={chosen === \"  \"}\r\n        onClick={handleAddUpdate}\r\n        className={\r\n          modifications\r\n            ? \"p-button-raised p-button-rounded p-button-danger\"\r\n            : \"p-button-raised p-button-rounded p-button-success\"\r\n        }\r\n      />\r\n      <Button\r\n        label=\"Clear\"\r\n        icon=\"pi pi-trash\"\r\n        disabled={!cartList}\r\n        onClick={handleClear}\r\n        className=\"p-button-raised p-button-rounded p-button-info\"\r\n      />\r\n      <Button\r\n        label={cartStand}\r\n        icon=\"pi pi-shopping-cart\"\r\n        onClick={handleCartStandToggle}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n      <Button\r\n        label={type}\r\n        icon=\"pi pi-dollar\"\r\n        onClick={handleChangeorderTypeWhole}\r\n        className=\"p-button-raised p-button-rounded p-button-secondary\"\r\n      />\r\n    </OrderButtons>\r\n  );\r\n}\r\n\r\nexport default OrderEntryButtons;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\calendar.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\ordering\\Parts\\Calendar.js",["517"],"import React, { useContext, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  CreateStandingArray,\r\n  CreateCartDateArray,\r\n  CreateBlankCartDateArray,\r\n} from \"../../../helpers/calendarBuildHelper\";\r\n\r\n\r\nconst Calendar = () => {\r\n  const {\r\n    chosen,\r\n    delivDate,\r\n    setDelivDate,\r\n    calendarEvents,\r\n    setCalendarEvents,\r\n  } = useContext(CurrentDataContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { setModifications } = useContext(ToggleContext)\r\n\r\n\r\n  useEffect(() => {\r\n    let backToStandingArray = CreateStandingArray(standing, chosen);\r\n    let cartDateArray = CreateCartDateArray(orders, chosen);\r\n    let cartBlankDateArray = CreateBlankCartDateArray(orders, chosen);\r\n\r\n    let standingEvents = {\r\n      title: \"\",\r\n      daysOfWeek: backToStandingArray,\r\n      display: \"background\",\r\n    };\r\n\r\n    let calendarEvents = [\r\n      { title: \"\", date: delivDate, display: \"background\" },\r\n    ];\r\n\r\n    calendarEvents.push(standingEvents);\r\n\r\n    for (let order of cartDateArray) {\r\n      let newEvent = { title: \"\", date: order, display: \"background\" };\r\n      calendarEvents.push(newEvent);\r\n    }\r\n\r\n    for (let order of cartBlankDateArray) {\r\n      let newEvent2 = { title: \"\", date: order, display: \"inverse-background\" };\r\n      calendarEvents.push(newEvent2);\r\n    }\r\n\r\n    setCalendarEvents(calendarEvents);\r\n  }, [chosen, delivDate]);\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    document.getElementById(\"orderCommand\").focus();\r\n    setDelivDate(selectInfo.dateStr);\r\n    setModifications(false)\r\n  \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"calendarApp\" id=\"test\">\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          defaultView=\"dayGridMonth\"\r\n          aspectRatio={1}\r\n          contentHeight=\"auto\"\r\n          eventBackgroundColor=\"blue\"\r\n          dateClick={handleDateSelect}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"\",\r\n            end: \"prev,next\",\r\n          }}\r\n          events={calendarEvents}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Customers.js",["518"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport CustomerList from \"./Parts/CustomerList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Location from \"./Parts/Location\";\r\nimport Contact from \"./Parts/Contact\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Customers() {\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <CustomerList\r\n          selectedCustomer={selectedCustomer}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n        />\r\n        {selectedCustomer && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Location\">\r\n                <Location\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Contact\">\r\n                <Contact\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedCustomer={selectedCustomer}\r\n                  setSelectedCustomer={setSelectedCustomer}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedCustomer={selectedCustomer}\r\n            setSelectedCustomer={setSelectedCustomer}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Customers;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Products.js",["519"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { \r\n  ProductsContext,\r\n  ProductsLoad\r\n  } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport ProductList from \"./Parts/ProductList\";\r\nimport Name from \"./Parts/Name\";\r\nimport Description from \"./Parts/Description\";\r\nimport Packing from \"./Parts/Packing\";\r\nimport Baking from \"./Parts/Baking\";\r\nimport Billing from \"./Parts/Billing\";\r\nimport Buttons from \"./Parts/Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction Products() {\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      <MainWrapper>\r\n        <ProductList\r\n          selectedProduct={selectedProduct}\r\n          setSelectedProduct={setSelectedProduct}\r\n        />\r\n        {selectedProduct && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Name\">\r\n                <Name\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Description\">\r\n                <Description\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Billing\">\r\n                <Billing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Packing\">\r\n                <Packing\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n\r\n              <GroupBox id=\"Baking\">\r\n                <Baking\r\n                  selectedProduct={selectedProduct}\r\n                  setSelectedProduct={setSelectedProduct}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedProduct={selectedProduct}\r\n            setSelectedProduct={setSelectedProduct}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\aws-exports.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\queries.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\graphql\\mutations.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\CustomerList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Location.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Contact.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\customers\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\formHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\editRoutes.js",["520"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport RouteList from \"./RouteList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditRoutes() {\r\n  const [selectedRoute, setSelectedRoute] = useState();\r\n  const [routes, setRoutes] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <RouteList\r\n          selectedRoute={selectedRoute}\r\n          setSelectedRoute={setSelectedRoute}\r\n          routes={routes}\r\n          setRoutes={setRoutes}\r\n        />\r\n        {selectedRoute && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedRoute={selectedRoute}\r\n                  setSelectedRoute={setSelectedRoute}\r\n                  routes={routes}\r\n                  setRoutes={setRoutes}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedRoute={selectedRoute}\r\n            setSelectedRoute={setSelectedRoute}\r\n            routes={routes}\r\n            setRoutes={setRoutes}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditRoutes;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\RouteList.js",["521"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listRoutes } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchRoutes();\r\n    setIsLoading(false);\r\n  }, [routes]);\r\n\r\n  const fetchRoutes = async () => {\r\n    try {\r\n      const routeData = await API.graphql(\r\n        graphqlOperation(listRoutes, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const routeList = routeData.data.listRoutes.items;\r\n      sortAtoZDataByIndex(routeList, \"routeStart\");\r\n      let noDelete = routeList.filter((route) => route[\"_deleted\"] !== true);\r\n\r\n      setRoutes(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Route List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedRoute(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {routes && (\r\n          <DataTable\r\n            value={routes}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedRoute}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"routeName\"\r\n              header=\"Routes\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Info.js",["522","523"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { PickList } from \"primereact/picklist\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n\r\nimport {\r\n  setValue,\r\n  fixValue,\r\n  setPickValue,\r\n  setDropDownValue,\r\n} from \"../../../helpers/formHelpers\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst DuoWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 0 0 20px 0;\r\n`;\r\n\r\nconst WeekWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nconst hubDepart = [{ RouteDepart: \"Prado\" }, { RouteDepart: \"Carlton\" }];\r\n\r\nconst hubArrive = [{ RouteArrive: \"Prado\" }, { RouteArrive: \"Carlton\" }];\r\n\r\nconst Info = ({ selectedRoute, setSelectedRoute, routes, setRoutes }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [target, setTarget] = useState([]);\r\n\r\n  const fullZones = useRef();\r\n\r\n  const [days, setDays] = useState([]);\r\n\r\n  const onDayChange = (e) => {\r\n    let selectedDays = [...days];\r\n    if (e.checked) selectedDays.push(e.value);\r\n    else selectedDays.splice(selectedDays.indexOf(e.value), 1);\r\n\r\n    let itemToUpdate = clonedeep(selectedRoute);\r\n    itemToUpdate[\"RouteSched\"] = selectedDays;\r\n    setSelectedRoute(itemToUpdate);\r\n    setDays(selectedDays);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTarget(selectedRoute[\"RouteServe\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    setDays(selectedRoute[\"RouteSched\"]);\r\n  }, [selectedRoute]);\r\n\r\n  useEffect(() => {\r\n    let parsedZones = [];\r\n    if (fullZones.current) {\r\n      parsedZones = fullZones.current.filter(\r\n        (full) => !selectedRoute[\"RouteServe\"].includes(full)\r\n      );\r\n    }\r\n    setSource(parsedZones);\r\n  }, [selectedRoute]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n      let mappedNoDelete = noDelete.map((item) => item[\"zoneName\"]);\r\n      fullZones.current = mappedNoDelete;\r\n      setSource(mappedNoDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const itemTemplate = (item) => {\r\n    return <div>{item}</div>;\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setSource(event.source);\r\n    setSelectedRoute(setPickValue(event, selectedRoute));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>\r\n        <i className=\"pi pi-map\"></i> Route Info\r\n      </h2>\r\n\r\n      <div className=\"p-inputgroup\">\r\n        <span className=\"p-inputgroup-addon\">\r\n          <label htmlFor=\"zoneName\"> Route Name</label>\r\n          <br />\r\n        </span>\r\n\r\n        <InputText\r\n          id=\"routeName\"\r\n          placeholder={selectedRoute.routeName}\r\n          disabled\r\n          onKeyUp={(e) =>\r\n            e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n          }\r\n          onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n        />\r\n      </div>\r\n      <br />\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Start Time (0-24)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeStart\"\r\n            placeholder={selectedRoute.routeStart}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"zoneName\"> Route Duration (in hours)</label>\r\n          </span>\r\n\r\n          <InputText\r\n            id=\"routeTime\"\r\n            placeholder={selectedRoute.routeTime}\r\n            onKeyUp={(e) =>\r\n              e.code === \"Enter\" && setSelectedRoute(setValue(e, selectedRoute))\r\n            }\r\n            onBlur={(e) => setSelectedRoute(fixValue(e, selectedRoute))}\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <DuoWrapper>\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteDepart\">Depart Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteDepart\"\r\n            optionLabel=\"RouteDepart\"\r\n            options={hubDepart}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteDepart : \"Departure Hub\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"p-inputgroup\">\r\n          <span className=\"p-inputgroup-addon\">\r\n            <label htmlFor=\"RouteArrive\">Arrival Hub</label>\r\n          </span>\r\n          <Dropdown\r\n            id=\"RouteArrive\"\r\n            optionLabel=\"RouteArrive\"\r\n            options={hubArrive}\r\n            onChange={(e) =>\r\n              setSelectedRoute(setDropDownValue(e, selectedRoute))\r\n            }\r\n            placeholder={\r\n              selectedRoute ? selectedRoute.RouteArrive : \"Arrival Hub\"\r\n            }\r\n          />\r\n        </div>\r\n      </DuoWrapper>\r\n      <WeekWrapper>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb1\"\r\n            value=\"1\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"1\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb1\" className=\"p-checkbox-label\">\r\n            Sun\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb2\"\r\n            value=\"2\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"2\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb2\" className=\"p-checkbox-label\">\r\n            Mon\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"3\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"3\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Tues\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"4\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"4\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Wed\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"5\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"5\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Thurs\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"6\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"6\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Fri\r\n          </label>\r\n        </div>\r\n        <div className=\"p-col-12\">\r\n          <Checkbox\r\n            inputId=\"cb3\"\r\n            value=\"7\"\r\n            onChange={onDayChange}\r\n            checked={days.includes(\"7\")}\r\n          ></Checkbox>\r\n          <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\r\n            Sat\r\n          </label>\r\n        </div>\r\n      </WeekWrapper>\r\n      <PickList\r\n        sourceHeader=\"All Zones\"\r\n        targetHeader=\"Served By This Route\"\r\n        source={source}\r\n        target={selectedRoute[\"RouteServe\"]}\r\n        itemTemplate={itemTemplate}\r\n        onChange={onChange}\r\n        sourceStyle={{ height: \"250px\" }}\r\n        targetStyle={{ height: \"250px\" }}\r\n      ></PickList>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editRoutes\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\editZones.js",["524"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ZoneList from \"./ZoneList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 0.5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditZones() {\r\n  const [selectedZone, setSelectedZone] = useState(1);\r\n  const [zones, setZones] = useState(null);\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <ZoneList\r\n          selectedZone={selectedZone}\r\n          setSelectedZone={setSelectedZone}\r\n          zones={zones}\r\n          setZones={setZones}\r\n        />\r\n        {selectedZone && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedZone={selectedZone}\r\n                  setSelectedZone={setSelectedZone}\r\n                  zones={zones}\r\n                  setZones={setZones}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedZone={selectedZone}\r\n            setSelectedZone={setSelectedZone}\r\n            zones={zones}\r\n            setZones={setZones}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditZones;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\ZoneList.js",["525"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { listZones } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { sortAtoZDataByIndex } from \"../../../helpers/sortDataHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst ZoneList = ({ selectedZone, setSelectedZone, zones, setZones }) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchZones();\r\n    setIsLoading(false);\r\n  }, [zones]);\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      const zoneData = await API.graphql(\r\n        graphqlOperation(listZones, {\r\n          limit: \"50\",\r\n        })\r\n      );\r\n      const zoneList = zoneData.data.listZones.items;\r\n      sortAtoZDataByIndex(zoneList, \"zoneNum\");\r\n      let noDelete = zoneList.filter((zone) => zone[\"_deleted\"] !== true);\r\n\r\n      setZones(noDelete);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Cust List\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedZone(e.value);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {zones && (\r\n          <DataTable\r\n            value={zones}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedZone}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"zoneName\"\r\n              header=\"Zones\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ZoneList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editZones\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Description.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\ProductList.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Baking.js",["526","527"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Billing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Packing.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\products\\Parts\\Name.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\ByRoute.js",["528","529"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../../dataContexts/OrdersContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport RouteGrid from \"../ByRoute/Parts/RouteGrid\";\r\nimport RouteList from \"../ByRoute/Parts/RouteList\";\r\nimport ToolBar from \"../ByRoute/Parts/ToolBar\";\r\n\r\nimport { listAltPricings } from \"../../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\n\r\n\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 5fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 95%;\r\n  margin: 10px auto;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst fetchInfo = async (operation, opString, limit) => {\r\n  try {\r\n    let info = await API.graphql(\r\n      graphqlOperation(operation, {\r\n        limit: limit,\r\n      })\r\n    );\r\n    let list = info.data[opString].items;\r\n\r\n    let noDelete = list.filter((li) => li[\"_deleted\"] !== true);\r\n    return noDelete;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nfunction ByRoute() {\r\n  const [route, setRoute] = useState(\"AM Pastry\");\r\n  const [routeList, setRouteList] = useState();\r\n  const [orderList, setOrderList] = useState();\r\n  const [ altPricing, setAltPricing ] = useState();\r\n\r\n  const { custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standLoaded, setStandLoaded } = useContext(StandingContext);\r\n  let { setIsLoading } = useContext(ToggleContext)\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(false);\r\n    setProdLoaded(false);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(false);\r\n    setStandLoaded(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing();\r\n    \r\n  }, []);\r\n\r\n\r\n  const fetchAltPricing = async () => {\r\n    try {\r\n      let altPricing = await fetchInfo(listAltPricings,\"listAltPricings\", \"1000\");\r\n      setAltPricing(altPricing);   \r\n    } catch (error) {\r\n      console.log(\"error on fetching Alt Pricing List\", error);\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n\r\n      <MainWrapper>\r\n        <RouteList\r\n          orderList={orderList}\r\n          setRouteList={setRouteList}\r\n          setRoute={setRoute}\r\n          routeList={routeList}\r\n        />\r\n        <DescripWrapper>\r\n          <ToolBar setOrderList={setOrderList} />\r\n          <RouteGrid route={route} orderList={orderList} altPricing={altPricing} setAltPricing={setAltPricing}/>\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByRoute;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteGrid.js",["530"],"import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nimport { formatter } from \"../../../../helpers/billingGridHelpers\";\r\n\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { CustomerContext } from \"../../../../dataContexts/CustomerContext\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport {\r\n  buildProductArray,\r\n  createColumns,\r\n  createListOfCustomers,\r\n  createQtyGrid,\r\n} from \"../../../../helpers/delivGridHelpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-content: flex-end;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  width: 40%;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteGrid = ({ route, orderList, altPricing, setAltPricing }) => {\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n\r\n  const dt = useRef(null);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const constructColumns = () => {\r\n    let columns;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter((grd) => grd[\"route\"] === route);\r\n      let listOfProducts = buildProductArray(gridToEdit, products);\r\n\r\n      columns = createColumns(listOfProducts);\r\n    }\r\n    return columns;\r\n  };\r\n\r\n  const constructData = () => {\r\n    let qtyGrid;\r\n    if (orderList) {\r\n      let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === route);\r\n\r\n      let gridToEdit = buildGridSetUp.filter(\r\n        (order) => order[\"route\"] === route\r\n      );\r\n      let listOfCustomers = createListOfCustomers(gridToEdit, route);\r\n      qtyGrid = createQtyGrid(listOfCustomers, gridToEdit);\r\n    }\r\n    return qtyGrid;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let col = constructColumns();\r\n    let dat = constructData();\r\n    setColumns(col ? col : []);\r\n    setData(dat ? dat : []);\r\n  }, [route, orderList, orders, standing]);\r\n\r\n  const dynamicColumns = columns.map((col, i) => {\r\n    return (\r\n      <Column\r\n        npmkey={col.field}\r\n        field={col.field}\r\n        header={col.header}\r\n        style={col.width}\r\n      />\r\n    );\r\n  });\r\n\r\n  const exportColumns = columns.map((col) => ({\r\n    title: col.header,\r\n    dataKey: col.field,\r\n  }));\r\n\r\n  const exportListPdf = () => {\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    doc.setFontSize(20);\r\n    doc.text(10, 20, \"Delivery Sheet\");\r\n    doc.autoTable({\r\n      columns: exportColumns,\r\n      body: data,\r\n      margin: { top: 26 },\r\n      styles: { fontSize: 12 },\r\n    });\r\n    doc.save(\"products.pdf\");\r\n  };\r\n\r\n  const ratePull = (ord) => {\r\n    let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === ord[\"prodName\"])\r\n        ].wholePrice;\r\n      for (let alt of altPricing) {\r\n        if (\r\n          alt[\"custName\"] === ord[\"custName\"] &&\r\n          alt[\"prodName\"] === ord[\"prodName\"]\r\n        ) {\r\n          ratePull = alt[\"wholePrice\"];\r\n        }\r\n      }\r\n      return ratePull\r\n  }\r\n  \r\n\r\n  const exportInvPdf = () => {\r\n    let invListFilt = orderList.filter((ord) => ord.route === route);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    const doc = new jsPDF(\"0\", \"mm\", \"a4\");\r\n\r\n    let init = true;\r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      !init && doc.addPage(\"0\", \"mm\", \"a4\");\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      init = false;\r\n    }\r\n  }\r\n    doc.save(\"invoices.pdf\");\r\n  };\r\n\r\n  const exportFullPdf = () => {\r\n    //construct route list\r\n    let init = true;\r\n    let routeList = Array.from(new Set(orderList.map((ord) => ord.route)));\r\n    const doc = new jsPDF(\"l\", \"mm\", \"a4\");\r\n    for (let rt of routeList) {\r\n      let columns;\r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n\r\n        let gridToEdit = buildGridSetUp.filter((grd) => grd[\"route\"] === rt);\r\n        let listOfProducts = buildProductArray(gridToEdit, products);\r\n\r\n        columns = createColumns(listOfProducts);\r\n      }\r\n      columns = columns.map((col) => ({\r\n        title: col.header,\r\n        dataKey: col.field,\r\n      }));\r\n      let qtyGrid;\r\n     \r\n      if (orderList) {\r\n        let buildGridSetUp = orderList.filter((ord) => ord[\"route\"] === rt);\r\n        \r\n        \r\n        let listOfCustomers = createListOfCustomers(buildGridSetUp, rt);\r\n        qtyGrid = createQtyGrid(listOfCustomers, buildGridSetUp);\r\n        \r\n      }\r\n\r\n      !init && doc.addPage(\"a4\",'l');\r\n      doc.setFontSize(20);\r\n      doc.text(10, 20, rt);\r\n      doc.autoTable({\r\n        columns: columns,\r\n        body: qtyGrid,\r\n        margin: { top: 26 },\r\n        styles: { fontSize: 12 },\r\n      });\r\n  \r\n      let invListFilt = orderList.filter((ord) => ord.route === rt);\r\n    let custFil = invListFilt.map((inv) => inv.custName);\r\n    custFil = new Set(custFil);\r\n    custFil = Array.from(custFil);\r\n    let customersCompare = customers.map((cust) => cust.custName);\r\n    let ordersToInv = orderList.filter(\r\n      (ord) =>\r\n        custFil.includes(ord.custName) &&\r\n        customersCompare.includes(ord.custName)\r\n    );\r\n    ordersToInv = ordersToInv.filter(\r\n      (ord) =>\r\n        customers[customers.findIndex((cust) => cust.custName === ord.custName)]\r\n          .toBePrinted === true\r\n    );\r\n    let ThinnedCustFil = ordersToInv.map((ord) => ord.custName);\r\n    ThinnedCustFil = new Set(ThinnedCustFil);\r\n    ThinnedCustFil = Array.from(ThinnedCustFil);\r\n\r\n    \r\n\r\n    \r\n    for (let inv of ThinnedCustFil) {\r\n      let leftMargin = 22;\r\n      let rightColumn = 130;\r\n\r\n      let custInd = customers.findIndex((cust) => cust.custName === inv);\r\n\r\n      let addr1 = customers[custInd].addr1;\r\n      let addr2 = customers[custInd].addr2;\r\n      let phone = customers[custInd].phone;\r\n\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      let invNum =\r\n        newDate +\r\n        customers[customers.findIndex((cst) => cst.custName === inv)].nickName;\r\n      let ponote;\r\n      try {\r\n        ponote =\r\n          orders[\r\n            orders.findIndex(\r\n              (ord) => ord.custName === customers[custInd].custName\r\n            )\r\n          ].ponote;\r\n        if (ponote === undefined) {\r\n          ponote = \"\";\r\n        }\r\n      } catch {\r\n        ponote = \"\";\r\n      }\r\n\r\n      let delivdate = DateTime.now().toLocaleString(DateTime.DATE_FULL);\r\n      let duedate = DateTime.now()\r\n        .plus({ days: 15 })\r\n        .toLocaleString(DateTime.DATE_FULL);\r\n\r\n      let head = [[\"Item\", \"Price\", \"Qty\", \"Total\", \"Returns\"]];\r\n      let body = orderList.filter((ord) => ord.custName === inv);\r\n      body = body.map((ord) => [\r\n        ord.prodName,\r\n        formatter.format(Number(ratePull(ord))),\r\n        ord.qty,\r\n        (Number(ratePull(ord)) * Number(ord.qty)).toFixed(2),\r\n      ]);\r\n\r\n      let ordTotal = 0\r\n      for (let b of body){\r\n        ordTotal = ordTotal + Number(b[3])\r\n      }\r\n\r\n\r\n      let blank = ['','','','']\r\n      let total = [\"TOTAL\",'','',formatter.format(ordTotal)]\r\n\r\n\r\n      body.push(blank)\r\n      body.push(total)\r\n\r\n      let dup\r\n      customers[custInd].printDuplicate===true ? dup = 2 : dup = 1\r\n\r\n      for (let i=0; i<dup; i++){\r\n      doc.addPage('a4','portrait');\r\n\r\n      doc.setFontSize(26);\r\n      doc.text(leftMargin, 26, \"Back Porch Bakery\");\r\n      doc.setFontSize(14);\r\n      doc.text(\r\n        leftMargin,\r\n        32,\r\n        \"849 West St., San Luis Obispo, CA 93405 (805)242-4403\"\r\n      );\r\n      doc.setFontSize(14);\r\n      doc.text(rightColumn, 46, `Customer:`);\r\n      doc.setFontSize(12);\r\n      doc.text(rightColumn, 56, `${inv}`);\r\n      doc.text(rightColumn, 62, `${addr1}`);\r\n      doc.text(rightColumn, 68, `${addr2}`);\r\n      doc.text(rightColumn, 74, `${phone}`);\r\n\r\n      doc.autoTable({\r\n        body: [\r\n          [\"Invoice #:\", `${invNum}`],\r\n          [\"PO #:\", `${ponote}`],\r\n          [\"Delivery Date:\", `${delivdate}`],\r\n          [\"Due Date:\", `${duedate}`],\r\n        ],\r\n        margin: { top: 80, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n      doc.autoTable({\r\n        head: head,\r\n        body: body,\r\n        margin: { top: 110, left: leftMargin, right: leftMargin },\r\n        styles: { fontSize: 12 },\r\n      });\r\n\r\n    }}\r\n      \r\n    init = false\r\n    }\r\n    doc.save(\"invoices.pdf\");\r\n    //     print route grid\r\n    //     print invoices for route\r\n  };\r\n\r\n  const header = (\r\n    <ButtonContainer>\r\n      <ButtonWrapper>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportListPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Delivery List\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportInvPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Invoices\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={exportFullPdf}\r\n          className=\"p-button-success\"\r\n          data-pr-tooltip=\"PDF\"\r\n        >\r\n          Print Full Delivery Lists\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </ButtonContainer>\r\n  );\r\n\r\n  const onRowReorder = (e) => {\r\n    setData(e.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <DataTable\r\n          header={header}\r\n          ref={dt}\r\n          className=\"p-datatable-gridlines p-datatable-sm p-datatable-striped\"\r\n          value={data}\r\n          resizableColumns\r\n          columnResizeMode=\"fit\"\r\n          onRowReorder={onRowReorder}\r\n        >\r\n          <Column rowReorder style={{ width: \"3em\" }} />\r\n          {dynamicColumns}\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\RouteList.js",["531"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst RouteList = ({ orderList, setRouteList, setRoute, routeList }) => {\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    if (orderList) {\r\n      let rtList = orderList.map((ord) => ord[\"route\"]);\r\n      let setRtList = new Set(rtList);\r\n      let rtListArray = Array.from(setRtList);\r\n      rtListArray = rtListArray.map((rt) => ({ route: rt }));\r\n\r\n      setRouteList(rtListArray);\r\n    }\r\n  }, [orderList, orders, standing]);\r\n\r\n  const handleSelection = (e) => {\r\n    setRoute(e.value.route);\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        <DataTable\r\n          value={routeList}\r\n          className=\"p-datatable-striped\"\r\n          selectionMode=\"single\"\r\n          onSelectionChange={handleSelection}\r\n          dataKey=\"id\"\r\n        >\r\n          <Column field=\"route\" header=\"Routes\"></Column>\r\n        </DataTable>\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default RouteList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByRoute\\Parts\\ToolBar.js",["532","533","534"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\delivGridHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\ByProduct.js",["535","536","537","538"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  CustomerContext,\r\n  CustomerLoad,\r\n} from \"../../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../../dataContexts/OrdersContext\";\r\nimport {\r\n  StandingContext,\r\n  StandingLoad,\r\n} from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport ProductGrid from \"../ByProduct/Parts/ProductGrid\";\r\nimport ToolBar from \"../ByProduct/Parts/ToolBar\";\r\n\r\nimport { createOrder } from \"../../../graphql/mutations\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  margin: 0px 10px;\r\n  padding: 0px 10px;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nfunction ByProduct() {\r\n  const [product] = useState(\"\");\r\n  const [orderList, setOrderList] = useState(\"\");\r\n\r\n  const { custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standLoaded, setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(false);\r\n    setProdLoaded(false);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(false);\r\n    setStandLoaded(false);\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n\r\n      <MainWrapper>\r\n        <DescripWrapper>\r\n          <ToolBar setOrderList={setOrderList} product={product} />\r\n          <ProductGrid product={product} orderList={orderList} />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ByProduct;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ToolBar.js",["539"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../../helpers/dateTimeHelpers\";\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst ToolBar = () => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n    setIsLoading(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-field p-col-12 p-md-4\">\r\n        <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n        <Calendar\r\n          id=\"delivDate\"\r\n          placeholder={convertDatetoBPBDate(delivDate)}\r\n          dateFormat=\"mm/dd/yy\"\r\n          onChange={(e) => setDate(e.value)}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\ByProduct\\Parts\\ProductGrid.js",["540"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { CurrentDataContext } from \"../../../../dataContexts/CurrentDataContext\";\r\nimport { CustomerContext } from \"../../../../dataContexts/CustomerContext\";\r\nimport { ProductsContext } from \"../../../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../../helpers/CartBuildingHelpers\";\r\n\r\nconst ProductGrid = () => {\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { setIsLoading } = useContext(ToggleContext);\r\n\r\n  const [builtGrid, setBuiltGrid] = useState();\r\n\r\n  const tryZone = (grd) => {\r\n    let zone\r\n    try{\r\n    zone =\r\n      customers[\r\n        customers.findIndex(\r\n          (cust) => cust[\"custName\"] === grd[\"custName\"]\r\n        )\r\n      ][\"zoneName\"];\r\n    } catch {\r\n      zone = ''\r\n    }\r\n    return zone;\r\n  };\r\n\r\n  const tryNick = (grd) => {\r\n    let nick\r\n    try{\r\n    nick =\r\n      customers[\r\n        customers.findIndex(\r\n          (cust) => cust[\"custName\"] === grd[\"custName\"]\r\n        )\r\n      ][\"nickName\"];\r\n    } catch {\r\n      nick = ''\r\n    }\r\n    return nick;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (orders && standing && customers && products && delivDate) {\r\n      \r\n      try {\r\n        let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n        let buildStand = buildStandList(\"*\", delivDate, standing);\r\n        let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n        \r\n        let builtGridSetup = fullOrder.filter((ord) => ord[\"qty\"] !== 0);\r\n        \r\n        \r\n        builtGridSetup.forEach(\r\n          (grd) => (grd[\"zoneName\"] = tryZone(grd))\r\n             &&\r\n            (grd[\"nickName\"] =\r\n              products[\r\n                products.findIndex(\r\n                  (prod) => prod[\"prodName\"] === grd[\"prodName\"]\r\n                )\r\n              ][\"nickName\"]) &&\r\n            (grd[\"custNick\"] = tryNick(grd)\r\n            )\r\n        );\r\n        \r\n        setIsLoading(false);\r\n        setBuiltGrid(builtGridSetup);\r\n      } catch {\r\n        console.log(\"Whoops\");\r\n      }\r\n    }\r\n  }, [delivDate, orders, standing, customers, products]);\r\n\r\n  const headerTemplate = (data) => {\r\n    return (\r\n      <React.Fragment>\r\n        <h3>{data.zoneName}</h3>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const footerTemplate = (data) => {\r\n    return <React.Fragment></React.Fragment>;\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      value={builtGrid}\r\n      rowGroupMode=\"subheader\"\r\n      groupField=\"zoneName\"\r\n      sortMode=\"single\"\r\n      sortField=\"zoneName\"\r\n      sortOrder={1}\r\n      className=\"p-datatable-striped\"\r\n      rowGroupHeaderTemplate={headerTemplate}\r\n      rowGroupFooterTemplate={footerTemplate}\r\n    >\r\n      <Column\r\n        field=\"zoneName\"\r\n        header=\"Zone\"\r\n        filter\r\n        filterPlaceholder=\"Search by zone\"\r\n      ></Column>\r\n      <Column\r\n        field=\"prodName\"\r\n        header=\"Product\"\r\n        filter\r\n        filterPlaceholder=\"Search by product\"\r\n      ></Column>\r\n      <Column\r\n        field=\"nickName\"\r\n        header=\"Prod nick\"\r\n        filter\r\n        filterPlaceholder=\"Search by nickname\"\r\n      ></Column>\r\n      <Column\r\n        field=\"custName\"\r\n        header=\"Customer\"\r\n        filter\r\n        filterPlaceholder=\"Search by customer\"\r\n      ></Column>\r\n      <Column\r\n        field=\"custNick\"\r\n        header=\"Cust nick\"\r\n        filter\r\n        filterPlaceholder=\"Search by nickname\"\r\n      ></Column>\r\n      <Column field=\"qty\" header=\"Quantity\"></Column>\r\n    </DataTable>\r\n  );\r\n};\r\nexport default ProductGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Billing.js",["541","542"],"import React, { useEffect, useContext, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport BillingGrid from \"./Parts/BillingGrid\";\r\nimport WeeklyBillingGrid from \"./Parts/WeeklyBillingGrid\";\r\n\r\nimport SelectDate from \"./Parts/SelectDate\";\r\n\r\nimport { CustomerContext, CustomerLoad } from \"../../dataContexts/CustomerContext\";\r\nimport { ProductsContext, ProductsLoad } from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext, OrdersLoad } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext, StandingLoad } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { listAltPricings, listZones } from \"../../graphql/queries\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 70%;\r\n  border: 1px solid lightgray;\r\n  padding: 5px 10px;\r\n  margin: 0px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst fetchInfo = async (operation, opString, limit) => {\r\n  try {\r\n    let info = await API.graphql(\r\n      graphqlOperation(operation, {\r\n        limit: limit,\r\n      })\r\n    );\r\n    let list = info.data[opString].items;\r\n\r\n    let noDelete = list.filter((li) => li[\"_deleted\"] !== true);\r\n    return noDelete;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n\r\nfunction Billing() {\r\n  const { customers, custLoaded, setCustLoaded } = useContext(CustomerContext);\r\n  const { products, prodLoaded, setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { orders, ordersLoaded, setOrdersLoaded } = useContext(OrdersContext);\r\n  let { standing, standLoaded, setStandLoaded } = useContext(StandingContext);\r\n  let { setIsLoading } = useContext(ToggleContext)\r\n\r\n  const [ altPricing, setAltPricing ] = useState()\r\n  const [ nextInv, setNextInv ] = useState(0);\r\n  const [dailyInvoices, setDailyInvoices] = useState();\r\n  const [weeklyInvoices, setWeeklyInvoices] = useState();\r\n  const [ zones, setZones ] = useState()\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    if (!customers) {\r\n      setCustLoaded(false);\r\n    }\r\n    setHoldLoaded(true);\r\n    if (!orders) {\r\n      setOrdersLoaded(false);\r\n    }\r\n    if (!standing) {\r\n      setStandLoaded(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchAltPricing();\r\n    fetchZones()\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n\r\n  const fetchAltPricing = async () => {\r\n    try {\r\n      let altPricing = await fetchInfo(listAltPricings,\"listAltPricings\", \"1000\");\r\n      setAltPricing(altPricing);   \r\n    } catch (error) {\r\n      console.log(\"error on fetching Alt Pricing List\", error);\r\n    }\r\n  };\r\n\r\n  const fetchZones = async () => {\r\n    try {\r\n      let zones = await fetchInfo(listZones,\"listZones\", \"50\");\r\n      setZones(zones);\r\n    } catch (error) {\r\n      console.log(\"error on fetching Zone List\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!ordersLoaded ? <OrdersLoad /> : \"\"}\r\n      {!custLoaded ? <CustomerLoad /> : \"\"}\r\n      {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n      {!standLoaded ? <StandingLoad /> : \"\"}\r\n      \r\n      <BasicContainer>\r\n        <h1>Billing</h1>\r\n      </BasicContainer>\r\n      \r\n      <BasicContainer>\r\n        <SelectDate nextInv={nextInv} setNextInv={setNextInv} dailyInvoices={dailyInvoices} setDailyInvoices={setDailyInvoices}/>\r\n      </BasicContainer>\r\n     \r\n     \r\n\r\n      <BasicContainer>\r\n        <h2>Daily Invoicing</h2>\r\n        <BillingGrid altPricing={altPricing} nextInv={nextInv} dailyInvoices={dailyInvoices} setDailyInvoices={setDailyInvoices} zones={zones}/>\r\n      </BasicContainer>\r\n      <BasicContainer>\r\n      <h2>Weekly Invoicing (sent Sunday)</h2>\r\n        <WeeklyBillingGrid altPricing={altPricing} nextInv={nextInv} weeklyInvoices={weeklyInvoices} setWeeklyInvoices={setWeeklyInvoices} zones={zones}/>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Billing;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\BillingGrid.js",["543","544"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  buildCustList,\r\n  buildInvList,\r\n  attachInvoiceOrders,\r\n  formatter,\r\n} from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { ExpandedBillingRows } from \"./Parts/ExpandedBillingRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nconst BillingGrid = ({\r\n  altPricing,\r\n  nextInv,\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n  zones,\r\n}) => {\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n      let buildStand = buildStandList(\"*\", delivDate, standing);\r\n      let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n      let custListArray = buildCustList(fullOrder);\r\n      let invList = buildInvList(custListArray, customers, delivDate);\r\n      let invOrders = attachInvoiceOrders(\r\n        invList,\r\n        fullOrder,\r\n        products,\r\n        altPricing,\r\n        customers,\r\n        zones,\r\n        \"daily\"\r\n      );\r\n\r\n      setDailyInvoices(invOrders);\r\n    } catch {\r\n      console.log(\"Whoops\");\r\n    }\r\n  }, [delivDate, orders, standing, nextInv, zones]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === pickedProduct)\r\n        ].wholePrice;\r\n\r\n      setPickedRate(ratePull);\r\n    } catch {\r\n      console.log(\"no product chosen\");\r\n    }\r\n  }, [pickedProduct]);\r\n\r\n  const calcSumTotal = (data) => {\r\n    let sum = 0;\r\n    try {\r\n      for (let i of data) {\r\n        sum = sum + Number(i.qty) * Number(i.rate);\r\n      }\r\n    } catch {\r\n      console.log(\"No data to calc.\");\r\n    }\r\n    sum = formatter.format(sum);\r\n\r\n    return <div>{sum}</div>;\r\n  };\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedBillingRows\r\n        data={data}\r\n        dailyInvoices={dailyInvoices}\r\n        setDailyInvoices={setDailyInvoices}\r\n        products={products}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={dailyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"invNum\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n          <Column field=\"invNum\" header=\"Invoice#\" />\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n          <Column header=\"total\" body={(e) => calcSumTotal(e.orders)} />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(e.invNum, dailyInvoices, setDailyInvoices)\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\SelectDate.js",["545"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  convertDatetoBPBDate,\r\n  todayPlus,\r\n} from \"../../../helpers/dateTimeHelpers\";\r\n\r\nimport { fetchInfo } from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { listHeldforWeeklyInvoicings } from \"../../../graphql/queries\";\r\n\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst SelectDate = ({\r\n  dailyInvoices,\r\n  setDailyInvoices,\r\n}) => {\r\n  const { delivDate, setDelivDate } = useContext(CurrentDataContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n\r\n  const [pickedCustomer, setPickedCustomer] = useState();\r\n\r\n  useEffect(() => {\r\n    let [today] = todayPlus();\r\n    setDelivDate(today);\r\n  }, []);\r\n\r\n  const setDate = (date) => {\r\n    const dt2 = DateTime.fromJSDate(date);\r\n    setDelivDate(dt2.toFormat(\"yyyy-MM-dd\"));\r\n  };\r\n\r\n  const handleAddCustomer = (e) => {\r\n    let invToModify = clonedeep(dailyInvoices);\r\n    let dateSplit = delivDate.split(\"-\");\r\n    let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n    invToModify.push({\r\n      custName: e.target.value,\r\n      invNum: newDate+customers[customers.findIndex(cst => cst.custName===e.target.value)].nickName,\r\n      orders: [],\r\n    });\r\n    setDailyInvoices(invToModify);\r\n    setPickedCustomer(\"\");\r\n  };\r\n\r\n  const exportCSV = async () => {\r\n    \r\n  \r\n    let data = [];\r\n    for (let inv of dailyInvoices) {\r\n      for (let ord of inv.orders) {\r\n       \r\n        let ddate = convertDatetoBPBDate(delivDate);\r\n        let dueDate = convertDatetoBPBDate(\r\n          DateTime.now()\r\n            .setZone(\"America/Los_Angeles\")\r\n            .plus({ days: 15 })\r\n            .toString()\r\n            .split(\"T\")[0]\r\n        );\r\n        let custIndex = customers.findIndex(\r\n          (cust) => cust[\"custName\"] === inv[\"custName\"]\r\n        );\r\n        let BillAddrLine1 = customers[custIndex].addr1;\r\n        let BillAddrLine2 = customers[custIndex].addr2;\r\n        let BillAddrCity = customers[custIndex].city;\r\n        let PostalCode = customers[custIndex].zip;\r\n        let ponote;\r\n        try {\r\n          ponote =\r\n            orders[\r\n              orders.findIndex(\r\n                (order) =>\r\n                  order.delivDate === delivDate &&\r\n                  order.custName === ord.custName\r\n              )\r\n            ].PONote;\r\n        } catch {\r\n          ponote = \"na\";\r\n        }\r\n\r\n        let newEntry = [\r\n          inv.invNum,\r\n          inv.custName,\r\n          ddate,\r\n          dueDate,\r\n          ddate,\r\n          \"net15\",\r\n          \"Wholesale\",\r\n          BillAddrLine1,\r\n          BillAddrLine2,\r\n          \"\",\r\n          BillAddrCity,\r\n          \"CA\",\r\n          PostalCode,\r\n          ponote,\r\n          true,\r\n          ord.prodName,\r\n          ord.prodName,\r\n          ord.qty,\r\n          ord.rate,\r\n          \"Y\",\r\n        ];\r\n        data.push(newEntry);\r\n      }\r\n    }\r\n\r\n    let todayDay = DateTime.now().setZone(\"America/Los_Angeles\").weekdayLong;\r\n\r\n    if (todayDay === \"Thursday\") {\r\n      let weeklyInfo = await fetchInfo(\r\n        listHeldforWeeklyInvoicings,\r\n        \"listHeldforWeeklyInvoicings\",\r\n        \"1000\"\r\n      );\r\n\r\n      let custSet = weeklyInfo.map((week) => week.custName);\r\n      custSet = new Set(custSet);\r\n      let custArray = Array.from(custSet);\r\n      let dateSplit = delivDate.split(\"-\");\r\n      let newDate = dateSplit[1] + dateSplit[2] + dateSplit[0];\r\n      custArray = custArray.map((cust) => ({\r\n        custName: cust,\r\n        invNum: newDate+customers[customers.findIndex(cst => cst.custName===cust)].nickName,\r\n      }));\r\n      let weeklyOrders = [];\r\n      for (let cust of custArray) {\r\n        let newOrders = [];\r\n        for (let inv of weeklyInfo) {\r\n          if (inv.custName === cust.custName) {\r\n            let newOrder = {\r\n              prodName: inv.prodName,\r\n              qty: inv.qty,\r\n              rate: inv.rate,\r\n              fullDate: inv.delivDate,\r\n            };\r\n            newOrders.push(newOrder);\r\n          }\r\n        }\r\n\r\n        let newCust = {\r\n          custName: cust.custName,\r\n          invNum: cust.invNum,\r\n          orders: newOrders,\r\n        };\r\n        weeklyOrders.push(newCust);\r\n      }\r\n      for (let inv of weeklyOrders) {\r\n        for (let ord of inv.orders) {\r\n        \r\n          let ddate = convertDatetoBPBDate(delivDate);\r\n          let fullDate=convertDatetoBPBDate(ord.fullDate)\r\n          let dueDate = convertDatetoBPBDate(\r\n            DateTime.now()\r\n              .setZone(\"America/Los_Angeles\")\r\n              .plus({ days: 15 })\r\n              .toString()\r\n              .split(\"T\")[0]\r\n          );\r\n          let custIndex = customers.findIndex(\r\n            (cust) => cust[\"custName\"] === inv[\"custName\"]\r\n          );\r\n          let BillAddrLine1 = customers[custIndex].addr1;\r\n          let BillAddrLine2 = customers[custIndex].addr2;\r\n          let BillAddrCity = customers[custIndex].city;\r\n          let PostalCode = customers[custIndex].zip;\r\n          let ponote;\r\n          try {\r\n            ponote =\r\n              orders[\r\n                orders.findIndex(\r\n                  (order) =>\r\n                    order.delivDate === delivDate &&\r\n                    order.custName === ord.custName\r\n                )\r\n              ].PONote;\r\n          } catch {\r\n            ponote = \"na\";\r\n          }\r\n  \r\n          let newEntry = [\r\n            inv.invNum,\r\n            inv.custName,\r\n            ddate,\r\n            dueDate,\r\n            fullDate,\r\n            \"net15\",\r\n            \"Wholesale\",\r\n            BillAddrLine1,\r\n            BillAddrLine2,\r\n            \"\",\r\n            BillAddrCity,\r\n            \"CA\",\r\n            PostalCode,\r\n            ponote,\r\n            true,\r\n            ord.prodName,\r\n            ord.prodName,\r\n            ord.qty,\r\n            ord.rate,\r\n            \"Y\",\r\n          ];\r\n        \r\n          data.push(newEntry);\r\n          console.log(data)\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    var csv =\r\n      \"RefNumber,Customer,TxnDate,DueDate,ShpDate,SalesTerm,Class,BillAddrLine1,BillAddrLine2,BillAddrLine3,BillAddrCity,BillAddrState,BillAddrPostalCode,Msg,AllowOnlineACHPayment,LineItem,LineDescrip,LineQty,LineUnitPrice,LineTaxable\\n\";\r\n    data.forEach(function (row) {\r\n      csv += row.join(\",\");\r\n      csv += \"\\n\";\r\n    });\r\n    \r\n    \r\n    var hiddenElement = document.createElement(\"a\");\r\n    hiddenElement.href = \"data:text/csv;charset=utf-8,\" + encodeURI(csv);\r\n    hiddenElement.target = \"_blank\";\r\n    hiddenElement.download = `${delivDate}invoiceExport.csv`;\r\n    hiddenElement.click();\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BasicContainer>\r\n        <div className=\"p-field p-col-12 p-md-4\">\r\n          <label htmlFor=\"delivDate\">Pick Delivery Date: </label>\r\n          <Calendar\r\n            id=\"delivDate\"\r\n            placeholder={convertDatetoBPBDate(delivDate)}\r\n            disabled\r\n            dateFormat=\"mm/dd/yy\"\r\n            onChange={(e) => setDate(e.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button value={pickedCustomer} onClick={(e) => handleAddCustomer(e)}>\r\n            ADD CUSTOMER +\r\n          </Button>\r\n\r\n          <Dropdown\r\n            optionLabel=\"custName\"\r\n            options={customers}\r\n            placeholder={pickedCustomer}\r\n            name=\"customers\"\r\n            value={pickedCustomer}\r\n            onChange={(e) => setPickedCustomer(e.target.value.custName)}\r\n          />\r\n        </div>\r\n       \r\n        <Button className=\"p-button-success\" onClick={exportCSV}>\r\n          EXPORT CSV\r\n        </Button>\r\n      </BasicContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectDate;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\billingGridHelpers.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\DeleteInvoice.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedBillingRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\GrandTotal.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\WeeklyBillingGrid.js",["546","547","548"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\n\r\nimport { CurrentDataContext } from \"../../../dataContexts/CurrentDataContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  buildCartList,\r\n  buildStandList,\r\n  compileFullOrderList,\r\n} from \"../../../helpers/CartBuildingHelpers\";\r\n\r\nimport {\r\n  buildCustList,\r\n  buildInvList,\r\n  attachInvoiceOrders,\r\n  fetchInfo,\r\n} from \"../../../helpers/billingGridHelpers\";\r\n\r\nimport { ExpandedWeeklyRows } from \"./Parts/ExpandedWeeklyRows\";\r\nimport { DeleteInvoice } from \"./Parts/DeleteInvoice\";\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport { listHeldforWeeklyInvoicings } from \"../../../graphql/queries\";\r\nimport { createHeldforWeeklyInvoicing } from \"../../../graphql/mutations\";\r\n\r\nconst WeeklyBillingGrid = ({\r\n  altPricing,\r\n  nextInv,\r\n  weeklyInvoices,\r\n  setWeeklyInvoices,\r\n  zones,\r\n}) => {\r\n  const [expandedRows, setExpandedRows] = useState(null);\r\n  const [ weeklyLoaded, setWeeklyLoaded ] = useState(false)\r\n\r\n  const [pickedProduct, setPickedProduct] = useState();\r\n  const [pickedRate, setPickedRate] = useState();\r\n  const [pickedQty, setPickedQty] = useState();\r\n\r\n  const { delivDate } = useContext(CurrentDataContext);\r\n  const { products } = useContext(ProductsContext);\r\n  const { customers } = useContext(CustomerContext);\r\n  const { orders } = useContext(OrdersContext);\r\n  const { standing } = useContext(StandingContext);\r\n  const { readyForWeekly, setReadyForWeekly, setIsLoading } = useContext(\r\n    ToggleContext\r\n  );\r\n\r\n  useEffect(()=> {\r\n    if(!weeklyLoaded){\r\n    addOrdersToDB(weeklyInvoices)\r\n  }\r\n  },[weeklyInvoices])\r\n\r\n  useEffect(() => {\r\n    try{\r\n      if (\r\n        orders.length>0 &&\r\n        standing.length>0 &&\r\n        customers.length>0 &&\r\n        products.length>0){\r\n          setReadyForWeekly(true)\r\n        }\r\n\r\n\r\n    } catch {\r\n      console.log(\"Not ready for weeklies\")\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let buildOrders = buildCartList(\"*\", delivDate, orders);\r\n      let buildStand = buildStandList(\"*\", delivDate, standing);\r\n      let fullOrder = compileFullOrderList(buildOrders, buildStand);\r\n\r\n      let custListArray = buildCustList(fullOrder);\r\n      let invList = buildInvList(custListArray, customers, delivDate);\r\n      let invOrders = attachInvoiceOrders(\r\n        invList,\r\n        fullOrder,\r\n        products,\r\n        altPricing,\r\n        customers,\r\n        zones,\r\n        \"weekly\"\r\n      );\r\n      setWeeklyInvoices(invOrders);\r\n      \r\n      setIsLoading(true);\r\n    } catch {\r\n      console.log(\"Trouble building invOrders\");\r\n    }\r\n  }, [readyForWeekly]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    try {\r\n      let ratePull =\r\n        products[\r\n          products.findIndex((prod) => prod[\"prodName\"] === pickedProduct)\r\n        ].wholePrice;\r\n\r\n      setPickedRate(ratePull);\r\n    } catch {\r\n      console.log(\"no product chosen\");\r\n    }\r\n  }, [pickedProduct]);\r\n\r\n  const addOrdersToDB = async (invOrders) => {\r\n    setIsLoading(true)\r\n    \r\n    let thisWeeksOrders;\r\n    // fetch thisWeeksOrders\r\n    try {\r\n      thisWeeksOrders = await fetchInfo(\r\n        listHeldforWeeklyInvoicings,\r\n        \"listHeldforWeeklyInvoicings\",\r\n        \"1000\"\r\n      );\r\n      \r\n      for (let inv of invOrders) {\r\n    \r\n      \r\n\r\n        if (\r\n          thisWeeksOrders.findIndex(\r\n            (ord) =>\r\n              ord[\"delivDate\"] === delivDate &&\r\n              ord[\"custName\"] === inv[\"custName\"] &&\r\n              inv[\"custName\"] !== \"\"\r\n          ) < 0\r\n        ) {\r\n          for (let ord of inv.orders) {\r\n            let newWeeklyOrder = {\r\n              custName: inv[\"custName\"],\r\n              delivDate: delivDate,\r\n              prodName: ord[\"prodName\"],\r\n              qty: ord[\"qty\"],\r\n              rate: ord[\"rate\"],\r\n            };\r\n            thisWeeksOrders.push(newWeeklyOrder);\r\n            try {\r\n              await API.graphql(\r\n                graphqlOperation(createHeldforWeeklyInvoicing, {\r\n                  input: { ...newWeeklyOrder },\r\n                })\r\n              );\r\n            } catch (error) {\r\n              console.log(\"error on creating Orders\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Filter delivDate back to last Monday\r\n\r\n        let custStart = thisWeeksOrders.map((ord) => ord[\"custName\"]);\r\n        custStart = new Set(custStart);\r\n        custStart = Array.from(custStart);\r\n        let addDeliv = custStart.map((cust) => ({\r\n          custName: cust,\r\n          delivDate: [],\r\n        }));\r\n\r\n        for (let cust of custStart) {\r\n          for (let ord of thisWeeksOrders) {\r\n            if (ord.custName === cust) {\r\n              if (\r\n                !addDeliv[\r\n                  addDeliv.findIndex((add) => add.custName === cust)\r\n                ].delivDate.includes(ord.delivDate)\r\n              ) {\r\n                addDeliv[\r\n                  addDeliv.findIndex((add) => add.custName === cust)\r\n                ].delivDate.push(ord.delivDate);\r\n              }\r\n            }\r\n          }\r\n          let reformatted = addDeliv[\r\n            addDeliv.findIndex((add) => add.custName === cust)\r\n          ].delivDate.map((dt) => ({ delivDate: dt, orders: [] }));\r\n          addDeliv[\r\n            addDeliv.findIndex((add) => add.custName === cust)\r\n          ].delivDate = reformatted;\r\n        }\r\n\r\n        for (let ord of thisWeeksOrders) {\r\n          let ordToAdd = {\r\n            prodName: ord.prodName,\r\n            qty: ord.qty,\r\n            rate: ord.rate,\r\n          };\r\n          let custInd = addDeliv.findIndex(\r\n            (add) => add.custName === ord.custName\r\n          );\r\n          let delivInd = addDeliv[custInd].delivDate.findIndex(\r\n            (deliv) => deliv.delivDate === ord.delivDate\r\n          );\r\n          let check = addDeliv[custInd].delivDate[delivInd].orders.map(\r\n            (item) => item.prodName\r\n          );\r\n          if (!check.includes(ord.prodName)) {\r\n            addDeliv[custInd].delivDate[delivInd].orders.push(ordToAdd);\r\n          }\r\n        }\r\n\r\n        setIsLoading(false);\r\n        setWeeklyInvoices(addDeliv);\r\n        setWeeklyLoaded(true)\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error on fetching listHeldforWeeklyInvoicings List\", error);\r\n    }\r\n  };\r\n\r\n  const rowExpansionTemplate = (data) => {\r\n    return (\r\n      <ExpandedWeeklyRows\r\n        data={data}\r\n        weeklyInvoices={weeklyInvoices}\r\n        setWeeklyInvoices={setWeeklyInvoices}\r\n        products={products}\r\n        pickedProduct={pickedProduct}\r\n        setPickedProduct={setPickedProduct}\r\n        pickedQty={pickedQty}\r\n        setPickedQty={setPickedQty}\r\n        pickedRate={pickedRate}\r\n        setPickedRate={setPickedRate}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"datatable-rowexpansion-demo\">\r\n      <div className=\"card\">\r\n        <DataTable\r\n          value={weeklyInvoices}\r\n          expandedRows={expandedRows}\r\n          onRowToggle={(e) => setExpandedRows(e.data)}\r\n          rowExpansionTemplate={rowExpansionTemplate}\r\n          dataKey=\"custName\"\r\n          className=\"p-datatable-sm\"\r\n        >\r\n          <Column expander style={{ width: \"3em\" }} />\r\n\r\n          <Column field=\"custName\" header=\"Customer\" />\r\n\r\n          <Column\r\n            headerStyle={{ width: \"4rem\" }}\r\n            body={(e) =>\r\n              DeleteInvoice(e.invNum, weeklyInvoices, setWeeklyInvoices)\r\n            }\r\n          ></Column>\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeeklyBillingGrid;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\ExpandedWeeklyOrdersRows.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\billing\\Parts\\Parts\\Parts\\WeeklyGrandTotal.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker1.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBaker2.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNBuckets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBNProd\\BPBNSetOut.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\doughCalc.js",["549"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction DoughCalc() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default DoughCalc;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSMixPocket.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\BPBSWhatToMake.js",["550","551","552","553","554","555","556","557","558","559","560","561","562"],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\BPBSProd\\CroixToMake.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\NorthLists.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\AMPastry.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\logistics\\RetailBags.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\editDough.js",["563"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { CustomerContext } from \"../../../dataContexts/CustomerContext\";\r\nimport { OrdersContext } from \"../../../dataContexts/OrdersContext\";\r\nimport { ProductsContext } from \"../../../dataContexts/ProductsContext\";\r\nimport { StandingContext } from \"../../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../../dataContexts/HoldingContext\";\r\n\r\nimport DoughList from \"./DoughList\";\r\nimport Info from \"./Info\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst MainWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr;\r\n  height: 100vh;\r\n`;\r\n\r\nconst DescripWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-items: start;\r\n  align-content: flex-start;\r\n  width: 100%;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst GroupBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: flex-start;\r\n  border: 1px solid lightgrey;\r\n  width: 95%;\r\n  margin: 5px 10px;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nfunction EditDoughs() {\r\n  const [selectedDough, setSelectedDough] = useState();\r\n  const [doughs, setDoughs] = useState(null);\r\n  const [doughComponents, setDoughComponents] = useState(null);\r\n  const [isModified, setIsModified] = useState(false)\r\n  const [isReload,setIsReload] = useState(false)\r\n\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  const { setProdLoaded } = useContext(ProductsContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n\r\n  useEffect(() => {\r\n    setCustLoaded(true);\r\n    setProdLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MainWrapper>\r\n        <DoughList\r\n          selectedDough={selectedDough}\r\n          setSelectedDough={setSelectedDough}\r\n          doughs={doughs}\r\n          setDoughs={setDoughs}\r\n          doughComponents={doughComponents}\r\n          setDoughComponents={setDoughComponents}\r\n          isReload={isReload}\r\n          setIsReload={setIsReload}\r\n          setIsModified={setIsModified}\r\n        />\r\n        {selectedDough && (\r\n          <React.Fragment>\r\n            <DescripWrapper>\r\n              <GroupBox id=\"Info\">\r\n                <Info\r\n                  selectedDough={selectedDough}\r\n                  setSelectedDough={setSelectedDough}\r\n                  doughComponents={doughComponents}\r\n                  setDoughComponents={setDoughComponents}\r\n                  isModified={isModified}\r\n                  setIsModified={setIsModified}\r\n                />\r\n              </GroupBox>\r\n            </DescripWrapper>\r\n          </React.Fragment>\r\n        )}\r\n        <DescripWrapper>\r\n          <Buttons\r\n            selectedDough={selectedDough}\r\n            setSelectedDough={setSelectedDough}\r\n            doughs={doughs}\r\n            setDoughs={setDoughs}\r\n            doughComponents={doughComponents}\r\n            setDoughComponents={setDoughComponents}\r\n            isModified={isModified}\r\n            setIsModified={setIsModified}\r\n            isReload={isReload}\r\n            setIsReload={setIsReload}\r\n          />\r\n        </DescripWrapper>\r\n      </MainWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default EditDoughs;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\DoughList.js",["564","565"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\DoughInfo.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\PreMix.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Drys.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Wets.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Additions.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\settings\\editDough\\InfoParts\\Post.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\DoughList.js",["566","567"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport { fetchDoughs, fetchDoughComponents } from \"./InfoParts/utils\"\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { ScrollPanel } from \"primereact/scrollpanel\";\r\n\r\nconst ListWrapper = styled.div`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin: auto;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst DoughList = ({\r\n  selectedDough,\r\n  setSelectedDough,\r\n  doughs,\r\n  setDoughs,\r\n  doughComponents,\r\n  setDoughComponents,\r\n  isReload,\r\n  setIsReload,\r\n  setIsModified\r\n}) => {\r\n  let { setIsLoading } = useContext(ToggleContext);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughs(setDoughs);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDoughComponents(setDoughComponents);\r\n    setIsLoading(false);\r\n  }, [isReload]);\r\n\r\n\r\n  const handleSelection = (e) => {\r\n    setSelectedDough(e.value);\r\n    setIsModified(false)\r\n  };\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <ScrollPanel style={{ width: \"100%\", height: \"100vh\" }}>\r\n        {doughs && (\r\n          <DataTable\r\n            value={doughs}\r\n            className=\"p-datatable-striped\"\r\n            selection={selectedDough}\r\n            onSelectionChange={handleSelection}\r\n            selectionMode=\"single\"\r\n            dataKey=\"id\"\r\n          >\r\n            <Column\r\n              field=\"doughName\"\r\n              header=\"Doughs\"\r\n              sortable\r\n              filter\r\n              filterPlaceholder=\"Search by name\"\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n      </ScrollPanel>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default DoughList;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Info.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\Buttons.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\doughCalc\\InfoParts\\utils.js",[],"C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\pages\\EODCounts\\EODCounts.js",["568","569","570"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nimport TimeAgo from \"timeago-react\"; // var TimeAgo = require('timeago-react');\r\nimport us from \"timeago.js/lib/lang/en_US\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n\r\nimport { CustomerContext } from \"../../dataContexts/CustomerContext\";\r\nimport {\r\n  ProductsContext,\r\n  ProductsLoad,\r\n} from \"../../dataContexts/ProductsContext\";\r\nimport { OrdersContext } from \"../../dataContexts/OrdersContext\";\r\nimport { StandingContext } from \"../../dataContexts/StandingContext\";\r\nimport { HoldingContext } from \"../../dataContexts/HoldingContext\";\r\nimport { ToggleContext } from \"../../dataContexts/ToggleContext\";\r\n\r\nimport {\r\n  updateProduct,\r\n  \r\n} from \"../../graphql/mutations\";\r\n\r\n\r\n\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst BasicContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  \r\n  padding: 5px 10px;\r\n  margin: 4px auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst WholeBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 60%;\r\n  margin: auto;\r\n  padding: 0 0 100px 0;\r\n`;\r\n\r\nconst IngDetails = styled.div`\r\n  font-size: 0.8em;\r\n`;\r\n\r\nconst clonedeep = require(\"lodash.clonedeep\");\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nfunction EODCounts({ loc }) {\r\n  const { products, setProducts, prodLoaded, setProdLoaded } = useContext(\r\n    ProductsContext\r\n  );\r\n  const { setCustLoaded } = useContext(CustomerContext);\r\n  let { setHoldLoaded } = useContext(HoldingContext);\r\n  let { setOrdersLoaded } = useContext(OrdersContext);\r\n  let { setStandLoaded } = useContext(StandingContext);\r\n  \r\n\r\n\r\n  const [signedIn, setSignedIn] = useState(\"null\");\r\n  const [eodProds, setEODProds] = useState();\r\n  const [shelfBag, setShelfBag] = useState(false);\r\n  const [shelfEa, setShelfEa] = useState(false);\r\n  const [freezerBag, setFreezerBag] = useState(false);\r\n  const [freezerEa, setFreezerEa] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!products) {\r\n      setProdLoaded(false);\r\n    }\r\n    setCustLoaded(true);\r\n    setHoldLoaded(true);\r\n    setOrdersLoaded(true);\r\n    setStandLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let prodsToMap = products.filter(\r\n      (prod) => prod.bakedWhere[0] === loc && prod.eodCount === true\r\n    );\r\n    setEODProds(prodsToMap);\r\n  }, [products]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (eodProds){\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n          prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setShelfBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setShelfEa(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n      ).length>0){\r\n        setFreezerBag(true)\r\n      }\r\n      if(eodProds.filter(\r\n        (prods) =>\r\n        prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n      ).length>0){\r\n        setFreezerEa(true)\r\n      }\r\n    }\r\n  },[eodProds])\r\n\r\n  const updateDBattr = async (id, attr, val) => {\r\n    \r\n   \r\n    let addDetails = {\r\n      id: id,\r\n      [attr]: val,\r\n      whoCountedLast: signedIn\r\n    };\r\n    try {\r\n      await API.graphql(\r\n        graphqlOperation(updateProduct, { input: { ...addDetails } })\r\n      );\r\n     \r\n    } catch (error) {\r\n      console.log(\"error on updating product\", error);\r\n     \r\n    }\r\n  };\r\n\r\n  const updateItem = (value, itemToUpdate) => {\r\n\r\n    let ind = itemToUpdate.findIndex((item) => item.id === value.target.id);\r\n\r\n    itemToUpdate[ind].currentStock = value.target.value;\r\n    itemToUpdate[ind].updatedAt = DateTime.now().setZone(\"America/Los_Angeles\");\r\n    itemToUpdate[ind].whoCountedLast = signedIn;\r\n\r\n    try {\r\n      let id = value.target.id;\r\n      let val = Number(value.target.value);\r\n      updateDBattr(id, \"currentStock\", val);\r\n    } catch {\r\n      console.log(\"error updating attribute.\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    if (value.code === \"Enter\") {\r\n      let itemToUpdate = clonedeep(products);\r\n      updateItem(value, itemToUpdate);\r\n      document.getElementById(value.target.id).value = \"\";\r\n\r\n      return itemToUpdate;\r\n    }\r\n  };\r\n\r\n  const handleBlur = (value) => {\r\n    let itemToUpdate = clonedeep(products);\r\n    if (value.target.value !== \"\") {\r\n      updateItem(value, itemToUpdate);\r\n    }\r\n    document.getElementById(value.target.id).value = \"\";\r\n\r\n    return itemToUpdate;\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    return (\r\n      <InputText\r\n        id={e.id}\r\n        style={{\r\n          width: \"50px\",\r\n          backgroundColor: \"#E3F2FD\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        placeholder={e.currentStock}\r\n        onKeyUp={(e) => e.code === \"Enter\" && setProducts(handleChange(e))}\r\n        onBlur={(e) => setProducts(handleBlur(e))}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleSignIn = () => {\r\n    let signIn;\r\n\r\n    swal(\"Please Sign In:\", {\r\n      content: \"input\",\r\n    }).then(async (value) => {\r\n      signIn = value;\r\n      setSignedIn(signIn);\r\n    });\r\n  };\r\n\r\n  const eaCount = (e) => {\r\n    return <React.Fragment>{e.currentStock * e.packSize}</React.Fragment>;\r\n  };\r\n\r\n  const lastCount = (e) => {\r\n    let updated = e.updatedAt\r\n    return (<IngDetails>\r\n    <div>\r\n      Counted &nbsp;\r\n      <TimeAgo\r\n        key={e.id + \"time\"}\r\n        datetime={updated}\r\n        locale={us}\r\n      />\r\n      &nbsp;by {e.whoCountedLast}\r\n    </div>\r\n  </IngDetails>)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WholeBox>\r\n        {!prodLoaded ? <ProductsLoad /> : \"\"}\r\n        {loc === \"Prado\" ? <h1>BPBS EOD Counts</h1> : <h1>BPBN EOD Counts</h1>}\r\n        {signedIn === \"null\" ? (\r\n        <BasicContainer>\r\n          <Button\r\n            label=\"Please Sign in to make EOD Changes\"\r\n            icon=\"pi pi-plus\"\r\n            onClick={handleSignIn}\r\n            className={\"p-button-raised p-button-rounded\"}\r\n          />\r\n        </BasicContainer>\r\n      ) : (\r\n        <div></div> )}\r\n        {signedIn !== \"null\" ? (\r\n          <React.Fragment>\r\n        <h2>On Shelf</h2>\r\n        {shelfBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"By Bag\"></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n            \r\n          </DataTable>\r\n        )}\r\n        {shelfEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== true && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        <h2>In Freezer</h2>\r\n\r\n        {freezerBag && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) > 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"In Freezer\"></Column>\r\n\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"# of bags\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={eaCount}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n\r\n        {freezerEa && (\r\n          <DataTable\r\n            value={eodProds.filter(\r\n              (prods) =>\r\n                prods.freezerThaw !== false && Number(prods.packSize) === 1\r\n            )}\r\n            className=\"p-datatable-sm\"\r\n          >\r\n            <Column field=\"prodName\" header=\"Each\"></Column>\r\n            <Column></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"ea\"\r\n              body={(e) => handleInput(e)}\r\n            ></Column>\r\n            <Column\r\n              className=\"p-text-center\"\r\n              header=\"Who Counted Last\"\r\n              body={lastCount}\r\n            ></Column>\r\n          </DataTable>\r\n        )}\r\n     \r\n      </React.Fragment>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n       </WholeBox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default EODCounts;\r\n","C:\\Users\\danbe\\Desktop\\AnAppaDay\\Jan20bpbwholeguiReact\\src\\helpers\\prodBuildHelpers.js",[],{"ruleId":"571","replacedBy":"572"},{"ruleId":"573","replacedBy":"574"},{"ruleId":"575","severity":1,"message":"576","line":38,"column":7,"nodeType":"577","endLine":38,"endColumn":9,"suggestions":"578"},{"ruleId":"579","severity":1,"message":"580","line":46,"column":38,"nodeType":"581","messageId":"582","endLine":46,"endColumn":55},{"ruleId":"575","severity":1,"message":"583","line":52,"column":5,"nodeType":"577","endLine":52,"endColumn":7,"suggestions":"584"},{"ruleId":"575","severity":1,"message":"585","line":61,"column":5,"nodeType":"577","endLine":61,"endColumn":22,"suggestions":"586"},{"ruleId":"575","severity":1,"message":"587","line":67,"column":5,"nodeType":"577","endLine":67,"endColumn":17,"suggestions":"588"},{"ruleId":"575","severity":1,"message":"589","line":38,"column":9,"nodeType":"577","endLine":38,"endColumn":11,"suggestions":"590"},{"ruleId":"579","severity":1,"message":"591","line":3,"column":10,"nodeType":"581","messageId":"582","endLine":3,"endColumn":29},{"ruleId":"579","severity":1,"message":"592","line":34,"column":26,"nodeType":"581","messageId":"582","endLine":34,"endColumn":45},{"ruleId":"575","severity":1,"message":"593","line":38,"column":7,"nodeType":"577","endLine":38,"endColumn":9,"suggestions":"594"},{"ruleId":"579","severity":1,"message":"595","line":34,"column":25,"nodeType":"581","messageId":"582","endLine":34,"endColumn":43},{"ruleId":"575","severity":1,"message":"596","line":38,"column":7,"nodeType":"577","endLine":38,"endColumn":9,"suggestions":"597"},{"ruleId":"575","severity":1,"message":"598","line":48,"column":6,"nodeType":"577","endLine":48,"endColumn":43,"suggestions":"599"},{"ruleId":"575","severity":1,"message":"600","line":69,"column":6,"nodeType":"577","endLine":69,"endColumn":58,"suggestions":"601"},{"ruleId":"575","severity":1,"message":"602","line":61,"column":6,"nodeType":"577","endLine":61,"endColumn":24,"suggestions":"603"},{"ruleId":"571","replacedBy":"604"},{"ruleId":"573","replacedBy":"605"},{"ruleId":"575","severity":1,"message":"606","line":52,"column":7,"nodeType":"577","endLine":52,"endColumn":70,"suggestions":"607"},{"ruleId":"575","severity":1,"message":"608","line":77,"column":6,"nodeType":"577","endLine":77,"endColumn":8,"suggestions":"609"},{"ruleId":"579","severity":1,"message":"610","line":73,"column":5,"nodeType":"581","messageId":"582","endLine":73,"endColumn":17},{"ruleId":"579","severity":1,"message":"611","line":81,"column":11,"nodeType":"581","messageId":"582","endLine":81,"endColumn":19},{"ruleId":"579","severity":1,"message":"612","line":82,"column":11,"nodeType":"581","messageId":"582","endLine":82,"endColumn":18},{"ruleId":"579","severity":1,"message":"613","line":93,"column":5,"nodeType":"581","messageId":"582","endLine":93,"endColumn":20},{"ruleId":"575","severity":1,"message":"614","line":148,"column":6,"nodeType":"577","endLine":148,"endColumn":25,"suggestions":"615"},{"ruleId":"575","severity":1,"message":"616","line":163,"column":6,"nodeType":"577","endLine":163,"endColumn":25,"suggestions":"617"},{"ruleId":"579","severity":1,"message":"618","line":42,"column":5,"nodeType":"581","messageId":"582","endLine":42,"endColumn":18},{"ruleId":"579","severity":1,"message":"619","line":45,"column":5,"nodeType":"581","messageId":"582","endLine":45,"endColumn":11},{"ruleId":"579","severity":1,"message":"620","line":46,"column":5,"nodeType":"581","messageId":"582","endLine":46,"endColumn":14},{"ruleId":"579","severity":1,"message":"621","line":48,"column":5,"nodeType":"581","messageId":"582","endLine":48,"endColumn":17},{"ruleId":"579","severity":1,"message":"622","line":49,"column":5,"nodeType":"581","messageId":"582","endLine":49,"endColumn":20},{"ruleId":"579","severity":1,"message":"611","line":51,"column":11,"nodeType":"581","messageId":"582","endLine":51,"endColumn":19},{"ruleId":"579","severity":1,"message":"612","line":52,"column":11,"nodeType":"581","messageId":"582","endLine":52,"endColumn":18},{"ruleId":"575","severity":1,"message":"623","line":59,"column":6,"nodeType":"577","endLine":59,"endColumn":25,"suggestions":"624"},{"ruleId":"575","severity":1,"message":"625","line":64,"column":6,"nodeType":"577","endLine":64,"endColumn":8,"suggestions":"626"},{"ruleId":"575","severity":1,"message":"627","line":65,"column":6,"nodeType":"577","endLine":65,"endColumn":8,"suggestions":"628"},{"ruleId":"575","severity":1,"message":"629","line":57,"column":6,"nodeType":"577","endLine":57,"endColumn":8,"suggestions":"630"},{"ruleId":"575","severity":1,"message":"631","line":32,"column":6,"nodeType":"577","endLine":32,"endColumn":14,"suggestions":"632"},{"ruleId":"579","severity":1,"message":"633","line":47,"column":10,"nodeType":"581","messageId":"582","endLine":47,"endColumn":16},{"ruleId":"575","severity":1,"message":"606","line":68,"column":6,"nodeType":"577","endLine":68,"endColumn":8,"suggestions":"634"},{"ruleId":"575","severity":1,"message":"629","line":57,"column":6,"nodeType":"577","endLine":57,"endColumn":8,"suggestions":"635"},{"ruleId":"575","severity":1,"message":"636","line":32,"column":6,"nodeType":"577","endLine":32,"endColumn":13,"suggestions":"637"},{"ruleId":"575","severity":1,"message":"606","line":44,"column":6,"nodeType":"577","endLine":44,"endColumn":8,"suggestions":"638"},{"ruleId":"575","severity":1,"message":"639","line":71,"column":5,"nodeType":"577","endLine":71,"endColumn":7,"suggestions":"640"},{"ruleId":"575","severity":1,"message":"629","line":85,"column":6,"nodeType":"577","endLine":85,"endColumn":8,"suggestions":"641"},{"ruleId":"575","severity":1,"message":"606","line":91,"column":6,"nodeType":"577","endLine":91,"endColumn":8,"suggestions":"642"},{"ruleId":"575","severity":1,"message":"643","line":91,"column":6,"nodeType":"577","endLine":91,"endColumn":42,"suggestions":"644"},{"ruleId":"575","severity":1,"message":"645","line":33,"column":6,"nodeType":"577","endLine":33,"endColumn":35,"suggestions":"646"},{"ruleId":"575","severity":1,"message":"647","line":122,"column":6,"nodeType":"577","endLine":122,"endColumn":8,"suggestions":"648"},{"ruleId":"575","severity":1,"message":"631","line":128,"column":6,"nodeType":"577","endLine":128,"endColumn":14,"suggestions":"649"},{"ruleId":"575","severity":1,"message":"650","line":221,"column":6,"nodeType":"577","endLine":221,"endColumn":56,"suggestions":"651"},{"ruleId":"579","severity":1,"message":"652","line":23,"column":10,"nodeType":"581","messageId":"582","endLine":23,"endColumn":21},{"ruleId":"579","severity":1,"message":"653","line":25,"column":10,"nodeType":"581","messageId":"582","endLine":25,"endColumn":13},{"ruleId":"579","severity":1,"message":"654","line":25,"column":15,"nodeType":"581","messageId":"582","endLine":25,"endColumn":31},{"ruleId":"575","severity":1,"message":"629","line":61,"column":6,"nodeType":"577","endLine":61,"endColumn":8,"suggestions":"655"},{"ruleId":"575","severity":1,"message":"647","line":23,"column":6,"nodeType":"577","endLine":23,"endColumn":8,"suggestions":"656"},{"ruleId":"575","severity":1,"message":"657","line":88,"column":6,"nodeType":"577","endLine":88,"endColumn":56,"suggestions":"658"},{"ruleId":"575","severity":1,"message":"659","line":78,"column":6,"nodeType":"577","endLine":78,"endColumn":8,"suggestions":"660"},{"ruleId":"575","severity":1,"message":"606","line":85,"column":6,"nodeType":"577","endLine":85,"endColumn":8,"suggestions":"661"},{"ruleId":"575","severity":1,"message":"662","line":68,"column":6,"nodeType":"577","endLine":68,"endColumn":51,"suggestions":"663"},{"ruleId":"575","severity":1,"message":"639","line":81,"column":6,"nodeType":"577","endLine":81,"endColumn":21,"suggestions":"664"},{"ruleId":"575","severity":1,"message":"647","line":50,"column":6,"nodeType":"577","endLine":50,"endColumn":8,"suggestions":"665"},{"ruleId":"575","severity":1,"message":"666","line":60,"column":5,"nodeType":"577","endLine":60,"endColumn":21,"suggestions":"667"},{"ruleId":"575","severity":1,"message":"668","line":101,"column":6,"nodeType":"577","endLine":101,"endColumn":22,"suggestions":"669"},{"ruleId":"575","severity":1,"message":"639","line":116,"column":6,"nodeType":"577","endLine":116,"endColumn":21,"suggestions":"670"},{"ruleId":"575","severity":1,"message":"629","line":60,"column":6,"nodeType":"577","endLine":60,"endColumn":8,"suggestions":"671"},{"ruleId":"579","severity":1,"message":"672","line":6,"column":8,"nodeType":"581","messageId":"582","endLine":6,"endColumn":15},{"ruleId":"579","severity":1,"message":"673","line":7,"column":8,"nodeType":"581","messageId":"582","endLine":7,"endColumn":10},{"ruleId":"579","severity":1,"message":"674","line":23,"column":10,"nodeType":"581","messageId":"582","endLine":23,"endColumn":28},{"ruleId":"579","severity":1,"message":"653","line":45,"column":10,"nodeType":"581","messageId":"582","endLine":45,"endColumn":13},{"ruleId":"579","severity":1,"message":"654","line":45,"column":15,"nodeType":"581","messageId":"582","endLine":45,"endColumn":31},{"ruleId":"579","severity":1,"message":"675","line":58,"column":7,"nodeType":"581","messageId":"582","endLine":58,"endColumn":16},{"ruleId":"579","severity":1,"message":"676","line":60,"column":9,"nodeType":"581","messageId":"582","endLine":60,"endColumn":17},{"ruleId":"579","severity":1,"message":"677","line":70,"column":11,"nodeType":"581","messageId":"582","endLine":70,"endColumn":29},{"ruleId":"575","severity":1,"message":"629","line":86,"column":6,"nodeType":"577","endLine":86,"endColumn":8,"suggestions":"678"},{"ruleId":"575","severity":1,"message":"679","line":126,"column":6,"nodeType":"577","endLine":126,"endColumn":56,"suggestions":"680"},{"ruleId":"575","severity":1,"message":"679","line":139,"column":6,"nodeType":"577","endLine":139,"endColumn":56,"suggestions":"681"},{"ruleId":"575","severity":1,"message":"679","line":152,"column":6,"nodeType":"577","endLine":152,"endColumn":56,"suggestions":"682"},{"ruleId":"575","severity":1,"message":"679","line":165,"column":6,"nodeType":"577","endLine":165,"endColumn":56,"suggestions":"683"},{"ruleId":"575","severity":1,"message":"629","line":60,"column":6,"nodeType":"577","endLine":60,"endColumn":8,"suggestions":"684"},{"ruleId":"575","severity":1,"message":"685","line":40,"column":6,"nodeType":"577","endLine":40,"endColumn":16,"suggestions":"686"},{"ruleId":"575","severity":1,"message":"687","line":46,"column":6,"nodeType":"577","endLine":46,"endColumn":16,"suggestions":"688"},{"ruleId":"575","severity":1,"message":"685","line":40,"column":6,"nodeType":"577","endLine":40,"endColumn":16,"suggestions":"689"},{"ruleId":"575","severity":1,"message":"687","line":46,"column":6,"nodeType":"577","endLine":46,"endColumn":16,"suggestions":"690"},{"ruleId":"579","severity":1,"message":"691","line":21,"column":10,"nodeType":"581","messageId":"582","endLine":21,"endColumn":23},{"ruleId":"575","severity":1,"message":"627","line":88,"column":6,"nodeType":"577","endLine":88,"endColumn":8,"suggestions":"692"},{"ruleId":"575","severity":1,"message":"693","line":95,"column":6,"nodeType":"577","endLine":95,"endColumn":16,"suggestions":"694"},"no-native-reassign",["695"],"no-negated-in-lhs",["696"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["697"],"no-unused-vars","'setReadyForWeekly' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'buildOrders'. Either include it or remove the dependency array.",["698"],"React Hook useEffect has a missing dependency: 'setReadyForSq'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has missing dependencies: 'fetchSq' and 'orders'. Either include them or remove the dependency array.",["700"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["701"],"'FilterStandHoldDups' is defined but never used.","'setOriginalStanding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStanding'. Either include it or remove the dependency array.",["702"],"'setOriginalHolding' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHolding'. Either include it or remove the dependency array.",["703"],"React Hook useEffect has a missing dependency: 'currentCartList'. Either include it or remove the dependency array.",["704"],"React Hook useEffect has a missing dependency: 'setCurrentCartList'. Either include it or remove the dependency array.",["705"],"React Hook useEffect has missing dependencies: 'setStandArray' and 'setStandList'. Either include them or remove the dependency array.",["706"],["695"],["696"],"React Hook useEffect has a missing dependency: 'setIsLoading'. Either include it or remove the dependency array.",["707"],"React Hook useEffect has missing dependencies: 'props.location.search', 'setCartList', and 'setChosen'. Either include them or remove the dependency array.",["708"],"'setStandList' is assigned a value but never used.","'standing' is assigned a value but never used.","'holding' is assigned a value but never used.","'currentCartList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customerGroup', 'orders', and 'setRoute'. Either include them or remove the dependency array.",["709"],"React Hook useEffect has missing dependencies: 'orders' and 'setPonote'. Either include them or remove the dependency array.",["710"],"'setStandArray' is assigned a value but never used.","'orders' is assigned a value but never used.","'setOrders' is assigned a value but never used.","'recentOrders' is assigned a value but never used.","'setRecentOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orders', 'setCalendarEvents', and 'standing'. Either include them or remove the dependency array.",["711"],"React Hook useEffect has missing dependencies: 'customers', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["712"],"React Hook useEffect has missing dependencies: 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["713"],"React Hook useEffect has missing dependencies: 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', and 'setStandLoaded'. Either include them or remove the dependency array.",["714"],"React Hook useEffect has missing dependencies: 'fetchRoutes' and 'setIsLoading'. Either include them or remove the dependency array.",["715"],"'target' is assigned a value but never used.",["716"],["717"],"React Hook useEffect has missing dependencies: 'fetchZones' and 'setIsLoading'. Either include them or remove the dependency array.",["718"],["719"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["720"],["721"],["722"],"React Hook useEffect has missing dependencies: 'constructColumns' and 'constructData'. Either include them or remove the dependency array.",["723"],"React Hook useEffect has a missing dependency: 'setRouteList'. Either include it or remove the dependency array. If 'setRouteList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["724"],"React Hook useEffect has a missing dependency: 'setDelivDate'. Either include it or remove the dependency array.",["725"],["726"],"React Hook useEffect has missing dependencies: 'productCanBeInPlace', 'routes', and 'setOrderList'. Either include them or remove the dependency array. If 'setOrderList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["727"],"'createOrder' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.",["728"],["729"],"React Hook useEffect has missing dependencies: 'setIsLoading', 'tryNick', and 'tryZone'. Either include them or remove the dependency array.",["730"],"React Hook useEffect has missing dependencies: 'customers', 'orders', 'products', 'setCustLoaded', 'setHoldLoaded', 'setOrdersLoaded', 'setProdLoaded', 'setStandLoaded', and 'standing'. Either include them or remove the dependency array.",["731"],["732"],"React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'products', and 'setDailyInvoices'. Either include them or remove the dependency array. If 'setDailyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["733"],["734"],["735"],"React Hook useEffect has missing dependencies: 'addOrdersToDB' and 'weeklyLoaded'. Either include them or remove the dependency array.",["736"],"React Hook useEffect has missing dependencies: 'altPricing', 'customers', 'delivDate', 'orders', 'products', 'setIsLoading', 'setWeeklyInvoices', 'standing', and 'zones'. Either include them or remove the dependency array. If 'setWeeklyInvoices' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["737"],["738"],["739"],"'TimeAgo' is defined but never used.","'us' is defined but never used.","'CurrentDataContext' is defined but never used.","'clonedeep' is assigned a value but never used.","'DateTime' is assigned a value but never used.","'fullOrdersTomorrow' is assigned a value but never used.",["740"],"React Hook useEffect has a missing dependency: 'fullOrdersToday'. Either include it or remove the dependency array.",["741"],["742"],["743"],["744"],["745"],"React Hook useEffect has missing dependencies: 'setDoughs' and 'setIsLoading'. Either include them or remove the dependency array.",["746"],"React Hook useEffect has missing dependencies: 'setDoughComponents' and 'setIsLoading'. Either include them or remove the dependency array.",["747"],["748"],["749"],"'ToggleContext' is defined but never used.",["750"],"React Hook useEffect has a missing dependency: 'loc'. Either include it or remove the dependency array.",["751"],"no-global-assign","no-unsafe-negation",{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"786","fix":"792"},{"desc":"793","fix":"794"},{"desc":"790","fix":"795"},{"desc":"796","fix":"797"},{"desc":"786","fix":"798"},{"desc":"790","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"788","fix":"806"},{"desc":"807","fix":"808"},{"desc":"786","fix":"809"},{"desc":"804","fix":"810"},{"desc":"811","fix":"812"},{"desc":"813","fix":"814"},{"desc":"790","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"804","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"818","fix":"825"},{"desc":"786","fix":"826"},{"desc":"786","fix":"827"},{"desc":"828","fix":"829"},{"desc":"828","fix":"830"},{"desc":"828","fix":"831"},{"desc":"828","fix":"832"},{"desc":"786","fix":"833"},{"desc":"834","fix":"835"},{"desc":"836","fix":"837"},{"desc":"834","fix":"838"},{"desc":"836","fix":"839"},{"desc":"784","fix":"840"},{"desc":"841","fix":"842"},"Update the dependencies array to be: [fetchCustomers]",{"range":"843","text":"844"},"Update the dependencies array to be: [buildOrders]",{"range":"845","text":"846"},"Update the dependencies array to be: [orders, products, setReadyForSq]",{"range":"847","text":"848"},"Update the dependencies array to be: [fetchSq, orders, readyForSq]",{"range":"849","text":"850"},"Update the dependencies array to be: [fetchProducts]",{"range":"851","text":"852"},"Update the dependencies array to be: [fetchStanding]",{"range":"853","text":"854"},"Update the dependencies array to be: [fetchHolding]",{"range":"855","text":"856"},"Update the dependencies array to be: [products, orders, chosen, delivDate, currentCartList]",{"range":"857","text":"858"},"Update the dependencies array to be: [chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",{"range":"859","text":"860"},"Update the dependencies array to be: [chosen, setStandArray, setStandList, standing]",{"range":"861","text":"862"},"Update the dependencies array to be: [custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",{"range":"863","text":"864"},"Update the dependencies array to be: [props.location.search, setCartList, setChosen]",{"range":"865","text":"866"},"Update the dependencies array to be: [chosen, customerGroup, delivDate, orders, setRoute]",{"range":"867","text":"868"},"Update the dependencies array to be: [chosen, delivDate, orders, setPonote]",{"range":"869","text":"870"},"Update the dependencies array to be: [chosen, delivDate, orders, setCalendarEvents, standing]",{"range":"871","text":"872"},"Update the dependencies array to be: [customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"873","text":"874"},"Update the dependencies array to be: [products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"875","text":"876"},"Update the dependencies array to be: [setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",{"range":"877","text":"878"},"Update the dependencies array to be: [fetchRoutes, routes, setIsLoading]",{"range":"879","text":"880"},"Update the dependencies array to be: [setIsLoading]",{"range":"881","text":"882"},{"range":"883","text":"878"},"Update the dependencies array to be: [fetchZones, setIsLoading, zones]",{"range":"884","text":"885"},{"range":"886","text":"882"},"Update the dependencies array to be: [products]",{"range":"887","text":"888"},{"range":"889","text":"878"},{"range":"890","text":"882"},"Update the dependencies array to be: [route, orderList, orders, standing, constructColumns, constructData]",{"range":"891","text":"892"},"Update the dependencies array to be: [orderList, orders, setRouteList, standing]",{"range":"893","text":"894"},"Update the dependencies array to be: [setDelivDate]",{"range":"895","text":"896"},{"range":"897","text":"880"},"Update the dependencies array to be: [delivDate, orders, standing, customers, products, routes, setOrderList, productCanBeInPlace]",{"range":"898","text":"899"},{"range":"900","text":"878"},{"range":"901","text":"896"},"Update the dependencies array to be: [delivDate, orders, standing, customers, products, setIsLoading, tryZone, tryNick]",{"range":"902","text":"903"},"Update the dependencies array to be: [customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",{"range":"904","text":"905"},{"range":"906","text":"882"},"Update the dependencies array to be: [delivDate, orders, standing, nextInv, zones, customers, products, altPricing, setDailyInvoices]",{"range":"907","text":"908"},"Update the dependencies array to be: [pickedProduct, products]",{"range":"909","text":"910"},{"range":"911","text":"896"},"Update the dependencies array to be: [addOrdersToDB, weeklyInvoices, weeklyLoaded]",{"range":"912","text":"913"},"Update the dependencies array to be: [altPricing, customers, delivDate, orders, products, readyForWeekly, setIsLoading, setWeeklyInvoices, standing, zones]",{"range":"914","text":"915"},{"range":"916","text":"910"},{"range":"917","text":"878"},{"range":"918","text":"878"},"Update the dependencies array to be: [delivDate, orders, standing, products, customers, fullOrdersToday]",{"range":"919","text":"920"},{"range":"921","text":"920"},{"range":"922","text":"920"},{"range":"923","text":"920"},{"range":"924","text":"878"},"Update the dependencies array to be: [isReload, setDoughs, setIsLoading]",{"range":"925","text":"926"},"Update the dependencies array to be: [isReload, setDoughComponents, setIsLoading]",{"range":"927","text":"928"},{"range":"929","text":"926"},{"range":"930","text":"928"},{"range":"931","text":"876"},"Update the dependencies array to be: [loc, products]",{"range":"932","text":"933"},[901,903],"[fetchCustomers]",[1410,1412],"[buildOrders]",[1541,1558],"[orders, products, setReadyForSq]",[1639,1651],"[fetchSq, orders, readyForSq]",[899,901],"[fetchProducts]",[1069,1071],"[fetchStanding]",[990,992],"[fetchHolding]",[1566,1603],"[products, orders, chosen, delivDate, currentCartList]",[1749,1801],"[chosen, delivDate, orders, standing, route, ponote, setCurrentCartList]",[1638,1656],"[chosen, setStandArray, setStandList, standing]",[1556,1619],"[custLoaded, holdLoaded, ordersLoaded, prodLoaded, setIsLoading, standLoaded]",[2277,2279],"[props.location.search, setCartList, setChosen]",[3674,3693],"[chosen, customerGroup, delivDate, orders, setRoute]",[4000,4019],"[chosen, delivDate, orders, setPonote]",[1863,1882],"[chosen, delivDate, orders, setCalendarEvents, standing]",[1870,1872],"[customers, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1909,1911],"[products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[1693,1695],"[setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded]",[903,911],"[fetchRoutes, routes, setIsLoading]",[1895,1897],"[setIsLoading]",[1693,1695],[896,903],"[fetchZones, setIsLoading, zones]",[1111,1113],[1931,1933],"[products]",[2396,2398],[2485,2487],[2782,2818],"[route, orderList, orders, standing, constructColumns, constructData]",[1040,1069],"[orderList, orders, setRouteList, standing]",[3302,3304],"[setDelivDate]",[3407,3415],[6402,6452],"[delivDate, orders, standing, customers, products, routes, setOrderList, productCanBeInPlace]",[1768,1770],[645,647],[2651,2701],"[delivDate, orders, standing, customers, products, setIsLoading, tryZone, tryNick]",[2427,2429],"[customers, orders, products, setCustLoaded, setHoldLoaded, setOrdersLoaded, setProdLoaded, setStandLoaded, standing]",[2554,2556],[2153,2198],"[delivDate, orders, standing, nextInv, zones, customers, products, altPricing, setDailyInvoices]",[2478,2493],"[pickedProduct, products]",[1370,1372],[2046,2062],"[addOrdersToDB, weeklyInvoices, weeklyLoaded]",[3047,3063],"[altPricing, customers, delivDate, orders, products, readyForWeekly, setIsLoading, setWeeklyInvoices, standing, zones]",[3349,3364],[1847,1849],[2626,2628],[3946,3996],"[delivDate, orders, standing, products, customers, fullOrdersToday]",[4330,4380],[4724,4774],[5121,5171],[1863,1865],[945,955],"[isReload, setDoughs, setIsLoading]",[1085,1095],"[isReload, setDoughComponents, setIsLoading]",[942,952],[1082,1092],[2389,2391],[2570,2580],"[loc, products]"]